<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\bigdecimal\bigdecimal.c">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGDECIMAL_ENABLE_VPRINT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bigdecimal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/util.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDEBUG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IEEEFP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ieeefp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_SIGNED_INTEGER_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (a) == 0 ? 0 : (a) == -1 ? (b) &lt; -(max) : (a) &gt; 0 ? ((b) &gt; 0 ? (max) / (a) &lt; (b) : (min) / (a) &gt; (b)) : ((b) &gt; 0 ? (min) / (a) &lt; (b) : (max) / (a) &gt; (b)))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_VALUE_MAX</name></cpp:macro> <cpp:value>INTPTR_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_VALUE_MIN</name></cpp:macro> <cpp:value>INTPTR_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_OVERFLOW_SIGNED_VALUE_P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL_OVERFLOW_SIGNED_INTEGER_P(a, b, SIGNED_VALUE_MIN, SIGNED_VALUE_MAX)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_cBigDecimal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_mBigMath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_BigDecimal_exception_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_BigDecimal_rounding_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_BigDecimal_precision_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_down</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_truncate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_half_up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_default</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_half_down</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_half_even</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_banker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_ceiling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_ceil</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_floor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_to_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_eq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_half</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENTER</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>volatile VALUE RB_UNUSED_VAR(vStack[n]);int iStack=0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(vStack[iStack++] = (VALUE)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PUSH((p)-&gt;obj)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GUARD_OBJ</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)=(y), SAVE(p))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_FIG</name></cpp:macro> <cpp:value>RMPD_COMPONENT_FIGURES</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE</name></cpp:macro> <cpp:value>RMPD_BASE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_BASE</name></cpp:macro> <cpp:value>(BASE/2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE1</name></cpp:macro> <cpp:value>(BASE/10)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DBLE_FIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBLE_FIG</name></cpp:macro> <cpp:value>(DBL_DIG+1)</cpp:value></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RRATIONAL_ZERO_P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RRATIONAL_ZERO_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FIXNUM_P(rb_rational_num(x)) &amp;&amp; FIX2LONG(rb_rational_num(x)) == 0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RRATIONAL_NEGATIVE_P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RRATIONAL_NEGATIVE_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RTEST(rb_funcall((x), '&lt;', 1, INT2FIX(0)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DECIMAL_SIZE_OF_BITS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECIMAL_SIZE_OF_BITS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((n) * 3010 + 9998) / 9999)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRIsVALUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_CLASSNAME</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_class(obj)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_STRING</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(obj)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIsVALUE</name></cpp:macro> <cpp:value>"s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_CLASSNAME</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_classname(obj)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_STRING</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>StringValueCStr(obj)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RB_RATIONAL_NUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>rb_rational_num</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>rat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_RRATIONAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>rat</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>num</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>rat</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"numerator"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RB_RATIONAL_DEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>rb_rational_den</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>rat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_RRATIONAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>RRATIONAL</name><argument_list>(<argument><expr><name>rat</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>den</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>rat</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"denominator"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGDECIMAL_POSITIVE_P</name><parameter_list>(<parameter><type><name>bd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bd)-&gt;sign &gt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGDECIMAL_NEGATIVE_P</name><parameter_list>(<parameter><type><name>bd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bd)-&gt;sign &lt; 0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DoSomeOne</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_num_coerce_bin(x,y,f)</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>VpGetException</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>VpSetException</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>VpInternalRound</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ixDigit</name></decl></parameter>, <parameter><decl><type><name>BDIGIT</name></type> <name>vPrev</name></decl></parameter>, <parameter><decl><type><name>BDIGIT</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VpLimitRound</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ixDigit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Real</name> <modifier>*</modifier></type><name>VpCopy</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name></decl></parameter>, <parameter><decl><type><name>Real</name> <specifier>const</specifier><modifier>*</modifier> <specifier>const</specifier></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_ENABLE_VPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VPrint</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cntl_chr</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>BigDecimal_delete</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>VpFree</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>BigDecimal_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Real</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pv</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pv</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>BigDecimal_data_type</name> <init>= <expr><block>{
<expr><literal type="string">"BigDecimal"</literal></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>BigDecimal_delete</name></expr>, <expr><name>BigDecimal_memsize</name></expr>, }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>is_kind_of_BigDecimal</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <specifier>const</specifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_typeddata_is_kind_of</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BigDecimal_data_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ToValue</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_NaN</name></expr></argument>, <argument><expr><literal type="string">"Computation results to 'NaN'(Not a Number)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_INFINITY</name></expr></argument>, <argument><expr><literal type="string">"Computation results to 'Infinity'"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VpIsNegInf</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_INFINITY</name></expr></argument>, <argument><expr><literal type="string">"Computation results to '-Infinity'"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>obj</name></name></expr>;</return>
</block_content>}</block></function>

<macro><name>NORETURN</name><argument_list>(<argument>static void cannot_be_coerced_into_BigDecimal(VALUE, VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cannot_be_coerced_into_BigDecimal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>exc_class</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_special_const_p</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_inspect</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_class_name</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_cat2</name><argument_list>(<argument><expr><call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" can't be coerced into BigDecimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><call><name>rb_exc_new3</name><argument_list>(<argument><expr><name>exc_class</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type> <name>BigDecimal_div2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>Real</name><modifier>*</modifier></type>
<name>GetVpValueWithPrec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>prec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>must</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>szD</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>orig</name> <init>= <expr><name>Qundef</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<label><name>again</name>:</label>
<switch>switch<condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_FLOAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>unable_to_coerce_without_prec</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&gt;</operator> <name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>SomeOneMayDoIt</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isfinite</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpDtoV</name><argument_list>(<argument><expr><name>pv</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>id_to_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal><operator>/</operator><name>d</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>prec</name></expr></argument>, <argument><expr><literal type="string">"-0"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>prec</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>unable_to_coerce_without_prec</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>orig</name> <operator>==</operator> <name>Qundef</name></expr> ?</condition><then> <expr><operator>(</operator><name>orig</name> <operator>=</operator> <name>v</name><operator>,</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>orig</name> <operator>!=</operator> <name>v</name></expr></else></ternary></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_rational_num</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>must</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>SomeOneMayDoIt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>BigDecimal_div2</name><argument_list>(<argument><expr><call><name>ToValue</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_rational_den</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>orig</name></expr>;</expr_stmt>
<goto>goto <name>SomeOneMayDoIt</name>;</goto>

<case>case <expr><name>T_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>is_kind_of_BigDecimal</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>DATA_PTR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pv</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<goto>goto <name>SomeOneMayDoIt</name>;</goto>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>szD</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>szD</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_NUMERIC_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>T_STRING</name></expr>:</case>
<expr_stmt><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <call><name>rb_big2str</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<goto>goto <name>SomeOneMayDoIt</name>;</goto>
</block_content>}</block></switch>

<label><name>SomeOneMayDoIt</name>:</label>
<if_stmt><if>if <condition>(<expr><name>must</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cannot_be_coerced_into_BigDecimal</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return> 

<label><name>unable_to_coerce_without_prec</name>:</label>
<if_stmt><if>if <condition>(<expr><name>must</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr><literal type="string">"%"</literal><name>PRIsVALUE</name><literal type="string">" can't be coerced into BigDecimal without a precision"</literal></expr></argument>,
<argument><expr><call><name>RB_OBJ_CLASSNAME</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Real</name><modifier>*</modifier></type>
<name>GetVpValue</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>must</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>must</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_double_fig</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>VpDblFig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_prec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>MaxPrec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_hash</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st_index_t</name></type> <name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><name>st_index_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>hash</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>hash</name> <operator>==</operator> <operator>(</operator><name>st_index_t</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hash</name> <operator>^=</operator> <call><name>rb_memhash</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>frac</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>Prec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ST2FIX</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_dump</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>dump</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>vp</name></expr></argument>,<argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dump</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>VpNumOfChars</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIuSIZE</name><literal type="string">":"</literal></expr></argument>, <argument><expr><call><name>VpMaxPrec</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpToString</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>psz</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dump</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_load</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>m</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pch</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>pch</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>pch</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"load failed: invalid character in the marshaled string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>m</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>-=</operator> <call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>pv</name></expr></argument>, <argument><expr><call><name>VpNewRbClass</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pch</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>/=</operator> <call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;&amp;</operator> <name><name>pv</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>&gt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type>
<name>check_rounding_mode_option</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <specifier>const</specifier></type> <name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>noopt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>rb_hash_lookup2</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>id_half</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>Qundef</name> <operator>||</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>noopt</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>rb_sym2str</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str_mode</name> <init>= <expr><call><name>rb_check_string_type</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>str_mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>str_mode</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"up"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP_ROUND_HALF_UP</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"even"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP_ROUND_HALF_EVEN</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"down"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP_ROUND_HALF_DOWN</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<label><name>invalid</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid rounding mode: nil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid rounding mode: %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>noopt</name>:</label>
<return>return <expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type>
<name>check_rounding_mode</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <specifier>const</specifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>sw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_SYMBOL</name></expr>:</case>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>SYM2ID</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>id_up</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP_ROUND_UP</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>id_down</name> <operator>||</operator> <name>id</name> <operator>==</operator> <name>id_truncate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP_ROUND_DOWN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>id_half_up</name> <operator>||</operator> <name>id</name> <operator>==</operator> <name>id_default</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP_ROUND_HALF_UP</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>id_half_down</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP_ROUND_HALF_DOWN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>id_half_even</name> <operator>||</operator> <name>id</name> <operator>==</operator> <name>id_banker</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP_ROUND_HALF_EVEN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>id_ceiling</name> <operator>||</operator> <name>id</name> <operator>==</operator> <name>id_ceil</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP_ROUND_CEIL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>id_floor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VP_ROUND_FLOOR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid rounding mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>sw</name> <operator>=</operator> <call><name>NUM2USHORT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsRoundMode</name><argument_list>(<argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid rounding mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sw</name></expr>;</return>
</block_content>}</block></function>







































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>which</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>f</name></decl>,<decl><type ref="prev"/><name>fo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>which</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>NUM2INT</name><argument_list>(<argument><expr><name>which</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>VP_EXCEPTION_ALL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fo</name> <operator>=</operator> <call><name>VpGetException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>fo</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>Qfalse</name> <operator>&amp;&amp;</operator> <name>val</name><operator>!=</operator><name>Qtrue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"second argument must be true or false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>VP_EXCEPTION_INFINITY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetException</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>val</name> <operator>==</operator> <name>Qtrue</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>fo</name> <operator>|</operator> <name>VP_EXCEPTION_INFINITY</name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name>fo</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>VP_EXCEPTION_INFINITY</name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fo</name> <operator>=</operator> <call><name>VpGetException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>VP_EXCEPTION_NaN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetException</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>val</name> <operator>==</operator> <name>Qtrue</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>fo</name> <operator>|</operator> <name>VP_EXCEPTION_NaN</name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name>fo</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>VP_EXCEPTION_NaN</name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fo</name> <operator>=</operator> <call><name>VpGetException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&amp;</operator> <name>VP_EXCEPTION_UNDERFLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetException</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>val</name> <operator>==</operator> <name>Qtrue</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>fo</name> <operator>|</operator> <name>VP_EXCEPTION_UNDERFLOW</name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name>fo</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>VP_EXCEPTION_UNDERFLOW</name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fo</name> <operator>=</operator> <call><name>VpGetException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>f</name> <operator>&amp;</operator> <name>VP_EXCEPTION_ZERODIVIDE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetException</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>val</name> <operator>==</operator> <name>Qtrue</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>fo</name> <operator>|</operator> <name>VP_EXCEPTION_ZERODIVIDE</name><operator>)</operator></expr> </then><else>:
<expr><operator>(</operator><name>fo</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>VP_EXCEPTION_ZERODIVIDE</name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fo</name> <operator>=</operator> <call><name>VpGetException</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>fo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>VP_ROUND_MODE</name> <operator>==</operator> <name>f</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>sw</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fo</name> <operator>=</operator> <call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>fo</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sw</name> <operator>=</operator> <call><name>check_rounding_mode</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fo</name> <operator>=</operator> <call><name>VpSetRoundMode</name><argument_list>(<argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>fo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"first argument for BigDecimal.mode invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>GetAddSubPrec</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>mxs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsDef</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>VpIsDef</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mxs</name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>mx</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>d</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&lt;</operator> <name>mxs</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_INFINITY</name></expr></argument>, <argument><expr><literal type="string">"Exponent overflow"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>mx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SIGNED_VALUE</name></type>
<name>GetPrecisionInt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative precision"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>Real</name> <modifier>*</modifier></type>
<name>VpNewRbClass</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BigDecimal_data_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><call><name>VpAlloc</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_FREEZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>Real</name> <modifier>*</modifier></type>
<name>VpCreateRbObject</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>VpNewRbClass</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>rb_cBigDecimal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpAllocReal</name><parameter_list>(<parameter><type><name>prec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(Real *)VpMemAlloc(offsetof(Real, frac) + (prec) * sizeof(BDIGIT))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpReallocReal</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>prec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(Real *)VpMemRealloc((ptr), offsetof(Real, frac) + (prec) * sizeof(BDIGIT))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>Real</name> <modifier>*</modifier></type>
<name>VpCopy</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name></decl></parameter>, <parameter><decl><type><name>Real</name> <specifier>const</specifier><modifier>*</modifier> <specifier>const</specifier></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>x</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>VpReallocReal</name><argument_list>(<argument><expr><name>pv</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>frac</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>frac</name></name></expr></argument>, <argument><expr><name>BDIGIT</name></expr></argument>, <argument><expr><name><name>pv</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pv</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_IsNaN</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_IsInfinite</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNegInf</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_IsFinite</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsInf</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>BigDecimal_check_num</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_NaN</name></expr></argument>, <argument><expr><literal type="string">"Computation results to 'NaN'(Not a Number)"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_INFINITY</name></expr></argument>, <argument><expr><literal type="string">"Computation results to 'Infinity'"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VpIsNegInf</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_INFINITY</name></expr></argument>, <argument><expr><literal type="string">"Computation results to '-Infinity'"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>BigDecimal_split</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_to_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>nf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BigDecimal_check_num</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>VpExponent10</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nf</name> <operator>=</operator> <call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <name>nf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>BDIGIT_DBL_SIGNED</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name> <init>= <expr><call><name>BigDecimal_split</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>digits</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>numerator</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"to_i"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>dpower</name> <init>= <expr><name>e</name> <operator>-</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>digits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>numerator</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>numerator</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dpower</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>numerator</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"div"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"**"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><name>dpower</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>numerator</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"**"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>dpower</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFloatDomainError</name></expr></argument>, <argument><expr><literal type="string">"Infinity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_to_f</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpVtoD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><operator>(</operator><name>DBL_MAX_10_EXP</name><operator>+</operator><name>BASE_FIG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><operator>(</operator><name>DBL_MIN_10_EXP</name><operator>-</operator><name>BASE_FIG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>underflow</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>VpNumOfChars</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpToString</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>underflow</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>HUGE_VAL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>overflow</name>:</label>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_OVERFLOW</name></expr></argument>, <argument><expr><literal type="string">"BigDecimal to Float conversion"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><call><name>VpGetDoubleNegInf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><call><name>VpGetDoublePosInf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<label><name>underflow</name>:</label>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_UNDERFLOW</name></expr></argument>, <argument><expr><literal type="string">"BigDecimal to Float conversion"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>rb_float_new</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_to_r</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>power</name></decl>, <decl><type ref="prev"/><name>denomi_power</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>digits</name></decl>, <decl><type ref="prev"/><name>numerator</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BigDecimal_check_num</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>power</name> <operator>=</operator> <call><name>VpExponent10</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>BigDecimal_split</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>digits</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>denomi_power</name> <operator>=</operator> <name>power</name> <operator>-</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>digits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>numerator</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"to_i"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>numerator</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>numerator</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>denomi_power</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_Rational</name><argument_list>(<argument><expr><name>numerator</name></expr></argument>,
<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"**"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><name>denomi_power</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_Rational1</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>numerator</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"**"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>denomi_power</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_coerce</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>ToValue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Real</name><modifier>*</modifier></type> <name>pv</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name><name>pv</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_uplus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_add</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValue</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>DoSomeOne</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>b</name><operator>-&gt;</operator><name>obj</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>obj</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>GetAddSubPrec</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name> <operator>*</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_sub</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValue</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>DoSomeOne</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>b</name><operator>-&gt;</operator><name>obj</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>obj</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>GetAddSubPrec</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name> <operator>*</operator><operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimalCmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>char</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_kind_of_BigDecimal</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><name>T_FIXNUM</name></expr>:</case>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>T_FLOAT</name></expr>:</case>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<return>return <expr><call><name>rb_num_coerce_cmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"&lt;=&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'='</literal></expr>:</case>
<return>return <expr><ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_num_coerce_cmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"=="</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>ID</name><operator>)</operator><name>op</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><call><name>rb_num_coerce_relop</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>VpComp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">999</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>Qnil</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return> 

<case>case <expr><literal type="char">'='</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"Undefined operation in BigDecimalCmp()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_zero</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_nonzero</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qnil</name></expr> </then><else>: <expr><name>self</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_comp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>BigDecimalCmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_eq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>BigDecimalCmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_lt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>BigDecimalCmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_le</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>BigDecimalCmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_gt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>BigDecimalCmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_ge</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>BigDecimalCmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_neg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator><operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_mult</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValue</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>DoSomeOne</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name> <operator>*</operator><operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpMult</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_divide</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier><modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier><modifier>*</modifier></type><name>div</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValue</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>DoSomeOne</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>div</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <call><name>vabs</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <call><name>vabs</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <call><name>vabs</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mx</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>mx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><operator>(</operator><name>mx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator><operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpDivd</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>, <argument><expr><operator>*</operator><name>res</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_div</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>div</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>BigDecimal_divide</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>div</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>VpHasVal</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>VpInternalRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>BDIGIT</name><operator>)</operator><operator>(</operator><call><name>VpBaseVal</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>BDIGIT_DBL</name><operator>)</operator><name><name>res</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name><name>div</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_DoDivmod</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier><modifier>*</modifier></type><name>div</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier><modifier>*</modifier></type><name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValue</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VpIsNaN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>NaN</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>VpIsInf</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>NaN</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eZeroDivError</name></expr></argument>, <argument><expr><literal type="string">"divided by 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>div</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mod</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsInf</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>div</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mod</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>div</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mod</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <call><name>vabs</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name><operator>&lt;</operator><name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <call><name>vabs</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <call><name>vabs</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>mx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><operator>(</operator><name>mx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator><operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpDivd</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpActiveRound</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>VP_ROUND_DOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpMult</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsZero</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>VpOne</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><call><name>GetAddSubPrec</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>div</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mod</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>div</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mod</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>

<label><name>NaN</name>:</label>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>div</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mod</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_mod</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>div</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mod</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BigDecimal_DoDivmod</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>div</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>DoSomeOne</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_divremain</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier><modifier>*</modifier></type><name>dv</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier><modifier>*</modifier></type><name>rv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ff</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GetVpValue</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>DoSomeOne</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"remainder"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>MaxPrec</name></name><operator>)</operator> <operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><operator>(</operator><name>mx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><operator>(</operator><name>mx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><operator>(</operator><name>mx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VpDivd</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator><operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VpActiveRound</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>VP_ROUND_DOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>VpFrac</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpMult</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dv</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rv</name> <operator>=</operator> <name>ff</name></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_remainder</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>BigDecimal_divremain</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>f</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_divmod</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>div</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mod</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BigDecimal_DoDivmod</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>div</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>ToValue</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToValue</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>DoSomeOne</name><argument_list>(<argument><expr><name>self</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"divmod"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>BigDecimal_div2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>ix</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>div</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>mod</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BigDecimal_DoDivmod</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>div</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mod</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>BigDecimal_to_i</name><argument_list>(<argument><expr><call><name>ToValue</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>DoSomeOne</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"div"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ix</name> <operator>=</operator> <call><name>GetPrecisionInt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>BigDecimal_div</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>av</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bv</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name> <init>= <expr><name>ix</name> <operator>+</operator> <call><name>VpBaseFig</name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pl</name> <init>= <expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>cv</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name> <operator>+</operator> <call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>av</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <name><name>bv</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&lt;=</operator> <name><name>cv</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>cv</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><operator>(</operator><name>mx</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpDivd</name><argument_list>(<argument><expr><name>cv</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>av</name></expr></argument>, <argument><expr><name>bv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpLeftRound</name><argument_list>(<argument><expr><name>cv</name></expr></argument>, <argument><expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_div3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>b</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>BigDecimal_div2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_add2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>mx</name> <init>= <expr><call><name>GetPrecisionInt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>BigDecimal_add</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pl</name> <init>= <expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name> <init>= <expr><call><name>BigDecimal_add</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>cv</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpLeftRound</name><argument_list>(<argument><expr><name>cv</name></expr></argument>, <argument><expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_sub2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>mx</name> <init>= <expr><call><name>GetPrecisionInt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>BigDecimal_sub</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pl</name> <init>= <expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name> <init>= <expr><call><name>BigDecimal_sub</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>cv</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpLeftRound</name><argument_list>(<argument><expr><name>cv</name></expr></argument>, <argument><expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_mult2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>mx</name> <init>= <expr><call><name>GetPrecisionInt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>BigDecimal_mult</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pl</name> <init>= <expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name> <init>= <expr><call><name>BigDecimal_mult</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>cv</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpLeftRound</name><argument_list>(<argument><expr><name>cv</name></expr></argument>, <argument><expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>cv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_abs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator><operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpChangeSign</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_sqrt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>nFig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GetPrecisionInt</name><argument_list>(<argument><expr><name>nFig</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>VpDblFig</name><argument_list>()</argument_list></call> <operator>+</operator> <name>BASE_FIG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mx</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSqrt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_fix</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator><operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpActiveRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>VP_ROUND_DOWN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_round</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iLoc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vRound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>pl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>sw</name> <init>= <expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLoc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vRound</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>iLoc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>vLoc</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sw</name> <operator>=</operator> <call><name>check_rounding_mode_option</name><argument_list>(<argument><expr><name>vLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>iLoc</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>iLoc</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>vRound</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sw</name> <operator>=</operator> <call><name>check_rounding_mode_option</name><argument_list>(<argument><expr><name>vRound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sw</name> <operator>=</operator> <call><name>check_rounding_mode</name><argument_list>(<argument><expr><name>vRound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpActiveRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>iLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>BigDecimal_to_i</name><argument_list>(<argument><expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_truncate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>pl</name> <init>= <expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLoc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iLoc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>iLoc</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpActiveRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>VP_ROUND_DOWN</name></expr></argument>, <argument><expr><name>iLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>BigDecimal_to_i</name><argument_list>(<argument><expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_frac</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpFrac</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_floor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>pl</name> <init>= <expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLoc</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iLoc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>iLoc</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpActiveRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>VP_ROUND_FLOOR</name></expr></argument>, <argument><expr><name>iLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"floor: c=%\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>BigDecimal_to_i</name><argument_list>(<argument><expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_ceil</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>pl</name> <init>= <expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vLoc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iLoc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>iLoc</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpActiveRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>VP_ROUND_CEIL</name></expr></argument>, <argument><expr><name>iLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>BigDecimal_to_i</name><argument_list>(<argument><expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_to_s</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fPlus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nc</name></decl>, <decl><type ref="prev"/><name>mc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>StringValueCStr</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fPlus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fPlus</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>psz</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>psz</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'F'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mc</name> <operator>=</operator> <name>mc</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"argument must be positive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mc</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>m</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>VpNumOfChars</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>VpNumOfChars</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <operator>(</operator><name>nc</name> <operator>+</operator> <name>mc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>mc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpToFString</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>, <argument><expr><name>fPlus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpToString</name> <argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>, <argument><expr><name>fPlus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_split</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>,<decl><type ref="prev"/><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>VpNumOfChars</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz1</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSzMantissa</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>psz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>psz1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>psz1</name></expr></argument>, <argument><expr><name>psz1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz1</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>psz1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>VpExponent10</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_exponent</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>e</name> <init>= <expr><call><name>VpExponent10</name><argument_list>(<argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <call><name>VpNumOfChars</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpToString</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>BigMath_s_exp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>BigMath_s_log</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BigMath_exp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BigMath_s_exp(rb_mBigMath, (x), (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BigMath_log</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BigMath_s_log(rb_mBigMath, (x), (n))</cpp:value></cpp:define>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>is_integer</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>is_negative</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>rb_big_cmp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_FLOAT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_positive</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!is_negative(x))</cpp:value></cpp:define>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>is_zero</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<return>return <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<return>return <expr><name>Qfalse</name></expr>;</return>

<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_rational_num</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>is_one</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<return>return <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<return>return <expr><name>Qfalse</name></expr>;</return>

<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_rational_num</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>rb_rational_den</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>is_even</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_big_pack</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>l</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rmpd_power_by_big_decimal</name><parameter_list>(<parameter><decl><type><name>Real</name> <specifier>const</specifier><modifier>*</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>Real</name> <specifier>const</specifier><modifier>*</modifier></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <specifier>const</specifier></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>log_x</name></decl>, <decl><type ref="prev"/><name>multiplied</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>obj</name> <init>= <expr><name><name>exp</name><operator>-&gt;</operator><name>obj</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>log_x</name> <operator>=</operator> <call><name>BigMath_log</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>multiplied</name> <operator>=</operator> <call><name>BigDecimal_mult2</name><argument_list>(<argument><expr><name><name>exp</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>log_x</name></expr></argument>, <argument><expr><call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>BigMath_exp</name><argument_list>(<argument><expr><name>multiplied</name></expr></argument>, <argument><expr><call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_power</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vexp</name></decl>, <decl><type ref="prev"/><name>prec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name><modifier>*</modifier></type> <name>exp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>mp</name></decl>, <decl><type ref="prev"/><name>ma</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>int_exp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vexp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>ssize_t</name><operator>)</operator><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call><operator>)</operator></expr> </then><else>: <expr><call><name>NUM2SSIZET</name><argument_list>(<argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>retry</name>:</label>
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>T_FLOAT</name></expr>:</case>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <call><name>round</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXABLE</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vexp</name> <operator>=</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>vexp</name> <operator>=</operator> <call><name>rb_dbl2big</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>is_zero</name><argument_list>(<argument><expr><call><name>rb_rational_num</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_positive</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vexp</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_one</name><argument_list>(<argument><expr><call><name>rb_rational_den</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vexp</name> <operator>=</operator> <call><name>rb_rational_num</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>T_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>is_kind_of_BigDecimal</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zero</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rounded</name> <init>= <expr><call><name>BigDecimal_round</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>BigDecimal_eq</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>, <argument><expr><name>rounded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vexp</name> <operator>=</operator> <call><name>BigDecimal_to_i</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>DATA_PTR</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>,
<argument><expr><literal type="string">"wrong argument type %"</literal><name>PRIsVALUE</name><literal type="string">" (expected scalar Numeric)"</literal></expr></argument>,
<argument><expr><call><name>RB_OBJ_CLASSNAME</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_negative</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_integer</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_even</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VpSetPosInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>VpSetNegInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>VpSetPosInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>VpSetPosInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_zero</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_zero</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_one</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsInf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_negative</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_integer</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_even</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"-0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"-0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_integer</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_even</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetPosInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNegInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eMathDomainError</name></expr></argument>,
<argument><expr><literal type="string">"a non-integral exponent for a negative base"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpSetPosInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rmpd_power_by_big_decimal</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>abs_value</name> <init>= <expr><call><name>BigDecimal_abs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_one</name><argument_list>(<argument><expr><name>abs_value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>abs_value</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_negative</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_even</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>-</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_even</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"-0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_positive</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_even</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>-</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_even</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"-0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>int_exp</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ma</name> <operator>=</operator> <name>int_exp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ma</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ma</name> <operator>=</operator> <operator>-</operator><name>ma</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ma</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ma</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsDef</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mp</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <operator>(</operator><call><name>VpBaseFig</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>mp</name> <operator>*</operator> <operator>(</operator><name>ma</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>VpPower</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>int_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>prec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>VpIsDef</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpMidRound</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_power_op</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>exp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>BigDecimal_power</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_initialize_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><call><name>rb_check_typeddata</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BigDecimal_data_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>rb_check_typeddata</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BigDecimal_data_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>!=</operator> <name>other</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>VpCopy</name><argument_list>(<argument><expr><name>pv</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_clone</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RB_OPTS_EXCEPTION_P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>rb_opts_exception_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opts_exception_p</name><parameter_list>(<parameter><type><name>opts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_opts_exception_p((opts), 1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>opts_exception_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name><name>kwds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>exception</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kwds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>kwds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_get_kwargs</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>kwds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>exception</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>exception</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Qtrue</name></expr>:</case> <case>case <expr><name>Qfalse</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"true or false is expected as exception: %+"</literal><name>PRIsVALUE</name></expr></argument>,
<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><name>exception</name> <operator>!=</operator> <name>Qfalse</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>Real</name> <modifier>*</modifier></type>
<name>VpNewVarArg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>mf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>opts</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nFig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>iniValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iniValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nFig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>opts_exception_p</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>nFig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"negative precision"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SPECIAL_CONST_P</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>iniValue</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Qnil</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert nil into BigDecimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>Qtrue</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert true into BigDecimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>Qfalse</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"can't convert false into BigDecimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>is_kind_of_BigDecimal</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>T_FIXNUM</name></expr>:</case>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<return>return <expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>T_FLOAT</name></expr>:</case>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isfinite</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VpDtoV</name><argument_list>(<argument><expr><name>pv</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mf</name> <operator>&gt;</operator> <name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"precision too large."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>nFig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr><literal type="string">"can't omit precision for a %"</literal><name>PRIsVALUE</name><literal type="string">"."</literal></expr></argument>,
<argument><expr><call><name>RB_OBJ_CLASSNAME</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>, <argument><expr><name>mf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>T_STRING</name></expr>:</case>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iniValue</name> <operator>=</operator> <call><name>rb_check_convert_type</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>, <argument><expr><literal type="string">"String"</literal></expr></argument>, <argument><expr><literal type="string">"to_str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VpAlloc</name><argument_list>(<argument><expr><name>mf</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>iniValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>f_BigDecimal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>CLASS_OF</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>rb_cBigDecimal</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BigDecimal_data_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>VpNewVarArg</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SAVE</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ToValue</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>VpCopy</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pv</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_FREEZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>pv</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_s_interpret_loosely</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>c_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c_str</name> <operator>=</operator> <call><name>StringValueCStr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GUARD_OBJ</name><argument_list>(<argument><expr><name>pv</name></expr></argument>, <argument><expr><call><name>VpAlloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c_str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pv</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BigDecimal_data_type</name></expr></argument>, <argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_FREEZE</name><argument_list>(<argument><expr><name><name>pv</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>pv</name><operator>-&gt;</operator><name>obj</name></name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_limit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nFig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nCur</name> <init>= <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>VpGetPrecLimit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nFig</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>nFig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>nCur</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nf</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>nFig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nf</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"argument must be positive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><name>nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>nCur</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_sign</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>GetVpValue</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>sign</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_save_exception_mode</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <specifier>const</specifier></type> <name>exception_mode</name> <init>= <expr><call><name>VpGetException</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name> <init>= <expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VpSetException</name><argument_list>(<argument><expr><name>exception_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_save_rounding_mode</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <specifier>const</specifier></type> <name>round_mode</name> <init>= <expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name> <init>= <expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VpSetRoundMode</name><argument_list>(<argument><expr><name>round_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigDecimal_save_limit</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>limit</name> <init>= <expr><call><name>VpGetPrecLimit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name> <init>= <expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VpSetPrecLimit</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigMath_s_exp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vprec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>prec</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name><modifier>*</modifier></type> <name>vx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>one</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>negative</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>infinite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>flo</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <call><name>NUM2SSIZET</name><argument_list>(<argument><expr><name>vprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"Zero or negative precision for exp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_kind_of_BigDecimal</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>DATA_PTR</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>infinite</name> <operator>=</operator> <call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VpIsNegInf</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nan</name> <operator>=</operator> <call><name>VpIsNaN</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>T_FIXNUM</name></expr>:</case>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>GetVpValue</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>T_FLOAT</name></expr>:</case>
<expr_stmt><expr><name>flo</name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>flo</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>infinite</name> <operator>=</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>flo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nan</name> <operator>=</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>flo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>infinite</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nan</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>infinite</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>Real</name><modifier>*</modifier></type> <name>vy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vy</name> <operator>=</operator> <call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>prec</name></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><name>VP_SIGN_POSITIVE_INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name><name>vy</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>nan</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Real</name><modifier>*</modifier></type> <name>vy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vy</name> <operator>=</operator> <call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>prec</name></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name><name>vy</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>vx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cannot_be_coerced_into_BigDecimal</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>vx</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>prec</name> <operator>+</operator> <call><name>rmpd_double_figures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>x_zero</name> <init>= <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>x_copy</name> <init>= <expr><call><name>f_BigDecimal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x_zero</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>BigDecimal_initialize_copy</name><argument_list>(<argument><expr><name>x_copy</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>DATA_PTR</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>vx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>one</name> <operator>=</operator> <call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>one</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>VpIsZero</name><argument_list>(<argument><expr><operator>(</operator><name>Real</name><operator>*</operator><operator>)</operator><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SIGNED_VALUE</name> <specifier>const</specifier></type> <name>ey</name> <init>= <expr><call><name>VpExponent10</name><argument_list>(<argument><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name> <specifier>const</specifier></type> <name>ed</name> <init>= <expr><call><name>VpExponent10</name><argument_list>(<argument><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>m</name> <init>= <expr><name>n</name> <operator>-</operator> <call><name>vabs</name><argument_list>(<argument><expr><name>ey</name> <operator>-</operator> <name>ed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_thread_check_ints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>m</name> <operator>&lt;</operator> <call><name>rmpd_double_figures</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>rmpd_double_figures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>BigDecimal_mult</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>BigDecimal_div2</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>BigDecimal_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt> 
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>BigDecimal_div2</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>vprec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>vprec</name> <operator>=</operator> <call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>prec</name> <operator>-</operator> <call><name>VpExponent10</name><argument_list>(<argument><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>BigDecimal_round</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vprec</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>BigMath_s_log</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vprec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>prec</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>expo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name><modifier>*</modifier></type> <name>vx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vn</name></decl>, <decl><type ref="prev"/><name>one</name></decl>, <decl><type ref="prev"/><name>two</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>negative</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>infinite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>flo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>fix</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_integer</name><argument_list>(<argument><expr><name>vprec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"precision must be an Integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <call><name>NUM2SSIZET</name><argument_list>(<argument><expr><name>vprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"Zero or negative precision for exp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_kind_of_BigDecimal</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>DATA_PTR</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zero</name> <operator>=</operator> <call><name>VpIsZero</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>infinite</name> <operator>=</operator> <call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VpIsNegInf</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nan</name> <operator>=</operator> <call><name>VpIsNaN</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<expr_stmt><expr><name>fix</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zero</name> <operator>=</operator> <name>fix</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>fix</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>get_vp_value</name>;</goto>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>rb_big_cmp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zero</name> <operator>=</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>get_vp_value</name>:</label>
<if_stmt><if>if <condition>(<expr><name>zero</name> <operator>||</operator> <name>negative</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>GetVpValue</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>T_FLOAT</name></expr>:</case>
<expr_stmt><expr><name>flo</name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zero</name> <operator>=</operator> <name>flo</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>flo</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>infinite</name> <operator>=</operator> <call><name>isinf</name><argument_list>(<argument><expr><name>flo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nan</name> <operator>=</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>flo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zero</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>negative</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>infinite</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nan</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>DBL_DIG</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<expr_stmt><expr><name>zero</name> <operator>=</operator> <call><name>RRATIONAL_ZERO_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>negative</name> <operator>=</operator> <call><name>RRATIONAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zero</name> <operator>||</operator> <name>negative</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>vx</name> <operator>=</operator> <call><name>GetVpValueWithPrec</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>T_COMPLEX</name></expr>:</case>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eMathDomainError</name></expr></argument>,
<argument><expr><literal type="string">"Complex argument for BigMath.log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>infinite</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>negative</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Real</name><modifier>*</modifier></type> <name>vy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vy</name> <operator>=</operator> <call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>prec</name></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name><name>vy</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><name>VP_SIGN_POSITIVE_INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>nan</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Real</name><modifier>*</modifier></type> <name>vy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vy</name> <operator>=</operator> <call><name>VpCreateRbObject</name><argument_list>(<argument><expr><name>prec</name></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name><name>vy</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ToValue</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>zero</name> <operator>||</operator> <name>negative</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eMathDomainError</name></expr></argument>,
<argument><expr><literal type="string">"Zero or negative argument for log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>vx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cannot_be_coerced_into_BigDecimal</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>ToValue</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>prec</name> <operator>+</operator> <call><name>rmpd_double_figures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expo</name> <operator>=</operator> <call><name>VpExponent10</name><argument_list>(<argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expo</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>expo</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>DECIMAL_SIZE_OF_BITS</name><argument_list>(<argument><expr><name>SIZEOF_VALUE</name> <operator>*</operator> <name>CHAR_BIT</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"1E%"</literal><name>PRIdVALUE</name></expr></argument>, <argument><expr><operator>-</operator><name>expo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>BigDecimal_mult2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>ToValue</name><argument_list>(<argument><expr><call><name>VpCreateRbObject</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>expo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>BigDecimal_sub</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>BigDecimal_div2</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><call><name>BigDecimal_add</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>BigDecimal_mult2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>VpIsZero</name><argument_list>(<argument><expr><operator>(</operator><name>Real</name><operator>*</operator><operator>)</operator><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SIGNED_VALUE</name> <specifier>const</specifier></type> <name>ey</name> <init>= <expr><call><name>VpExponent10</name><argument_list>(<argument><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name> <specifier>const</specifier></type> <name>ed</name> <init>= <expr><call><name>VpExponent10</name><argument_list>(<argument><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>m</name> <init>= <expr><name>n</name> <operator>-</operator> <call><name>vabs</name><argument_list>(<argument><expr><name>ey</name> <operator>-</operator> <name>ed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>m</name> <operator>&lt;</operator> <call><name>rmpd_double_figures</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>rmpd_double_figures</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>BigDecimal_mult2</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>BigDecimal_div2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>BigDecimal_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>BigDecimal_mult</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>expo</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>log10</name></decl>, <decl><type ref="prev"/><name>vexpo</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>log10</name> <operator>=</operator> <call><name>BigMath_s_log</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vprec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vexpo</name> <operator>=</operator> <call><name>ToValue</name><argument_list>(<argument><expr><call><name>GetVpValue</name><argument_list>(<argument><expr><call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>expo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dy</name> <operator>=</operator> <call><name>BigDecimal_mult</name><argument_list>(<argument><expr><name>log10</name></expr></argument>, <argument><expr><name>vexpo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>BigDecimal_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>






























































































































<function><type><name>void</name></type>
<name>Init_bigdecimal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id_BigDecimal_exception_mode</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"BigDecimal.exception_mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_BigDecimal_rounding_mode</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"BigDecimal.rounding_mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_BigDecimal_precision_limit</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"BigDecimal.precision_limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VpInit</name><argument_list>(<argument><expr><literal type="number">0UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>rb_cBigDecimal</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"BigDecimal"</literal></expr></argument>, <argument><expr><name>rb_cNumeric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_global_function</name><argument_list>(<argument><expr><literal type="string">"BigDecimal"</literal></expr></argument>, <argument><expr><name>f_BigDecimal</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"allocate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"interpret_loosely"</literal></expr></argument>, <argument><expr><name>BigDecimal_s_interpret_loosely</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>, <argument><expr><name>BigDecimal_mode</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"limit"</literal></expr></argument>, <argument><expr><name>BigDecimal_limit</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"double_fig"</literal></expr></argument>, <argument><expr><name>BigDecimal_double_fig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"_load"</literal></expr></argument>, <argument><expr><name>BigDecimal_load</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"save_exception_mode"</literal></expr></argument>, <argument><expr><name>BigDecimal_save_exception_mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"save_rounding_mode"</literal></expr></argument>, <argument><expr><name>BigDecimal_save_rounding_mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"save_limit"</literal></expr></argument>, <argument><expr><name>BigDecimal_save_limit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_BIGDECIMAL_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> RUBY_BIGDECIMAL_VERSION is not defined</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>RUBY_BIGDECIMAL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"BASE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><call><name>VpBaseVal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"EXCEPTION_ALL"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_EXCEPTION_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"EXCEPTION_NaN"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_EXCEPTION_NaN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"EXCEPTION_INFINITY"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_EXCEPTION_INFINITY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"EXCEPTION_UNDERFLOW"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_EXCEPTION_UNDERFLOW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"EXCEPTION_OVERFLOW"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_EXCEPTION_OVERFLOW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"EXCEPTION_ZERODIVIDE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_EXCEPTION_ZERODIVIDE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"ROUND_MODE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_ROUND_MODE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"ROUND_UP"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_ROUND_UP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"ROUND_DOWN"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_ROUND_DOWN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"ROUND_HALF_UP"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_ROUND_HALF_UP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"ROUND_HALF_DOWN"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_ROUND_HALF_DOWN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"ROUND_CEILING"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_ROUND_CEIL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"ROUND_FLOOR"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_ROUND_FLOOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"ROUND_HALF_EVEN"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_ROUND_HALF_EVEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"SIGN_NaN"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_SIGN_NaN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"SIGN_POSITIVE_ZERO"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_SIGN_POSITIVE_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"SIGN_NEGATIVE_ZERO"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_SIGN_NEGATIVE_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"SIGN_POSITIVE_FINITE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_SIGN_POSITIVE_FINITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"SIGN_NEGATIVE_FINITE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_SIGN_NEGATIVE_FINITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"SIGN_POSITIVE_INFINITE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_SIGN_POSITIVE_INFINITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"SIGN_NEGATIVE_INFINITE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>VP_SIGN_NEGATIVE_INFINITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"+Infinity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"INFINITY"</literal></expr></argument>, <argument><expr><call><name>f_BigDecimal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>rb_cBigDecimal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"NaN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"NAN"</literal></expr></argument>, <argument><expr><call><name>f_BigDecimal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>rb_cBigDecimal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>BigDecimal_initialize_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"precs"</literal></expr></argument>, <argument><expr><name>BigDecimal_prec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><name>BigDecimal_add2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>, <argument><expr><name>BigDecimal_sub2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"mult"</literal></expr></argument>, <argument><expr><name>BigDecimal_mult2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"div"</literal></expr></argument>, <argument><expr><name>BigDecimal_div3</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><name>BigDecimal_hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>BigDecimal_to_s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"to_i"</literal></expr></argument>, <argument><expr><name>BigDecimal_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"to_int"</literal></expr></argument>, <argument><expr><name>BigDecimal_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"to_r"</literal></expr></argument>, <argument><expr><name>BigDecimal_to_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"split"</literal></expr></argument>, <argument><expr><name>BigDecimal_split</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>BigDecimal_add</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>BigDecimal_sub</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"+@"</literal></expr></argument>, <argument><expr><name>BigDecimal_uplus</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"-@"</literal></expr></argument>, <argument><expr><name>BigDecimal_neg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>BigDecimal_mult</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>BigDecimal_div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"quo"</literal></expr></argument>, <argument><expr><name>BigDecimal_div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>, <argument><expr><name>BigDecimal_mod</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"modulo"</literal></expr></argument>, <argument><expr><name>BigDecimal_mod</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"remainder"</literal></expr></argument>, <argument><expr><name>BigDecimal_remainder</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"divmod"</literal></expr></argument>, <argument><expr><name>BigDecimal_divmod</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"clone"</literal></expr></argument>, <argument><expr><name>BigDecimal_clone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"dup"</literal></expr></argument>, <argument><expr><name>BigDecimal_clone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"to_f"</literal></expr></argument>, <argument><expr><name>BigDecimal_to_f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"abs"</literal></expr></argument>, <argument><expr><name>BigDecimal_abs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"sqrt"</literal></expr></argument>, <argument><expr><name>BigDecimal_sqrt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"fix"</literal></expr></argument>, <argument><expr><name>BigDecimal_fix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"round"</literal></expr></argument>, <argument><expr><name>BigDecimal_round</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"frac"</literal></expr></argument>, <argument><expr><name>BigDecimal_frac</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"floor"</literal></expr></argument>, <argument><expr><name>BigDecimal_floor</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"ceil"</literal></expr></argument>, <argument><expr><name>BigDecimal_ceil</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"power"</literal></expr></argument>, <argument><expr><name>BigDecimal_power</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>, <argument><expr><name>BigDecimal_power_op</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"&lt;=&gt;"</literal></expr></argument>, <argument><expr><name>BigDecimal_comp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><name>BigDecimal_eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"==="</literal></expr></argument>, <argument><expr><name>BigDecimal_eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"eql?"</literal></expr></argument>, <argument><expr><name>BigDecimal_eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><name>BigDecimal_lt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>, <argument><expr><name>BigDecimal_le</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><name>BigDecimal_gt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>, <argument><expr><name>BigDecimal_ge</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"zero?"</literal></expr></argument>, <argument><expr><name>BigDecimal_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"nonzero?"</literal></expr></argument>, <argument><expr><name>BigDecimal_nonzero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"coerce"</literal></expr></argument>, <argument><expr><name>BigDecimal_coerce</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>BigDecimal_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"exponent"</literal></expr></argument>, <argument><expr><name>BigDecimal_exponent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"sign"</literal></expr></argument>, <argument><expr><name>BigDecimal_sign</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"nan?"</literal></expr></argument>, <argument><expr><name>BigDecimal_IsNaN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"infinite?"</literal></expr></argument>, <argument><expr><name>BigDecimal_IsInfinite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"finite?"</literal></expr></argument>, <argument><expr><name>BigDecimal_IsFinite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"truncate"</literal></expr></argument>, <argument><expr><name>BigDecimal_truncate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBigDecimal</name></expr></argument>, <argument><expr><literal type="string">"_dump"</literal></expr></argument>, <argument><expr><name>BigDecimal_dump</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_mBigMath</name> <operator>=</operator> <call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"BigMath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_mBigMath</name></expr></argument>, <argument><expr><literal type="string">"exp"</literal></expr></argument>, <argument><expr><name>BigMath_s_exp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_mBigMath</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>, <argument><expr><name>BigMath_s_log</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_up</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_down</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_truncate</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"truncate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_half_up</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"half_up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_default</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_half_down</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"half_down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_half_even</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"half_even"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_banker</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"banker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_ceiling</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"ceiling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_ceil</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"ceil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_floor</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"floor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_to_r</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"to_r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_eq</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"=="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_half</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"half"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gfDebug</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int gfCheckVal = 1; 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>static</specifier> <name>Real</name> <modifier>*</modifier></type><name>VpConstOne</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><specifier>static</specifier> <name>Real</name> <modifier>*</modifier></type><name>VpPt5</name></decl>;</decl_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxnr</name></cpp:macro> <cpp:value>100UL</cpp:value></cpp:define> 



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MemCmp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcmp(x,y,z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>StrCmp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcmp(x,y)</cpp:value></cpp:define>

<enum>enum <name>op_sw</name> <block>{
<decl><name>OP_SW_ADD</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 
<decl><name>OP_SW_SUB</name></decl>, 
<decl><name>OP_SW_MULT</name></decl>, 
<decl><name>OP_SW_DIV</name></decl> 
}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VpIsDefOP</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>op_sw</name></name></type> <name>sw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AddExponent</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>SIGNED_VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BDIGIT</name></type> <name>VpAddAbs</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BDIGIT</name></type> <name>VpSubAbs</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>VpSetPTR</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>a_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>b_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>c_pos</name></decl></parameter>, <parameter><decl><type><name>BDIGIT</name> <modifier>*</modifier></type><name>av</name></decl></parameter>, <parameter><decl><type><name>BDIGIT</name> <modifier>*</modifier></type><name>bv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VpNmlz</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>VpFormatSt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fFmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VpRdup</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ind_m</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gnAlloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>VP_EXPORT</name> <name>void</name> <modifier>*</modifier></type>
<name>VpMemAlloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_MEMORY</name></expr></argument>, <argument><expr><literal type="string">"failed to allocate memory"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gnAlloc</name><operator>++</operator></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>void</name> <modifier>*</modifier></type>
<name>VpMemRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>xrealloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_MEMORY</name></expr></argument>, <argument><expr><literal type="string">"failed to allocate memory"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>void</name></type>
<name>VpFree</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gnAlloc</name><operator>--</operator></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>gnAlloc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" *************** All memories allocated freed ****************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gnAlloc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ??????????? Too many memory free calls(%d) ?????????????\n"</literal></expr></argument>, <argument><expr><name>gnAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rmpd_set_thread_local_exception_mode</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_thread_local_aset( rb_thread_current(), id_BigDecimal_exception_mode, INT2FIX((int)(mode)) )</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type>
<name>VpGetException</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <specifier>const</specifier></type> <name>vmode</name> <init>= <expr><call><name>rb_thread_local_aref</name><argument_list>(
<argument><expr><call><name>rb_thread_current</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>id_BigDecimal_exception_mode</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>vmode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rmpd_set_thread_local_exception_mode</name><argument_list>(<argument><expr><name>RMPD_EXCEPTION_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RMPD_EXCEPTION_MODE_DEFAULT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>NUM2USHORT</name><argument_list>(<argument><expr><name>vmode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>VpSetException</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rmpd_set_thread_local_exception_mode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rmpd_set_thread_local_precision_limit</name><parameter_list>(<parameter><type><name>limit</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_thread_local_aset( rb_thread_current(), id_BigDecimal_precision_limit, SIZET2NUM(limit) )</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_PRECISION_LIMIT_DEFAULT</name></cpp:macro> <cpp:value>((size_t)0)</cpp:value></cpp:define>


<function><type><name>VP_EXPORT</name> <name>size_t</name></type>
<name>VpGetPrecLimit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <specifier>const</specifier></type> <name>vlimit</name> <init>= <expr><call><name>rb_thread_local_aref</name><argument_list>(
<argument><expr><call><name>rb_thread_current</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>id_BigDecimal_precision_limit</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>vlimit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rmpd_set_thread_local_precision_limit</name><argument_list>(<argument><expr><name>RMPD_PRECISION_LIMIT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RMPD_PRECISION_LIMIT_DEFAULT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>vlimit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>size_t</name></type>
<name>VpSetPrecLimit</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>s</name> <init>= <expr><call><name>VpGetPrecLimit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rmpd_set_thread_local_precision_limit</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rmpd_set_thread_local_rounding_mode</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_thread_local_aset( rb_thread_current(), id_BigDecimal_rounding_mode, INT2FIX((int)(mode)) )</cpp:value></cpp:define>






<function><type><name>VP_EXPORT</name> <name>unsigned</name> <name>short</name></type>
<name>VpGetRoundMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <specifier>const</specifier></type> <name>vmode</name> <init>= <expr><call><name>rb_thread_local_aref</name><argument_list>(
<argument><expr><call><name>rb_thread_current</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>id_BigDecimal_rounding_mode</name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>vmode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rmpd_set_thread_local_rounding_mode</name><argument_list>(<argument><expr><name>RMPD_ROUNDING_MODE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>RMPD_ROUNDING_MODE_DEFAULT</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>NUM2USHORT</name><argument_list>(<argument><expr><name>vmode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpIsRoundMode</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VP_ROUND_UP</name></expr>:</case>
<case>case <expr><name>VP_ROUND_DOWN</name></expr>:</case>
<case>case <expr><name>VP_ROUND_HALF_UP</name></expr>:</case>
<case>case <expr><name>VP_ROUND_HALF_DOWN</name></expr>:</case>
<case>case <expr><name>VP_ROUND_CEIL</name></expr>:</case>
<case>case <expr><name>VP_ROUND_FLOOR</name></expr>:</case>
<case>case <expr><name>VP_ROUND_HALF_EVEN</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>unsigned</name> <name>short</name></type>
<name>VpSetRoundMode</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VpIsRoundMode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rmpd_set_thread_local_rounding_mode</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>









<decl_stmt><decl><type><specifier>volatile</specifier> <specifier>const</specifier> <name>double</name></type> <name>gOne_ABCED9B4_CE73__00400511F31D</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>One</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>gOne_ABCED9B4_CE73__00400511F31D</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>VP_EXPORT</name> <name>double</name></type>
<name>VpGetDoubleNaN</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> 
<block>{<block_content>
<return>return <expr><call><name>nan</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>double</name></type>
<name>VpGetDoublePosInf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> 
<block>{<block_content>
<return>return <expr><name>HUGE_VAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>double</name></type>
<name>VpGetDoubleNegInf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> 
<block>{<block_content>
<return>return <expr><operator>-</operator><name>HUGE_VAL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>double</name></type>
<name>VpGetDoubleNegZero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>nzero</name> <init>= <expr><literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>nzero</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nzero</name> <operator>=</operator> <operator>(</operator><call><name>One</name><argument_list>()</argument_list></call><operator>/</operator><call><name>VpGetDoubleNegInf</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>nzero</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
VP_EXPORT int
VpIsNegDoubleZero(double v)
{
double z = VpGetDoubleNegZero();
return MemCmp(&amp;v,&amp;z,sizeof(v))==0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpException</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>always</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <specifier>const</specifier></type> <name>exception_mode</name> <init>= <expr><call><name>VpGetException</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>VP_EXCEPTION_OP</name> <operator>||</operator> <name>f</name> <operator>==</operator> <name>VP_EXCEPTION_MEMORY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>always</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>always</name> <operator>||</operator> <operator>(</operator><name>exception_mode</name> <operator>&amp;</operator> <name>f</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VP_EXCEPTION_ZERODIVIDE</name></expr>:</case>
<case>case <expr><name>VP_EXCEPTION_INFINITY</name></expr>:</case>
<case>case <expr><name>VP_EXCEPTION_NaN</name></expr>:</case>
<case>case <expr><name>VP_EXCEPTION_UNDERFLOW</name></expr>:</case>
<case>case <expr><name>VP_EXCEPTION_OP</name></expr>:</case>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFloatDomainError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VP_EXCEPTION_MEMORY</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>VpIsDefOP</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>op_sw</name></name></type> <name>sw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VpIsNaN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>NaN</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VpIsInf</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>sw</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OP_SW_ADD</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Inf</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>NaN</name>;</goto>
</block_content>}</block></else></if_stmt>
<case>case <expr><name>OP_SW_SUB</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Inf</name>;</goto>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>NaN</name>;</goto>
</block_content>}</block></else></if_stmt>
<case>case <expr><name>OP_SW_MULT</name></expr>:</case> 
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Inf</name>;</goto>
<case>case <expr><name>OP_SW_DIV</name></expr>:</case> 
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>NaN</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>NaN</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>sw</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OP_SW_ADD</name></expr>:</case> 
<case>case <expr><name>OP_SW_SUB</name></expr>:</case> 
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP_SW_MULT</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>NaN</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP_SW_DIV</name></expr>:</case> 
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<goto>goto <name>Inf</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsInf</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>sw</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OP_SW_ADD</name></expr>:</case> 
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP_SW_SUB</name></expr>:</case> 
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>-</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP_SW_MULT</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>NaN</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OP_SW_DIV</name></expr>:</case> 
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<goto>goto <name>Inf</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 

<label><name>Inf</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_INFINITY</name></expr></argument>, <argument><expr><literal type="string">"Computation results to 'Infinity'"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_INFINITY</name></expr></argument>, <argument><expr><literal type="string">"Computation results to '-Infinity'"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>

<label><name>NaN</name>:</label>
<return>return <expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_NaN</name></expr></argument>, <argument><expr><literal type="string">"Computation results to 'NaN'"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>VP_EXPORT</name> <name>size_t</name></type>
<name>VpNumOfChars</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pszFmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>ex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>BASE_FIG</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsDef</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">32</literal></expr>;</return></block_content></block></if></if_stmt> 

<switch>switch<condition>(<expr><operator>*</operator><name>pszFmt</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>BASE_FIG</name><operator>*</operator><operator>(</operator><name><name>vp</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <name><name>vp</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <name>BASE_FIG</name><operator>*</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>-</operator><name>ex</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ex</name> <operator>&gt;</operator> <name><name>vp</name><operator>-&gt;</operator><name>Prec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <name>BASE_FIG</name><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>ex</name> <operator>-</operator> <name><name>vp</name><operator>-&gt;</operator><name>Prec</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<default>default:</default>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>BASE_FIG</name><operator>*</operator><operator>(</operator><name><name>vp</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">6</literal></expr>;</expr_stmt> 
</block_content>}</block></switch>
<return>return <expr><name>nc</name></expr>;</return>
</block_content>}</block></function>















<function><type><name>VP_EXPORT</name> <name>size_t</name></type>
<name>VpInit</name><parameter_list>(<parameter><decl><type><name>BDIGIT</name></type> <name>BaseVal</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>VpGetDoubleNegZero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>VpConstOne</name> <operator>=</operator> <call><name>VpAlloc</name><argument_list>(<argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>VpPt5</name> <operator>=</operator> <call><name>VpAlloc</name><argument_list>(<argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><literal type="string">".5"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>gnAlloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"VpInit: BaseVal = %"</literal><name>PRIuBDIGIT</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>BaseVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tBASE = %"</literal><name>PRIuBDIGIT</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tHALF_BASE = %"</literal><name>PRIuBDIGIT</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>HALF_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tBASE1 = %"</literal><name>PRIuBDIGIT</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>BASE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tBASE_FIG = %u\n"</literal></expr></argument>, <argument><expr><name>BASE_FIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tDBLE_FIG = %d\n"</literal></expr></argument>, <argument><expr><name>DBLE_FIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><call><name>rmpd_double_figures</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>Real</name> <modifier>*</modifier></type>
<name>VpOne</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>VpConstOne</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>AddExponent</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>SIGNED_VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>e</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>m</name> <init>= <expr><name>e</name><operator>+</operator><name>n</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>eb</name></decl>, <decl><type ref="prev"/><name>mb</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>MUL_OVERFLOW_SIGNED_VALUE_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>MUL_OVERFLOW_SIGNED_VALUE_P</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <name>m</name><operator>*</operator><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eb</name> <operator>=</operator> <name>e</name><operator>*</operator><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eb</name> <operator>-</operator> <name>mb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>overflow</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>MUL_OVERFLOW_SIGNED_VALUE_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>MUL_OVERFLOW_SIGNED_VALUE_P</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>underflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mb</name> <operator>=</operator> <name>m</name><operator>*</operator><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>eb</name> <operator>=</operator> <name>e</name><operator>*</operator><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mb</name> <operator>-</operator> <name>eb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>underflow</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>


<label><name>underflow</name>:</label>
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_UNDERFLOW</name></expr></argument>, <argument><expr><literal type="string">"Exponent underflow"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<label><name>overflow</name>:</label>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_OVERFLOW</name></expr></argument>, <argument><expr><literal type="string">"Exponent overflow"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Real</name> <modifier>*</modifier></type>
<name>rmpd_parse_special_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
}</block> <decl><name><name>table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SZ_INF</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SZ_INF</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>VP_SIGN_POSITIVE_INFINITE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>SZ_PINF</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SZ_PINF</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>VP_SIGN_POSITIVE_INFINITE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>SZ_NINF</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SZ_NINF</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>VP_SIGN_NEGATIVE_INFINITE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>SZ_NaN</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SZ_NaN</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>VP_SIGN_NaN</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>table_length</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>table_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><call><name>VpAllocReal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sign</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>VP_SIGN_POSITIVE_INFINITE</name></expr>:</case>
<expr_stmt><expr><call><name>VpSetPosInf</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>vp</name></expr>;</return>
<case>case <expr><name>VP_SIGN_NEGATIVE_INFINITE</name></expr>:</case>
<expr_stmt><expr><call><name>VpSetNegInf</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>vp</name></expr>;</return>
<case>case <expr><name>VP_SIGN_NaN</name></expr>:</case>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>VP_EXPORT</name> <name>Real</name> <modifier>*</modifier></type>
<name>VpAlloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>szVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_szVal</name> <init>= <expr><name>szVal</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ni</name></decl>, <decl><type ref="prev"/><name>ipf</name></decl>, <decl><type ref="prev"/><name>nf</name></decl>, <decl><type ref="prev"/><name>ipe</name></decl>, <decl><type ref="prev"/><name>ne</name></decl>, <decl><type ref="prev"/><name>dot_seen</name></decl>, <decl><type ref="prev"/><name>exp_seen</name></decl>, <decl><type ref="prev"/><name>nalloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mf</name> <init>= <expr><call><name>VpGetPrecLimit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>mx</name> <operator>+</operator> <name>BASE_FIG</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>BASE_FIG</name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>mx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>szVal</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>szVal</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>szVal</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>szVal</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mf</name> <operator>=</operator> <operator>(</operator><name>mf</name> <operator>+</operator> <name>BASE_FIG</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>BASE_FIG</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&gt;</operator> <name>mf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>mf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>szVal</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<label><name>return_zero</name>:</label>



<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>VpAllocReal</name><argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vp</name> <operator>=</operator> <call><name>rmpd_parse_special_string</name><argument_list>(<argument><expr><name>szVal</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>rb_str_tmp_new</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>szVal</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>szVal</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>v</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>v</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ni</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<while>while <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>szVal</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict_p</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ni</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>szVal</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ISDIGIT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict_p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>invalid_value</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ni</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>nf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>ne</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>ipf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>ipe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>dot_seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exp_seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>szVal</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dot_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ipf</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>szVal</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict_p</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nf</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>szVal</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict_p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dot_seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<goto>goto <name>invalid_value</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>nf</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>(</operator><name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>szVal</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>exp_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ipe</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>szVal</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>v</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>szVal</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict_p</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ne</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>szVal</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict_p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ne</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exp_seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<goto>goto <name>invalid_value</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ne</name></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>szVal</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block_content></block></while>


<if_stmt><if>if <condition>(<expr><name><name>szVal</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>strict_p</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>invalid_value</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>strict_p</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ni</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>dot_seen</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>nf</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>exp_seen</name> <operator>&amp;&amp;</operator> <name>ne</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<label><name>invalid_value</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>strict_p</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>return_zero</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exc</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>orig_szVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid value for BigDecimal(): \"%"</literal><name>PRIsVALUE</name><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nalloc</name> <operator>=</operator> <operator>(</operator><name>ni</name> <operator>+</operator> <name>nf</name> <operator>+</operator> <name>BASE_FIG</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>BASE_FIG</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nalloc</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>nalloc</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>nalloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>VpAllocReal</name><argument_list>(<argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpCtoV</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>psz</name> <operator>+</operator> <name>ipf</name></expr></argument>, <argument><expr><name>nf</name></expr></argument>, <argument><expr><name>psz</name> <operator>+</operator> <name>ipe</name></expr></argument>, <argument><expr><name>ne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>













<function><type><name>VP_EXPORT</name> <name>size_t</name></type>
<name>VpAsgn</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>isw</name> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>isw</name> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>MaxPrec</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>MaxPrec</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>frac</name></name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isw</name> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpInternalRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>n</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpLimitRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>isw</name> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <name>BASE_FIG</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>VP_EXPORT</name> <name>size_t</name></type>
<name>VpAddSub</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>sw</name></decl>, <decl><type ref="prev"/><name>isw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>a_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>na</name></decl>, <decl><type ref="prev"/><name>nb</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>mrv</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpAddSub(enter) a=% \n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" b=% \n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" operation=%d\n"</literal></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsDefOP</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>operation</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>OP_SW_ADD</name></expr> </then><else>: <expr><name>OP_SW_SUB</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 


<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsZero</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>operation</name> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></else></if_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <name>BASE_FIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><name>BASE_FIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>operation</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sw</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_ptr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ptr</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></if> 
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_ptr</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ptr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></if> 
<else>else <block>{<block_content>


<expr_stmt><expr><name>na</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>na</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_ptr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ptr</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<goto>goto <name>end_if</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_ptr</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ptr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<goto>goto <name>end_if</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>na</name> <operator>&gt;</operator> <name>nb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_ptr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ptr</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<goto>goto <name>end_if</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>na</name> <operator>&lt;</operator> <name>nb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_ptr</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ptr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<goto>goto <name>end_if</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>sw</name> <operator>*</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <name>BASE_FIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>a_ptr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_ptr</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>end_if</name>:</label>
<expr_stmt><expr><name>isw</name> <operator>=</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>sw</name> <operator>*</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>isw</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mrv</name> <operator>=</operator> <call><name>VpAddAbs</name><argument_list>(<argument><expr><name>a_ptr</name></expr></argument>, <argument><expr><name>b_ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>isw</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mrv</name> <operator>=</operator> <call><name>VpSubAbs</name><argument_list>(<argument><expr><name>a_ptr</name></expr></argument>, <argument><expr><name>b_ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a_ptr</name> <operator>==</operator> <name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a_ptr</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>VpInternalRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>mrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpAddSub(result) c=% \n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" a=% \n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" b=% \n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" operation=%d\n"</literal></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <name>BASE_FIG</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>BDIGIT</name></type>
<name>VpAddAbs</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>word_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>a_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>b_pos</name></decl>, <decl><type ref="prev"/><name>b_pos_with_word_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>c_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>av</name></decl>, <decl><type ref="prev"/><name>bv</name></decl>, <decl><type ref="prev"/><name>carry</name></decl>, <decl><type ref="prev"/><name>mrv</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpAddAbs called: a = %\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" b = %\n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>word_shift</name> <operator>=</operator> <call><name>VpSetPTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a_pos</name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_pos</name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_pos</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>word_shift</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>b_pos</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>Assign_a</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mrv</name> <operator>=</operator> <name>av</name> <operator>+</operator> <name>bv</name></expr>;</expr_stmt> 



<if_stmt><if>if <condition>(<expr><name>b_pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>b_pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b_pos</name> <operator>+</operator> <name>word_shift</name> <operator>&gt;</operator> <name>a_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>b_pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b_pos</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>word_shift</name> <operator>&gt;</operator> <name>a_pos</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>word_shift</name><operator>--</operator> <operator>&gt;</operator> <name>a_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>c_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>b_pos_with_word_shift</name> <operator>=</operator> <name>b_pos</name> <operator>+</operator> <name>word_shift</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>a_pos</name> <operator>&gt;</operator> <name>b_pos_with_word_shift</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>a_pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 



<while>while <condition>(<expr><name>b_pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>a_pos</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>b_pos</name></expr>]</index></name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>c_pos</name></expr>]</index></name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>c_pos</name></expr>]</index></name> <operator>-=</operator> <name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>



<while>while <condition>(<expr><name>a_pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>a_pos</name></expr>]</index></name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>c_pos</name></expr>]</index></name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>c_pos</name></expr>]</index></name> <operator>-=</operator> <name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c_pos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>c_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>carry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>Exit</name>;</goto>

<label><name>Assign_a</name>:</label>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mrv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>Exit</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpAddAbs exit: c=% \n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name>mrv</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>BDIGIT</name></type>
<name>VpSubAbs</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>word_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>a_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>b_pos</name></decl>, <decl><type ref="prev"/><name>b_pos_with_word_shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>c_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>av</name></decl>, <decl><type ref="prev"/><name>bv</name></decl>, <decl><type ref="prev"/><name>borrow</name></decl>, <decl><type ref="prev"/><name>mrv</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpSubAbs called: a = %\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" b = %\n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>word_shift</name> <operator>=</operator> <call><name>VpSetPTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>av</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a_pos</name> <operator>=</operator> <name>ap</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b_pos</name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_pos</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>word_shift</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>b_pos</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>Assign_a</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>av</name> <operator>&gt;=</operator> <name>bv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mrv</name> <operator>=</operator> <name>av</name> <operator>-</operator> <name>bv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>mrv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>




<if_stmt><if>if <condition>(<expr><name>b_pos</name> <operator>+</operator> <name>word_shift</name> <operator>&gt;</operator> <name>a_pos</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>b_pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b_pos</name> <operator>+</operator> <name>word_shift</name> <operator>&gt;</operator> <name>a_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name>BASE</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>b_pos</name></expr>]</index></name> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>b_pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>word_shift</name> <operator>&gt;</operator> <name>a_pos</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>word_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name>BASE</name> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>b_pos_with_word_shift</name> <operator>=</operator> <name>b_pos</name> <operator>+</operator> <name>word_shift</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>a_pos</name> <operator>&gt;</operator> <name>b_pos_with_word_shift</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>a_pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>



<while>while <condition>(<expr><name>b_pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>c_pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>a_pos</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>b_pos</name></expr>]</index></name> <operator>+</operator> <name>borrow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name>BASE</name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>a_pos</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>b_pos</name></expr>]</index></name> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>a_pos</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>b_pos</name></expr>]</index></name> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>



<while>while <condition>(<expr><name>a_pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>c_pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>--</operator><name>a_pos</name></expr>]</index></name> <operator>&lt;</operator> <name>borrow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name>BASE</name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>a_pos</name></expr>]</index></name> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>c_pos</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>a_pos</name></expr>]</index></name> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c_pos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>c_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>borrow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>Exit</name>;</goto>

<label><name>Assign_a</name>:</label>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mrv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>Exit</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpSubAbs exit: c=% \n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name>mrv</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>VpSetPTR</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>a_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>b_pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>c_pos</name></decl></parameter>, <parameter><decl><type><name>BDIGIT</name> <modifier>*</modifier></type><name>av</name></decl></parameter>, <parameter><decl><type><name>BDIGIT</name> <modifier>*</modifier></type><name>bv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>left_word</name></decl>, <decl><type ref="prev"/><name>right_word</name></decl>, <decl><type ref="prev"/><name>word_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>round_limit</name> <init>= <expr><operator>(</operator><call><name>VpGetPrecLimit</name><argument_list>()</argument_list></call> <operator>+</operator> <name>BASE_FIG</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>BASE_FIG</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>av</name> <operator>=</operator> <operator>*</operator><name>bv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>word_shift</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>exponent</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>left_word</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <name>word_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>right_word</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr></argument>, <argument><expr><name>left_word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left_word</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 




<if_stmt><if>if <condition>(<expr><name>right_word</name> <operator>&gt;</operator> <name>left_word</name></expr>)</condition> <block>{<block_content> 









<expr_stmt><expr><operator>*</operator><name>c_pos</name> <operator>=</operator> <name>right_word</name> <operator>=</operator> <name>left_word</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><operator>*</operator><name>a_pos</name> <operator>=</operator> <name>left_word</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>a_pos</name> <operator>&lt;=</operator> <name>round_limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>av</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>*</operator><name>a_pos</name></expr>]</index></name></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>





<expr_stmt><expr><operator>*</operator><name>a_pos</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <name>word_shift</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>&gt;=</operator> <name>word_shift</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b_pos</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>-</operator> <name>word_shift</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b_pos</name> <operator>+</operator> <name>word_shift</name> <operator>&lt;=</operator> <name>round_limit</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>bv</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><operator>*</operator><name>b_pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b_pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>






<expr_stmt><expr><operator>*</operator><name>b_pos</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 






<expr_stmt><expr><operator>*</operator><name>b_pos</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>a_pos</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>c_pos</name> <operator>=</operator> <name>right_word</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <operator>*</operator><name>c_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddExponent</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>word_shift</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>VP_EXPORT</name> <name>size_t</name></type>
<name>VpMult</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>MxIndA</name></decl>, <decl><type ref="prev"/><name>MxIndB</name></decl>, <decl><type ref="prev"/><name>MxIndAB</name></decl>, <decl><type ref="prev"/><name>MxIndC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ind_c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ii</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ind_as</name></decl>, <decl><type ref="prev"/><name>ind_ae</name></decl>, <decl><type ref="prev"/><name>ind_bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>carry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT_DBL</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpMult(Enter): a=% \n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" b=% \n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsDefOP</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>OP_SW_MULT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VpIsZero</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return> 
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsOne</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsOne</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>MxIndA</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>MxIndB</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>MxIndC</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>MxIndAB</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>MxIndC</name> <operator>&lt;</operator> <name>MxIndAB</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>VpAlloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>MxIndAB</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>BASE_FIG</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MxIndC</name> <operator>=</operator> <name>MxIndAB</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddExponent</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>w</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>VpFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <name>ind_c</name> <operator>=</operator> <name>MxIndAB</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>nc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <name>nc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<for>for <control>(<init><expr><name>nc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nc</name> <operator>&lt;</operator> <name>MxIndAB</name></expr>;</condition> <incr><expr><operator>++</operator><name>nc</name></expr><operator>,</operator> <expr><operator>--</operator><name>ind_c</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nc</name> <operator>&lt;</operator> <name>MxIndB</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ind_as</name> <operator>=</operator> <name>MxIndA</name> <operator>-</operator> <name>nc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_ae</name> <operator>=</operator> <name>MxIndA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_bs</name> <operator>=</operator> <name>MxIndB</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>nc</name> <operator>&lt;=</operator> <name>MxIndA</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>ind_as</name> <operator>=</operator> <name>MxIndA</name> <operator>-</operator> <name>nc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_ae</name> <operator>=</operator> <name>MxIndA</name> <operator>-</operator> <operator>(</operator><name>nc</name> <operator>-</operator> <name>MxIndB</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_bs</name> <operator>=</operator> <name>MxIndB</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<expr_stmt><expr><name>ind_as</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_ae</name> <operator>=</operator> <name>MxIndAB</name> <operator>-</operator> <name>nc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_bs</name> <operator>=</operator> <name>MxIndB</name> <operator>-</operator> <operator>(</operator><name>nc</name> <operator>-</operator> <name>MxIndA</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ind_as</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ind_ae</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>BDIGIT_DBL</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_bs</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <operator>(</operator><name>BDIGIT</name><operator>)</operator><operator>(</operator><name>s</name> <operator>/</operator> <name>BASE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>-=</operator> <operator>(</operator><name>BDIGIT_DBL</name><operator>)</operator><name>carry</name> <operator>*</operator> <name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>BDIGIT</name><operator>)</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name></expr>]</index></name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name></expr>]</index></name> <operator>/</operator> <name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>+=</operator> <operator>(</operator><name>BDIGIT</name><operator>)</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>BDIGIT</name><operator>)</operator><operator>(</operator><name>s</name> <operator>*</operator> <name>BASE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ii</name> <operator>=</operator> <name>ind_c</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ii</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>+=</operator> <name>carry</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>/</operator> <name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>carry</name> <operator>*</operator> <name>BASE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><call><name>VpNmlz</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpFree</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpLimitRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>Exit</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpMult(c=a*b): c=% \n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" a=% \n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" b=% \n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><name>BASE_FIG</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>VP_EXPORT</name> <name>size_t</name></type>
<name>VpDivd</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>word_a</name></decl>, <decl><type ref="prev"/><name>word_b</name></decl>, <decl><type ref="prev"/><name>word_c</name></decl>, <decl><type ref="prev"/><name>word_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ind_a</name></decl>, <decl><type ref="prev"/><name>ind_b</name></decl>, <decl><type ref="prev"/><name>ind_c</name></decl>, <decl><type ref="prev"/><name>ind_r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nLoop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT_DBL</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b1p1</name></decl>, <decl><type ref="prev"/><name>b1b2</name></decl>, <decl><type ref="prev"/><name>b1b2p1</name></decl>, <decl><type ref="prev"/><name>r1r2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>borrow</name></decl>, <decl><type ref="prev"/><name>borrow1</name></decl>, <decl><type ref="prev"/><name>borrow2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT_DBL</name></type> <name>qb</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" VpDivd(c=a/b) a=% \n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" b=% \n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsDefOP</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>OP_SW_DIV</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>Exit</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>VpIsZero</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_NaN</name></expr></argument>, <argument><expr><literal type="string">"Computation results to 'NaN'"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_ZERODIVIDE</name></expr></argument>, <argument><expr><literal type="string">"Divide by zero"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsOne</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>word_a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>word_b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>word_c</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>word_r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ind_c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>word_a</name> <operator>&gt;=</operator> <name>word_r</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>space_error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ind_r</name> <operator>&lt;=</operator> <name>word_a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_r</name></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>ind_r</name> <operator>&lt;</operator> <name>word_r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>ind_c</name> <operator>&lt;</operator> <name>word_c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>


<expr_stmt><expr><name>b1</name> <operator>=</operator> <name>b1p1</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b1b2p1</name> <operator>=</operator> <name>b1b2</name> <operator>=</operator> <name>b1p1</name> <operator>*</operator> <name>BASE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>b1p1</name> <operator>=</operator> <name>b1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1b2p1</name> <operator>=</operator> <name>b1b2</name> <operator>=</operator> <name>b1</name> <operator>*</operator> <name>BASE</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>b1b2p1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>ind_c</name> <operator>=</operator> <name>word_r</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nLoop</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>word_c</name></expr></argument>,<argument><expr><name>ind_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ind_c</name> <operator>&lt;</operator> <name>nLoop</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>ind_c</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r1r2</name> <operator>=</operator> <operator>(</operator><name>BDIGIT_DBL</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name></expr>]</index></name> <operator>*</operator> <name>BASE</name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r1r2</name> <operator>==</operator> <name>b1b2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ind_b</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_a</name> <operator>=</operator> <name>ind_c</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ind_b</name> <operator>&lt;</operator> <name>word_b</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_a</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_b</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>div_b1p1</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_a</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_b</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_a</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_b</name></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>ind_b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_r</name> <operator>=</operator> <name>ind_c</name> <operator>+</operator> <name>ind_b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ind_r</name> <operator>&gt;=</operator> <name>word_r</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>space_error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>ind_b</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_b</name></expr>]</index></name> <operator>+</operator> <name>borrow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>BASE</name> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_b</name></expr>]</index></name> <operator>+</operator> <name>borrow</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_b</name></expr>]</index></name> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>--</operator><name>ind_r</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>ind_b</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>++</operator><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>carry</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>r1r2</name> <operator>&gt;=</operator> <name>b1b2p1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>r1r2</name> <operator>/</operator> <name>b1b2p1</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>BDIGIT</name><operator>)</operator><name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_r</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <name>ind_c</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>sub_mult</name>;</goto>
</block_content>}</block></if></if_stmt>

<label><name>div_b1p1</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ind_c</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>word_c</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>out_side</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>r1r2</name> <operator>/</operator> <name>b1p1</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>BDIGIT</name><operator>)</operator><name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_r</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name> <operator>+</operator> <name>ind_c</name></expr>;</expr_stmt>

<label><name>sub_mult</name>:</label>
<expr_stmt><expr><name>borrow1</name> <operator>=</operator> <name>borrow2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_b</name> <operator>=</operator> <name>word_b</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ind_r</name> <operator>&gt;=</operator> <name>word_r</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>space_error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>ind_b</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>qb</name> <operator>=</operator> <name>q</name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_b</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>qb</name> <operator>&lt;</operator> <name>BASE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>borrow1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>borrow1</name> <operator>=</operator> <operator>(</operator><name>BDIGIT</name><operator>)</operator><operator>(</operator><name>qb</name> <operator>/</operator> <name>BASE</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>qb</name> <operator>-=</operator> <operator>(</operator><name>BDIGIT_DBL</name><operator>)</operator><name>borrow1</name> <operator>*</operator> <name>BASE</name></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>&lt;</operator> <name>qb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>BDIGIT</name><operator>)</operator><operator>(</operator><name>BASE</name> <operator>-</operator> <name>qb</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow2</name> <operator>=</operator> <name>borrow2</name> <operator>+</operator> <name>borrow1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>BDIGIT</name><operator>)</operator><name>qb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow2</name> <operator>+=</operator> <name>borrow1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>borrow2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>borrow2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>BASE</name> <operator>-</operator> <name>borrow2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>borrow2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>ind_r</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>ind_b</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>-=</operator> <name>borrow2</name></expr>;</expr_stmt>
<label><name>carry</name>:</label>
<expr_stmt><expr><name>ind_r</name> <operator>=</operator> <name>ind_c</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name> <operator>-=</operator> <name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>ind_r</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>c</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_r</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></while>

<label><name>out_side</name>:</label>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <name>word_c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddExponent</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddExponent</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>exponent</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpNmlz</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <name>word_r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddExponent</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpNmlz</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<goto>goto <name>Exit</name>;</goto>

<label><name>space_error</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" word_a=%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>word_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" word_b=%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>word_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" word_c=%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>word_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" word_r=%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>word_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ind_r =%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>ind_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"ERROR(VpDivd): space for remainder too small."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>Exit</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" VpDivd(c=a/b), c=% \n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" r=% \n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>Prec</name></name> <operator>*</operator> <name>BASE_FIG</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>VpNmlz</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ind_a</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsDef</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>NoVal</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>NoVal</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ind_a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ind_a</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_a</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <name>ind_a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></while> 
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddExponent</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>NoVal</name>:</label>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpComp</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>ind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VpIsNaN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">999</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsDef</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsDef</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsDef</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><name><name>b</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>exponent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>mx</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>Prec</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ind</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ind</name> <operator>&lt;</operator> <name>mx</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>ind</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>Prec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><call><name>VpGetSign</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>Exit</name>:</label>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>val</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" VpComp a=%\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" b=%\n"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ans=%d\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>val</name></expr>;</return>
</block_content>}</block></function>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_ENABLE_VPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>VPrint</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cntl_chr</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>nc</name></decl>, <decl><type ref="prev"/><name>nd</name></decl>, <decl><type ref="prev"/><name>ZeroSup</name></decl>, <decl><type ref="prev"/><name>sep</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>nn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nd</name> <operator>=</operator> <name>nc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 


<expr_stmt><expr><name>ZeroSup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<while>while <condition>(<expr><operator>*</operator><operator>(</operator><name>cntl_chr</name> <operator>+</operator> <name>j</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cntl_chr</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>==</operator> <literal type="char">'%'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>cntl_chr</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>SZ_NaN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>SZ_INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VpIsNegInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>SZ_NINF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>nc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"0."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>cntl_chr</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<default>default:</default>
<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><name>ZeroSup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <ternary><condition><expr><name><name>cntl_chr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'z'</literal></expr> ?</condition><then> <expr><name>RMPD_COMPONENT_FIGURES</name></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>BASE1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nn</name> <operator>=</operator> <name>e</name> <operator>/</operator> <name>m</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ZeroSup</name> <operator>||</operator> <name>nn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><operator>++</operator><name>nd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ZeroSup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>&gt;=</operator> <name>sep</name></expr>)</condition> <block>{<block_content> 
<expr_stmt><expr><name>nd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>e</name> <operator>-</operator> <name>nn</name> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"E%"</literal><name>PRIdSIZE</name></expr></argument>, <argument><expr><call><name>VpExponent10</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">" (%"</literal><name>PRIdVALUE</name><literal type="string">", %lu, %lu)"</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>+=</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>nc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cntl_chr</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>cntl_chr</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>cntl_chr</name> <operator>+</operator> <name>j</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>cntl_chr</name> <operator>+</operator> <name>j</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cntl_chr</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>nc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>VpFormatSt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fFmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ie</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>nf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fFmt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ie</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ie</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ch</name><operator>==</operator><literal type="char">'-'</literal> <operator>||</operator> <name>ch</name><operator>==</operator><literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>nf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'E'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>nf</name> <operator>&gt;</operator> <name>fFmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>psz</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>psz</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>ie</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ie</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>ssize_t</name></type>
<name>VpExponent10</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpHasVal</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ex</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>*</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>BASE1</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>n</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>ex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ex</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>void</name></type>
<name>VpSzMantissa</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ZeroSup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT_DBL</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>nn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><name>SZ_NaN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><name>SZ_INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNegInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><name>SZ_NINF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ZeroSup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>BASE1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nn</name> <operator>=</operator> <name>e</name> <operator>/</operator> <name>m</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ZeroSup</name> <operator>||</operator> <name>nn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>psz</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ZeroSup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>e</name> <operator>-</operator> <name>nn</name> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>psz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>psz</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>psz</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VpIsPosZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"-0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpToSpecialString</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fPlus</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>,<argument><expr><name>SZ_NaN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fPlus</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>fPlus</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><name>SZ_INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNegInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><name>SZ_NINF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>VpIsPosZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fPlus</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">" 0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fPlus</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"+0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"-0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>void</name></type>
<name>VpToString</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fFmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fPlus</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ZeroSup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>nn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pszSav</name> <init>= <expr><name>psz</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ex</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpToSpecialString</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>fPlus</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ZeroSup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fPlus</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fPlus</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>BASE1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nn</name> <operator>=</operator> <name>e</name> <operator>/</operator> <name>m</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ZeroSup</name> <operator>||</operator> <name>nn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>psz</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ZeroSup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>e</name> <operator>-</operator> <name>nn</name> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>*</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>BASE1</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>shift</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>ex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<while>while <condition>(<expr><name><name>psz</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>psz</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"e%"</literal><name>PRIdSIZE</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fFmt</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>VpFormatSt</name><argument_list>(<argument><expr><name>pszSav</name></expr></argument>, <argument><expr><name>fFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>void</name></type>
<name>VpToFString</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fFmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fPlus</name></decl></parameter>)</parameter_list>

<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>nn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pszSav</name> <init>= <expr><name>psz</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ex</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpToSpecialString</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>fPlus</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fPlus</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>fPlus</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BASE_FIG</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>++</operator><name>ex</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>ex</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psz</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>BASE1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nn</name> <operator>=</operator> <name>e</name> <operator>/</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>nn</name> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>e</name> <operator>-</operator> <name>nn</name> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<while>while <condition>(<expr><operator>--</operator><name>ex</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>BASE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>m</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>psz</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>psz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>psz</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>psz</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>psz</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fFmt</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>VpFormatSt</name><argument_list>(<argument><expr><name>pszSav</name></expr></argument>, <argument><expr><name>fFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>












<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpCtoV</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>int_chr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ni</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>frac</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp_chr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ne</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ind_a</name></decl>, <decl><type ref="prev"/><name>ma</name></decl>, <decl><type ref="prev"/><name>mi</name></decl>, <decl><type ref="prev"/><name>me</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>es</name></decl>, <decl><type ref="prev"/><name>eb</name></decl>, <decl><type ref="prev"/><name>ef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>signe</name></decl>, <decl><type ref="prev"/><name>exponent_overflow</name></decl>;</decl_stmt>


<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ma</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mi</name> <operator>=</operator> <name>ni</name></expr>;</expr_stmt>
<expr_stmt><expr><name>me</name> <operator>=</operator> <name>ne</name></expr>;</expr_stmt>
<expr_stmt><expr><name>signe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exponent_overflow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>frac</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ma</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ne</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>exp_chr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>signe</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>me</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>exp_chr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>me</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>me</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>MUL_OVERFLOW_SIGNED_VALUE_P</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>es</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<goto>goto <name>exp_overflow</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>es</name> <operator>=</operator> <name>e</name> <operator>*</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>MUL_OVERFLOW_SIGNED_VALUE_P</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>||</operator>
<name>SIGNED_VALUE_MAX</name> <operator>-</operator> <operator>(</operator><name><name>exp_chr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;</operator> <name>e</name> <operator>*</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exp_overflow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>e</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>exp_chr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>MUL_OVERFLOW_SIGNED_VALUE_P</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>exp_overflow</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>es</name> <operator>&gt;</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><operator>(</operator><name>e</name> <operator>*</operator> <name>BASE_FIG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<label><name>exp_overflow</name>:</label>
<expr_stmt><expr><name>exponent_overflow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>es</name></expr>;</expr_stmt> 
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>int_chr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>mi</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>int_chr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>mi</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>signe</name> <operator>*</operator> <name>e</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>e</name> <operator>+</operator> <name>ni</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>signe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>signe</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ef</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ef</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eb</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>eb</name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ef</name> <operator>=</operator> <name>eb</name> <operator>/</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ef</name> <operator>=</operator> <name>eb</name> <operator>-</operator> <name>ef</name> <operator>*</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ef</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt> 
<expr_stmt><expr><operator>++</operator><name>e</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>eb</name> <operator>=</operator> <name>e</name> <operator>/</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>exponent_overflow</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>zero</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mi</name> <operator>&amp;&amp;</operator> <name>zero</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>zero</name> <operator>=</operator> <name><name>int_chr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nf</name> <operator>&amp;&amp;</operator> <name>zero</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>zero</name> <operator>=</operator> <name><name>frac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zero</name> <operator>&amp;&amp;</operator> <name>signe</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_INFINITY</name></expr></argument>, <argument><expr><literal type="string">"exponent overflow"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ind_a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>mi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_a</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>BASE_FIG</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>mi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_a</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_a</name></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>int_chr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>mi</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>ind_a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ind_a</name> <operator>&gt;=</operator> <name>ma</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>over_flow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>



<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nf</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>BASE_FIG</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_a</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_a</name></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>frac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>ind_a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ind_a</name> <operator>&gt;=</operator> <name>ma</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>over_flow</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<goto>goto <name>Final</name>;</goto>

<label><name>over_flow</name>:</label>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"Conversion from String to BigDecimal overflow (last few digits discarded)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>Final</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ind_a</name> <operator>&gt;=</operator> <name>ma</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ind_a</name> <operator>=</operator> <name>ma</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>BASE_FIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_a</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_a</name></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <name>ind_a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <name>eb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpNmlz</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
















<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpVtoD</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>SIGNED_VALUE</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ind_m</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>fig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>div</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>VpGetDoubleNaN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VpIsPosZero</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VpIsNegZero</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>VpGetDoubleNegZero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>VpGetDoublePosInf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VpIsNegInf</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>VpGetDoubleNegInf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fig</name> <operator>=</operator> <operator>(</operator><name>DBLE_FIG</name> <operator>+</operator> <name>BASE_FIG</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>BASE_FIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mm</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>fig</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>Prec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>div</name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ind_m</name> <operator>&lt;</operator> <name>mm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>div</name> <operator>/=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>*</operator><name>d</name> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>m</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_m</name><operator>++</operator></expr>]</index></name> <operator>*</operator> <name>div</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>exponent</name></name> <operator>*</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>*=</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>Exit</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" VpVtoD: m=%\n"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" d=%e * 10 **%ld\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>d</name></expr></argument>, <argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" DBLE_FIG = %d\n"</literal></expr></argument>, <argument><expr><name>DBLE_FIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>VP_EXPORT</name> <name>void</name></type>
<name>VpDtoV</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ind_m</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>ne</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>VpSetPosInf</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>VpSetNegInf</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>d</name> <operator>&gt;</operator> <literal type="number">0.</literal><operator>)</operator></expr> ?</condition><then> <expr><name>d</name></expr> </then><else>: <expr><operator>-</operator><name>d</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ne</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>/=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ne</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>val2</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>BASE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>val2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>*=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>ne</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>mm</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>frac</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mm</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ind_m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>val</name> <operator>&gt;</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name>ind_m</name> <operator>&lt;</operator> <name>mm</name></expr>;</condition> <incr><expr><name>ind_m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>*=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>BDIGIT</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>-=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_m</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ind_m</name> <operator>&gt;=</operator> <name>mm</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ind_m</name> <operator>=</operator> <name>mm</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>d</name> <operator>&gt;</operator> <literal type="number">0.0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <name>ind_m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <name>ne</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VpInternalRound</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>m</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>Prec</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>(</operator><name>BDIGIT</name><operator>)</operator><operator>(</operator><name>val</name><operator>*</operator><operator>(</operator><name>double</name><operator>)</operator><name>BASE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>Exit</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"VpDtoV d=%30.30e\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" m=%\n"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return;</return>
</block_content>}</block></function>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
VP_EXPORT void
VpItoV(Real *m, SIGNED_VALUE ival)
{
size_t mm, ind_m;
size_t val, v1, v2, v;
int isign;
SIGNED_VALUE ne;

if (ival == 0) {
VpSetZero(m, 1);
goto Exit;
}
isign = 1;
val = ival;
if (ival &lt; 0) {
isign = -1;
val =(size_t)(-ival);
}
ne = 0;
ind_m = 0;
mm = m-&gt;MaxPrec;
while (ind_m &lt; mm) {
m-&gt;frac[ind_m] = 0;
++ind_m;
}
ind_m = 0;
while (val &gt; 0) {
if (val) {
v1 = val;
v2 = 1;
while (v1 &gt;= BASE) {
v1 /= BASE;
v2 *= BASE;
}
val = val - v2 * v1;
v = v1;
}
else {
v = 0;
}
m-&gt;frac[ind_m] = v;
++ind_m;
++ne;
}
m-&gt;Prec = ind_m - 1;
m-&gt;exponent = ne;
VpSetSign(m, isign);
VpNmlz(m);

Exit:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
if (gfDebug) {
printf(" VpItoV i=%d\n", ival);
VPrint(stdout, " m=%\n", m);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
return;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpSqrt</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>y_prec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>prec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_OP</name></expr></argument>, <argument><expr><literal type="string">"sqrt of negative value"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>VpException</name><argument_list>(<argument><expr><name>VP_EXCEPTION_OP</name></expr></argument>, <argument><expr><literal type="string">"sqrt of 'NaN'(Not a Number)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>VpIsOne</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetOne</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>VpAlloc</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>*</operator> <operator>(</operator><name>BASE_FIG</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"#1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>VpAlloc</name><argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>+</operator> <name>n</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>BASE_FIG</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"#1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y_prec</name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prec</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>exponent</name></name> <operator>-</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>y_prec</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>exponent</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>prec</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>prec</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>VpVtoD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>e</name> <operator>/=</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>e</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>-</operator> <name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>/=</operator> <name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>e</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>VpDtoV</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>exponent</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><operator>(</operator><operator>(</operator><name>DBLE_FIG</name> <operator>+</operator> <name>BASE_FIG</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>BASE_FIG</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument> , <argument><expr><name>y_prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><operator>(</operator><name>y_prec</name> <operator>*</operator> <name>BASE_FIG</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>maxnr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>maxnr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>&gt;</operator> <name>y_prec</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <name>y_prec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpDivd</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>VpMult</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>VpPt5</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>converge</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block> while <condition>(<expr><operator>++</operator><name>nr</name> <operator>&lt;</operator> <name>n</name></expr>)</condition>;</do>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR(VpSqrt): did not converge within %ld iterations.\n"</literal></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <name>y_prec</name></expr>;</expr_stmt>

<label><name>converge</name>:</label>
<expr_stmt><expr><call><name>VpChangeSign</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpMult</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAddSub</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"VpSqrt: iterations = %"</literal><name>PRIdSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" y =% \n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" x =% \n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" x-y*y = % \n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>=</operator> <name>y_prec</name></expr>;</expr_stmt>

<label><name>Exit</name>:</label>
<expr_stmt><expr><call><name>VpFree</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpFree</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpMidRound</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nf</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>int</name></type> <name>fracf</name></decl>, <decl><type ref="prev"/><name>fracf_1further</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>ix</name></decl>,<decl><type ref="prev"/><name>ioffset</name></decl>, <decl><type ref="prev"/><name>exptoadd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>shifter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>div</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nf</name> <operator>+=</operator> <name><name>y</name><operator>-&gt;</operator><name>exponent</name></name> <operator>*</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>exptoadd</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nf</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>VP_ROUND_CEIL</name> <operator>&amp;&amp;</operator> <name>f</name> <operator>!=</operator> <name>VP_ROUND_FLOOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>exptoadd</name> <operator>=</operator> <operator>-</operator><name>nf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ix</name> <operator>=</operator> <name>nf</name> <operator>/</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ix</name> <operator>&gt;=</operator> <name><name>y</name><operator>-&gt;</operator><name>Prec</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ix</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ioffset</name> <operator>=</operator> <name>nf</name> <operator>-</operator> <name>ix</name><operator>*</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>BASE_FIG</name> <operator>-</operator> <name>ioffset</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>shifter</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>shifter</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>




























<expr_stmt><expr><name>fracf</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>%</operator> <operator>(</operator><name>shifter</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fracf_1further</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>%</operator> <name>shifter</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>/=</operator> <name>shifter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>div</name> <operator>=</operator> <name>v</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>div</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt>











<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ix</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name><name>y</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name>BASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fracf</name> <operator>=</operator> <name>fracf_1further</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>







<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>frac</name></name> <operator>+</operator> <name>ix</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>y</name><operator>-&gt;</operator><name>Prec</name></name> <operator>-</operator> <operator>(</operator><name>ix</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BDIGIT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VP_ROUND_DOWN</name></expr>:</case> 
<break>break;</break>
<case>case <expr><name>VP_ROUND_UP</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>fracf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>div</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VP_ROUND_HALF_UP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>v</name><operator>&gt;=</operator><literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>div</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VP_ROUND_HALF_DOWN</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>||</operator> <operator>(</operator><name>v</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>fracf_1further</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>div</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VP_ROUND_CEIL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>fracf</name> <operator>&amp;&amp;</operator> <call><name>BIGDECIMAL_POSITIVE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>div</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VP_ROUND_FLOOR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>fracf</name> <operator>&amp;&amp;</operator> <call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>div</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VP_ROUND_HALF_EVEN</name></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>div</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fracf_1further</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>div</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ioffset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>y</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ix</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>div</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>div</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>div</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>div</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>div</name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ix</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ix</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpRdup</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>short</name></type> <name>s</name> <init>= <expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>e</name> <init>= <expr><name><name>y</name><operator>-&gt;</operator><name>exponent</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>VpSetOne</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ix</name></expr>]</index></name> <operator>=</operator> <name>div</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpNmlz</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>exptoadd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>exponent</name></name> <operator>+=</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><operator>(</operator><name>exptoadd</name> <operator>/</operator> <name>BASE_FIG</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>exptoadd</name> <operator>%=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>exptoadd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/=</operator> <name>BASE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>exponent</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpLeftRound</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nf</name></decl></parameter>)</parameter_list>



<block>{<block_content>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>v</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpHasVal</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nf</name> <operator>-=</operator> <call><name>VpExponent</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>BASE_FIG</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>v</name> <operator>/=</operator> <literal type="number">10</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nf</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>nf</name> <operator>+=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>BASE_FIG</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>VpMidRound</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>nf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpActiveRound</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 
<return>return <expr><call><name>VpMidRound</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>nf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>VpLimitRound</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ixDigit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ix</name> <init>= <expr><call><name>VpGetPrecLimit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpNmlz</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ix</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ixDigit</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ixDigit</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>Prec</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ix</name> <operator>+</operator> <name>BASE_FIG</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>BASE_FIG</name> <operator>&gt;</operator> <name>ixDigit</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>VpLeftRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>ix</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>VpInternalRound</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ixDigit</name></decl></parameter>, <parameter><decl><type><name>BDIGIT</name></type> <name>vPrev</name></decl></parameter>, <parameter><decl><type><name>BDIGIT</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <specifier>const</specifier></type> <name>rounding_mode</name> <init>= <expr><call><name>VpGetRoundMode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpLimitRound</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ixDigit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>/=</operator> <name>BASE1</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>rounding_mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VP_ROUND_DOWN</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>VP_ROUND_UP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VP_ROUND_HALF_UP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VP_ROUND_HALF_DOWN</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VP_ROUND_CEIL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <call><name>BIGDECIMAL_POSITIVE_P</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VP_ROUND_FLOOR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <call><name>BIGDECIMAL_NEGATIVE_P</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>VP_ROUND_HALF_EVEN</name></expr>:</case> 


<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>vPrev</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpRdup</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ixDigit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpNmlz</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>VpRdup</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ind_m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BDIGIT</name></type> <name>carry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ind_m</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ind_m</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>carry</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ind_m</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_m</name></expr>]</index></name> <operator>+=</operator> <name>carry</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_m</name></expr>]</index></name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_m</name></expr>]</index></name> <operator>-=</operator> <name>BASE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>carry</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AddExponent</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpNmlz</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>VP_EXPORT</name> <name>void</name></type>
<name>VpFrac</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>my</name></decl>, <decl><type ref="prev"/><name>ind_y</name></decl>, <decl><type ref="prev"/><name>ind_x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VpHasVal</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>exponent</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>exponent</name></name> <operator>&gt;=</operator> <name><name>x</name><operator>-&gt;</operator><name>Prec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>exponent</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>Prec</name></name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>x</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>Prec</name></name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name><name>y</name><operator>-&gt;</operator><name>Prec</name></name></expr></argument>, <argument><expr><name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>VpGetSign</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>my</name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ind_x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>exponent</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ind_y</name> <operator>&lt;</operator> <name>my</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_y</name></expr>]</index></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>ind_x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>ind_x</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>VpNmlz</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>Exit</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpFrac y=%\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" x=%\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<return>return;</return>
</block_content>}</block></function>




<function><type><name>VP_EXPORT</name> <name>int</name></type>
<name>VpPower</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>SIGNED_VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>w1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Real</name> <modifier>*</modifier></type><name>w2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VpIsZero</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetOne</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>VpGetSign</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsNaN</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetNaN</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VpIsInf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetOne</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpSetInf</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>VpSetZero</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>VpIsPosInf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>exponent</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>Prec</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>VpSetOne</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BIGDECIMAL_POSITIVE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>Exit</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>Exit</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>VpSetSign</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>VpSetOne</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Exit</name>;</goto>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><name>w1</name> <operator>=</operator> <call><name>VpAlloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>y</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>BASE_FIG</name></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> <operator>=</operator> <call><name>VpAlloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>w1</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>BASE_FIG</name></expr></argument>, <argument><expr><literal type="string">"#0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ss</name> <operator>=</operator> <name>s</name></expr><operator>,</operator> <expr><operator>(</operator><name>s</name> <operator>+=</operator> <name>s</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpMult</name><argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <operator>(</operator><name>SIGNED_VALUE</name><operator>)</operator><name>ss</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpMult</name><argument_list>(<argument><expr><name>w2</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VpDivd</name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>VpConstOne</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpAsgn</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>Exit</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>gfDebug</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpPower y=%\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VPrint</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"VpPower x=%\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" n=%"</literal><name>PRIdVALUE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><name>VpFree</name><argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VpFree</name><argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>VpVarCheck</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>








<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>MaxPrec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR(VpVarCheck): Illegal Max. Precision(=%"</literal><name>PRIuSIZE</name><literal type="string">")\n"</literal></expr></argument>,
<argument><expr><name><name>v</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>Prec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>Prec</name></name> <operator>&gt;</operator> <name><name>v</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR(VpVarCheck): Illegal Precision(=%"</literal><name>PRIuSIZE</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>Prec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Max. Prec.=%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>MaxPrec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>Prec</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR(VpVarCheck): Illegal fraction\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Frac[%"</literal><name>PRIuSIZE</name><literal type="string">"]=%"</literal><name>PRIuBDIGIT</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>frac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Prec. =%"</literal><name>PRIuSIZE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>Prec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Exp. =%"</literal><name>PRIdVALUE</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>exponent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" BASE =%"</literal><name>PRIuBDIGIT</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
