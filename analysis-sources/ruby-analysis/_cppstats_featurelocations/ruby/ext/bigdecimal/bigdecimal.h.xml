<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\bigdecimal\bigdecimal.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_BIG_DECIMAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_BIG_DECIMAL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_NO_OLD_COMPATIBILITY</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RB_UNUSED_VAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_UNUSED_VAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x __attribute__ ((unused))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_UNUSED_VAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNREACHABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNREACHABLE</name></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BDIGIT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIZEOF_BDIGITS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BDIGIT_DBL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BDIGIT_DBL_SIGNED</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRI_BDIGIT_PREFIX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRI_BDIGIT_DBL_PREFIX</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INT64_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL_SIGNED</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_BDIGITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRI_LL_PREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_DBL_PREFIX</name></cpp:macro> <cpp:value>PRI_LL_PREFIX</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_DBL_PREFIX</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDIGIT_DBL_SIGNED</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_BDIGITS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_PREFIX</name></cpp:macro> <cpp:value>"h"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_BDIGIT_DBL_PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"d"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIiBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"i"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIoBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"o"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"u"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"x"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIXBDIGIT</name></cpp:macro> <cpp:value>PRI_BDIGIT_PREFIX"X"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"d"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIiBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"i"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIoBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"o"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"u"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"x"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIXBDIGIT_DBL</name></cpp:macro> <cpp:value>PRI_BDIGIT_DBL_PREFIX"X"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
} 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type>
<name>labs</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>const</specifier></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><name>x</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LLABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>LONG_LONG</name></type>
<name>llabs</name><parameter_list>(<parameter><decl><type><name>LONG_LONG</name> <specifier>const</specifier></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><name>x</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FINITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>finite</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>isnan</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isinf</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>isfinite</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ISFINITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ISFINITE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isfinite</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>finite(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FIX_CONST_VALUE_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__fcc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__fcc_version</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FCC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FCC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_CONST_VALUE_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((const VALUE *)(x))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_CONST_VALUE_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RB_ARRAY_CONST_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type>
<name>rb_array_const_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>FIX_CONST_VALUE_PTR</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><call><name>RBASIC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>RARRAY_EMBED_FLAG</name><operator>)</operator></expr> ?</condition><then>
<expr><call><name>RARRAY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>ary</name></name></expr> </then><else>: <expr><call><name>RARRAY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>ptr</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RARRAY_CONST_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_CONST_PTR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_array_const_ptr(a)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RARRAY_AREF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_AREF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RARRAY_CONST_PTR(a)[i])</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RB_SYM2STR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>rb_sym2str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_id2str</name><argument_list>(<argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ST2FIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RB_ST2FIX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ST2FIX</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LONG2FIX((long)(h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST2FIX</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ST2FIX(h)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>vabs</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vabs</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_VALUE</name> <operator>&lt;=</operator> <name>SIZEOF_INT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vabs</name></cpp:macro> <cpp:value>abs</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_VALUE</name> <operator>&lt;=</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vabs</name></cpp:macro> <cpp:value>labs</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_VALUE</name> <operator>&lt;=</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vabs</name></cpp:macro> <cpp:value>llabs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>VALUE</name></type> <name>rb_cBigDecimal</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal> <operator>||</operator> <name>SIZEOF_BDIGITS</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_COMPONENT_FIGURES</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_BASE</name></cpp:macro> <cpp:value>((BDIGIT)100000000000000000000000000000000000000U)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_BDIGITS</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_COMPONENT_FIGURES</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_BASE</name></cpp:macro> <cpp:value>((BDIGIT)10000000000000000000U)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_BDIGITS</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_COMPONENT_FIGURES</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_BASE</name></cpp:macro> <cpp:value>((BDIGIT)1000000000U)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_BDIGITS</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_COMPONENT_FIGURES</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_BASE</name></cpp:macro> <cpp:value>((BDIGIT)10000U)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_COMPONENT_FIGURES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_BASE</name></cpp:macro> <cpp:value>((BDIGIT)100U)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ_NaN</name></cpp:macro> <cpp:value>"NaN"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ_INF</name></cpp:macro> <cpp:value>"Infinity"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ_PINF</name></cpp:macro> <cpp:value>"+Infinity"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ_NINF</name></cpp:macro> <cpp:value>"-Infinity"</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_EXPORT</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_EXCEPTION_ALL</name></cpp:macro> <cpp:value>((unsigned short)0x00FF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_EXCEPTION_INFINITY</name></cpp:macro> <cpp:value>((unsigned short)0x0001)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_EXCEPTION_NaN</name></cpp:macro> <cpp:value>((unsigned short)0x0002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_EXCEPTION_UNDERFLOW</name></cpp:macro> <cpp:value>((unsigned short)0x0004)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_EXCEPTION_OVERFLOW</name></cpp:macro> <cpp:value>((unsigned short)0x0001)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_EXCEPTION_ZERODIVIDE</name></cpp:macro> <cpp:value>((unsigned short)0x0010)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_EXCEPTION_OP</name></cpp:macro> <cpp:value>((unsigned short)0x0020)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_EXCEPTION_MEMORY</name></cpp:macro> <cpp:value>((unsigned short)0x0040)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_EXCEPTION_MODE_DEFAULT</name></cpp:macro> <cpp:value>0U</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_ROUND_MODE</name></cpp:macro> <cpp:value>((unsigned short)0x0100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_ROUND_UP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_ROUND_DOWN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_ROUND_HALF_UP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_ROUND_HALF_DOWN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_ROUND_CEIL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_ROUND_FLOOR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_ROUND_HALF_EVEN</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMPD_ROUNDING_MODE_DEFAULT</name></cpp:macro> <cpp:value>VP_ROUND_HALF_UP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_SIGN_NaN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_SIGN_POSITIVE_ZERO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_SIGN_NEGATIVE_ZERO</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_SIGN_POSITIVE_FINITE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_SIGN_NEGATIVE_FINITE</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_SIGN_POSITIVE_INFINITE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP_SIGN_NEGATIVE_INFINITE</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLEXIBLE_ARRAY_SIZE</name></cpp:macro></cpp:define> 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STRICT_ANSI__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLEXIBLE_ARRAY_SIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLEXIBLE_ARRAY_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>size_t</name></type> <name>MaxPrec</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>size_t</name></type> <name>Prec</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>exponent</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>short</name></type> <name>sign</name></decl>;</decl_stmt> 









<decl_stmt><decl><type><name>short</name></type> <name>flag</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>BDIGIT</name></type> <name><name>frac</name><index>[<expr><name>FLEXIBLE_ARRAY_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 
}</block></struct></type> <name>Real</name>;</typedef>







<function_decl><type><name>VP_EXPORT</name> <name>Real</name> <modifier>*</modifier></type>
<name>VpNewRbClass</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VP_EXPORT</name> <name>Real</name> <modifier>*</modifier></type><name>VpCreateRbObject</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mx</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>BDIGIT</name></type>
<name>rmpd_base_value</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>RMPD_BASE</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>rmpd_component_figures</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>RMPD_COMPONENT_FIGURES</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>rmpd_double_figures</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">1</literal><operator>+</operator><name>DBL_DIG</name></expr>;</return> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpBaseFig</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rmpd_component_figures()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpDblFig</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rmpd_double_figures()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpBaseVal</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rmpd_base_value()</cpp:value></cpp:define>


<function_decl><type><name>VP_EXPORT</name> <name>double</name></type> <name>VpGetDoubleNaN</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>double</name></type> <name>VpGetDoublePosInf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>double</name></type> <name>VpGetDoubleNegInf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>double</name></type> <name>VpGetDoubleNegZero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>VP_EXPORT</name> <name>size_t</name></type> <name>VpGetPrecLimit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>size_t</name></type> <name>VpSetPrecLimit</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpIsRoundMode</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>unsigned</name> <name>short</name></type> <name>VpGetRoundMode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>unsigned</name> <name>short</name></type> <name>VpSetRoundMode</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpException</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>f</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>always</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
VP_EXPORT int VpIsNegDoubleZero(double v);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>VP_EXPORT</name> <name>size_t</name></type> <name>VpNumOfChars</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pszFmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>size_t</name></type> <name>VpInit</name><parameter_list>(<parameter><decl><type><name>BDIGIT</name></type> <name>BaseVal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>VpMemAlloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>void</name> <modifier>*</modifier></type><name>VpMemRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>void</name></type> <name>VpFree</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>pv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>Real</name> <modifier>*</modifier></type><name>VpAlloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>szVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>size_t</name></type> <name>VpAsgn</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>size_t</name></type> <name>VpAddSub</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>size_t</name></type> <name>VpMult</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>size_t</name></type> <name>VpDivd</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>r</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpComp</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>ssize_t</name></type> <name>VpExponent10</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>void</name></type> <name>VpSzMantissa</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpToSpecialString</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fPlus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>void</name></type> <name>VpToString</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fFmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fPlus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>void</name></type> <name>VpToFString</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fFmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fPlus</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpCtoV</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>int_chr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ni</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>frac</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp_chr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ne</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpVtoD</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>SIGNED_VALUE</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>void</name></type> <name>VpDtoV</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
VP_EXPORT void VpItoV(Real *m,S_INT ival);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpSqrt</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpActiveRound</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>il</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpMidRound</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpLeftRound</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>void</name></type> <name>VpFrac</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VP_EXPORT</name> <name>int</name></type> <name>VpPower</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>Real</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>SIGNED_VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>VP_EXPORT</name> <name>Real</name> <modifier>*</modifier></type><name>VpOne</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Abs</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;= 0)?(a):(-(a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(b):(a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpMaxPrec</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;MaxPrec)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpPrec</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;Prec)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpGetFlag</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;flag)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpGetSign</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)-&gt;sign&gt;0)?1:(-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpChangeSign</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if((s)&gt;0) (a)-&gt;sign=(short)Abs((ssize_t)(a)-&gt;sign);else (a)-&gt;sign=-(short)Abs((ssize_t)(a)-&gt;sign);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpSetSign</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if((s)&gt;0) (a)-&gt;sign=(short)VP_SIGN_POSITIVE_FINITE;else (a)-&gt;sign=(short)VP_SIGN_NEGATIVE_FINITE;}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpSetOne</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{(a)-&gt;Prec=(a)-&gt;exponent=(a)-&gt;frac[0]=1;(a)-&gt;sign=VP_SIGN_POSITIVE_FINITE;}</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpIsPosZero</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;sign==VP_SIGN_POSITIVE_ZERO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpIsNegZero</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;sign==VP_SIGN_NEGATIVE_ZERO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpIsZero</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VpIsPosZero(a) || VpIsNegZero(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpSetPosZero</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;frac[0]=0,(a)-&gt;Prec=1,(a)-&gt;sign=VP_SIGN_POSITIVE_ZERO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpSetNegZero</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;frac[0]=0,(a)-&gt;Prec=1,(a)-&gt;sign=VP_SIGN_NEGATIVE_ZERO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpSetZero</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(((s)&gt;0)?VpSetPosZero(a):VpSetNegZero(a))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpIsNaN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;sign==VP_SIGN_NaN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpSetNaN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;frac[0]=0,(a)-&gt;Prec=1,(a)-&gt;sign=VP_SIGN_NaN)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpIsPosInf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;sign==VP_SIGN_POSITIVE_INFINITE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpIsNegInf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;sign==VP_SIGN_NEGATIVE_INFINITE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpIsInf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VpIsPosInf(a) || VpIsNegInf(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpIsDef</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( !(VpIsNaN(a)||VpIsInf(a)) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpSetPosInf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;frac[0]=0,(a)-&gt;Prec=1,(a)-&gt;sign=VP_SIGN_POSITIVE_INFINITE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpSetNegInf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;frac[0]=0,(a)-&gt;Prec=1,(a)-&gt;sign=VP_SIGN_NEGATIVE_INFINITE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpSetInf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(((s)&gt;0)?VpSetPosInf(a):VpSetNegInf(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpHasVal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a-&gt;frac[0])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpIsOne</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a-&gt;Prec==1)&amp;&amp;(a-&gt;frac[0]==1)&amp;&amp;(a-&gt;exponent==1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VpExponent</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a-&gt;exponent)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIGDECIMAL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>VpVarCheck</name><parameter_list>(<parameter><decl><type><name>Real</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
{ 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
