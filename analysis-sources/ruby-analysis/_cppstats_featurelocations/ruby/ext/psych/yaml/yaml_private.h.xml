<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\psych\yaml\yaml_private.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_EXTCONF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> RUBY_EXTCONF_H</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;yaml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>yaml_malloc</name><argument_list>(<argument>size_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>yaml_realloc</name><argument_list>(<argument>void *ptr</argument>, <argument>size_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>yaml_char_t *</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>yaml_strdup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>yaml_char_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_parser_update_buffer</name><argument_list>(<argument>yaml_parser_t *parser</argument>, <argument>size_t length</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>yaml_parser_fetch_more_tokens</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_RAW_BUFFER_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_BUFFER_SIZE</name></cpp:macro> <cpp:value>(INPUT_RAW_BUFFER_SIZE*3)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_BUFFER_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_RAW_BUFFER_SIZE</name></cpp:macro> <cpp:value>(OUTPUT_BUFFER_SIZE*2+2)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FILE_SIZE</name></cpp:macro> <cpp:value>(~(size_t)0 / 2)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_STACK_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_QUEUE_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_STRING_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_INIT</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>buffer</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((buffer).start = (yaml_char_t *)yaml_malloc(size)) ? ((buffer).last = (buffer).pointer = (buffer).start, (buffer).end = (buffer).start+(size), 1) : ((context)-&gt;error = YAML_MEMORY_ERROR, 0))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_DEL</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>buffer</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yaml_free((buffer).start), (buffer).start = (buffer).pointer = (buffer).end = 0)</cpp:value></cpp:define>







<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>
}</block></struct></type> <name>yaml_string_t</name>;</typedef>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>yaml_string_extend</name><argument_list>(<argument><expr><name>yaml_char_t</name> <operator>*</operator><operator>*</operator><name>start</name></expr></argument>,
<argument><expr><name>yaml_char_t</name> <operator>*</operator><operator>*</operator><name>pointer</name></expr></argument>, <argument><expr><name>yaml_char_t</name> <operator>*</operator><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>yaml_string_join</name><argument_list>(
<argument><expr><name>yaml_char_t</name> <operator>*</operator><operator>*</operator><name>a_start</name></expr></argument>, <argument><expr><name>yaml_char_t</name> <operator>*</operator><operator>*</operator><name>a_pointer</name></expr></argument>, <argument><expr><name>yaml_char_t</name> <operator>*</operator><operator>*</operator><name>a_end</name></expr></argument>,
<argument><expr><name>yaml_char_t</name> <operator>*</operator><operator>*</operator><name>b_start</name></expr></argument>, <argument><expr><name>yaml_char_t</name> <operator>*</operator><operator>*</operator><name>b_pointer</name></expr></argument>, <argument><expr><name>yaml_char_t</name> <operator>*</operator><operator>*</operator><name>b_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL_STRING</name></cpp:macro> <cpp:value>{ NULL, NULL, NULL }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (string), (string)+(length), (string) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_ASSIGN</name><parameter_list>(<parameter><type><name>value</name></type></parameter>,<parameter><type><name>string</name></type></parameter>,<parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((value).start = (string), (value).end = (string)+(length), (value).pointer = (string))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_INIT</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>string</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((string).start = YAML_MALLOC(size)) ? ((string).pointer = (string).start, (string).end = (string).start+(size), memset((string).start, 0, (size)), 1) : ((context)-&gt;error = YAML_MEMORY_ERROR, 0))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_DEL</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yaml_free((string).start), (string).start = (string).pointer = (string).end = 0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_EXTEND</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((string).pointer+5 &lt; (string).end) || yaml_string_extend(&amp;(string).start, &amp;(string).pointer, &amp;(string).end)) ? 1 : ((context)-&gt;error = YAML_MEMORY_ERROR, 0))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((string).pointer = (string).start, memset((string).start, 0, (string).end-(string).start))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOIN</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>string_a</name></type></parameter>,<parameter><type><name>string_b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((yaml_string_join(&amp;(string_a).start, &amp;(string_a).pointer, &amp;(string_a).end, &amp;(string_b).start, &amp;(string_b).pointer, &amp;(string_b).end)) ? ((string_b).pointer = (string_b).start, 1) : ((context)-&gt;error = YAML_MEMORY_ERROR, 0))</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>octet</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((string).pointer[offset] == (yaml_char_t)(octet))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>octet</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_AT((string),(octet),0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ALPHA_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((string).pointer[offset] &gt;= (yaml_char_t) '0' &amp;&amp; (string).pointer[offset] &lt;= (yaml_char_t) '9') || ((string).pointer[offset] &gt;= (yaml_char_t) 'A' &amp;&amp; (string).pointer[offset] &lt;= (yaml_char_t) 'Z') || ((string).pointer[offset] &gt;= (yaml_char_t) 'a' &amp;&amp; (string).pointer[offset] &lt;= (yaml_char_t) 'z') || (string).pointer[offset] == '_' || (string).pointer[offset] == '-')</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ALPHA</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_ALPHA_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIGIT_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((string).pointer[offset] &gt;= (yaml_char_t) '0' &amp;&amp; (string).pointer[offset] &lt;= (yaml_char_t) '9'))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIGIT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_DIGIT_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AS_DIGIT_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((string).pointer[offset] - (yaml_char_t) '0')</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AS_DIGIT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AS_DIGIT_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_HEX_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((string).pointer[offset] &gt;= (yaml_char_t) '0' &amp;&amp; (string).pointer[offset] &lt;= (yaml_char_t) '9') || ((string).pointer[offset] &gt;= (yaml_char_t) 'A' &amp;&amp; (string).pointer[offset] &lt;= (yaml_char_t) 'F') || ((string).pointer[offset] &gt;= (yaml_char_t) 'a' &amp;&amp; (string).pointer[offset] &lt;= (yaml_char_t) 'f'))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_HEX</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_HEX_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AS_HEX_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((string).pointer[offset] &gt;= (yaml_char_t) 'A' &amp;&amp; (string).pointer[offset] &lt;= (yaml_char_t) 'F') ? ((string).pointer[offset] - (yaml_char_t) 'A' + 10) : ((string).pointer[offset] &gt;= (yaml_char_t) 'a' &amp;&amp; (string).pointer[offset] &lt;= (yaml_char_t) 'f') ? ((string).pointer[offset] - (yaml_char_t) 'a' + 10) : ((string).pointer[offset] - (yaml_char_t) '0'))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AS_HEX</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AS_HEX_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ASCII_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((string).pointer[offset] &lt;= (yaml_char_t) '\x7F')</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ASCII</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_ASCII_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_PRINTABLE_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((string).pointer[offset] == 0x0A) || ((string).pointer[offset] &gt;= 0x20 &amp;&amp; (string).pointer[offset] &lt;= 0x7E) || ((string).pointer[offset] == 0xC2 &amp;&amp; (string).pointer[offset+1] &gt;= 0xA0) || ((string).pointer[offset] &gt; 0xC2 &amp;&amp; (string).pointer[offset] &lt; 0xED) || ((string).pointer[offset] == 0xED &amp;&amp; (string).pointer[offset+1] &lt; 0xA0) || ((string).pointer[offset] == 0xEE) || ((string).pointer[offset] == 0xEF &amp;&amp; !((string).pointer[offset+1] == 0xBB &amp;&amp; (string).pointer[offset+2] == 0xBF) &amp;&amp; !((string).pointer[offset+1] == 0xBF &amp;&amp; ((string).pointer[offset+2] == 0xBE || (string).pointer[offset+2] == 0xBF))))</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_PRINTABLE</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_PRINTABLE_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_Z_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_AT((string),'\0',(offset))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_Z</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_Z_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BOM_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CHECK_AT((string),'\xEF',(offset)) &amp;&amp; CHECK_AT((string),'\xBB',(offset)+1) &amp;&amp; CHECK_AT((string),'\xBF',(offset)+2))</cpp:value></cpp:define> 




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BOM</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_BOM_AT(string,0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SPACE_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_AT((string),' ',(offset))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SPACE</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_SPACE_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TAB_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CHECK_AT((string),'\t',(offset))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TAB</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_TAB_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BLANK_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(IS_SPACE_AT((string),(offset)) || IS_TAB_AT((string),(offset)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BLANK</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_BLANK_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BREAK_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CHECK_AT((string),'\r',(offset)) || CHECK_AT((string),'\n',(offset)) || (CHECK_AT((string),'\xC2',(offset)) &amp;&amp; CHECK_AT((string),'\x85',(offset)+1)) || (CHECK_AT((string),'\xE2',(offset)) &amp;&amp; CHECK_AT((string),'\x80',(offset)+1) &amp;&amp; CHECK_AT((string),'\xA8',(offset)+2)) || (CHECK_AT((string),'\xE2',(offset)) &amp;&amp; CHECK_AT((string),'\x80',(offset)+1) &amp;&amp; CHECK_AT((string),'\xA9',(offset)+2)))</cpp:value></cpp:define> 











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BREAK</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_BREAK_AT((string),0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CRLF_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CHECK_AT((string),'\r',(offset)) &amp;&amp; CHECK_AT((string),'\n',(offset)+1))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CRLF</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_CRLF_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BREAKZ_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(IS_BREAK_AT((string),(offset)) || IS_Z_AT((string),(offset)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BREAKZ</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_BREAKZ_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SPACEZ_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(IS_SPACE_AT((string),(offset)) || IS_BREAKZ_AT((string),(offset)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SPACEZ</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_SPACEZ_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BLANKZ_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(IS_BLANK_AT((string),(offset)) || IS_BREAKZ_AT((string),(offset)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BLANKZ</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IS_BLANKZ_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_AT</name><parameter_list>(<parameter><type><name>string</name></type></parameter>,<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((string).pointer[offset] &amp; 0x80) == 0x00 ? 1 : ((string).pointer[offset] &amp; 0xE0) == 0xC0 ? 2 : ((string).pointer[offset] &amp; 0xF0) == 0xE0 ? 3 : ((string).pointer[offset] &amp; 0xF8) == 0xF0 ? 4 : 0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>WIDTH_AT((string),0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((string).pointer += WIDTH((string)))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY</name><parameter_list>(<parameter><type><name>string_a</name></type></parameter>,<parameter><type><name>string_b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*(string_b).pointer &amp; 0x80) == 0x00 ? (*((string_a).pointer++) = *((string_b).pointer++)) : (*(string_b).pointer &amp; 0xE0) == 0xC0 ? (*((string_a).pointer++) = *((string_b).pointer++), *((string_a).pointer++) = *((string_b).pointer++)) : (*(string_b).pointer &amp; 0xF0) == 0xE0 ? (*((string_a).pointer++) = *((string_b).pointer++), *((string_a).pointer++) = *((string_b).pointer++), *((string_a).pointer++) = *((string_b).pointer++)) : (*(string_b).pointer &amp; 0xF8) == 0xF0 ? (*((string_a).pointer++) = *((string_b).pointer++), *((string_a).pointer++) = *((string_b).pointer++), *((string_a).pointer++) = *((string_b).pointer++), *((string_a).pointer++) = *((string_b).pointer++)) : 0)</cpp:value></cpp:define>



















<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>yaml_stack_extend</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>start</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>top</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>yaml_queue_extend</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>start</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>head</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>tail</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_INIT</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>stack</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((stack).start = (type)yaml_malloc(INITIAL_STACK_SIZE*sizeof(*(stack).start))) ? ((stack).top = (stack).start, (stack).end = (stack).start+INITIAL_STACK_SIZE, 1) : ((context)-&gt;error = YAML_MEMORY_ERROR, 0))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_DEL</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>stack</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yaml_free((stack).start), (stack).start = (stack).top = (stack).end = 0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_EMPTY</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>stack</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((stack).start == (stack).top)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_LIMIT</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>stack</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((stack).top - (stack).start &lt; (size) ? 1 : ((context)-&gt;error = YAML_MEMORY_ERROR, 0))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>stack</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((stack).top != (stack).end || yaml_stack_extend((void **)&amp;(stack).start, (void **)&amp;(stack).top, (void **)&amp;(stack).end)) ? (*((stack).top++) = value, 1) : ((context)-&gt;error = YAML_MEMORY_ERROR, 0))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>stack</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(--(stack).top))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_INIT</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>queue</name></type></parameter>,<parameter><type><name>size</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((queue).start = (type)yaml_malloc((size)*sizeof(*(queue).start))) ? ((queue).head = (queue).tail = (queue).start, (queue).end = (queue).start+(size), 1) : ((context)-&gt;error = YAML_MEMORY_ERROR, 0))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_DEL</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>queue</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yaml_free((queue).start), (queue).start = (queue).head = (queue).tail = (queue).end = 0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_EMPTY</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>queue</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((queue).head == (queue).tail)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENQUEUE</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>queue</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((queue).tail != (queue).end || yaml_queue_extend((void **)&amp;(queue).start, (void **)&amp;(queue).head, (void **)&amp;(queue).tail, (void **)&amp;(queue).end)) ? (*((queue).tail++) = value, 1) : ((context)-&gt;error = YAML_MEMORY_ERROR, 0))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEQUEUE</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>queue</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((queue).head++))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUEUE_INSERT</name><parameter_list>(<parameter><type><name>context</name></type></parameter>,<parameter><type><name>queue</name></type></parameter>,<parameter><type><name>index</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((queue).tail != (queue).end || yaml_queue_extend((void **)&amp;(queue).start, (void **)&amp;(queue).head, (void **)&amp;(queue).tail, (void **)&amp;(queue).end)) ? (memmove((queue).head+(index)+1,(queue).head+(index), ((queue).tail-(queue).head-(index))*sizeof(*(queue).start)), *((queue).head+(index)) = value, (queue).tail++, 1) : ((context)-&gt;error = YAML_MEMORY_ERROR, 0))</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOKEN_INIT</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>token_type</name></type></parameter>,<parameter><type><name>token_start_mark</name></type></parameter>,<parameter><type><name>token_end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(memset(&amp;(token), 0, sizeof(yaml_token_t)), (token).type = (token_type), (token).start_mark = (token_start_mark), (token).end_mark = (token_end_mark))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_START_TOKEN_INIT</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>token_encoding</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(TOKEN_INIT((token),YAML_STREAM_START_TOKEN,(start_mark),(end_mark)), (token).data.stream_start.encoding = (token_encoding))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_END_TOKEN_INIT</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(TOKEN_INIT((token),YAML_STREAM_END_TOKEN,(start_mark),(end_mark)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIAS_TOKEN_INIT</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>token_value</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(TOKEN_INIT((token),YAML_ALIAS_TOKEN,(start_mark),(end_mark)), (token).data.alias.value = (token_value))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANCHOR_TOKEN_INIT</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>token_value</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(TOKEN_INIT((token),YAML_ANCHOR_TOKEN,(start_mark),(end_mark)), (token).data.anchor.value = (token_value))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAG_TOKEN_INIT</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>token_handle</name></type></parameter>,<parameter><type><name>token_suffix</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(TOKEN_INIT((token),YAML_TAG_TOKEN,(start_mark),(end_mark)), (token).data.tag.handle = (token_handle), (token).data.tag.suffix = (token_suffix))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALAR_TOKEN_INIT</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>token_value</name></type></parameter>,<parameter><type><name>token_length</name></type></parameter>,<parameter><type><name>token_style</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(TOKEN_INIT((token),YAML_SCALAR_TOKEN,(start_mark),(end_mark)), (token).data.scalar.value = (token_value), (token).data.scalar.length = (token_length), (token).data.scalar.style = (token_style))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERSION_DIRECTIVE_TOKEN_INIT</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>token_major</name></type></parameter>,<parameter><type><name>token_minor</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(TOKEN_INIT((token),YAML_VERSION_DIRECTIVE_TOKEN,(start_mark),(end_mark)), (token).data.version_directive.major = (token_major), (token).data.version_directive.minor = (token_minor))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAG_DIRECTIVE_TOKEN_INIT</name><parameter_list>(<parameter><type><name>token</name></type></parameter>,<parameter><type><name>token_handle</name></type></parameter>,<parameter><type><name>token_prefix</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(TOKEN_INIT((token),YAML_TAG_DIRECTIVE_TOKEN,(start_mark),(end_mark)), (token).data.tag_directive.handle = (token_handle), (token).data.tag_directive.prefix = (token_prefix))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>event_type</name></type></parameter>,<parameter><type><name>event_start_mark</name></type></parameter>,<parameter><type><name>event_end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(memset(&amp;(event), 0, sizeof(yaml_event_t)), (event).type = (event_type), (event).start_mark = (event_start_mark), (event).end_mark = (event_end_mark))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_START_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>event_encoding</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EVENT_INIT((event),YAML_STREAM_START_EVENT,(start_mark),(end_mark)), (event).data.stream_start.encoding = (event_encoding))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_END_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EVENT_INIT((event),YAML_STREAM_END_EVENT,(start_mark),(end_mark)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCUMENT_START_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>event_version_directive</name></type></parameter>, <parameter><type><name>event_tag_directives_start</name></type></parameter>,<parameter><type><name>event_tag_directives_end</name></type></parameter>,<parameter><type><name>event_implicit</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EVENT_INIT((event),YAML_DOCUMENT_START_EVENT,(start_mark),(end_mark)), (event).data.document_start.version_directive = (event_version_directive), (event).data.document_start.tag_directives.start = (event_tag_directives_start), (event).data.document_start.tag_directives.end = (event_tag_directives_end), (event).data.document_start.implicit = (event_implicit))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCUMENT_END_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>event_implicit</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EVENT_INIT((event),YAML_DOCUMENT_END_EVENT,(start_mark),(end_mark)), (event).data.document_end.implicit = (event_implicit))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIAS_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>event_anchor</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EVENT_INIT((event),YAML_ALIAS_EVENT,(start_mark),(end_mark)), (event).data.alias.anchor = (event_anchor))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALAR_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>event_anchor</name></type></parameter>,<parameter><type><name>event_tag</name></type></parameter>,<parameter><type><name>event_value</name></type></parameter>,<parameter><type><name>event_length</name></type></parameter>, <parameter><type><name>event_plain_implicit</name></type></parameter>, <parameter><type><name>event_quoted_implicit</name></type></parameter>,<parameter><type><name>event_style</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EVENT_INIT((event),YAML_SCALAR_EVENT,(start_mark),(end_mark)), (event).data.scalar.anchor = (event_anchor), (event).data.scalar.tag = (event_tag), (event).data.scalar.value = (event_value), (event).data.scalar.length = (event_length), (event).data.scalar.plain_implicit = (event_plain_implicit), (event).data.scalar.quoted_implicit = (event_quoted_implicit), (event).data.scalar.style = (event_style))</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQUENCE_START_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>event_anchor</name></type></parameter>,<parameter><type><name>event_tag</name></type></parameter>, <parameter><type><name>event_implicit</name></type></parameter>,<parameter><type><name>event_style</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EVENT_INIT((event),YAML_SEQUENCE_START_EVENT,(start_mark),(end_mark)), (event).data.sequence_start.anchor = (event_anchor), (event).data.sequence_start.tag = (event_tag), (event).data.sequence_start.implicit = (event_implicit), (event).data.sequence_start.style = (event_style))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQUENCE_END_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EVENT_INIT((event),YAML_SEQUENCE_END_EVENT,(start_mark),(end_mark)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAPPING_START_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>event_anchor</name></type></parameter>,<parameter><type><name>event_tag</name></type></parameter>, <parameter><type><name>event_implicit</name></type></parameter>,<parameter><type><name>event_style</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EVENT_INIT((event),YAML_MAPPING_START_EVENT,(start_mark),(end_mark)), (event).data.mapping_start.anchor = (event_anchor), (event).data.mapping_start.tag = (event_tag), (event).data.mapping_start.implicit = (event_implicit), (event).data.mapping_start.style = (event_style))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAPPING_END_EVENT_INIT</name><parameter_list>(<parameter><type><name>event</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EVENT_INIT((event),YAML_MAPPING_END_EVENT,(start_mark),(end_mark)))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCUMENT_INIT</name><parameter_list>(<parameter><type><name>document</name></type></parameter>,<parameter><type><name>document_nodes_start</name></type></parameter>,<parameter><type><name>document_nodes_end</name></type></parameter>, <parameter><type><name>document_version_directive</name></type></parameter>,<parameter><type><name>document_tag_directives_start</name></type></parameter>, <parameter><type><name>document_tag_directives_end</name></type></parameter>,<parameter><type><name>document_start_implicit</name></type></parameter>, <parameter><type><name>document_end_implicit</name></type></parameter>,<parameter><type><name>document_start_mark</name></type></parameter>,<parameter><type><name>document_end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(memset(&amp;(document), 0, sizeof(yaml_document_t)), (document).nodes.start = (document_nodes_start), (document).nodes.end = (document_nodes_end), (document).nodes.top = (document_nodes_start), (document).version_directive = (document_version_directive), (document).tag_directives.start = (document_tag_directives_start), (document).tag_directives.end = (document_tag_directives_end), (document).start_implicit = (document_start_implicit), (document).end_implicit = (document_end_implicit), (document).start_mark = (document_start_mark), (document).end_mark = (document_end_mark))</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NODE_INIT</name><parameter_list>(<parameter><type><name>node</name></type></parameter>,<parameter><type><name>node_type</name></type></parameter>,<parameter><type><name>node_tag</name></type></parameter>,<parameter><type><name>node_start_mark</name></type></parameter>,<parameter><type><name>node_end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(memset(&amp;(node), 0, sizeof(yaml_node_t)), (node).type = (node_type), (node).tag = (node_tag), (node).start_mark = (node_start_mark), (node).end_mark = (node_end_mark))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALAR_NODE_INIT</name><parameter_list>(<parameter><type><name>node</name></type></parameter>,<parameter><type><name>node_tag</name></type></parameter>,<parameter><type><name>node_value</name></type></parameter>,<parameter><type><name>node_length</name></type></parameter>, <parameter><type><name>node_style</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(NODE_INIT((node),YAML_SCALAR_NODE,(node_tag),(start_mark),(end_mark)), (node).data.scalar.value = (node_value), (node).data.scalar.length = (node_length), (node).data.scalar.style = (node_style))</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQUENCE_NODE_INIT</name><parameter_list>(<parameter><type><name>node</name></type></parameter>,<parameter><type><name>node_tag</name></type></parameter>,<parameter><type><name>node_items_start</name></type></parameter>,<parameter><type><name>node_items_end</name></type></parameter>, <parameter><type><name>node_style</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(NODE_INIT((node),YAML_SEQUENCE_NODE,(node_tag),(start_mark),(end_mark)), (node).data.sequence.items.start = (node_items_start), (node).data.sequence.items.end = (node_items_end), (node).data.sequence.items.top = (node_items_start), (node).data.sequence.style = (node_style))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAPPING_NODE_INIT</name><parameter_list>(<parameter><type><name>node</name></type></parameter>,<parameter><type><name>node_tag</name></type></parameter>,<parameter><type><name>node_pairs_start</name></type></parameter>,<parameter><type><name>node_pairs_end</name></type></parameter>, <parameter><type><name>node_style</name></type></parameter>,<parameter><type><name>start_mark</name></type></parameter>,<parameter><type><name>end_mark</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(NODE_INIT((node),YAML_MAPPING_NODE,(node_tag),(start_mark),(end_mark)), (node).data.mapping.pairs.start = (node_pairs_start), (node).data.mapping.pairs.end = (node_pairs_end), (node).data.mapping.pairs.top = (node_pairs_start), (node).data.mapping.style = (node_style))</cpp:value></cpp:define>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASATTRIBUTE_UNUSED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HASATTRIBUTE_UNUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__attribute__unused__</name></cpp:macro> <cpp:value>__attribute__((__unused__))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__attribute__unused__</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a __attribute__unused__</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_PARAM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(a);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_PARAM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (0) (void)(a);</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_MALLOC_STATIC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(type*)yaml_malloc(sizeof(type))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_MALLOC</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(yaml_char_t *)yaml_malloc(size)</cpp:value></cpp:define>
</unit>
