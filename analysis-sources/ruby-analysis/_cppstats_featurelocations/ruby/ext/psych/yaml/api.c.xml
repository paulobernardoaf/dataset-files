<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\psych\yaml\api.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yaml_private.h"</cpp:file></cpp:include>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro>
<macro><name>yaml_get_version_string</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><name>YAML_VERSION_STRING</name></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_get_version</name><argument_list>(<argument>int *major</argument>, <argument>int *minor</argument>, <argument>int *patch</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>major</name> <operator>=</operator> <name>YAML_VERSION_MAJOR</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>minor</name> <operator>=</operator> <name>YAML_VERSION_MINOR</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>patch</name> <operator>=</operator> <name>YAML_VERSION_PATCH</name></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>yaml_malloc</name><argument_list>(<argument>size_t size</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro>
<macro><name>yaml_realloc</name><argument_list>(<argument>void *ptr</argument>, <argument>size_t size</argument>)</argument_list></macro>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>malloc</name><argument_list>(<argument><expr><ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_free</name><argument_list>(<argument>void *ptr</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>yaml_char_t *</argument>)</argument_list></macro>
<macro><name>yaml_strdup</name><argument_list>(<argument>const yaml_char_t *str</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_string_extend</name><argument_list>(<argument>yaml_char_t **start</argument>,
<argument>yaml_char_t **pointer</argument>, <argument>yaml_char_t **end</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>new_start</name> <init>= <expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><call><name>yaml_realloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>*</operator><name>start</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>end</name> <operator>-</operator> <operator>*</operator><name>start</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_start</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>new_start</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>end</name> <operator>-</operator> <operator>*</operator><name>start</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>*</operator><name>end</name> <operator>-</operator> <operator>*</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pointer</name> <operator>=</operator> <name>new_start</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>pointer</name> <operator>-</operator> <operator>*</operator><name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>new_start</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>end</name> <operator>-</operator> <operator>*</operator><name>start</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>new_start</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_string_join</name><argument_list>(
<argument>yaml_char_t **a_start</argument>, <argument>yaml_char_t **a_pointer</argument>, <argument>yaml_char_t **a_end</argument>,
<argument>yaml_char_t **b_start</argument>, <argument>yaml_char_t **b_pointer</argument>, <argument>SHIM(yaml_char_t **b_end)</argument>)</argument_list></macro>
<block>{<block_content>
<macro><name>UNUSED_PARAM</name><argument_list>(<argument>b_end</argument>)</argument_list></macro>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b_start</name> <operator>==</operator> <operator>*</operator><name>b_pointer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>a_end</name> <operator>-</operator> <operator>*</operator><name>a_pointer</name> <operator>&lt;=</operator> <operator>*</operator><name>b_pointer</name> <operator>-</operator> <operator>*</operator><name>b_start</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_string_extend</name><argument_list>(<argument><expr><name>a_start</name></expr></argument>, <argument><expr><name>a_pointer</name></expr></argument>, <argument><expr><name>a_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>a_pointer</name></expr></argument>, <argument><expr><operator>*</operator><name>b_start</name></expr></argument>, <argument><expr><operator>*</operator><name>b_pointer</name> <operator>-</operator> <operator>*</operator><name>b_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>a_pointer</name> <operator>+=</operator> <operator>*</operator><name>b_pointer</name> <operator>-</operator> <operator>*</operator><name>b_start</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_stack_extend</name><argument_list>(<argument>void **start</argument>, <argument>void **top</argument>, <argument>void **end</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_start</name> <init>= <expr><call><name>yaml_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>end</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>start</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_start</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>top</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>new_start</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>top</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>new_start</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>end</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>start</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>new_start</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_queue_extend</name><argument_list>(<argument>void **start</argument>, <argument>void **head</argument>, <argument>void **tail</argument>, <argument>void **end</argument>)</argument_list></macro>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>start</name> <operator>==</operator> <operator>*</operator><name>head</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tail</name> <operator>==</operator> <operator>*</operator><name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_start</name> <init>= <expr><call><name>yaml_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>end</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>start</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_start</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>new_start</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>head</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>new_start</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>tail</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>new_start</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>end</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>start</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>new_start</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name> <operator>==</operator> <operator>*</operator><name>end</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>head</name> <operator>!=</operator> <operator>*</operator><name>tail</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>*</operator><name>start</name></expr></argument>, <argument><expr><operator>*</operator><name>head</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>tail</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>tail</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>head</name> <operator>+</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <operator>*</operator><name>start</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>






<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_parser_initialize</name><argument_list>(<argument>yaml_parser_t *parser</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_parser_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BUFFER_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>, <argument><expr><name>INPUT_RAW_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BUFFER_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>INPUT_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>INITIAL_QUEUE_SIZE</name></expr></argument>, <argument><expr><name>yaml_token_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name></name></expr></argument>, <argument><expr><name>yaml_simple_key_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>yaml_parser_state_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>, <argument><expr><name>yaml_mark_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>, <argument><expr><name>yaml_tag_directive_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>BUFFER_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFFER_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QUEUE_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_parser_delete</name><argument_list>(<argument>yaml_parser_t *parser</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BUFFER_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFFER_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yaml_token_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>DEQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>QUEUE_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>STACK_EMPTY</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>tag_directive</name> <init>= <expr><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_parser_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_string_read_handler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size_read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><operator>(</operator><name>yaml_parser_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>current</name></name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size_read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>end</name></name>
<operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>current</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>current</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>current</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size_read</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_file_read_handler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size_read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><operator>(</operator><name>yaml_parser_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>size_read</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name>ferror</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_parser_set_input_string</name><argument_list>(<argument>yaml_parser_t *parser</argument>,
<argument>const unsigned char *input</argument>, <argument>size_t size</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>read_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>read_handler</name></name> <operator>=</operator> <name>yaml_string_read_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>read_handler_data</name></name> <operator>=</operator> <name>parser</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>string</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>input</name><operator>+</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_parser_set_input_file</name><argument_list>(<argument>yaml_parser_t *parser</argument>, <argument>FILE *file</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>read_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>read_handler</name></name> <operator>=</operator> <name>yaml_file_read_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>read_handler_data</name></name> <operator>=</operator> <name>parser</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>input</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_parser_set_input</name><argument_list>(<argument>yaml_parser_t *parser</argument>,
<argument>yaml_read_handler_t *handler</argument>, <argument>void *data</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>read_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>read_handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>read_handler_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_parser_set_encoding</name><argument_list>(<argument>yaml_parser_t *parser</argument>, <argument>yaml_encoding_t encoding</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_emitter_initialize</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_emitter_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BUFFER_INIT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>OUTPUT_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BUFFER_INIT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>, <argument><expr><name>OUTPUT_RAW_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>yaml_emitter_state_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QUEUE_INIT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>INITIAL_QUEUE_SIZE</name></expr></argument>, <argument><expr><name>yaml_event_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>, <argument><expr><name>yaml_tag_directive_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>BUFFER_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFFER_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>QUEUE_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_emitter_delete</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>BUFFER_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUFFER_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yaml_event_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>DEQUEUE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>QUEUE_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>STACK_EMPTY</name><argument_list>(<argument><expr><name>empty</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>tag_directive</name> <init>= <expr><call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>anchors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_emitter_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_string_write_handler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name> <init>= <expr><operator>(</operator><name>yaml_emitter_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size</name></name> <operator>-</operator> <operator>*</operator><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size_written</name></name>
<operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>buffer</name></name>
<operator>+</operator> <operator>*</operator><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size_written</name></name></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size</name></name>
<operator>-</operator> <operator>*</operator><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size_written</name></name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>buffer</name></name>
<operator>+</operator> <operator>*</operator><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size_written</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size_written</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_file_write_handler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name> <init>= <expr><operator>(</operator><name>yaml_emitter_t</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_emitter_set_output_string</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>,
<argument>unsigned char *output</argument>, <argument>size_t size</argument>, <argument>size_t *size_written</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>write_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_handler</name></name> <operator>=</operator> <name>yaml_string_write_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_handler_data</name></name> <operator>=</operator> <name>emitter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>string</name><operator>.</operator><name>size_written</name></name> <operator>=</operator> <name>size_written</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size_written</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_emitter_set_output_file</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>FILE *file</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>write_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_handler</name></name> <operator>=</operator> <name>yaml_file_write_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_handler_data</name></name> <operator>=</operator> <name>emitter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>output</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_emitter_set_output</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>,
<argument>yaml_write_handler_t *handler</argument>, <argument>void *data</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>write_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_handler_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_emitter_set_encoding</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>yaml_encoding_t encoding</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_emitter_set_canonical</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>int canonical</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>=</operator> <operator>(</operator><name>canonical</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_emitter_set_indent</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>int indent</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>best_indent</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>indent</name> <operator>&amp;&amp;</operator> <name>indent</name> <operator>&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr> ?</condition><then> <expr><name>indent</name></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_emitter_set_width</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>int width</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_emitter_set_unicode</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>int unicode</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>unicode</name></name> <operator>=</operator> <operator>(</operator><name>unicode</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_emitter_set_break</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>yaml_break_t line_break</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>line_break</name></name> <operator>=</operator> <name>line_break</name></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_token_delete</name><argument_list>(<argument>yaml_token_t *token</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<switch>switch <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>YAML_TAG_DIRECTIVE_TOKEN</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tag_directive</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tag_directive</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_ALIAS_TOKEN</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>alias</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_ANCHOR_TOKEN</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>anchor</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_TAG_TOKEN</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tag</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tag</name><operator>.</operator><name>suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_SCALAR_TOKEN</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_token_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_check_utf8</name><parameter_list>(<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>start</name><operator>+</operator><name>length</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>pointer</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pointer</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>octet</name> <operator>=</operator> <name><name>pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pointer</name><operator>+</operator><name>width</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>octet</name> <operator>=</operator> <name><name>pointer</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>width</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>width</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>width</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&gt;=</operator> <literal type="number">0x800</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>width</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pointer</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_stream_start_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>,
<argument>yaml_encoding_t encoding</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>STREAM_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_stream_end_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>STREAM_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_document_start_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>,
<argument>yaml_version_directive_t *version_directive</argument>,
<argument>yaml_tag_directive_t *tag_directives_start</argument>,
<argument>yaml_tag_directive_t *tag_directives_end</argument>,
<argument>int implicit</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_error_type_t</name></type> <name>error</name></decl>;</decl_stmt>
}</block> <decl><name>context</name></decl>;</struct>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_version_directive_t</name> <modifier>*</modifier></type><name>version_directive_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>
}</block> <decl><name>tag_directives_copy</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>value</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>tag_directives_start</name> <operator>&amp;&amp;</operator> <name>tag_directives_end</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>tag_directives_start</name> <operator>==</operator> <name>tag_directives_end</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>version_directive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>version_directive_copy</name> <operator>=</operator> <call><name>YAML_MALLOC_STATIC</name><argument_list>(<argument><expr><name>yaml_version_directive_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>version_directive_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>version_directive_copy</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <name><name>version_directive</name><operator>-&gt;</operator><name>major</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version_directive_copy</name><operator>-&gt;</operator><name>minor</name></name> <operator>=</operator> <name><name>version_directive</name><operator>-&gt;</operator><name>minor</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag_directives_start</name> <operator>!=</operator> <name>tag_directives_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>tag_directive</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>tag_directives_copy</name></expr></argument>, <argument><expr><name>yaml_tag_directive_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name>tag_directives_start</name></expr>;</init>
<condition><expr><name>tag_directive</name> <operator>!=</operator> <name>tag_directives_end</name></expr>;</condition> <incr><expr><name>tag_directive</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>value</name><operator>.</operator><name>handle</name></name> <operator>||</operator> <operator>!</operator><name><name>value</name><operator>.</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>tag_directives_copy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DOCUMENT_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>version_directive_copy</name></expr></argument>,
<argument><expr><name><name>tag_directives_copy</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>tag_directives_copy</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>implicit</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>version_directive_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>STACK_EMPTY</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>tag_directives_copy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>value</name> <init>= <expr><call><name>POP</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>tag_directives_copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>tag_directives_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_document_end_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>, <argument>int implicit</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DOCUMENT_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>implicit</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_alias_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>, <argument>yaml_char_t *anchor</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>anchor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>anchor_copy</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anchor_copy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALIAS_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor_copy</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_scalar_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>,
<argument>yaml_char_t *anchor</argument>, <argument>yaml_char_t *tag</argument>,
<argument>yaml_char_t *value</argument>, <argument>int length</argument>,
<argument>int plain_implicit</argument>, <argument>int quoted_implicit</argument>,
<argument>yaml_scalar_style_t style</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>anchor</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>anchor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>anchor_copy</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anchor_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tag_copy</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value_copy</name> <operator>=</operator> <call><name>YAML_MALLOC</name><argument_list>(<argument><expr><name>length</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>value_copy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_copy</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SCALAR_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor_copy</name></expr></argument>, <argument><expr><name>tag_copy</name></expr></argument>, <argument><expr><name>value_copy</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
<argument><expr><name>plain_implicit</name></expr></argument>, <argument><expr><name>quoted_implicit</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>anchor_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>value_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_sequence_start_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>,
<argument>yaml_char_t *anchor</argument>, <argument>yaml_char_t *tag</argument>, <argument>int implicit</argument>,
<argument>yaml_sequence_style_t style</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>anchor</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>anchor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>anchor_copy</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anchor_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tag_copy</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SEQUENCE_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor_copy</name></expr></argument>, <argument><expr><name>tag_copy</name></expr></argument>,
<argument><expr><name>implicit</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>anchor_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_sequence_end_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SEQUENCE_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_mapping_start_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>,
<argument>yaml_char_t *anchor</argument>, <argument>yaml_char_t *tag</argument>, <argument>int implicit</argument>,
<argument>yaml_mapping_style_t style</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>anchor</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>anchor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>anchor_copy</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anchor_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tag_copy</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MAPPING_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor_copy</name></expr></argument>, <argument><expr><name>tag_copy</name></expr></argument>,
<argument><expr><name>implicit</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>anchor_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_mapping_end_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>MAPPING_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_event_delete</name><argument_list>(<argument>yaml_event_t *event</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>tag_directive</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>YAML_DOCUMENT_START_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>version_directive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>;</init>
<condition><expr><name>tag_directive</name> <operator>!=</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>end</name></name></expr>;</condition>
<incr><expr><name>tag_directive</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_ALIAS_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>alias</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_SCALAR_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_SEQUENCE_START_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_MAPPING_START_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_event_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_document_initialize</name><argument_list>(<argument>yaml_document_t *document</argument>,
<argument>yaml_version_directive_t *version_directive</argument>,
<argument>yaml_tag_directive_t *tag_directives_start</argument>,
<argument>yaml_tag_directive_t *tag_directives_end</argument>,
<argument>int start_implicit</argument>, <argument>int end_implicit</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_error_type_t</name></type> <name>error</name></decl>;</decl_stmt>
}</block> <decl><name>context</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_node_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_node_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_node_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>
}</block> <decl><name>nodes</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>yaml_version_directive_t</name> <modifier>*</modifier></type><name>version_directive_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>
}</block> <decl><name>tag_directives_copy</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>value</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>tag_directives_start</name> <operator>&amp;&amp;</operator> <name>tag_directives_end</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>tag_directives_start</name> <operator>==</operator> <name>tag_directives_end</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>yaml_node_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version_directive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>version_directive_copy</name> <operator>=</operator> <call><name>YAML_MALLOC_STATIC</name><argument_list>(<argument><expr><name>yaml_version_directive_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>version_directive_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>version_directive_copy</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <name><name>version_directive</name><operator>-&gt;</operator><name>major</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version_directive_copy</name><operator>-&gt;</operator><name>minor</name></name> <operator>=</operator> <name><name>version_directive</name><operator>-&gt;</operator><name>minor</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag_directives_start</name> <operator>!=</operator> <name>tag_directives_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>tag_directive</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>tag_directives_copy</name></expr></argument>, <argument><expr><name>yaml_tag_directive_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name>tag_directives_start</name></expr>;</init>
<condition><expr><name>tag_directive</name> <operator>!=</operator> <name>tag_directives_end</name></expr>;</condition> <incr><expr><name>tag_directive</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>value</name><operator>.</operator><name>handle</name></name> <operator>||</operator> <operator>!</operator><name><name>value</name><operator>.</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>tag_directives_copy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DOCUMENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>document</name></expr></argument>, <argument><expr><name><name>nodes</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>nodes</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><name>version_directive_copy</name></expr></argument>,
<argument><expr><name><name>tag_directives_copy</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>tag_directives_copy</name><operator>.</operator><name>top</name></name></expr></argument>,
<argument><expr><name>start_implicit</name></expr></argument>, <argument><expr><name>end_implicit</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>version_directive_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>STACK_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>tag_directives_copy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>value</name> <init>= <expr><call><name>POP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>tag_directives_copy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>tag_directives_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>
<macro><name>yaml_document_delete</name><argument_list>(<argument>yaml_document_t *document</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_error_type_t</name></type> <name>error</name></decl>;</decl_stmt>
}</block> <decl><name>context</name></decl>;</struct>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>tag_directive</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>context</name><operator>.</operator><name>error</name></name> <operator>=</operator> <name>YAML_NO_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name><name>context</name><operator>.</operator><name>error</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>!</operator><call><name>STACK_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_node_t</name></type> <name>node</name> <init>= <expr><call><name>POP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>node</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>YAML_SCALAR_NODE</name></expr>:</case>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>YAML_SEQUENCE_NODE</name></expr>:</case>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>data</name><operator>.</operator><name>sequence</name><operator>.</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>YAML_MAPPING_NODE</name></expr>:</case>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>data</name><operator>.</operator><name>mapping</name><operator>.</operator><name>pairs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>document</name><operator>-&gt;</operator><name>version_directive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name><name>document</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>;</init>
<condition><expr><name>tag_directive</name> <operator>!=</operator> <name><name>document</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>end</name></name></expr>;</condition>
<incr><expr><name>tag_directive</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>document</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_document_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>yaml_node_t *</argument>)</argument_list></macro>
<macro><name>yaml_document_get_node</name><argument_list>(<argument>yaml_document_t *document</argument>, <argument>int index</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>index</name> <operator>&lt;=</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>yaml_node_t *</argument>)</argument_list></macro>
<macro><name>yaml_document_get_root_node</name><argument_list>(<argument>yaml_document_t *document</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name> <operator>!=</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_document_add_scalar</name><argument_list>(<argument>yaml_document_t *document</argument>,
<argument>yaml_char_t *tag</argument>, <argument>yaml_char_t *value</argument>, <argument>int length</argument>,
<argument>yaml_scalar_style_t style</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_error_type_t</name></type> <name>error</name></decl>;</decl_stmt>
}</block> <decl><name>context</name></decl>;</struct>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><name>YAML_DEFAULT_SCALAR_TAG</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tag_copy</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>value_copy</name> <operator>=</operator> <call><name>YAML_MALLOC</name><argument_list>(<argument><expr><name>length</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>value_copy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value_copy</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SCALAR_NODE_INIT</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>tag_copy</name></expr></argument>, <argument><expr><name>value_copy</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name><operator>)</operator></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>value_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_document_add_sequence</name><argument_list>(<argument>yaml_document_t *document</argument>,
<argument>yaml_char_t *tag</argument>, <argument>yaml_sequence_style_t style</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_error_type_t</name></type> <name>error</name></decl>;</decl_stmt>
}</block> <decl><name>context</name></decl>;</struct>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_node_item_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_node_item_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_node_item_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>
}</block> <decl><name>items</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>yaml_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><name>YAML_DEFAULT_SEQUENCE_TAG</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tag_copy</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>yaml_node_item_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SEQUENCE_NODE_INIT</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>tag_copy</name></expr></argument>, <argument><expr><name><name>items</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>items</name><operator>.</operator><name>end</name></name></expr></argument>,
<argument><expr><name>style</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name><operator>)</operator></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_document_add_mapping</name><argument_list>(<argument>yaml_document_t *document</argument>,
<argument>yaml_char_t *tag</argument>, <argument>yaml_mapping_style_t style</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_error_type_t</name></type> <name>error</name></decl>;</decl_stmt>
}</block> <decl><name>context</name></decl>;</struct>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_node_pair_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_node_pair_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_node_pair_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>
}</block> <decl><name>pairs</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>yaml_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><name>YAML_DEFAULT_MAPPING_TAG</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_check_utf8</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tag_copy</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag_copy</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>yaml_node_pair_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MAPPING_NODE_INIT</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>tag_copy</name></expr></argument>, <argument><expr><name><name>pairs</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>pairs</name><operator>.</operator><name>end</name></name></expr></argument>,
<argument><expr><name>style</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name><operator>)</operator></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_document_append_sequence_item</name><argument_list>(<argument>yaml_document_t *document</argument>,
<argument>int sequence</argument>, <argument>int item</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_error_type_t</name></type> <name>error</name></decl>;</decl_stmt>
}</block> <decl><name>context</name></decl>;</struct>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sequence</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>sequence</name> <operator>&lt;=</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>sequence</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>YAML_SEQUENCE_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>item</name> <operator>&lt;=</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>,
<argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>sequence</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>sequence</name><operator>.</operator><name>items</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_document_append_mapping_pair</name><argument_list>(<argument>yaml_document_t *document</argument>,
<argument>int mapping</argument>, <argument>int key</argument>, <argument>int value</argument>)</argument_list></macro>
<block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_error_type_t</name></type> <name>error</name></decl>;</decl_stmt>
}</block> <decl><name>context</name></decl>;</struct>

<decl_stmt><decl><type><name>yaml_node_pair_t</name></type> <name>pair</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mapping</name> <operator>&gt;</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>mapping</name> <operator>&lt;=</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>mapping</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>YAML_MAPPING_NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>key</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>key</name> <operator>&lt;=</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>value</name> <operator>&lt;=</operator> <name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pair</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pair</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>,
<argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>mapping</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>mapping</name><operator>.</operator><name>pairs</name></name></expr></argument>, <argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>


</unit>
