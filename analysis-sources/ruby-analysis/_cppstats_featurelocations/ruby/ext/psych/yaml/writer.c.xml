<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\psych\yaml\writer.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yaml_private.h"</cpp:file></cpp:include>





<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_set_writer_error</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>yaml_emitter_flush</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_set_writer_error</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_WRITER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>problem</name></name> <operator>=</operator> <name>problem</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_emitter_flush</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>YAML_UTF8_ENCODING</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>emitter</name><operator>-&gt;</operator><name>write_handler</name></name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_handler_data</name></name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_writer_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"write error"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>low</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>YAML_UTF16LE_ENCODING</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>YAML_UTF16LE_ENCODING</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>








<expr_stmt><expr><name>octet</name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>octet</name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name><index>[<expr><name>high</name></expr>]</index></name> <operator>=</operator> <name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name><index>[<expr><name>low</name></expr>]</index></name> <operator>=</operator> <name>value</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>


<expr_stmt><expr><name>value</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name><index>[<expr><name>high</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xD8</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name><index>[<expr><name>low</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name><index>[<expr><name>high</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xDC</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name><index>[<expr><name>low</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>value</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><call><name><name>emitter</name><operator>-&gt;</operator><name>write_handler</name></name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>write_handler_data</name></name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>start</name></name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_writer_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"write error"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

</unit>
