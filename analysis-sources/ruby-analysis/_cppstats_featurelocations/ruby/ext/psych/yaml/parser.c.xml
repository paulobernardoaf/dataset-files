<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\psych\yaml\parser.c">








































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yaml_private.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEEK_TOKEN</name><parameter_list>(<parameter><type><name>parser</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((parser-&gt;token_available || yaml_parser_fetch_more_tokens(parser)) ? parser-&gt;tokens.head : NULL)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_TOKEN</name><parameter_list>(<parameter><type><name>parser</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(parser-&gt;token_available = 0, parser-&gt;tokens_parsed ++, parser-&gt;stream_end_produced = (parser-&gt;tokens.head-&gt;type == YAML_STREAM_END_TOKEN), parser-&gt;tokens.head ++)</cpp:value></cpp:define>










<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>, <argument><expr><name>yaml_event_t</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_set_parser_error</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>problem_mark</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_set_parser_error_context</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>context_mark</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>problem_mark</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_state_machine</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_stream_start</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_document_start</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>implicit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_document_content</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_document_end</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_node</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indentless_sequence</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_block_sequence_entry</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_indentless_sequence_entry</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_block_mapping_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_block_mapping_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_sequence_entry</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_sequence_entry_mapping_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_sequence_entry_mapping_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_sequence_entry_mapping_end</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_mapping_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_mapping_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>empty</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_process_empty_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>mark</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_process_directives</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_version_directive_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>version_directive_ref</name></decl></parameter>,
<parameter><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tag_directives_start_ref</name></decl></parameter>,
<parameter><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tag_directives_end_ref</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_append_tag_directive</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_tag_directive_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_duplicates</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>mark</name></decl></parameter>)</parameter_list>;</function_decl>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_parser_parse</name><argument_list>(<argument>yaml_parser_t *parser</argument>, <argument>yaml_event_t *event</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_event_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stream_end_produced</name></name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>||</operator>
<name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>YAML_PARSE_END_STATE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<return>return <expr><call><name>yaml_parser_state_machine</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_set_parser_error</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>problem_mark</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_PARSER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem</name></name> <operator>=</operator> <name>problem</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem_mark</name></name> <operator>=</operator> <name>problem_mark</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_set_parser_error_context</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>context_mark</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>problem_mark</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_PARSER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>context_mark</name></name> <operator>=</operator> <name>context_mark</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem</name></name> <operator>=</operator> <name>problem</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem_mark</name></name> <operator>=</operator> <name>problem_mark</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_state_machine</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>YAML_PARSE_STREAM_START_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_stream_start</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_IMPLICIT_DOCUMENT_START_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_document_start</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_DOCUMENT_START_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_document_start</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_DOCUMENT_CONTENT_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_document_content</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_DOCUMENT_END_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_document_end</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_BLOCK_NODE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_BLOCK_NODE_OR_INDENTLESS_SEQUENCE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_FLOW_NODE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_block_sequence_entry</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_BLOCK_SEQUENCE_ENTRY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_block_sequence_entry</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_indentless_sequence_entry</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_block_mapping_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_BLOCK_MAPPING_KEY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_block_mapping_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_BLOCK_MAPPING_VALUE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_block_mapping_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_flow_sequence_entry</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_flow_sequence_entry</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_flow_sequence_entry_mapping_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_flow_sequence_entry_mapping_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_flow_sequence_entry_mapping_end</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_FLOW_MAPPING_FIRST_KEY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_flow_mapping_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_FLOW_MAPPING_KEY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_flow_mapping_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_FLOW_MAPPING_VALUE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_flow_mapping_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_parser_parse_flow_mapping_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_stream_start</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_STREAM_START_TOKEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_parser_set_parser_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><literal type="string">"did not find expected &lt;stream-start&gt;"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_IMPLICIT_DOCUMENT_START_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STREAM_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>stream_start</name><operator>.</operator><name>encoding</name></name></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_document_start</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>implicit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_version_directive_t</name> <modifier>*</modifier></type><name>version_directive</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
}</block> <decl><name>tag_directives</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</struct>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>implicit</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_DOCUMENT_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>implicit</name> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_VERSION_DIRECTIVE_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_TAG_DIRECTIVE_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_DOCUMENT_START_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_STREAM_END_TOKEN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_process_directives</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>YAML_PARSE_DOCUMENT_END_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_BLOCK_NODE_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOCUMENT_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>



<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_STREAM_END_TOKEN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_process_directives</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version_directive</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>tag_directives</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tag_directives</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_DOCUMENT_START_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yaml_parser_set_parser_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><literal type="string">"did not find expected &lt;document start&gt;"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>YAML_PARSE_DOCUMENT_END_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_DOCUMENT_CONTENT_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOCUMENT_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>version_directive</name></expr></argument>,
<argument><expr><name><name>tag_directives</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>tag_directives</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>version_directive</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag_directives</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name><name>tag_directives</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>



<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_END_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STREAM_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>version_directive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>tag_directives</name><operator>.</operator><name>start</name></name> <operator>!=</operator> <name><name>tag_directives</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directives</name><operator>.</operator><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directives</name><operator>.</operator><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag_directives</name><operator>.</operator><name>end</name></name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directives</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_document_content</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_VERSION_DIRECTIVE_TOKEN</name> <operator>||</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_TAG_DIRECTIVE_TOKEN</name> <operator>||</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_DOCUMENT_START_TOKEN</name> <operator>||</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_DOCUMENT_END_TOKEN</name> <operator>||</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_STREAM_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_document_end</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>implicit</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_DOCUMENT_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>implicit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>STACK_EMPTY</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>tag_directive</name> <init>= <expr><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_DOCUMENT_START_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOCUMENT_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>implicit</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_node</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indentless_sequence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag_suffix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>, <decl><type ref="prev"/><name>tag_mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>implicit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_ALIAS_TOKEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALIAS_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>alias</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>

<else>else
<block>{<block_content>
<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_ANCHOR_TOKEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>anchor</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_TAG_TOKEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tag_handle</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tag</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tag_suffix</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tag</name><operator>.</operator><name>suffix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tag_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_TAG_TOKEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tag_handle</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tag</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tag_suffix</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tag</name><operator>.</operator><name>suffix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name>tag_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_ANCHOR_TOKEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>anchor</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag_handle</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>tag_handle</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>tag_suffix</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag_handle</name> <operator>=</operator> <name>tag_suffix</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>tag_directive</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>;</init>
<condition><expr><name>tag_directive</name> <operator>!=</operator> <name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>top</name></name></expr>;</condition>
<incr><expr><name>tag_directive</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag_handle</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>suffix_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag_suffix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>YAML_MALLOC</name><argument_list>(<argument><expr><name>prefix_len</name><operator>+</operator><name>suffix_len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_MEMORY_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tag</name><operator>+</operator><name>prefix_len</name></expr></argument>, <argument><expr><name>tag_suffix</name></expr></argument>, <argument><expr><name>suffix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><index>[<expr><name>prefix_len</name><operator>+</operator><name>suffix_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tag_handle</name> <operator>=</operator> <name>tag_suffix</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yaml_parser_set_parser_error_context</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><literal type="string">"while parsing a node"</literal></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>,
<argument><expr><literal type="string">"found undefined tag handle"</literal></expr></argument>, <argument><expr><name>tag_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>implicit</name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>tag</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>tag</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>indentless_sequence</name> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_BLOCK_ENTRY_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEQUENCE_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>implicit</name></expr></argument>,
<argument><expr><name>YAML_BLOCK_SEQUENCE_STYLE</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_SCALAR_TOKEN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>plain_implicit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quoted_implicit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>style</name></name> <operator>==</operator> <name>YAML_PLAIN_SCALAR_STYLE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>tag</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>tag</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>plain_implicit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quoted_implicit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALAR_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><name>plain_implicit</name></expr></argument>, <argument><expr><name>quoted_implicit</name></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>style</name></name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_FLOW_SEQUENCE_START_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEQUENCE_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>implicit</name></expr></argument>,
<argument><expr><name>YAML_FLOW_SEQUENCE_STYLE</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_FLOW_MAPPING_START_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_FLOW_MAPPING_FIRST_KEY_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPPING_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>implicit</name></expr></argument>,
<argument><expr><name>YAML_FLOW_MAPPING_STYLE</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>block</name> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_BLOCK_SEQUENCE_START_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEQUENCE_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>implicit</name></expr></argument>,
<argument><expr><name>YAML_BLOCK_SEQUENCE_STYLE</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>block</name> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_BLOCK_MAPPING_START_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPPING_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>implicit</name></expr></argument>,
<argument><expr><name>YAML_BLOCK_MAPPING_STYLE</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>anchor</name> <operator>||</operator> <name>tag</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>YAML_MALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_MEMORY_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SCALAR_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>implicit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>YAML_PLAIN_SCALAR_STYLE</name></expr></argument>,
<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>yaml_parser_set_parser_error_context</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name>block</name></expr> ?</condition><then> <expr><literal type="string">"while parsing a block node"</literal></expr>
</then><else>: <expr><literal type="string">"while parsing a flow node"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>,
<argument><expr><literal type="string">"did not find expected node content"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag_suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_block_sequence_entry</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_BLOCK_ENTRY_TOKEN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_BLOCK_ENTRY_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_BLOCK_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_PARSE_BLOCK_SEQUENCE_ENTRY_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_BLOCK_SEQUENCE_ENTRY_STATE</name></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_BLOCK_END_TOKEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEQUENCE_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>

<else>else
<block>{<block_content>
<return>return <expr><call><name>yaml_parser_set_parser_error_context</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><literal type="string">"while parsing a block collection"</literal></expr></argument>, <argument><expr><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"did not find expected '-' indicator"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_indentless_sequence_entry</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_BLOCK_ENTRY_TOKEN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_BLOCK_ENTRY_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_KEY_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_VALUE_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_BLOCK_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE</name></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEQUENCE_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_block_mapping_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_KEY_TOKEN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_KEY_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_VALUE_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_BLOCK_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_PARSE_BLOCK_MAPPING_VALUE_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_BLOCK_MAPPING_VALUE_STATE</name></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_BLOCK_END_TOKEN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPPING_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>

<else>else
<block>{<block_content>
<return>return <expr><call><name>yaml_parser_set_parser_error_context</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><literal type="string">"while parsing a block mapping"</literal></expr></argument>, <argument><expr><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"did not find expected key"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_block_mapping_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_VALUE_TOKEN</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_KEY_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_VALUE_TOKEN</name> <operator>&amp;&amp;</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_BLOCK_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_PARSE_BLOCK_MAPPING_KEY_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_BLOCK_MAPPING_KEY_STATE</name></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>

<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_BLOCK_MAPPING_KEY_STATE</name></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_sequence_entry</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_SEQUENCE_END_TOKEN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_FLOW_ENTRY_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>yaml_parser_set_parser_error_context</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><literal type="string">"while parsing a flow sequence"</literal></expr></argument>, <argument><expr><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"did not find expected ',' or ']'"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_KEY_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPPING_START_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>YAML_FLOW_MAPPING_STYLE</name></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_SEQUENCE_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SEQUENCE_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_sequence_entry_mapping_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_VALUE_TOKEN</name> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_ENTRY_TOKEN</name>
<operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_SEQUENCE_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name> <init>= <expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE</name></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_sequence_entry_mapping_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_VALUE_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_ENTRY_TOKEN</name>
<operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_SEQUENCE_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE</name></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_sequence_entry_mapping_end</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_STATE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAPPING_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_mapping_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_MAPPING_END_TOKEN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_FLOW_ENTRY_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>yaml_parser_set_parser_error_context</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><literal type="string">"while parsing a flow mapping"</literal></expr></argument>, <argument><expr><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"did not find expected ',' or '}'"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_KEY_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_VALUE_TOKEN</name>
<operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_ENTRY_TOKEN</name>
<operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_MAPPING_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_PARSE_FLOW_MAPPING_VALUE_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_FLOW_MAPPING_VALUE_STATE</name></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_MAPPING_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>marks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAPPING_END_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>end_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_parse_flow_mapping_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>empty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_FLOW_MAPPING_KEY_STATE</name></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_VALUE_TOKEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_ENTRY_TOKEN</name>
<operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>YAML_FLOW_MAPPING_END_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_PARSE_FLOW_MAPPING_KEY_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_parse_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_PARSE_FLOW_MAPPING_KEY_STATE</name></expr>;</expr_stmt>
<return>return <expr><call><name>yaml_parser_process_empty_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_process_empty_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>yaml_mark_t</name></type> <name>mark</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>YAML_MALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_MEMORY_ERROR</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SCALAR_EVENT_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>YAML_PLAIN_SCALAR_STYLE</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_process_directives</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_version_directive_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>version_directive_ref</name></decl></parameter>,
<parameter><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tag_directives_start_ref</name></decl></parameter>,
<parameter><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tag_directives_end_ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name><name>default_tag_directives</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><literal type="string">"!"</literal></expr>, <expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><literal type="string">"!"</literal></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><literal type="string">"!!"</literal></expr>, <expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><literal type="string">"tag:yaml.org,2002:"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>default_tag_directive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_version_directive_t</name> <modifier>*</modifier></type><name>version_directive</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>
}</block> <decl><name>tag_directives</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tag_directives</name></expr></argument>, <argument><expr><name>yaml_tag_directive_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_VERSION_DIRECTIVE_TOKEN</name> <operator>||</operator>
<name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_TAG_DIRECTIVE_TOKEN</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_VERSION_DIRECTIVE_TOKEN</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>version_directive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yaml_parser_set_parser_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><literal type="string">"found duplicate %YAML directive"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>version_directive</name><operator>.</operator><name>major</name></name> <operator>!=</operator> <literal type="number">1</literal>
<operator>||</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>version_directive</name><operator>.</operator><name>minor</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yaml_parser_set_parser_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><literal type="string">"found incompatible YAML document"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>version_directive</name> <operator>=</operator> <call><name>YAML_MALLOC_STATIC</name><argument_list>(<argument><expr><name>yaml_version_directive_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>version_directive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_MEMORY_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>version_directive</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>version_directive</name><operator>.</operator><name>major</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>version_directive</name><operator>-&gt;</operator><name>minor</name></name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>version_directive</name><operator>.</operator><name>minor</name></name></expr>;</expr_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_TAG_DIRECTIVE_TOKEN</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tag_directive</name><operator>.</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>value</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tag_directive</name><operator>.</operator><name>prefix</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_append_tag_directive</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tag_directives</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SKIP_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>PEEK_TOKEN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>default_tag_directive</name> <operator>=</operator> <name>default_tag_directives</name></expr>;</init>
<condition><expr><name><name>default_tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr>;</condition> <incr><expr><name>default_tag_directive</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_append_tag_directive</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>*</operator><name>default_tag_directive</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>token</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>version_directive_ref</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>version_directive_ref</name> <operator>=</operator> <name>version_directive</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tag_directives_start_ref</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>STACK_EMPTY</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tag_directives</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tag_directives_start_ref</name> <operator>=</operator> <operator>*</operator><name>tag_directives_end_ref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tag_directives</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tag_directives_start_ref</name> <operator>=</operator> <name><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tag_directives_end_ref</name> <operator>=</operator> <name><name>tag_directives</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tag_directives</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>version_directive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>STACK_EMPTY</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tag_directives</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>tag_directive</name> <init>= <expr><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tag_directives</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tag_directives</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_parser_append_tag_directive</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
<parameter><decl><type><name>yaml_tag_directive_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_duplicates</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>mark</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>tag_directive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>copy</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>;</init>
<condition><expr><name>tag_directive</name> <operator>!=</operator> <name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>top</name></name></expr>;</condition> <incr><expr><name>tag_directive</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>value</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>allow_duplicates</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_parser_set_parser_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,
<argument><expr><literal type="string">"found duplicate %TAG directive"</literal></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>copy</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>copy</name><operator>.</operator><name>handle</name></name> <operator>||</operator> <operator>!</operator><name><name>copy</name><operator>.</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_MEMORY_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>copy</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>copy</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
