<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\psych\yaml\emitter.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yaml_private.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLUSH</name><parameter_list>(<parameter><type><name>emitter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((emitter-&gt;buffer.pointer+5 &lt; emitter-&gt;buffer.end) || yaml_emitter_flush(emitter))</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT</name><parameter_list>(<parameter><type><name>emitter</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FLUSH(emitter) &amp;&amp; (*(emitter-&gt;buffer.pointer++) = (yaml_char_t)(value), emitter-&gt;column ++, 1))</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_BREAK</name><parameter_list>(<parameter><type><name>emitter</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FLUSH(emitter) ? ((emitter-&gt;line_break == YAML_CR_BREAK ? (*(emitter-&gt;buffer.pointer++) = (yaml_char_t) '\r') : emitter-&gt;line_break == YAML_LN_BREAK ? (*(emitter-&gt;buffer.pointer++) = (yaml_char_t) '\n') : emitter-&gt;line_break == YAML_CRLN_BREAK ? (*(emitter-&gt;buffer.pointer++) = (yaml_char_t) '\r', *(emitter-&gt;buffer.pointer++) = (yaml_char_t) '\n') : 0), emitter-&gt;column = 0, emitter-&gt;line ++, 1) : 0)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE</name><parameter_list>(<parameter><type><name>emitter</name></type></parameter>,<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FLUSH(emitter) &amp;&amp; (COPY(emitter-&gt;buffer,string), emitter-&gt;column ++, 1))</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_BREAK</name><parameter_list>(<parameter><type><name>emitter</name></type></parameter>,<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(FLUSH(emitter) &amp;&amp; (CHECK(string,'\n') ? (PUT_BREAK(emitter), string.pointer ++, 1) : (COPY(emitter-&gt;buffer,string), emitter-&gt;column = 0, emitter-&gt;line ++, 1)))</cpp:value></cpp:define>














<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>yaml_emitter_emit</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>, <argument><expr><name>yaml_event_t</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_set_emitter_error</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_need_more_events</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_append_tag_directive</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_tag_directive_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_duplicates</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_increase_indent</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flow</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indentless</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_state_machine</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_stream_start</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_document_start</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_document_content</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_document_end</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_flow_sequence_item</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_flow_mapping_key</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_flow_mapping_value</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_block_sequence_item</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_block_mapping_key</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_block_mapping_value</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_node</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sequence</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mapping</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple_key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_alias</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_sequence_start</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_mapping_start</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_check_empty_document</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_check_empty_sequence</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_check_empty_mapping</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_check_simple_key</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_select_scalar_style</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_process_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_process_tag</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_process_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_version_directive</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_version_directive_t</name></type> <name>version_directive</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_tag_directive</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_tag_directive_t</name></type> <name>tag_directive</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alias</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_tag</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_event</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_bom</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_indent</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_indicator</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indicator</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_whitespace</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_whitespace</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_indention</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_tag_handle</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_tag_content</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_whitespace</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_plain_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_breaks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_single_quoted_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_breaks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_double_quoted_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_breaks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_block_scalar_hints</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_string_t</name></type> <name>string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_literal_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_folded_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_set_emitter_error</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_EMITTER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>problem</name></name> <operator>=</operator> <name>problem</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>
<macro><name>yaml_emitter_emit</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>yaml_event_t *event</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yaml_event_delete</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>yaml_emitter_need_more_events</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_event</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_state_machine</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>yaml_event_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>DEQUEUE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_need_more_events</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>accumulate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>QUEUE_EMPTY</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>YAML_DOCUMENT_START_EVENT</name></expr>:</case>
<expr_stmt><expr><name>accumulate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>YAML_SEQUENCE_START_EVENT</name></expr>:</case>
<expr_stmt><expr><name>accumulate</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>YAML_MAPPING_START_EVENT</name></expr>:</case>
<expr_stmt><expr><name>accumulate</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>tail</name></name> <operator>-</operator> <name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name></name> <operator>&gt;</operator> <name>accumulate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>event</name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name></name></expr>;</init> <condition><expr><name>event</name> <operator>!=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>tail</name></name></expr>;</condition> <incr><expr><name>event</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>YAML_STREAM_START_EVENT</name></expr>:</case>
<case>case <expr><name>YAML_DOCUMENT_START_EVENT</name></expr>:</case>
<case>case <expr><name>YAML_SEQUENCE_START_EVENT</name></expr>:</case>
<case>case <expr><name>YAML_MAPPING_START_EVENT</name></expr>:</case>
<expr_stmt><expr><name>level</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>YAML_STREAM_END_EVENT</name></expr>:</case>
<case>case <expr><name>YAML_DOCUMENT_END_EVENT</name></expr>:</case>
<case>case <expr><name>YAML_SEQUENCE_END_EVENT</name></expr>:</case>
<case>case <expr><name>YAML_MAPPING_END_EVENT</name></expr>:</case>
<expr_stmt><expr><name>level</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>level</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_append_tag_directive</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_tag_directive_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_duplicates</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>tag_directive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>copy</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>;</init>
<condition><expr><name>tag_directive</name> <operator>!=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>top</name></name></expr>;</condition> <incr><expr><name>tag_directive</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>value</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>allow_duplicates</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"duplicate %TAG directive"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>copy</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>copy</name><operator>.</operator><name>handle</name></name> <operator>||</operator> <operator>!</operator><name><name>copy</name><operator>.</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_MEMORY_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>copy</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>copy</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_increase_indent</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flow</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indentless</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <ternary><condition><expr><name>flow</name></expr> ?</condition><then> <expr><name><name>emitter</name><operator>-&gt;</operator><name>best_indent</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>indentless</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name> <operator>+=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_indent</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_state_machine</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>YAML_EMIT_STREAM_START_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_stream_start</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_FIRST_DOCUMENT_START_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_document_start</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_DOCUMENT_START_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_document_start</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_DOCUMENT_CONTENT_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_document_content</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_DOCUMENT_END_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_document_end</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_flow_sequence_item</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_FLOW_SEQUENCE_ITEM_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_flow_sequence_item</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_FLOW_MAPPING_FIRST_KEY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_flow_mapping_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_FLOW_MAPPING_KEY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_flow_mapping_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_flow_mapping_value</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_FLOW_MAPPING_VALUE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_flow_mapping_value</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_block_sequence_item</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_BLOCK_SEQUENCE_ITEM_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_block_sequence_item</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_block_mapping_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_BLOCK_MAPPING_KEY_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_block_mapping_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_block_mapping_value</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_BLOCK_MAPPING_VALUE_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_block_mapping_value</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_EMIT_END_STATE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"expected nothing after STREAM-END"</literal></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_stream_start</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_STREAM_START_EVENT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>stream_start</name><operator>.</operator><name>encoding</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>YAML_UTF8_ENCODING</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>best_indent</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_indent</name></name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>best_indent</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
<operator>&amp;&amp;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name> <operator>&lt;=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_indent</name></name><operator>*</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>line_break</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>line_break</name></name> <operator>=</operator> <name>YAML_LN_BREAK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>encoding</name></name> <operator>!=</operator> <name>YAML_UTF8_ENCODING</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_bom</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_EMIT_FIRST_DOCUMENT_START_STATE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"expected STREAM-START"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_document_start</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_DOCUMENT_START_EVENT</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name><name>default_tag_directives</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><literal type="string">"!"</literal></expr>, <expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><literal type="string">"!"</literal></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><literal type="string">"!!"</literal></expr>, <expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><literal type="string">"tag:yaml.org,2002:"</literal></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>tag_directive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>implicit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>version_directive</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_version_directive</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><operator>*</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>version_directive</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>;</init>
<condition><expr><name>tag_directive</name> <operator>!=</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>end</name></name></expr>;</condition>
<incr><expr><name>tag_directive</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_tag_directive</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>*</operator><name>tag_directive</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_append_tag_directive</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>*</operator><name>tag_directive</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name>default_tag_directives</name></expr>;</init>
<condition><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr>;</condition> <incr><expr><name>tag_directive</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_append_tag_directive</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>*</operator><name>tag_directive</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>implicit</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>implicit</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>implicit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>version_directive</name></name> <operator>||</operator>
<operator>(</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>start</name></name>
<operator>!=</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>end</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>emitter</name><operator>-&gt;</operator><name>open_ended</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>version_directive</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>implicit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"%YAML"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"1.1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>start</name></name>
<operator>!=</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>implicit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>;</init>
<condition><expr><name>tag_directive</name> <operator>!=</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>end</name></name></expr>;</condition>
<incr><expr><name>tag_directive</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"%TAG"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_tag_handle</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_tag_content</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>yaml_emitter_check_empty_document</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>implicit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>implicit</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"---"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_EMIT_DOCUMENT_CONTENT_STATE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_STREAM_END_EVENT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>open_ended</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_flush</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_EMIT_END_STATE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"expected DOCUMENT-START or STREAM-END"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_document_content</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>YAML_EMIT_DOCUMENT_END_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_emit_node</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_document_end</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_DOCUMENT_END_EVENT</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_end</name><operator>.</operator><name>implicit</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_flush</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_EMIT_DOCUMENT_START_STATE</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>STACK_EMPTY</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name></type> <name>tag_directive</name> <init>= <expr><call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>tag_directive</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"expected DOCUMENT-END"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_flow_sequence_item</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_increase_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_SEQUENCE_END_EVENT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>&gt;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>YAML_EMIT_FLOW_SEQUENCE_ITEM_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_emit_node</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_flow_mapping_key</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_increase_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_MAPPING_END_EVENT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>&gt;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>&amp;&amp;</operator> <call><name>yaml_emitter_check_simple_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_emit_node</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_EMIT_FLOW_MAPPING_VALUE_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_emit_node</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_flow_mapping_value</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>simple</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>&gt;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>, <argument><expr><name>YAML_EMIT_FLOW_MAPPING_KEY_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>yaml_emitter_emit_node</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_block_sequence_item</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_increase_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>mapping_context</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_SEQUENCE_END_EVENT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_EMIT_BLOCK_SEQUENCE_ITEM_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_emit_node</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_block_mapping_key</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_increase_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_MAPPING_END_EVENT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>yaml_emitter_check_simple_key</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_emit_node</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_EMIT_BLOCK_MAPPING_VALUE_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_emit_node</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_block_mapping_value</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>simple</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>,
<argument><expr><name>YAML_EMIT_BLOCK_MAPPING_KEY_STATE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_emit_node</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_node</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sequence</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mapping</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>root_context</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>sequence_context</name></name> <operator>=</operator> <name>sequence</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>mapping_context</name></name> <operator>=</operator> <name>mapping</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>simple_key_context</name></name> <operator>=</operator> <name>simple_key</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>YAML_ALIAS_EVENT</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_alias</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_SCALAR_EVENT</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_scalar</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_SEQUENCE_START_EVENT</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_sequence_start</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_MAPPING_START_EVENT</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_emit_mapping_start</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"expected SCALAR, SEQUENCE-START, MAPPING-START, or ALIAS"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_alias</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>, <argument><expr><call><name>SHIM</name><argument_list>(<argument><expr><name>yaml_event_t</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_process_anchor</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_select_scalar_style</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_process_anchor</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_process_tag</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_increase_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_process_scalar</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>states</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_sequence_start</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_process_anchor</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_process_tag</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name>
<operator>||</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>style</name></name> <operator>==</operator> <name>YAML_FLOW_SEQUENCE_STYLE</name>
<operator>||</operator> <call><name>yaml_emitter_check_empty_sequence</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_emit_mapping_start</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_process_anchor</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_process_tag</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name>
<operator>||</operator> <name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>style</name></name> <operator>==</operator> <name>YAML_FLOW_MAPPING_STYLE</name>
<operator>||</operator> <call><name>yaml_emitter_check_empty_mapping</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_EMIT_FLOW_MAPPING_FIRST_KEY_STATE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>YAML_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_check_empty_document</name><argument_list>(<argument><expr><call><name>SHIM</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_check_empty_sequence</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>tail</name></name> <operator>-</operator> <name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>YAML_SEQUENCE_START_EVENT</name>
<operator>&amp;&amp;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>YAML_SEQUENCE_END_EVENT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_check_empty_mapping</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>tail</name></name> <operator>-</operator> <name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>YAML_MAPPING_START_EVENT</name>
<operator>&amp;&amp;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>YAML_MAPPING_END_EVENT</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_check_simple_key</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><name><name>emitter</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>YAML_ALIAS_EVENT</name></expr>:</case>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor_length</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_SCALAR_EVENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>multiline</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor_length</name></name>
<operator>+</operator> <name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle_length</name></name>
<operator>+</operator> <name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix_length</name></name>
<operator>+</operator> <name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_SEQUENCE_START_EVENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_check_empty_sequence</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor_length</name></name>
<operator>+</operator> <name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle_length</name></name>
<operator>+</operator> <name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix_length</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>YAML_MAPPING_START_EVENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_check_empty_mapping</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>+=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor_length</name></name>
<operator>+</operator> <name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle_length</name></name>
<operator>+</operator> <name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix_length</name></name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_select_scalar_style</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_scalar_style_t</name></type> <name>style</name> <init>= <expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>style</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_tag</name> <init>= <expr><operator>(</operator><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>no_tag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>plain_implicit</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>quoted_implicit</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"neither tag nor implicit flags are specified"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <name>YAML_ANY_SCALAR_STYLE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>YAML_PLAIN_SCALAR_STYLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>YAML_DOUBLE_QUOTED_SCALAR_STYLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>simple_key_context</name></name> <operator>&amp;&amp;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>multiline</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>YAML_DOUBLE_QUOTED_SCALAR_STYLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <name>YAML_PLAIN_SCALAR_STYLE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>flow_plain_allowed</name></name><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_plain_allowed</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>YAML_SINGLE_QUOTED_SCALAR_STYLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>length</name></name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>simple_key_context</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>YAML_SINGLE_QUOTED_SCALAR_STYLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>no_tag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>plain_implicit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>YAML_SINGLE_QUOTED_SCALAR_STYLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <name>YAML_SINGLE_QUOTED_SCALAR_STYLE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>single_quoted_allowed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>YAML_DOUBLE_QUOTED_SCALAR_STYLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <name>YAML_LITERAL_SCALAR_STYLE</name> <operator>||</operator> <name>style</name> <operator>==</operator> <name>YAML_FOLDED_SCALAR_STYLE</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_allowed</name></name>
<operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>simple_key_context</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>YAML_DOUBLE_QUOTED_SCALAR_STYLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_tag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>quoted_implicit</name></name>
<operator>&amp;&amp;</operator> <name>style</name> <operator>!=</operator> <name>YAML_PLAIN_SCALAR_STYLE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><literal type="string">"!"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_process_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>alias</name></name></expr> ?</condition><then> <expr><literal type="string">"*"</literal></expr> </then><else>: <expr><literal type="string">"&amp;"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yaml_emitter_write_anchor</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor</name></name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor_length</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_process_tag</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_tag_handle</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle</name></name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle_length</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_tag_content</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix</name></name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix_length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"!&lt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_tag_content</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix</name></name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix_length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_process_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>style</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>YAML_PLAIN_SCALAR_STYLE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_write_plain_scalar</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>simple_key_context</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_SINGLE_QUOTED_SCALAR_STYLE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_write_single_quoted_scalar</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>simple_key_context</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_DOUBLE_QUOTED_SCALAR_STYLE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_write_double_quoted_scalar</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>simple_key_context</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_LITERAL_SCALAR_STYLE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_write_literal_scalar</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_FOLDED_SCALAR_STYLE</name></expr>:</case>
<return>return <expr><call><name>yaml_emitter_write_folded_scalar</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_version_directive</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_version_directive_t</name></type> <name>version_directive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>version_directive</name><operator>.</operator><name>major</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>version_directive</name><operator>.</operator><name>minor</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"incompatible %YAML directive"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_tag_directive</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_tag_directive_t</name></type> <name>tag_directive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>handle_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>.</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>tag_directive</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>handle_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>tag_directive</name><operator>.</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>prefix_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>handle</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"tag handle must not be empty"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"tag handle must start with '!'"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>.</operator><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"tag handle must end with '!'"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>.</operator><name>pointer</name></name> <operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>handle</name><operator>.</operator><name>pointer</name></name> <operator>&lt;</operator> <name><name>handle</name><operator>.</operator><name>end</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_ALPHA</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"tag handle must contain alphanumerical characters only"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MOVE</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>prefix</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>prefix</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"tag prefix must not be empty"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alias</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>anchor_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>

<expr_stmt><expr><name>anchor_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>anchor_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><ternary><condition><expr><name>alias</name></expr> ?</condition><then>
<expr><literal type="string">"alias value must not be empty"</literal></expr> </then><else>:
<expr><literal type="string">"anchor value must not be empty"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_ALPHA</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><ternary><condition><expr><name>alias</name></expr> ?</condition><then>
<expr><literal type="string">"alias value must contain alphanumerical characters only"</literal></expr> </then><else>:
<expr><literal type="string">"anchor value must contain alphanumerical characters only"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MOVE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor</name></name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor_length</name></name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>string</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>alias</name></name> <operator>=</operator> <name>alias</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_tag</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>tag_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>tag_directive</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tag_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>yaml_emitter_set_emitter_error</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><literal type="string">"tag value must not be empty"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>tag_directive</name> <operator>=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>;</init>
<condition><expr><name>tag_directive</name> <operator>!=</operator> <name><name>emitter</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>top</name></name></expr>;</condition> <incr><expr><name>tag_directive</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prefix_length</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>string</name><operator>.</operator><name>start</name></name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>,
<argument><expr><name>prefix_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle_length</name></name> <operator>=</operator>
<call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tag_directive</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>prefix_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix_length</name></name> <operator>=</operator>
<operator>(</operator><name><name>string</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>string</name><operator>.</operator><name>start</name></name><operator>)</operator> <operator>-</operator> <name>prefix_length</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix_length</name></name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>string</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_indicators</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flow_indicators</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_breaks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>special_characters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leading_space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>leading_break</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trailing_space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>trailing_break</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>break_space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>space_break</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>preceded_by_whitespace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>followed_by_whitespace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>previous_space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>previous_break</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>multiline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>flow_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_plain_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>single_quoted_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CHECK_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><call><name>CHECK_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flow_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>preceded_by_whitespace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>followed_by_whitespace</name> <operator>=</operator> <call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>WIDTH</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>string</name><operator>.</operator><name>pointer</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flow_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>block_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flow_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>followed_by_whitespace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>followed_by_whitespace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flow_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>block_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flow_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flow_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>followed_by_whitespace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>block_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>preceded_by_whitespace</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flow_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>block_indicators</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_PRINTABLE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>(</operator><operator>!</operator><call><name>IS_ASCII</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>unicode</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>special_characters</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_BREAK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>line_breaks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>string</name><operator>.</operator><name>pointer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>leading_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>+</operator><call><name>WIDTH</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trailing_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>previous_break</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>break_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>previous_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_break</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_BREAK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>string</name><operator>.</operator><name>pointer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>leading_break</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>+</operator><call><name>WIDTH</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trailing_break</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>previous_space</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>space_break</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>previous_space</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_break</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>previous_space</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_break</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>preceded_by_whitespace</name> <operator>=</operator> <call><name>IS_BLANKZ</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MOVE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>followed_by_whitespace</name> <operator>=</operator> <call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>WIDTH</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>multiline</name></name> <operator>=</operator> <name>line_breaks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>flow_plain_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_plain_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>single_quoted_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>leading_space</name> <operator>||</operator> <name>leading_break</name> <operator>||</operator> <name>trailing_space</name> <operator>||</operator> <name>trailing_break</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>flow_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trailing_space</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>break_space</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>flow_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>single_quoted_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>space_break</name> <operator>||</operator> <name>special_characters</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>flow_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>single_quoted_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line_breaks</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>flow_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flow_indicators</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>flow_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block_indicators</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>block_plain_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_analyze_event</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>anchor_data</name><operator>.</operator><name>anchor_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>handle_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>tag_data</name><operator>.</operator><name>suffix_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>scalar_data</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>YAML_ALIAS_EVENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_anchor</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>alias</name><operator>.</operator><name>anchor</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>YAML_SCALAR_EVENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_anchor</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>anchor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>tag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>||</operator>
<operator>(</operator><operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>plain_implicit</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>quoted_implicit</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_tag</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_scalar</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>YAML_SEQUENCE_START_EVENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_anchor</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>anchor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>tag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>||</operator>
<operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>implicit</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_tag</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>YAML_MAPPING_START_EVENT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_anchor</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>anchor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>tag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>||</operator>
<operator>!</operator><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>implicit</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_analyze_tag</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>,
<argument><expr><name><name>event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_bom</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FLUSH</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yaml_char_t</name><operator>)</operator> <literal type="char">'\xEF'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yaml_char_t</name><operator>)</operator> <literal type="char">'\xBB'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>yaml_char_t</name><operator>)</operator> <literal type="char">'\xBF'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_indent</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>emitter</name><operator>-&gt;</operator><name>indent</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>||</operator> <name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>&gt;</operator> <name>indent</name>
<operator>||</operator> <operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>==</operator> <name>indent</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT_BREAK</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>&lt;</operator> <name>indent</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_indicator</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>indicator</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_whitespace</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_whitespace</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_indention</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>indicator_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>

<expr_stmt><expr><name>indicator_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>indicator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><name>indicator</name></expr></argument>, <argument><expr><name>indicator_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_whitespace</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <name>is_whitespace</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>&amp;&amp;</operator> <name>is_indention</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>open_ended</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_tag_handle</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_tag_content</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>need_whitespace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>need_whitespace</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_ALPHA</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>WIDTH</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>width</name> <operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="char">'A'</literal> <operator>-</operator> <literal type="number">10</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator>
<operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="char">'A'</literal> <operator>-</operator> <literal type="number">10</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_plain_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_breaks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>breaks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>allow_breaks</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>spaces</name>
<operator>&amp;&amp;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>&gt;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_SPACE_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MOVE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_BREAK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>breaks</name> <operator>&amp;&amp;</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT_BREAK</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE_BREAK</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>breaks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>breaks</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>breaks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_single_quoted_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_breaks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>breaks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>allow_breaks</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>spaces</name>
<operator>&amp;&amp;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>&gt;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name>
<operator>&amp;&amp;</operator> <name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>start</name></name>
<operator>&amp;&amp;</operator> <name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name> <operator>-</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_SPACE_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MOVE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_BREAK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>breaks</name> <operator>&amp;&amp;</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT_BREAK</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE_BREAK</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>breaks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>breaks</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>breaks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_double_quoted_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_breaks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>spaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_PRINTABLE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>emitter</name><operator>-&gt;</operator><name>unicode</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_ASCII</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <call><name>IS_BOM</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_BREAK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>octet</name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>width</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>octet</name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>pointer</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>value</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0x00</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x07</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x08</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x09</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x0A</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x0B</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x0C</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x0D</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x1B</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x22</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'\"'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x5C</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x85</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0xA0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x2028</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x2029</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>width</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>digit</name> <init>= <expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <name>k</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>digit</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>digit</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="char">'A'</literal><operator>-</operator><literal type="number">10</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></switch>
<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>allow_breaks</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>spaces</name>
<operator>&amp;&amp;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>&gt;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name>
<operator>&amp;&amp;</operator> <name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>start</name></name>
<operator>&amp;&amp;</operator> <name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_SPACE_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MOVE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_block_scalar_hints</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_string_t</name></type> <name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>indent_hint</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chomp_hint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_BREAK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>indent_hint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>emitter</name><operator>-&gt;</operator><name>best_indent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>indent_hint</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>indent_hint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>open_ended</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>string</name><operator>.</operator><name>pointer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>chomp_hint</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><operator>*</operator><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_BREAK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>chomp_hint</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>string</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>string</name><operator>.</operator><name>pointer</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>chomp_hint</name> <operator>=</operator> <literal type="string">"+"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>open_ended</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><operator>*</operator><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><call><name>IS_BREAK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>chomp_hint</name> <operator>=</operator> <literal type="string">"+"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>open_ended</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chomp_hint</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>chomp_hint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_literal_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>breaks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_block_scalar_hints</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT_BREAK</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_BREAK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE_BREAK</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>breaks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>breaks</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>breaks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>yaml_emitter_write_folded_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type><name>emitter</name></decl></parameter>,
<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>breaks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>leading_spaces</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STRING_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indicator</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_block_scalar_hints</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT_BREAK</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>whitespace</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>string</name><operator>.</operator><name>end</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_BREAK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>breaks</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>leading_spaces</name> <operator>&amp;&amp;</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>IS_BREAK_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <call><name>WIDTH_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUT_BREAK</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE_BREAK</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>breaks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>breaks</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>leading_spaces</name> <operator>=</operator> <call><name>IS_BLANK</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>breaks</name> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_SPACE_AT</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>column</name></name> <operator>&gt;</operator> <name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_emitter_write_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MOVE</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WRITE</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>emitter</name><operator>-&gt;</operator><name>indention</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>breaks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
