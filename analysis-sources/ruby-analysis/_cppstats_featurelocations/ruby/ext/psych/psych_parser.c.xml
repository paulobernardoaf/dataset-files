<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\psych\psych_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psych.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cPsychParser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_empty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_start_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_end_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_start_document</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_end_document</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_scalar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_start_sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_end_sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_start_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_end_mapping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_event_location</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSYCH_TRANSCODE</name><parameter_list>(<parameter><type><name>_str</name></type></parameter>, <parameter><type><name>_yaml_enc</name></type></parameter>, <parameter><type><name>_internal_enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { rb_enc_associate_index((_str), (_yaml_enc)); if(_internal_enc) (_str) = rb_str_export_to_enc((_str), (_internal_enc)); } while (0)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>int</name></type> <name>io_reader</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>string</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id_read</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>str</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>read</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>*</operator><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type> <name>parser</name></decl>;</decl_stmt>

<expr_stmt><expr><name>parser</name> <operator>=</operator> <operator>(</operator><name>yaml_parser_t</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_parser_delete</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static size_t memsize(const void *ptr)
{
const yaml_parser_t *parser = ptr;

return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>psych_parser_type</name> <init>= <expr><block>{
<expr><literal type="string">"Psych/parser"</literal></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>dealloc</name></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type> <name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>yaml_parser_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_parser_type</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yaml_parser_initialize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>make_exception</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type> <name>parser</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>line</name></decl>, <decl><type ref="prev"/><name>column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ePsychSyntaxError</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>context_mark</name><operator>.</operator><name>line</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>column</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>context_mark</name><operator>.</operator><name>column</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ePsychSyntaxError</name> <operator>=</operator> <call><name>rb_const_get</name><argument_list>(<argument><expr><name>mPsych</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"SyntaxError"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>ePsychSyntaxError</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><name>path</name></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>problem_offset</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>parser</name><operator>-&gt;</operator><name>problem</name></name></expr> ?</condition><then> <expr><call><name>rb_usascii_str_new2</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>problem</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>parser</name><operator>-&gt;</operator><name>context</name></name></expr> ?</condition><then> <expr><call><name>rb_usascii_str_new2</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>transcode_string</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>parser_encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>utf8</name> <init>= <expr><call><name>rb_utf8_encindex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>utf16le</name> <init>= <expr><call><name>rb_enc_find_index</name><argument_list>(<argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>utf16be</name> <init>= <expr><call><name>rb_enc_find_index</name><argument_list>(<argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>source_encoding</name> <init>= <expr><call><name>rb_enc_get_index</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>source_encoding</name> <operator>==</operator> <name>utf8</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>parser_encoding</name> <operator>=</operator> <name>YAML_UTF8_ENCODING</name></expr>;</expr_stmt>
<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>source_encoding</name> <operator>==</operator> <name>utf16le</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>parser_encoding</name> <operator>=</operator> <name>YAML_UTF16LE_ENCODING</name></expr>;</expr_stmt>
<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>source_encoding</name> <operator>==</operator> <name>utf16be</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>parser_encoding</name> <operator>=</operator> <name>YAML_UTF16BE_ENCODING</name></expr>;</expr_stmt>
<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>parser_encoding</name> <operator>=</operator> <name>YAML_UTF8_ENCODING</name></expr>;</expr_stmt>
<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>transcode_io</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>parser_encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>io_external_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>io_external_enc_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>io_external_encoding</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"external_encoding"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>io_external_encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>io_external_enc_index</name> <operator>=</operator> <call><name>rb_ascii8bit_encindex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>io_external_enc_index</name> <operator>=</operator> <call><name>rb_to_encoding_index</name><argument_list>(<argument><expr><name>io_external_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>io_external_enc_index</name> <operator>==</operator> <call><name>rb_usascii_encindex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>parser_encoding</name> <operator>=</operator> <name>YAML_UTF8_ENCODING</name></expr>;</expr_stmt>
<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>io_external_enc_index</name> <operator>==</operator> <call><name>rb_utf8_encindex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>parser_encoding</name> <operator>=</operator> <name>YAML_UTF8_ENCODING</name></expr>;</expr_stmt>
<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>io_external_enc_index</name> <operator>==</operator> <call><name>rb_enc_find_index</name><argument_list>(<argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>parser_encoding</name> <operator>=</operator> <name>YAML_UTF16LE_ENCODING</name></expr>;</expr_stmt>
<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>io_external_enc_index</name> <operator>==</operator> <call><name>rb_enc_find_index</name><argument_list>(<argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>parser_encoding</name> <operator>=</operator> <name>YAML_UTF16BE_ENCODING</name></expr>;</expr_stmt>
<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>io_external_enc_index</name> <operator>==</operator> <call><name>rb_ascii8bit_encindex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>parser_encoding</name> <operator>=</operator> <name>YAML_ANY_ENCODING</name></expr>;</expr_stmt>
<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>parser_encoding</name> <operator>=</operator> <name>YAML_ANY_ENCODING</name></expr>;</expr_stmt>

<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_start_stream</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>id_start_stream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_start_document</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_funcall3</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>id_start_document</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>args</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_end_document</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>id_end_document</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_alias</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>id_alias</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_scalar</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_funcall3</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>id_scalar</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>args</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_start_sequence</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_funcall3</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>id_start_sequence</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>args</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_end_sequence</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>id_end_sequence</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_start_mapping</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_funcall3</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>id_start_mapping</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>args</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_end_mapping</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>id_end_mapping</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_empty</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>id_empty</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_end_stream</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>id_end_stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>protected_event_location</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_funcall3</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>id_event_location</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>args</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>yaml</name></decl>, <decl><type ref="prev"/><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type> <name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parser_encoding</name> <init>= <expr><name>YAML_ANY_ENCODING</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encoding</name> <init>= <expr><call><name>rb_utf8_encindex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type> <name>internal_enc</name> <init>= <expr><call><name>rb_default_internal_encoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>handler</name> <init>= <expr><call><name>rb_iv_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@handler"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yaml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>rb_respond_to</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>id_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>id_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"&lt;unknown&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_parser_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_parser_type</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_parser_delete</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_parser_initialize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_respond_to</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>id_read</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>yaml</name> <operator>=</operator> <call><name>transcode_io</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parser_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_parser_set_encoding</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>parser_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_parser_set_input</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>io_reader</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yaml</name> <operator>=</operator> <call><name>transcode_string</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parser_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_parser_set_encoding</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>parser_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_parser_set_input_string</name><argument_list>(
<argument><expr><name>parser</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<while>while<condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>event_args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>start_line</name></decl>, <decl><type ref="prev"/><name>start_column</name></decl>, <decl><type ref="prev"/><name>end_line</name></decl>, <decl><type ref="prev"/><name>end_column</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>exception</name></decl>;</decl_stmt>

<expr_stmt><expr><name>exception</name> <operator>=</operator> <call><name>make_exception</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_parser_delete</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yaml_parser_initialize</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_line</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>start_mark</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_column</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>start_mark</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_line</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>end_mark</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_column</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>end_mark</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>event_args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event_args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>start_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event_args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>start_column</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event_args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>end_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>event_args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>end_column</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_event_location</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>event_args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>YAML_STREAM_START_EVENT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>stream_start</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_start_stream</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>YAML_DOCUMENT_START_EVENT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tag_directives</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>version</name> <init>= <expr><ternary><condition><expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>version_directive</name></name></expr> ?</condition><then>
<expr><call><name>rb_ary_new3</name><argument_list>(
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>version_directive</name><operator>-&gt;</operator><name>major</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>version_directive</name><operator>-&gt;</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr> </then><else>: <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>start</name> <init>=
<expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>end</name> <init>=
<expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>end</name></name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>start</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>handle</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>prefix</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>start</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>start</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PSYCH_TRANSCODE</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>internal_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>start</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>start</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PSYCH_TRANSCODE</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>internal_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>tag_directives</name></expr></argument>, <argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tag_directives</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>implicit</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_start_document</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>YAML_DOCUMENT_END_EVENT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>document_end</name><operator>.</operator><name>implicit</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_end_document</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>YAML_ALIAS_EVENT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>alias</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>alias</name><operator>.</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>alias</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PSYCH_TRANSCODE</name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>internal_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>alias</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_alias</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>YAML_SCALAR_EVENT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>anchor</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tag</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>plain_implicit</name></decl>, <decl><type ref="prev"/><name>quoted_implicit</name></decl>, <decl><type ref="prev"/><name>style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name> <init>= <expr><call><name>rb_str_new</name><argument_list>(
<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>value</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>length</name></name></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PSYCH_TRANSCODE</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>internal_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PSYCH_TRANSCODE</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>internal_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PSYCH_TRANSCODE</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>internal_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>plain_implicit</name> <operator>=</operator>
<ternary><condition><expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>plain_implicit</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>quoted_implicit</name> <operator>=</operator>
<ternary><condition><expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>quoted_implicit</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>anchor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>plain_implicit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>quoted_implicit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_scalar</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>YAML_SEQUENCE_START_EVENT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>anchor</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tag</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>implicit</name></decl>, <decl><type ref="prev"/><name>style</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PSYCH_TRANSCODE</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>internal_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PSYCH_TRANSCODE</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>internal_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>implicit</name> <operator>=</operator>
<ternary><condition><expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>implicit</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>anchor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>implicit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_start_sequence</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>YAML_SEQUENCE_END_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_end_sequence</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>YAML_MAPPING_START_EVENT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>anchor</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tag</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>implicit</name></decl>, <decl><type ref="prev"/><name>style</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>anchor</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PSYCH_TRANSCODE</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>internal_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PSYCH_TRANSCODE</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>internal_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>implicit</name> <operator>=</operator>
<ternary><condition><expr><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>implicit</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>style</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>anchor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>implicit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_start_mapping</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>YAML_MAPPING_END_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_end_mapping</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>YAML_NO_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_empty</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>YAML_STREAM_END_EVENT</name></expr>:</case>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>protected_end_stream</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>yaml_event_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>mark</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mark_klass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type> <name>parser</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_parser_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_parser_type</name></expr></argument>, <argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mark_klass</name> <operator>=</operator> <call><name>rb_const_get_at</name><argument_list>(<argument><expr><name>cPsychParser</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"Mark"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_class_new_instance</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>mark_klass</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_psych_parser</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
mPsych = rb_define_module("Psych");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cPsychParser</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mPsych</name></expr></argument>, <argument><expr><literal type="string">"Parser"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cPsychParser</name></expr></argument>, <argument><expr><name>allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cPsychParser</name></expr></argument>, <argument><expr><literal type="string">"ANY"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>YAML_ANY_ENCODING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cPsychParser</name></expr></argument>, <argument><expr><literal type="string">"UTF8"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>YAML_UTF8_ENCODING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cPsychParser</name></expr></argument>, <argument><expr><literal type="string">"UTF16LE"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>YAML_UTF16LE_ENCODING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cPsychParser</name></expr></argument>, <argument><expr><literal type="string">"UTF16BE"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>YAML_UTF16BE_ENCODING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_require</name><argument_list>(<argument><expr><literal type="string">"psych/syntax_error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychParser</name></expr></argument>, <argument><expr><literal type="string">"parse"</literal></expr></argument>, <argument><expr><name>parse</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychParser</name></expr></argument>, <argument><expr><literal type="string">"mark"</literal></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_read</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_path</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_empty</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_start_stream</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"start_stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_end_stream</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"end_stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_start_document</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"start_document"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_end_document</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"end_document"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_alias</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"alias"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_scalar</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"scalar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_start_sequence</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"start_sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_end_sequence</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"end_sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_start_mapping</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"start_mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_end_mapping</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"end_mapping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_event_location</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"event_location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
