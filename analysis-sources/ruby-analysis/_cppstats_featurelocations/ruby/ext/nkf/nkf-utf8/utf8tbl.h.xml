<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\nkf\nkf-utf8\utf8tbl.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_UTF8TBL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UTF8TBL_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_euc_to_utf8_1byte</name></cpp:macro> <cpp:value>94</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_euc_to_utf8_2bytes</name></cpp:macro> <cpp:value>94</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>euc_to_utf8_1byte</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>euc_to_utf8_2bytes</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>euc_to_utf8_2bytes_ms</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>euc_to_utf8_2bytes_mac</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>euc_to_utf8_2bytes_x0213</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>x0212_to_utf8_2bytes</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>x0212_to_utf8_2bytes_x0213</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_x0213_combining_chars</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_x0213_combining_table</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_x0213_1_surrogate_table</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_x0213_2_surrogate_table</name></cpp:macro> <cpp:value>277</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>x0213_combining_chars</name><index>[<expr><name>sizeof_x0213_combining_chars</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>x0213_combining_table</name><index>[<expr><name>sizeof_x0213_combining_table</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>x0213_1_surrogate_table</name><index>[<expr><name>sizeof_x0213_1_surrogate_table</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>x0213_2_surrogate_table</name><index>[<expr><name>sizeof_x0213_2_surrogate_table</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_utf8_to_euc_C2</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_utf8_to_euc_E5B8</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_utf8_to_euc_2bytes</name></cpp:macro> <cpp:value>112</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_utf8_to_euc_3bytes</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>utf8_to_euc_2bytes</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>utf8_to_euc_2bytes_ms</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>utf8_to_euc_2bytes_932</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>utf8_to_euc_2bytes_mac</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>utf8_to_euc_2bytes_x0213</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name><name>utf8_to_euc_3bytes</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name><name>utf8_to_euc_3bytes_ms</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name><name>utf8_to_euc_3bytes_932</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name><name>utf8_to_euc_3bytes_mac</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name><name>utf8_to_euc_3bytes_x0213</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE_NORMALIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORMALIZATION_TABLE_LENGTH</name></cpp:macro> <cpp:value>942</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORMALIZATION_TABLE_NFC_LENGTH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORMALIZATION_TABLE_NFD_LENGTH</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<struct>struct <name>normalization_pair</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>nfc</name><index>[<expr><name>NORMALIZATION_TABLE_NFC_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>nfd</name><index>[<expr><name>NORMALIZATION_TABLE_NFD_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>normalization_pair</name></name></type> <name><name>normalization_table</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP932_TABLE_BEGIN</name></cpp:macro> <cpp:value>0xFA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP932_TABLE_END</name></cpp:macro> <cpp:value>0xFC</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>shiftjis_cp932</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">189</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP932INV_TABLE_BEGIN</name></cpp:macro> <cpp:value>0xED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CP932INV_TABLE_END</name></cpp:macro> <cpp:value>0xEE</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>cp932inv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">189</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>shiftjis_x0212</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">189</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>x0212_shiftjis</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
