<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\nkf\nkf.c">








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_NKF_REVISION</name></cpp:macro> <cpp:value>"$Revision$"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_NKF_VERSION</name></cpp:macro> <cpp:value>NKF_VERSION " (" NKF_RELEASE_DATE ")"</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>




<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getc</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ungetc</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getc</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(input_ctr&gt;=i_len?-1:input[input_ctr++])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ungetc</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>input_ctr--</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCSIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>putchar</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRUE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FALSE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>putchar</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_nkf_putchar(c)</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>input_ctr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>i_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>output_ctr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>o_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>incsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_nkf_putchar</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>output_ctr</name> <operator>&gt;=</operator> <name>o_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o_len</name> <operator>+=</operator> <name>incsize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>o_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>incsize</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>output</name><index>[<expr><name>output_ctr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERL_XS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nkf-utf8/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nkf-utf8/utf8tbl.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nkf-utf8/nkf.c"</cpp:file></cpp:include>

<function><type><name>rb_encoding</name><modifier>*</modifier></type> <name>rb_nkf_enc_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>rb_enc_find_index</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>nkf_encoding</name> <modifier>*</modifier></type><name>nkf_enc</name> <init>= <expr><call><name>nkf_enc_find</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>rb_enc_find_index</name><argument_list>(<argument><expr><call><name>nkf_enc_name</name><argument_list>(<argument><expr><call><name>nkf_enc_to_base_encoding</name><argument_list>(<argument><expr><name>nkf_enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>rb_define_dummy_encoding</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>nkf_split_options</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>option</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_escaped</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_single_quoted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_double_quoted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition><block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>is_single_quoted</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>is_single_quoted</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>option</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>is_escaped</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>is_escaped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>option</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>is_escaped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>is_double_quoted</name></expr>)</condition><block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>is_double_quoted</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>option</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>is_single_quoted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name>is_double_quoted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>option</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>options</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if><else>else<block>{<block_content>
<expr_stmt><expr><name><name>option</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if<condition>(<expr><name>j</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><name><name>option</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>options</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_nkf_convert</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>reinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nkf_split_options</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_encoding</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"no output encoding given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>nkf_enc_to_index</name><argument_list>(<argument><expr><name>output_encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UTF_8_BOM</name></expr>:</case> <expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UTF_16BE_BOM</name></expr>:</case> <expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>UTF_16BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UTF_16LE_BOM</name></expr>:</case> <expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>UTF_16LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UTF_32BE_BOM</name></expr>:</case> <expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>UTF_32BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>UTF_32LE_BOM</name></expr>:</case> <expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>UTF_32LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>incsize</name> <operator>=</operator> <name>INCSIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input_ctr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_len</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output_ctr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o_len</name> <operator>=</operator> <call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kanji_convert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>output_ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mimeout_f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><call><name>rb_nkf_enc_get</name><argument_list>(<argument><expr><call><name>nkf_enc_name</name><argument_list>(<argument><expr><name>output_encoding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_nkf_guess</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>reinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input_ctr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>guess_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kanji_convert</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>guess_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><call><name>rb_nkf_enc_get</name><argument_list>(<argument><expr><call><name>get_guessed_code</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















































































































































































































































































<function><type><name>void</name></type>
<name>Init_nkf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mNKF</name> <init>= <expr><call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"NKF"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"nkf"</literal></expr></argument>, <argument><expr><name>rb_nkf_convert</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"guess"</literal></expr></argument>, <argument><expr><name>rb_nkf_guess</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><call><name>rb_singleton_class</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"guess"</literal></expr></argument>, <argument><expr><literal type="string">"guess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"AUTO"</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"NOCONV"</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><call><name>rb_nkf_enc_get</name><argument_list>(<argument><expr><literal type="string">"BINARY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"ASCII"</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><call><name>rb_nkf_enc_get</name><argument_list>(<argument><expr><literal type="string">"US-ASCII"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"JIS"</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><call><name>rb_nkf_enc_get</name><argument_list>(<argument><expr><literal type="string">"ISO-2022-JP"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"EUC"</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><call><name>rb_nkf_enc_get</name><argument_list>(<argument><expr><literal type="string">"EUC-JP"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"SJIS"</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><call><name>rb_nkf_enc_get</name><argument_list>(<argument><expr><literal type="string">"Shift_JIS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"UTF8"</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"UTF16"</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><call><name>rb_nkf_enc_get</name><argument_list>(<argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"UTF32"</literal></expr></argument>, <argument><expr><call><name>rb_enc_from_encoding</name><argument_list>(<argument><expr><call><name>rb_nkf_enc_get</name><argument_list>(<argument><expr><literal type="string">"UTF-32BE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>RUBY_NKF_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"NKF_VERSION"</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>NKF_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mNKF</name></expr></argument>, <argument><expr><literal type="string">"NKF_RELEASE_DATE"</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>NKF_RELEASE_DATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
