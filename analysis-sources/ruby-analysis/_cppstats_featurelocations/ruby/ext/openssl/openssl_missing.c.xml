<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\openssl\openssl_missing.c">








<cpp:include>#<cpp:directive>include</cpp:directive> RUBY_EXTCONF_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_ENGINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/engine.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/hmac.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509_vfy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"openssl_missing.h"</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_EC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EC_CURVE_NIST2NID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nid</name></decl>;</decl_stmt>
}</block> <decl><name><name>nist_curves</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"B-163"</literal></expr>, <expr><name>NID_sect163r2</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"B-233"</literal></expr>, <expr><name>NID_sect233r1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"B-283"</literal></expr>, <expr><name>NID_sect283r1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"B-409"</literal></expr>, <expr><name>NID_sect409r1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"B-571"</literal></expr>, <expr><name>NID_sect571r1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"K-163"</literal></expr>, <expr><name>NID_sect163k1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"K-233"</literal></expr>, <expr><name>NID_sect233k1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"K-283"</literal></expr>, <expr><name>NID_sect283k1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"K-409"</literal></expr>, <expr><name>NID_sect409k1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"K-571"</literal></expr>, <expr><name>NID_sect571k1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"P-192"</literal></expr>, <expr><name>NID_X9_62_prime192v1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"P-224"</literal></expr>, <expr><name>NID_secp224r1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"P-256"</literal></expr>, <expr><name>NID_X9_62_prime256v1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"P-384"</literal></expr>, <expr><name>NID_secp384r1</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"P-521"</literal></expr>, <expr><name>NID_secp521r1</name></expr>}</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type>
<name>ossl_EC_curve_nist2nid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>nist_curves</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>nist_curves</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>nist_curves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>nist_curves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nid</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NID_undef</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HMAC_CTX_NEW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>HMAC_CTX</name> <modifier>*</modifier></type>
<name>ossl_HMAC_CTX_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HMAC_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>OPENSSL_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HMAC_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>HMAC_CTX_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HMAC_CTX_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>ossl_HMAC_CTX_free</name><parameter_list>(<parameter><decl><type><name>HMAC_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>HMAC_CTX_cleanup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OPENSSL_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_CRL_GET0_SIGNATURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>ossl_X509_CRL_get0_signature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>X509_CRL</name> <modifier>*</modifier></type><name>crl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASN1_BIT_STRING</name> <modifier>*</modifier><modifier>*</modifier></type><name>psig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>X509_ALGOR</name> <modifier>*</modifier><modifier>*</modifier></type><name>palg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>psig</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psig</name> <operator>=</operator> <name><name>crl</name><operator>-&gt;</operator><name>signature</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>palg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>palg</name> <operator>=</operator> <name><name>crl</name><operator>-&gt;</operator><name>sig_alg</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_REQ_GET0_SIGNATURE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>ossl_X509_REQ_get0_signature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>X509_REQ</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASN1_BIT_STRING</name> <modifier>*</modifier><modifier>*</modifier></type><name>psig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>X509_ALGOR</name> <modifier>*</modifier><modifier>*</modifier></type><name>palg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>psig</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>psig</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>signature</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>palg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>palg</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>sig_alg</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
