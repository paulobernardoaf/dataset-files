<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\openssl\ossl_digest.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ossl.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetDigest</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TypedData_Get_Struct((obj), EVP_MD_CTX, &amp;ossl_digest_type, (ctx)); if (!(ctx)) { ossl_raise(rb_eRuntimeError, "Digest CTX wasn't initialized!"); } } while (0)</cpp:value></cpp:define>









<decl_stmt><decl><type><name>VALUE</name></type> <name>cDigest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>eDigestError</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_digest_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ossl_digest_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_digest_type</name> <init>= <expr><block>{
<expr><literal type="string">"OpenSSL/Digest"</literal></expr>,
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><name>ossl_digest_free</name></expr>,
}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type>
<name>ossl_evp_get_digestbyname</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>oid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>EVP_get_digestbyname</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>md</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oid</name> <operator>=</operator> <call><name>OBJ_txt2obj</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>EVP_get_digestbyobj</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ASN1_OBJECT_free</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>md</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"Unsupported digest algorithm (%"</literal><name>PRIsVALUE</name><literal type="string">")."</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDigest</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>EVP_MD_CTX_md</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>md</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>ossl_digest_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ossl_digest_alloc</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eDigestError</name></expr></argument>, <argument><expr><literal type="string">"EVP_MD_CTX_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eDigestError</name></expr></argument>, <argument><expr><literal type="string">"Digest initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_digest_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ossl_digest_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>VALUE</name></type> <name>ossl_digest_update</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_digest_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>ossl_evp_get_digestbyname</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>EVP_MD_CTX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ossl_digest_type</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eDigestError</name></expr></argument>, <argument><expr><literal type="string">"EVP_MD_CTX_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eDigestError</name></expr></argument>, <argument><expr><literal type="string">"Digest initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ossl_digest_update</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_digest_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ctx2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_frozen</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>other</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>EVP_MD_CTX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ossl_digest_type</name></expr></argument>, <argument><expr><name>ctx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ctx1</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eDigestError</name></expr></argument>, <argument><expr><literal type="string">"EVP_MD_CTX_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetDigest</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>ctx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_MD_CTX_copy</name><argument_list>(<argument><expr><name>ctx1</name></expr></argument>, <argument><expr><name>ctx2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eDigestError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_digest_reset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDigest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>EVP_MD_CTX_md</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eDigestError</name></expr></argument>, <argument><expr><literal type="string">"Digest initialization failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>
















<function><type><name>VALUE</name></type>
<name>ossl_digest_update</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDigest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eDigestError</name></expr></argument>, <argument><expr><literal type="string">"EVP_DigestUpdate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_digest_finish</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDigest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out_len</name> <operator>=</operator> <call><name>EVP_MD_CTX_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_DigestFinal_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eDigestError</name></expr></argument>, <argument><expr><literal type="string">"EVP_DigestFinal_ex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_digest_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDigest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>EVP_MD_name</name><argument_list>(<argument><expr><call><name>EVP_MD_CTX_md</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_digest_size</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDigest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>EVP_MD_CTX_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_digest_block_length</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDigest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>EVP_MD_CTX_block_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>Init_ossl_digest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_require</name><argument_list>(<argument><expr><literal type="string">"digest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
mOSSL = rb_define_module("OpenSSL");
eOSSLError = rb_define_class_under(mOSSL, "OpenSSLError", rb_eStandardError);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















































































































<expr_stmt><expr><name>cDigest</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mOSSL</name></expr></argument>, <argument><expr><literal type="string">"Digest"</literal></expr></argument>, <argument><expr><call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"Digest::Class"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>eDigestError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><literal type="string">"DigestError"</literal></expr></argument>, <argument><expr><name>eOSSLError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><name>ossl_digest_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_digest_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>ossl_digest_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><name>ossl_digest_reset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><literal type="string">"update"</literal></expr></argument>, <argument><expr><name>ossl_digest_update</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><literal type="string">"update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><literal type="string">"finish"</literal></expr></argument>, <argument><expr><name>ossl_digest_finish</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><literal type="string">"digest_length"</literal></expr></argument>, <argument><expr><name>ossl_digest_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><literal type="string">"block_length"</literal></expr></argument>, <argument><expr><name>ossl_digest_block_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDigest</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>ossl_digest_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
