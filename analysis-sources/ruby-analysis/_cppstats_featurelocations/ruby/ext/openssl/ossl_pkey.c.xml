<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\openssl\ossl_pkey.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ossl.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><name>VALUE</name></type> <name>mPKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cPKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ePKeyError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_private_q</name></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>call_check_ints0</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_thread_check_ints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>call_check_ints</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>call_check_ints0</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ossl_generate_cb_2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>BN_GENCB</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ossl_generate_cb_arg</name></name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator>struct <name>ossl_generate_cb_arg</name> <operator>*</operator><operator>)</operator><call><name>BN_GENCB_get_arg</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>yield</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_protect</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>interrupted</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>interrupted</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>rb_thread_call_with_gvl</name><argument_list>(<argument><expr><name>call_check_ints</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ossl_generate_cb_stop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ossl_generate_cb_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator>struct <name>ossl_generate_cb_arg</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>interrupted</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ossl_evp_pkey_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_evp_pkey_type</name> <init>= <expr><block>{
<expr><literal type="string">"OpenSSL/EVP_PKEY"</literal></expr>,
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><name>ossl_evp_pkey_free</name></expr>,
}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>pkey_new0</name><parameter_list>(<parameter><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkey</name> <operator>||</operator> <operator>(</operator><name>type</name> <operator>=</operator> <call><name>EVP_PKEY_base_id</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EVP_PKEY_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"pkey is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_RSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EVP_PKEY_RSA</name></expr>:</case>
<return>return <expr><call><name>ossl_rsa_new</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_DSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EVP_PKEY_DSA</name></expr>:</case>
<return>return <expr><call><name>ossl_dsa_new</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_DH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EVP_PKEY_DH</name></expr>:</case>
<return>return <expr><call><name>ossl_dh_new</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_EC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EVP_PKEY_EC</name></expr>:</case>
<return>return <expr><call><name>ossl_ec_new</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewPKey</name><argument_list>(<argument><expr><name>cPKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetPKey</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>ossl_pkey_new</name><parameter_list>(<parameter><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>pkey_new0</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>pkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_pkey_new_from_data</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>data</name></decl>, <decl><type ref="prev"/><name>pass</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pass</name> <operator>=</operator> <call><name>ossl_pem_passwd_value</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bio</name> <operator>=</operator> <call><name>ossl_obj2bio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>d2i_PrivateKey_bio</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>OSSL_BIO_reset</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>d2i_PKCS8PrivateKey_bio</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ossl_pem_passwd_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>OSSL_BIO_reset</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>d2i_PUBKEY_bio</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>OSSL_BIO_reset</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>PEM_read_bio_PrivateKey</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ossl_pem_passwd_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>OSSL_BIO_reset</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>PEM_read_bio_PUBKEY</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"Could not parse PKey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>ok</name>:</label>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ossl_pkey_new</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ossl_pkey_check_public_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pubkey</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_missing_parameters</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"parameters missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>EVP_PKEY_get0</name><argument_list>(<argument><expr><operator>(</operator><name>EVP_PKEY</name> <operator>*</operator><operator>)</operator><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>EVP_PKEY_base_id</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EVP_PKEY_RSA</name></expr>:</case>
<expr_stmt><expr><call><name>RSA_get0_key</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EVP_PKEY_DSA</name></expr>:</case>
<expr_stmt><expr><call><name>DSA_get0_key</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pubkey</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EVP_PKEY_DH</name></expr>:</case>
<expr_stmt><expr><call><name>DH_get0_key</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pubkey</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_EC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EVP_PKEY_EC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>EC_KEY_get0_public_key</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>

<return>return;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"public key missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>EVP_PKEY</name> <modifier>*</modifier></type>
<name>GetPKeyPtr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPKey</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pkey</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EVP_PKEY</name> <modifier>*</modifier></type>
<name>GetPrivPKeyPtr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_private_q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Qtrue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"Private key is needed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetPKey</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pkey</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EVP_PKEY</name> <modifier>*</modifier></type>
<name>DupPKeyPtr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPKey</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_up_ref</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pkey</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_pkey_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewPKey</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>EVP_PKEY_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SetPKey</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_pkey_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_instance_of</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>cPKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"OpenSSL::PKey::PKey can't be instantiated directly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>do_pkcs8_export</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to_der</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cipher</name></decl>, <decl><type ref="prev"/><name>pass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_CIPHER</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPKey</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cipher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>ossl_evp_get_cipherbyname</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pass</name> <operator>=</operator> <call><name>ossl_pem_passwd_value</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bio</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"BIO_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to_der</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>i2d_PKCS8PrivateKey_bio</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ossl_pem_passwd_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"i2d_PKCS8PrivateKey_bio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PEM_write_bio_PKCS8PrivateKey</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>ossl_pem_passwd_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"PEM_write_bio_PKCS8PrivateKey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_pkey_private_to_der</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>do_pkcs8_export</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_pkey_private_to_pem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>do_pkcs8_export</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>do_spki_export</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to_der</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPKey</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bio</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bio</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"BIO_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to_der</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>i2d_PUBKEY_bio</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"i2d_PUBKEY_bio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PEM_write_bio_PUBKEY</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"PEM_write_bio_PUBKEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_pkey_public_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>do_spki_export</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_pkey_public_to_pem</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>do_spki_export</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_pkey_sign</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>digest</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pkey</name> <operator>=</operator> <call><name>GetPrivPKeyPtr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>ossl_evp_get_digestbyname</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>EVP_PKEY_size</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"EVP_MD_CTX_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_SignInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"EVP_SignInit_ex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_SignUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"EVP_SignUpdate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>EVP_SignFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_len</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"EVP_SignFinal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_pkey_verify</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>digest</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>siglen</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPKey</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_pkey_check_public_key</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>ossl_evp_get_digestbyname</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>siglen</name> <operator>=</operator> <call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"EVP_MD_CTX_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_VerifyInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"EVP_VerifyInit_ex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_VerifyUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"EVP_VerifyUpdate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>EVP_VerifyFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><call><name>ossl_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>Qtrue</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKeyError</name></expr></argument>, <argument><expr><literal type="string">"EVP_VerifyFinal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>Init_ossl_pkey</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
mOSSL = rb_define_module("OpenSSL");
eOSSLError = rb_define_class_under(mOSSL, "OpenSSLError", rb_eStandardError);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




















































<expr_stmt><expr><name>mPKey</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mOSSL</name></expr></argument>, <argument><expr><literal type="string">"PKey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>ePKeyError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mPKey</name></expr></argument>, <argument><expr><literal type="string">"PKeyError"</literal></expr></argument>, <argument><expr><name>eOSSLError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>cPKey</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mPKey</name></expr></argument>, <argument><expr><literal type="string">"PKey"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mPKey</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>, <argument><expr><name>ossl_pkey_new_from_data</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cPKey</name></expr></argument>, <argument><expr><name>ossl_pkey_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPKey</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_pkey_initialize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPKey</name></expr></argument>, <argument><expr><literal type="string">"private_to_der"</literal></expr></argument>, <argument><expr><name>ossl_pkey_private_to_der</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPKey</name></expr></argument>, <argument><expr><literal type="string">"private_to_pem"</literal></expr></argument>, <argument><expr><name>ossl_pkey_private_to_pem</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPKey</name></expr></argument>, <argument><expr><literal type="string">"public_to_der"</literal></expr></argument>, <argument><expr><name>ossl_pkey_public_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPKey</name></expr></argument>, <argument><expr><literal type="string">"public_to_pem"</literal></expr></argument>, <argument><expr><name>ossl_pkey_public_to_pem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPKey</name></expr></argument>, <argument><expr><literal type="string">"sign"</literal></expr></argument>, <argument><expr><name>ossl_pkey_sign</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPKey</name></expr></argument>, <argument><expr><literal type="string">"verify"</literal></expr></argument>, <argument><expr><name>ossl_pkey_verify</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_private_q</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"private?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>Init_ossl_rsa</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Init_ossl_dsa</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Init_ossl_dh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Init_ossl_ec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
