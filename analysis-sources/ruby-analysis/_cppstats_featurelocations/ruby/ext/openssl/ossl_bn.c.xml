<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\openssl\ossl_bn.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ossl.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NewBN</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TypedData_Wrap_Struct((klass), &amp;ossl_bn_type, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetBN</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(bn)) { ossl_raise(rb_eRuntimeError, "BN wasn't initialized!"); } RTYPEDDATA_DATA(obj) = (bn); } while (0)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetBN</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TypedData_Get_Struct((obj), BIGNUM, &amp;ossl_bn_type, (bn)); if (!(bn)) { ossl_raise(rb_eRuntimeError, "BN wasn't initialized!"); } } while (0)</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>ossl_bn_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_bn_type</name> <init>= <expr><block>{
<expr><literal type="string">"OpenSSL/BN"</literal></expr>,
<expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><name>ossl_bn_free</name></expr>,
}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>VALUE</name></type> <name>cBN</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>VALUE</name></type> <name>eBNError</name></decl>;</decl_stmt>




<function><type><name>VALUE</name></type>
<name>ossl_bn_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>newbn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewBN</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newbn</name> <operator>=</operator> <ternary><condition><expr><name>bn</name></expr> ?</condition><then> <expr><call><name>BN_dup</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>BN_new</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newbn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SetBN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>newbn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BIGNUM</name> <modifier>*</modifier></type>
<name>integer_to_bnptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bin</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>un</name> <init>= <expr><call><name>labs</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>un</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>un</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><literal type="string">"BN_bin2bn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BN_set_negative</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>rb_absint_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>INT_MAX</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><literal type="string">"bignum too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bin</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><macro><name>ALLOCV_N</name><argument_list>(<argument>unsigned char</argument>, <argument>buf</argument>, <argument>len</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>rb_integer_pack</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTEGER_PACK_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><literal type="string">"BN_bin2bn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BN_set_negative</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>bn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>try_convert_to_bn</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>newobj</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>cBN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>obj</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newobj</name> <operator>=</operator> <call><name>NewBN</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>integer_to_bnptr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetBN</name><argument_list>(<argument><expr><name>newobj</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>newobj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BIGNUM</name> <modifier>*</modifier></type>
<name>ossl_bn_value_ptr</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>try_convert_to_bn</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"Cannot convert into OpenSSL::BN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<return>return <expr><name>bn</name></expr>;</return>
</block_content>}</block></function>









<decl_stmt><decl><type><name>BN_CTX</name> <modifier>*</modifier></type><name>ossl_bn_ctx</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>NewBN</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bn</name> <operator>=</operator> <call><name>BN_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SetBN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>integer_to_bnptr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>cBN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_copy</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>base</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>StringValuePtr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_mpi2bn</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>StringValuePtr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_bin2bn</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_dec2bn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bn</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_hex2bn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bn</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid radix %d"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_to_s</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>base</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>BN_bn2mpi</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BN_bn2mpi</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>BN_num_bytes</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BN_bn2bin</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>BN_bn2dec</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_buf2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>rb_long2int</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">16</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>BN_bn2hex</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_buf2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>rb_long2int</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid radix %d"</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_to_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>txt</name> <operator>=</operator> <call><name>BN_bn2hex</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>rb_cstr_to_inum</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OPENSSL_free</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_to_bn</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_coerce</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_STRING</name></expr>:</case>
<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>ossl_bn_to_s</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<expr_stmt><expr><name>self</name> <operator>=</operator> <call><name>ossl_bn_to_i</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>cBN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"Don't know how to coerce"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_BOOL1</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_##func(VALUE self) { BIGNUM *bn; GetBN(self, bn); if (BN_##func(bn)) { return Qtrue; } return Qfalse; }</cpp:value></cpp:define>
















<macro><name>BIGNUM_BOOL1</name><argument_list>(<argument>is_zero</argument>)</argument_list></macro>






<macro><name>BIGNUM_BOOL1</name><argument_list>(<argument>is_one</argument>)</argument_list></macro>






<macro><name>BIGNUM_BOOL1</name><argument_list>(<argument>is_odd</argument>)</argument_list></macro>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_is_negative</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BN_is_zero</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name>BN_is_negative</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_1c</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_##func(VALUE self) { BIGNUM *bn, *result; VALUE obj; GetBN(self, bn); obj = NewBN(rb_obj_class(self)); if (!(result = BN_new())) { ossl_raise(eBNError, NULL); } if (!BN_##func(result, bn, ossl_bn_ctx)) { BN_free(result); ossl_raise(eBNError, NULL); } SetBN(obj, result); return obj; }</cpp:value></cpp:define>























<macro><name>BIGNUM_1c</name><argument_list>(<argument>sqr</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_2</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_##func(VALUE self, VALUE other) { BIGNUM *bn1, *bn2 = GetBNPtr(other), *result; VALUE obj; GetBN(self, bn1); obj = NewBN(rb_obj_class(self)); if (!(result = BN_new())) { ossl_raise(eBNError, NULL); } if (!BN_##func(result, bn1, bn2)) { BN_free(result); ossl_raise(eBNError, NULL); } SetBN(obj, result); return obj; }</cpp:value></cpp:define>























<macro><name>BIGNUM_2</name><argument_list>(<argument>add</argument>)</argument_list></macro>






<macro><name>BIGNUM_2</name><argument_list>(<argument>sub</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_2c</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_##func(VALUE self, VALUE other) { BIGNUM *bn1, *bn2 = GetBNPtr(other), *result; VALUE obj; GetBN(self, bn1); obj = NewBN(rb_obj_class(self)); if (!(result = BN_new())) { ossl_raise(eBNError, NULL); } if (!BN_##func(result, bn1, bn2, ossl_bn_ctx)) { BN_free(result); ossl_raise(eBNError, NULL); } SetBN(obj, result); return obj; }</cpp:value></cpp:define>























<macro><name>BIGNUM_2c</name><argument_list>(<argument>mul</argument>)</argument_list></macro>






<macro><name>BIGNUM_2c</name><argument_list>(<argument>mod</argument>)</argument_list></macro>






<macro><name>BIGNUM_2c</name><argument_list>(<argument>exp</argument>)</argument_list></macro>






<macro><name>BIGNUM_2c</name><argument_list>(<argument>gcd</argument>)</argument_list></macro>






<macro><name>BIGNUM_2c</name><argument_list>(<argument>mod_sqr</argument>)</argument_list></macro>






<macro><name>BIGNUM_2c</name><argument_list>(<argument>mod_inverse</argument>)</argument_list></macro>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_div</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bn2</name> <init>= <expr><call><name>GetBNPtr</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name></decl>, <decl><type ref="prev"/><name>obj1</name></decl>, <decl><type ref="prev"/><name>obj2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj1</name> <operator>=</operator> <call><name>NewBN</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj2</name> <operator>=</operator> <call><name>NewBN</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r1</name> <operator>=</operator> <call><name>BN_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>r2</name> <operator>=</operator> <call><name>BN_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_div</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>, <argument><expr><name>bn1</name></expr></argument>, <argument><expr><name>bn2</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SetBN</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetBN</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>obj1</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_3c</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_##func(VALUE self, VALUE other1, VALUE other2) { BIGNUM *bn1, *bn2 = GetBNPtr(other1); BIGNUM *bn3 = GetBNPtr(other2), *result; VALUE obj; GetBN(self, bn1); obj = NewBN(rb_obj_class(self)); if (!(result = BN_new())) { ossl_raise(eBNError, NULL); } if (!BN_##func(result, bn1, bn2, bn3, ossl_bn_ctx)) { BN_free(result); ossl_raise(eBNError, NULL); } SetBN(obj, result); return obj; }</cpp:value></cpp:define>
























<macro><name>BIGNUM_3c</name><argument_list>(<argument>mod_add</argument>)</argument_list></macro>






<macro><name>BIGNUM_3c</name><argument_list>(<argument>mod_sub</argument>)</argument_list></macro>






<macro><name>BIGNUM_3c</name><argument_list>(<argument>mod_mul</argument>)</argument_list></macro>






<macro><name>BIGNUM_3c</name><argument_list>(<argument>mod_exp</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_BIT</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_##func(VALUE self, VALUE bit) { BIGNUM *bn; GetBN(self, bn); if (!BN_##func(bn, NUM2INT(bit))) { ossl_raise(eBNError, NULL); } return self; }</cpp:value></cpp:define>
















<macro><name>BIGNUM_BIT</name><argument_list>(<argument>set_bit</argument>)</argument_list></macro>






<macro><name>BIGNUM_BIT</name><argument_list>(<argument>clear_bit</argument>)</argument_list></macro>






<macro><name>BIGNUM_BIT</name><argument_list>(<argument>mask_bits</argument>)</argument_list></macro>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_is_bit_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>bit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BN_is_bit_set</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_SHIFT</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_##func(VALUE self, VALUE bits) { BIGNUM *bn, *result; int b; VALUE obj; b = NUM2INT(bits); GetBN(self, bn); obj = NewBN(rb_obj_class(self)); if (!(result = BN_new())) { ossl_raise(eBNError, NULL); } if (!BN_##func(result, bn, b)) { BN_free(result); ossl_raise(eBNError, NULL); } SetBN(obj, result); return obj; }</cpp:value></cpp:define>

























<macro><name>BIGNUM_SHIFT</name><argument_list>(<argument>lshift</argument>)</argument_list></macro>






<macro><name>BIGNUM_SHIFT</name><argument_list>(<argument>rshift</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_SELF_SHIFT</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_self_##func(VALUE self, VALUE bits) { BIGNUM *bn; int b; b = NUM2INT(bits); GetBN(self, bn); if (!BN_##func(bn, bn, b)) ossl_raise(eBNError, NULL); return self; }</cpp:value></cpp:define>

















<macro><name>BIGNUM_SELF_SHIFT</name><argument_list>(<argument>lshift</argument>)</argument_list></macro>






<macro><name>BIGNUM_SELF_SHIFT</name><argument_list>(<argument>rshift</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_RAND</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_s_##func(int argc, VALUE *argv, VALUE klass) { BIGNUM *result; int bottom = 0, top = 0, b; VALUE bits, fill, odd, obj; switch (rb_scan_args(argc, argv, "12", &amp;bits, &amp;fill, &amp;odd)) { case 3: bottom = (odd == Qtrue) ? 1 : 0; case 2: top = NUM2INT(fill); } b = NUM2INT(bits); obj = NewBN(klass); if (!(result = BN_new())) { ossl_raise(eBNError, NULL); } if (!BN_##func(result, b, top, bottom)) { BN_free(result); ossl_raise(eBNError, NULL); } SetBN(obj, result); return obj; }</cpp:value></cpp:define>































<macro><name>BIGNUM_RAND</name><argument_list>(<argument>rand</argument>)</argument_list></macro>





<macro><name>BIGNUM_RAND</name><argument_list>(<argument>pseudo_rand</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_RAND_RANGE</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_s_##func##_range(VALUE klass, VALUE range) { BIGNUM *bn = GetBNPtr(range), *result; VALUE obj = NewBN(klass); if (!(result = BN_new())) { ossl_raise(eBNError, NULL); } if (!BN_##func##_range(result, bn)) { BN_free(result); ossl_raise(eBNError, NULL); } SetBN(obj, result); return obj; }</cpp:value></cpp:define>






















<macro><name>BIGNUM_RAND_RANGE</name><argument_list>(<argument>rand</argument>)</argument_list></macro>







<macro><name>BIGNUM_RAND_RANGE</name><argument_list>(<argument>pseudo_rand</argument>)</argument_list></macro>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_s_generate_prime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>add</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rem</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>safe</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vnum</name></decl>, <decl><type ref="prev"/><name>vsafe</name></decl>, <decl><type ref="prev"/><name>vadd</name></decl>, <decl><type ref="prev"/><name>vrem</name></decl>, <decl><type ref="prev"/><name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"13"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vnum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsafe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vadd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vrem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vsafe</name> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>safe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>vadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rem</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>vrem</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>GetBNPtr</name><argument_list>(<argument><expr><name>vrem</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewBN</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>result</name> <operator>=</operator> <call><name>BN_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_generate_prime_ex</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>safe</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>rem</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SetBN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_NUM</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_##func(VALUE self) { BIGNUM *bn; GetBN(self, bn); return INT2NUM(BN_##func(bn)); }</cpp:value></cpp:define>













<macro><name>BIGNUM_NUM</name><argument_list>(<argument>num_bytes</argument>)</argument_list></macro>






<macro><name>BIGNUM_NUM</name><argument_list>(<argument>num_bits</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bn2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_frozen</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>other</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bn2</name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_copy</name><argument_list>(<argument><expr><name>bn1</name></expr></argument>, <argument><expr><name>bn2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_uplus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_uminus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bn2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewBN</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bn2</name> <operator>=</operator> <call><name>BN_dup</name><argument_list>(<argument><expr><name>bn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bn2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><literal type="string">"BN_dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetBN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>bn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_set_negative</name><argument_list>(<argument><expr><name>bn2</name></expr></argument>, <argument><expr><operator>!</operator><call><name>BN_is_negative</name><argument_list>(<argument><expr><name>bn2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGNUM_CMP</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_bn_##func(VALUE self, VALUE other) { BIGNUM *bn1, *bn2 = GetBNPtr(other); GetBN(self, bn1); return INT2NUM(BN_##func(bn1, bn2)); }</cpp:value></cpp:define>


















<macro><name>BIGNUM_CMP</name><argument_list>(<argument>cmp</argument>)</argument_list></macro>






<macro><name>BIGNUM_CMP</name><argument_list>(<argument>ucmp</argument>)</argument_list></macro>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_eq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bn2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>try_convert_to_bn</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>bn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_cmp</name><argument_list>(<argument><expr><name>bn1</name></expr></argument>, <argument><expr><name>bn2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_eql</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bn2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>cBN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>bn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>BN_cmp</name><argument_list>(<argument><expr><name>bn1</name></expr></argument>, <argument><expr><name>bn2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_hash</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>BN_num_bytes</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ALLOCV</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BN_bn2bin</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><literal type="string">"BN_bn2bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>ST2FIX</name><argument_list>(<argument><expr><call><name>rb_memhash</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_is_prime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vchecks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>checks</name> <init>= <expr><name>BN_prime_checks</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vchecks</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>checks</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vchecks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>BN_is_prime_ex</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>checks</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>Qtrue</name></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><name>Qfalse</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ossl_bn_is_prime_fasttest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vchecks</name></decl>, <decl><type ref="prev"/><name>vtrivdiv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>checks</name> <init>= <expr><name>BN_prime_checks</name></expr></init></decl>, <decl><type ref="prev"/><name>do_trial_division</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vchecks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vtrivdiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>vchecks</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>checks</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vchecks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetBN</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vtrivdiv</name> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>do_trial_division</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>BN_is_prime_fasttest_ex</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>checks</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>, <argument><expr><name>do_trial_division</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<return>return <expr><name>Qtrue</name></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<return>return <expr><name>Qfalse</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eBNError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>Init_ossl_bn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
mOSSL = rb_define_module("OpenSSL");
eOSSLError = rb_define_class_under(mOSSL, "OpenSSLError", rb_eStandardError);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ossl_bn_ctx</name> <operator>=</operator> <call><name>BN_CTX_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"Cannot init BN_CTX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eBNError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mOSSL</name></expr></argument>, <argument><expr><literal type="string">"BNError"</literal></expr></argument>, <argument><expr><name>eOSSLError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cBN</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mOSSL</name></expr></argument>, <argument><expr><literal type="string">"BN"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><name>ossl_bn_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_bn_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>ossl_bn_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"copy"</literal></expr></argument>, <argument><expr><name>ossl_bn_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"num_bytes"</literal></expr></argument>, <argument><expr><name>ossl_bn_num_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"num_bits"</literal></expr></argument>, <argument><expr><name>ossl_bn_num_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"+@"</literal></expr></argument>, <argument><expr><name>ossl_bn_uplus</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"-@"</literal></expr></argument>, <argument><expr><name>ossl_bn_uminus</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>ossl_bn_add</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>ossl_bn_sub</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>ossl_bn_mul</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"sqr"</literal></expr></argument>, <argument><expr><name>ossl_bn_sqr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>ossl_bn_div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>, <argument><expr><name>ossl_bn_mod</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"mod_add"</literal></expr></argument>, <argument><expr><name>ossl_bn_mod_add</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"mod_sub"</literal></expr></argument>, <argument><expr><name>ossl_bn_mod_sub</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"mod_mul"</literal></expr></argument>, <argument><expr><name>ossl_bn_mod_mul</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"mod_sqr"</literal></expr></argument>, <argument><expr><name>ossl_bn_mod_sqr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"**"</literal></expr></argument>, <argument><expr><name>ossl_bn_exp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"mod_exp"</literal></expr></argument>, <argument><expr><name>ossl_bn_mod_exp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"gcd"</literal></expr></argument>, <argument><expr><name>ossl_bn_gcd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"cmp"</literal></expr></argument>, <argument><expr><name>ossl_bn_cmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"&lt;=&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"cmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"ucmp"</literal></expr></argument>, <argument><expr><name>ossl_bn_ucmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"eql?"</literal></expr></argument>, <argument><expr><name>ossl_bn_eql</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><name>ossl_bn_hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><name>ossl_bn_eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"==="</literal></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"zero?"</literal></expr></argument>, <argument><expr><name>ossl_bn_is_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"one?"</literal></expr></argument>, <argument><expr><name>ossl_bn_is_one</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"odd?"</literal></expr></argument>, <argument><expr><name>ossl_bn_is_odd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"negative?"</literal></expr></argument>, <argument><expr><name>ossl_bn_is_negative</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"rand"</literal></expr></argument>, <argument><expr><name>ossl_bn_s_rand</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"pseudo_rand"</literal></expr></argument>, <argument><expr><name>ossl_bn_s_pseudo_rand</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"rand_range"</literal></expr></argument>, <argument><expr><name>ossl_bn_s_rand_range</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"pseudo_rand_range"</literal></expr></argument>, <argument><expr><name>ossl_bn_s_pseudo_rand_range</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"generate_prime"</literal></expr></argument>, <argument><expr><name>ossl_bn_s_generate_prime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"prime?"</literal></expr></argument>, <argument><expr><name>ossl_bn_is_prime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"prime_fasttest?"</literal></expr></argument>, <argument><expr><name>ossl_bn_is_prime_fasttest</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"set_bit!"</literal></expr></argument>, <argument><expr><name>ossl_bn_set_bit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"clear_bit!"</literal></expr></argument>, <argument><expr><name>ossl_bn_clear_bit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"bit_set?"</literal></expr></argument>, <argument><expr><name>ossl_bn_is_bit_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"mask_bits!"</literal></expr></argument>, <argument><expr><name>ossl_bn_mask_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><name>ossl_bn_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>, <argument><expr><name>ossl_bn_rshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"lshift!"</literal></expr></argument>, <argument><expr><name>ossl_bn_self_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"rshift!"</literal></expr></argument>, <argument><expr><name>ossl_bn_self_rshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>ossl_bn_to_s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"to_i"</literal></expr></argument>, <argument><expr><name>ossl_bn_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"to_int"</literal></expr></argument>, <argument><expr><literal type="string">"to_i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"to_bn"</literal></expr></argument>, <argument><expr><name>ossl_bn_to_bn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"coerce"</literal></expr></argument>, <argument><expr><name>ossl_bn_coerce</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cBN</name></expr></argument>, <argument><expr><literal type="string">"mod_inverse"</literal></expr></argument>, <argument><expr><name>ossl_bn_mod_inverse</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></function>
</unit>
