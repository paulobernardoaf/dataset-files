<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\gdbm\gdbm.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gdbm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

























































<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cGDBM</name></decl>, <decl><type ref="prev"/><name>rb_eGDBMError</name></decl>, <decl><type ref="prev"/><name>rb_eGDBMFatalError</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>&gt;</operator> <name>SIZEOF_INT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOO_LONG</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((long)(+(int)(n)) != (long)(n))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOO_LONG</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_GDBM_RW_BIT</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MY_BLOCK_SIZE</name></cpp:macro> <cpp:value>(2048)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MY_FATAL_FUNC</name></cpp:macro> <cpp:value>rb_gdbm_fatal</cpp:value></cpp:define>

<macro><name>NORETURN</name><argument_list>(<argument>static void rb_gdbm_fatal(const char *msg)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>NORETURN</name><argument_list>(<argument>static void closed_dbm(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_gdbm_fatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eGDBMFatalError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>dbmdata</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>di_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>di_dbm</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>closed_dbm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"closed GDBM file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetDBM</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>dbmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {TypedData_Get_Struct((obj), struct dbmdata, &amp;dbm_type, (dbmp));if ((dbmp)-&gt;di_dbm == 0) closed_dbm();} while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetDBM2</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>dbmp</name></type></parameter>, <parameter><type><name>dbm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {GetDBM((obj), (dbmp));(dbm) = (dbmp)-&gt;di_dbm;} while (0)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_dbm</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_dbm</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gdbm_close</name><argument_list>(<argument><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dbmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>memsize_dbm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dbmp</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_dbm</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>DBM_SIZEOF_DBM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>dbm_type</name> <init>= <expr><block>{
<expr><literal type="string">"gdbm"</literal></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>free_dbm</name></expr>, <expr><name>memsize_dbm</name></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,
}</block></expr></init></decl>;</decl_stmt>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_close</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdbm_close</name><argument_list>(<argument><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_dbm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_closed</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>dbmdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbm_type</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_dbm</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_s_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>

<return>return <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>dbmdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbm_type</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>file</name></decl>, <decl><type ref="prev"/><name>vmode</name></decl>, <decl><type ref="prev"/><name>vflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>dbmdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbm_type</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"12"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vflags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0666</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>vmode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>vflags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FilePathValue</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GDBM_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>GDBM_CLOEXEC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>RUBY_GDBM_RW_BIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>RUBY_GDBM_RW_BIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dbm</name> <operator>=</operator> <call><name>gdbm_open</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MY_BLOCK_SIZE</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>MY_FATAL_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>dbm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dbm</name> <operator>=</operator> <call><name>gdbm_open</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MY_BLOCK_SIZE</name></expr></argument>,
<argument><expr><name>GDBM_WRCREAT</name><operator>|</operator><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>MY_FATAL_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dbm</name> <operator>=</operator> <call><name>gdbm_open</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MY_BLOCK_SIZE</name></expr></argument>,
<argument><expr><name>GDBM_WRITER</name><operator>|</operator><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MY_FATAL_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dbm</name> <operator>=</operator> <call><name>gdbm_open</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MY_BLOCK_SIZE</name></expr></argument>,
<argument><expr><name>GDBM_READER</name><operator>|</operator><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MY_FATAL_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dbm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fd_fix_cloexec</name><argument_list>(<argument><expr><call><name>gdbm_fdesc</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gdbm_errno</name> <operator>==</operator> <name>GDBM_FILE_OPEN_ERROR</name> <operator>||</operator>
<name>gdbm_errno</name> <operator>==</operator> <name>GDBM_CANT_BE_READER</name> <operator>||</operator>
<name>gdbm_errno</name> <operator>==</operator> <name>GDBM_CANT_BE_WRITER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail_str</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eGDBMError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gdbm_strerror</name><argument_list>(<argument><expr><name>gdbm_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_dbm</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>gdbm_close</name><argument_list>(<argument><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_dbm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_dbm</name></name> <operator>=</operator> <name>dbm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_s_open</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>fgdbm_s_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>fgdbm_initialize</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>fgdbm_close</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gdbm_fetch</name><parameter_list>(<parameter><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl></parameter>, <parameter><decl><type><name>datum</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>gdbm_fetch</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>dptr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>dptr</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gdbm_fetch2</name><parameter_list>(<parameter><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keystr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExportStringValue</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TOO_LONG</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dptr</name></name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dsize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<return>return <expr><call><name>rb_gdbm_fetch</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gdbm_fetch3</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keystr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gdbm_firstkey</name><parameter_list>(<parameter><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>dptr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gdbm_nextkey</name><parameter_list>(<parameter><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keystr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>key2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TOO_LONG</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dptr</name></name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dsize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key2</name> <operator>=</operator> <call><name>gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key2</name><operator>.</operator><name>dptr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>key2</name><operator>.</operator><name>dptr</name></name></expr></argument>, <argument><expr><name><name>key2</name><operator>.</operator><name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key2</name><operator>.</operator><name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_fetch</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keystr</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ifnone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>valstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>valstr</name> <operator>=</operator> <call><name>rb_gdbm_fetch3</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ifnone</name> <operator>==</operator> <name>Qnil</name> <operator>&amp;&amp;</operator> <call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ifnone</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>valstr</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_aref</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keystr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_gdbm_fetch3</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_fetch_m</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>, <decl><type ref="prev"/><name>valstr</name></decl>, <decl><type ref="prev"/><name>ifnone</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keystr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifnone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>valstr</name> <operator>=</operator> <call><name>fgdbm_fetch</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>, <argument><expr><name>ifnone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>rb_block_given_p</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eIndexError</name></expr></argument>, <argument><expr><literal type="string">"key not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>valstr</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>valstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>, <decl><type ref="prev"/><name>valstr2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExportStringValue</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>valstr2</name> <operator>=</operator> <call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>valstr2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>int</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>valstr2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>valstr2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>keystr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_index</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_warn</name><argument_list>(<argument><expr><literal type="string">"GDBM#index is deprecated; use GDBM#key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>fgdbm_key</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_select</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>assoc</name> <init>= <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr><call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>assoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>assoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_values_at</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new</name> <init>= <expr><call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><call><name>rb_gdbm_fetch3</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_gdbm_modify</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>OBJ_FROZEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_error_frozen</name><argument_list>(<argument><expr><literal type="string">"GDBM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_gdbm_delete</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keystr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gdbm_modify</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExportStringValue</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TOO_LONG</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dptr</name></name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dsize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gdbm_exists</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gdbm_delete</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eGDBMError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gdbm_strerror</name><argument_list>(<argument><expr><name>gdbm_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_delete</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keystr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>valstr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>valstr</name> <operator>=</operator> <call><name>fgdbm_fetch</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gdbm_delete</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>valstr</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_shift</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>, <decl><type ref="prev"/><name>valstr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gdbm_modify</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>valstr</name> <operator>=</operator> <call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gdbm_delete</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_delete_if</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>, <decl><type ref="prev"/><name>valstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>ary</name> <init>= <expr><call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gdbm_modify</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>valstr</name> <operator>=</operator> <call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>rb_str_dup</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_gdbm_delete</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>=</operator> <name>n</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_ary_clear</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_clear</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>nextkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gdbm_modify</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
while (key = gdbm_firstkey(dbm), key.dptr) {
if (gdbm_delete(dbm, key)) {
free(key.dptr);
rb_raise(rb_eGDBMError, "%s", gdbm_strerror(gdbm_errno));
}
free(key.dptr);
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><name>key</name> <operator>=</operator> <call><name>gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr>;</condition> <incr><expr><name>key</name> <operator>=</operator> <name>nextkey</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nextkey</name> <operator>=</operator> <call><name>gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gdbm_delete</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>nextkey</name><operator>.</operator><name>dptr</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>nextkey</name><operator>.</operator><name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eGDBMError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gdbm_strerror</name><argument_list>(<argument><expr><name>gdbm_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_invert</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>, <decl><type ref="prev"/><name>valstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>valstr</name> <operator>=</operator> <call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>valstr</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_store</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keystr</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>valstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gdbm_modify</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExportStringValue</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ExportStringValue</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dptr</name></name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dsize</name></name> <operator>=</operator> <call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>dptr</name></name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><operator>.</operator><name>dsize</name></name> <operator>=</operator> <call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gdbm_store</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>GDBM_REPLACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EPERM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eGDBMError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gdbm_strerror</name><argument_list>(<argument><expr><name>gdbm_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>valstr</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type>
<name>update_i</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"pair must be [key, value]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>RARRAY_CONST_PTR</name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fgdbm_store</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_update</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"each_pair"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>update_i</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_replace</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>fgdbm_clear</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"each_pair"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>update_i</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_length</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>nextkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>key</name> <operator>=</operator> <call><name>gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr>;</condition> <incr><expr><name>key</name> <operator>=</operator> <name>nextkey</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nextkey</name> <operator>=</operator> <call><name>gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_empty_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dbm</name> <operator>=</operator> <name><name>dbmp</name><operator>-&gt;</operator><name>di_dbm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dbmp</name><operator>-&gt;</operator><name>di_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_each_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_each_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_each_pair</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr><call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_keys</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>, <decl><type ref="prev"/><name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_values</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>nextkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>valstr</name></decl>, <decl><type ref="prev"/><name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>key</name> <operator>=</operator> <call><name>gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr>;</condition> <incr><expr><name>key</name> <operator>=</operator> <name>nextkey</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nextkey</name> <operator>=</operator> <call><name>gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>valstr</name> <operator>=</operator> <call><name>rb_gdbm_fetch</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_has_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>keystr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExportStringValue</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>TOO_LONG</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dptr</name></name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dsize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gdbm_exists</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_has_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>valstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>, <decl><type ref="prev"/><name>valstr2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExportStringValue</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>valstr2</name> <operator>=</operator> <call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>valstr2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>int</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>valstr2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>valstr2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>valstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_to_a</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>, <decl><type ref="prev"/><name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr><call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>ary</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_reorganize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gdbm_modify</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdbm_reorganize</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fd_fix_cloexec</name><argument_list>(<argument><expr><call><name>gdbm_fdesc</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_sync</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gdbm_modify</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gdbm_sync</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_set_cachesize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optval</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gdbm_setopt</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>GDBM_CACHESIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eGDBMError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gdbm_strerror</name><argument_list>(<argument><expr><name>gdbm_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_set_fastmode</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gdbm_setopt</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>GDBM_FASTMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eGDBMError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gdbm_strerror</name><argument_list>(<argument><expr><name>gdbm_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_set_syncmode</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GDBM_SYNCMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fgdbm_set_fastmode</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>gdbm_setopt</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>GDBM_FASTMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optval</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eGDBMError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>gdbm_strerror</name><argument_list>(<argument><expr><name>gdbm_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_to_hash</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dbmdata</name></name> <modifier>*</modifier></type><name>dbmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GDBM_FILE</name></type> <name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>keystr</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetDBM2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dbmp</name></expr></argument>, <argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>keystr</name> <operator>=</operator> <call><name>rb_gdbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>, <argument><expr><call><name>rb_gdbm_fetch2</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>fgdbm_reject</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_hash_delete_if</name><argument_list>(<argument><expr><call><name>fgdbm_to_hash</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Init_gdbm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>rb_cGDBM</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"GDBM"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_eGDBMError</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"GDBMError"</literal></expr></argument>, <argument><expr><name>rb_eStandardError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_eGDBMFatalError</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"GDBMFatalError"</literal></expr></argument>, <argument><expr><name>rb_eException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_include_module</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><name>rb_mEnumerable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><name>fgdbm_s_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>, <argument><expr><name>fgdbm_s_open</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>fgdbm_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><name>fgdbm_close</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"closed?"</literal></expr></argument>, <argument><expr><name>fgdbm_closed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>fgdbm_aref</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"fetch"</literal></expr></argument>, <argument><expr><name>fgdbm_fetch_m</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"[]="</literal></expr></argument>, <argument><expr><name>fgdbm_store</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"store"</literal></expr></argument>, <argument><expr><name>fgdbm_store</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name>fgdbm_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><name>fgdbm_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"select"</literal></expr></argument>, <argument><expr><name>fgdbm_select</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"values_at"</literal></expr></argument>, <argument><expr><name>fgdbm_values_at</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name>fgdbm_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><name>fgdbm_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"empty?"</literal></expr></argument>, <argument><expr><name>fgdbm_empty_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"each"</literal></expr></argument>, <argument><expr><name>fgdbm_each_pair</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"each_value"</literal></expr></argument>, <argument><expr><name>fgdbm_each_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"each_key"</literal></expr></argument>, <argument><expr><name>fgdbm_each_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"each_pair"</literal></expr></argument>, <argument><expr><name>fgdbm_each_pair</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"keys"</literal></expr></argument>, <argument><expr><name>fgdbm_keys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"values"</literal></expr></argument>, <argument><expr><name>fgdbm_values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"shift"</literal></expr></argument>, <argument><expr><name>fgdbm_shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"delete"</literal></expr></argument>, <argument><expr><name>fgdbm_delete</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"delete_if"</literal></expr></argument>, <argument><expr><name>fgdbm_delete_if</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"reject!"</literal></expr></argument>, <argument><expr><name>fgdbm_delete_if</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"reject"</literal></expr></argument>, <argument><expr><name>fgdbm_reject</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><name>fgdbm_clear</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"invert"</literal></expr></argument>, <argument><expr><name>fgdbm_invert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"update"</literal></expr></argument>, <argument><expr><name>fgdbm_update</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"replace"</literal></expr></argument>, <argument><expr><name>fgdbm_replace</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"reorganize"</literal></expr></argument>, <argument><expr><name>fgdbm_reorganize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"sync"</literal></expr></argument>, <argument><expr><name>fgdbm_sync</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"cachesize="</literal></expr></argument>, <argument><expr><name>fgdbm_set_cachesize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"fastmode="</literal></expr></argument>, <argument><expr><name>fgdbm_set_fastmode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"syncmode="</literal></expr></argument>, <argument><expr><name>fgdbm_set_syncmode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"include?"</literal></expr></argument>, <argument><expr><name>fgdbm_has_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"has_key?"</literal></expr></argument>, <argument><expr><name>fgdbm_has_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"member?"</literal></expr></argument>, <argument><expr><name>fgdbm_has_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"has_value?"</literal></expr></argument>, <argument><expr><name>fgdbm_has_value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"key?"</literal></expr></argument>, <argument><expr><name>fgdbm_has_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"value?"</literal></expr></argument>, <argument><expr><name>fgdbm_has_value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"to_a"</literal></expr></argument>, <argument><expr><name>fgdbm_to_a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"to_hash"</literal></expr></argument>, <argument><expr><name>fgdbm_to_hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"READER"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>GDBM_READER</name><operator>|</operator><name>RUBY_GDBM_RW_BIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"WRITER"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>GDBM_WRITER</name><operator>|</operator><name>RUBY_GDBM_RW_BIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"WRCREAT"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>GDBM_WRCREAT</name><operator>|</operator><name>RUBY_GDBM_RW_BIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"NEWDB"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>GDBM_NEWDB</name><operator>|</operator><name>RUBY_GDBM_RW_BIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"FAST"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>GDBM_FAST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GDBM_SYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"SYNC"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>GDBM_SYNC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GDBM_NOLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"NOLOCK"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>GDBM_NOLOCK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cGDBM</name></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>gdbm_version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
