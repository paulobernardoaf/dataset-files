<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\-test-\gvl\call_without_gvl\call_without_gvl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/thread.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type>
<name>native_sleep_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeval</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>select</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timeval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_runnable_sleep</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeval</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"timeout must be non nil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>timeval</name> <operator>=</operator> <call><name>rb_time_interval</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_thread_call_without_gvl</name><argument_list>(<argument><expr><name>native_sleep_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeval</name></expr></argument>, <argument><expr><name>RUBY_UBF_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>thread</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>loop_ctl</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>notify_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>stop</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>do_loop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>loop_ctl</name></name> <modifier>*</modifier></type><name>ctl</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ssize_t</name></type> <name>err</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name><name>ctl</name><operator>-&gt;</operator><name>notify_fd</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"write error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>ctl</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>select</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>stop_set</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>loop_ctl</name></name> <modifier>*</modifier></type><name>ctl</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctl</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>thread_ubf_async_safe</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>notify_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>loop_ctl</name></name></type> <name>ctl</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>notify_fd</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>notify_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_nogvl</name><argument_list>(<argument><expr><name>do_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>stop_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><name>RB_NOGVL_UBF_ASYNC_SAFE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>thread</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Init_call_without_gvl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"__runnable_sleep__"</literal></expr></argument>, <argument><expr><name>thread_runnable_sleep</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cThread</name></expr></argument>, <argument><expr><literal type="string">"__ubf_async_safe__"</literal></expr></argument>, <argument><expr><name>thread_ubf_async_safe</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
