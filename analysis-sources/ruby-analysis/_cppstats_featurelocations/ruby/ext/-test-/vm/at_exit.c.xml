<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\-test-\vm\at_exit.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby/ruby.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby/vm.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_nothing</name><parameter_list>(<parameter><decl><type><name>ruby_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_begin</name><parameter_list>(<parameter><decl><type><name>ruby_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"begin\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_end</name><parameter_list>(<parameter><decl><type><name>ruby_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>register_at_exit</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Qtrue</name></expr>:</case>
<expr_stmt><expr><call><name>ruby_vm_at_exit</name><argument_list>(<argument><expr><name>print_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>Qfalse</name></expr>:</case>
<expr_stmt><expr><call><name>ruby_vm_at_exit</name><argument_list>(<argument><expr><name>print_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ruby_vm_at_exit</name><argument_list>(<argument><expr><name>do_nothing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Init_at_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>m</name> <init>= <expr><call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"Bug"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name> <init>= <expr><call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"VM"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"register_at_exit"</literal></expr></argument>, <argument><expr><name>register_at_exit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
