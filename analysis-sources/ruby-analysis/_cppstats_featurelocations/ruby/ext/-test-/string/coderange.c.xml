<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\-test-\string\coderange.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>sym_7bit</name></decl>, <decl><type ref="prev"/><name>sym_valid</name></decl>, <decl><type ref="prev"/><name>sym_unknown</name></decl>, <decl><type ref="prev"/><name>sym_broken</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>coderange_int2sym</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>coderange</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>coderange</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENC_CODERANGE_7BIT</name></expr>:</case>
<return>return <expr><name>sym_7bit</name></expr>;</return>
<case>case <expr><name>ENC_CODERANGE_VALID</name></expr>:</case>
<return>return <expr><name>sym_valid</name></expr>;</return>
<case>case <expr><name>ENC_CODERANGE_UNKNOWN</name></expr>:</case>
<return>return <expr><name>sym_unknown</name></expr>;</return>
<case>case <expr><name>ENC_CODERANGE_BROKEN</name></expr>:</case>
<return>return <expr><name>sym_broken</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"wrong condition of coderange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>str_coderange</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>coderange_int2sym</name><argument_list>(<argument><expr><call><name>ENC_CODERANGE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>str_coderange_scan</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ENC_CODERANGE_SET</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>ENC_CODERANGE_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>coderange_int2sym</name><argument_list>(<argument><expr><call><name>rb_enc_str_coderange</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Init_string_coderange</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>sym_7bit</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"7bit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sym_valid</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"valid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sym_unknown</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sym_broken</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"broken"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="string">"coderange"</literal></expr></argument>, <argument><expr><name>str_coderange</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="string">"coderange_scan"</literal></expr></argument>, <argument><expr><name>str_coderange_scan</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
