<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\-test-\win32\console\attribute.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cConsoleScreenBufferInfo</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>HANDLE</name></type>
<name>io_handle</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"fileno"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>rb_w32_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eIOError</name></expr></argument>, <argument><expr><literal type="string">"invalid io"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>console_info</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>io_handle</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_syserr_fail</name><argument_list>(<argument><expr><call><name>rb_w32_map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"not console"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_struct_new</name><argument_list>(<argument><expr><name>rb_cConsoleScreenBufferInfo</name></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>console_set_attribute</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>io_handle</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>WORD</name><operator>)</operator><call><name>NUM2INT</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGROUND_MASK</name></cpp:macro> <cpp:value>(FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKGROUND_MASK</name></cpp:macro> <cpp:value>(BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_INTENSITY)</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>Init_attribute</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>rb_cConsoleScreenBufferInfo</name> <operator>=</operator> <call><name>rb_struct_define_under</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"ConsoleScreenBufferInfo"</literal></expr></argument>,
<argument><expr><literal type="string">"size_x"</literal></expr></argument>, <argument><expr><literal type="string">"size_y"</literal></expr></argument>,
<argument><expr><literal type="string">"cur_x"</literal></expr></argument>, <argument><expr><literal type="string">"cur_y"</literal></expr></argument>,
<argument><expr><literal type="string">"attr"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cIO</name></expr></argument>, <argument><expr><literal type="string">"console_info"</literal></expr></argument>, <argument><expr><name>console_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cIO</name></expr></argument>, <argument><expr><literal type="string">"console_attribute"</literal></expr></argument>, <argument><expr><name>console_set_attribute</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"FOREGROUND_MASK"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>FOREGROUND_MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"FOREGROUND_BLUE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>FOREGROUND_BLUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"FOREGROUND_GREEN"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>FOREGROUND_GREEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"FOREGROUND_RED"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>FOREGROUND_RED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"FOREGROUND_INTENSITY"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>FOREGROUND_INTENSITY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"BACKGROUND_MASK"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>BACKGROUND_MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"BACKGROUND_BLUE"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>BACKGROUND_BLUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"BACKGROUND_GREEN"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>BACKGROUND_GREEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"BACKGROUND_RED"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>BACKGROUND_RED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"BACKGROUND_INTENSITY"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>BACKGROUND_INTENSITY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMMON_LVB_REVERSE_VIDEO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_LVB_REVERSE_VIDEO</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"REVERSE_VIDEO"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>COMMON_LVB_REVERSE_VIDEO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
