<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\-test-\enumerator_kw\enumerator_kw.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>enumerator_kw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>opt</name></decl>, <decl><type ref="prev"/><name><name>enum_args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>enum_args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enum_args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01*:"</literal></expr></argument>, <argument><expr><name>enum_args</name></expr></argument>, <argument><expr><name>enum_args</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enum_args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>enum_args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_SIZED_ENUMERATOR_KW</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>enum_args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>RB_NO_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_yield_values_kw</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>enum_args</name></expr></argument>, <argument><expr><name>RB_NO_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Init_enumerator_kw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>module</name> <init>= <expr><call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"Bug"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"EnumeratorKw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"m"</literal></expr></argument>, <argument><expr><name>enumerator_kw</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
