<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\digest\digest.h">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_DIGEST_API_VERSION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rb_digest_hash_init_func_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rb_digest_hash_update_func_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rb_digest_hash_finish_func_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>api_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>digest_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ctx_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_digest_hash_init_func_t</name></type> <name>init_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_digest_hash_update_func_t</name></type> <name>update_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_digest_hash_finish_func_t</name></type> <name>finish_func</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_digest_metadata_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_UPDATE_FUNC_FOR_UINT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void rb_digest_##name##_update(void *ctx, unsigned char *ptr, size_t size) { const unsigned int stride = 16384; for (; size &gt; stride; size -= stride, ptr += stride) { name##_Update(ctx, ptr, stride); } if (size &gt; 0) name##_Update(ctx, ptr, size); }</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_FINISH_FUNC_FROM_FINAL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int rb_digest_##name##_finish(void *ctx, unsigned char *ptr) { return name##_Final(ptr, ctx); }</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>
<name>rb_digest_namespace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_require</name><argument_list>(<argument><expr><literal type="string">"digest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"Digest"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ID</name></type>
<name>rb_id_metadata</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"metadata"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
