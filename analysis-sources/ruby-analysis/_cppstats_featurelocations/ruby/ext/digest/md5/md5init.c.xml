<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\digest\md5\md5init.c">


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby/ruby.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../digest.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MD5_USE_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5ossl.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MD5_USE_COMMONDIGEST</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5cc.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_digest_metadata_t</name></type> <name>md5</name> <init>= <expr><block>{
<expr><name>RUBY_DIGEST_API_VERSION</name></expr>,
<expr><name>MD5_DIGEST_LENGTH</name></expr>,
<expr><name>MD5_BLOCK_LENGTH</name></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr><name>MD5_CTX</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><operator>(</operator><name>rb_digest_hash_init_func_t</name><operator>)</operator><name>MD5_Init</name></expr>,
<expr><operator>(</operator><name>rb_digest_hash_update_func_t</name><operator>)</operator><name>MD5_Update</name></expr>,
<expr><operator>(</operator><name>rb_digest_hash_finish_func_t</name><operator>)</operator><name>MD5_Finish</name></expr>,
}</block></expr></init></decl>;</decl_stmt>


























<function><type><name>void</name></type>
<name>Init_md5</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mDigest</name></decl>, <decl><type ref="prev"/><name>cDigest_Base</name></decl>, <decl><type ref="prev"/><name>cDigest_MD5</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
mDigest = rb_define_module("Digest"); 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>mDigest</name> <operator>=</operator> <call><name>rb_digest_namespace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cDigest_Base</name> <operator>=</operator> <call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"Digest::Base"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cDigest_MD5</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mDigest</name></expr></argument>, <argument><expr><literal type="string">"MD5"</literal></expr></argument>, <argument><expr><name>cDigest_Base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RUBY_UNTYPED_DATA_WARNING</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_UNTYPED_DATA_WARNING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<expr_stmt><expr><call><name>rb_iv_set</name><argument_list>(<argument><expr><name>cDigest_MD5</name></expr></argument>, <argument><expr><literal type="string">"metadata"</literal></expr></argument>,
<argument><expr><call><name>Data_Wrap_Struct</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>md5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
