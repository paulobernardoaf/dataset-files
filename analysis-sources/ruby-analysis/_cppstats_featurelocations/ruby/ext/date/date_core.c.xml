<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\date\date_core.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDEBUG</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_EXTCONF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> RUBY_EXTCONF_H</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_PACK</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_cmp</name></decl>, <decl><type ref="prev"/><name>id_le_p</name></decl>, <decl><type ref="prev"/><name>id_ge_p</name></decl>, <decl><type ref="prev"/><name>id_eqeq_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cDate</name></decl>, <decl><type ref="prev"/><name>cDateTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>eDateError</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>half_days_in_day</name></decl>, <decl><type ref="prev"/><name>day_in_nanoseconds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>positive_inf</name></decl>, <decl><type ref="prev"/><name>negative_inf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_boolcast</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) ? Qtrue : Qfalse)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_abs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("abs"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_negate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("-@"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_add</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '+', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_sub</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '-', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_mul</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '*', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_div</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '/', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_quo</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("quo"), 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_idiv</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("div"), 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_mod</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '%', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_remainder</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("remainder"), 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_expt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("**"), 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_floor</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("floor"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_ceil</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("ceil"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_truncate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("truncate"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_round</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("round"), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_to_i</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("to_i"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_to_r</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("to_r"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_to_s</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("to_s"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_inspect</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("inspect"), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_add3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f_add(f_add(x, y), z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_sub3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f_sub(f_sub(x, y), z)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>date_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>datetime_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_FALSE_UNLESS_NUMERIC</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(!RTEST(rb_obj_is_kind_of((obj), rb_cNumeric))) return Qfalse</cpp:value></cpp:define>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>check_numeric</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rb_cNumeric</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"invalid %s (not numeric)"</literal></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>f_cmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>c</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_cmpint</name><argument_list>(<argument><expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_cmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_lt_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_gt_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_le_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_le_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_ge_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_ge_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_eqeq_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_eqeq_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_zero_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<return>return <expr><name>Qfalse</name></expr>;</return>
<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name> <init>= <expr><call><name>rb_rational_num</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>id_eqeq_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_nonzero_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!f_zero_p(x))</cpp:value></cpp:define>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_negative_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_positive_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!f_negative_p(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_ajd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("ajd"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_jd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("jd"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_year</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("year"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_mon</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("mon"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_mday</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("mday"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_wday</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("wday"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_hour</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("hour"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_min</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("min"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_sec</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("sec"), 0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDIV</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(-(-((x)+1)/(y))-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMOD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y)-(-((x)+1)%(y))-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)&lt;0 ? NDIV((n),(d)) : (n)/(d))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)&lt;0 ? NMOD((n),(d)) : (n)%(d))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_JD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_CIVIL</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TIME</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLEX_DAT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>have_jd_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;flags &amp; HAVE_JD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>have_df_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;flags &amp; HAVE_DF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>have_civil_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;flags &amp; HAVE_CIVIL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>have_time_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;flags &amp; HAVE_TIME)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>complex_dat_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;flags &amp; COMPLEX_DAT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simple_dat_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!complex_dat_p(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITALY</name></cpp:macro> <cpp:value>2299161</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENGLAND</name></cpp:macro> <cpp:value>2361222</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JULIAN</name></cpp:macro> <cpp:value>positive_inf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREGORIAN</name></cpp:macro> <cpp:value>negative_inf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SG</name></cpp:macro> <cpp:value>ITALY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIX_EPOCH_IN_CJD</name></cpp:macro> <cpp:value>INT2FIX(2440588)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINUTE_IN_SECONDS</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOUR_IN_SECONDS</name></cpp:macro> <cpp:value>3600</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAY_IN_SECONDS</name></cpp:macro> <cpp:value>86400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECOND_IN_MILLISECONDS</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECOND_IN_NANOSECONDS</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JC_PERIOD0</name></cpp:macro> <cpp:value>1461</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GC_PERIOD0</name></cpp:macro> <cpp:value>146097</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CM_PERIOD0</name></cpp:macro> <cpp:value>71149239</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CM_PERIOD</name></cpp:macro> <cpp:value>(0xfffffff / CM_PERIOD0 * CM_PERIOD0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CM_PERIOD_JCY</name></cpp:macro> <cpp:value>(CM_PERIOD / JC_PERIOD0 * 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CM_PERIOD_GCY</name></cpp:macro> <cpp:value>(CM_PERIOD / GC_PERIOD0 * 400)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFORM_BEGIN_YEAR</name></cpp:macro> <cpp:value>1582</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFORM_END_YEAR</name></cpp:macro> <cpp:value>1930</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFORM_BEGIN_JD</name></cpp:macro> <cpp:value>2298874</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFORM_END_JD</name></cpp:macro> <cpp:value>2426355</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_WIDTH</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_WIDTH</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOUR_WIDTH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDAY_WIDTH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_WIDTH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_SHIFT</name></cpp:macro> <cpp:value>SEC_WIDTH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOUR_SHIFT</name></cpp:macro> <cpp:value>(MIN_WIDTH + SEC_WIDTH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDAY_SHIFT</name></cpp:macro> <cpp:value>(HOUR_WIDTH + MIN_WIDTH + SEC_WIDTH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_SHIFT</name></cpp:macro> <cpp:value>(MDAY_WIDTH + HOUR_WIDTH + MIN_WIDTH + SEC_WIDTH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PK_MASK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((1 &lt;&lt; (x)) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX_SEC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; SEC_SHIFT) &amp; PK_MASK(SEC_WIDTH))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX_MIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; MIN_SHIFT) &amp; PK_MASK(MIN_WIDTH))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX_HOUR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; HOUR_SHIFT) &amp; PK_MASK(HOUR_WIDTH))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX_MDAY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; MDAY_SHIFT) &amp; PK_MASK(MDAY_WIDTH))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX_MON</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; MON_SHIFT) &amp; PK_MASK(MON_WIDTH))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK5</name><parameter_list>(<parameter><type><name>m</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>min</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &lt;&lt; MON_SHIFT) | ((d) &lt;&lt; MDAY_SHIFT) |((h) &lt;&lt; HOUR_SHIFT) | ((min) &lt;&lt; MIN_SHIFT) | ((s) &lt;&lt; SEC_SHIFT))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACK2</name><parameter_list>(<parameter><type><name>m</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &lt;&lt; MON_SHIFT) | ((d) &lt;&lt; MDAY_SHIFT))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FLOAT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLT_RADIX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>FLT_MANT_DIG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>FLT_RADIX</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>FLT_MANT_DIG</name> <operator>&gt;</operator> <literal type="number">22</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>date_sg_t</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>date_sg_t</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<struct>struct <name>SimpleDateData</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>date_sg_t</name></type> <name>sg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>mon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mday</name></decl>;</decl_stmt>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>unsigned</name></type> <name>pc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct>struct <name>ComplexDateData</name>
<block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>date_sg_t</name></type> <name>sg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>;</decl_stmt> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>mon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mday</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hour</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sec</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>unsigned</name></type> <name>pc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>df</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>of</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VALUE</name></type> <name>sf</name></decl>;</decl_stmt> 
}</block>;</struct>

<union>union <name>DateData</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SimpleDateData</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ComplexDateData</name></name></type> <name>c</name></decl>;</decl_stmt>
}</block>;</union>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_d1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>union DateData *dat;TypedData_Get_Struct(x, union DateData, &amp;d_lite_type, dat);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_d1a</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>union DateData *adat;TypedData_Get_Struct(x, union DateData, &amp;d_lite_type, adat);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_d1b</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>union DateData *bdat;TypedData_Get_Struct(x, union DateData, &amp;d_lite_type, bdat);</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_d2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>union DateData *adat, *bdat;TypedData_Get_Struct(x, union DateData, &amp;d_lite_type, adat);TypedData_Get_Struct(y, union DateData, &amp;d_lite_type, bdat);</cpp:value></cpp:define>




<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>canon</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>den</name> <init>= <expr><call><name>rb_rational_den</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_num</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_to_simple</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>_nth</name></type></parameter>, <parameter><type><name>_jd</name></type></parameter> ,<parameter><type><name>_sg</name></type></parameter>, <parameter><type><name>_year</name></type></parameter>, <parameter><type><name>_mon</name></type></parameter>, <parameter><type><name>_mday</name></type></parameter>, <parameter><type><name>_flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {RB_OBJ_WRITE((obj), &amp;(x)-&gt;nth, canon(_nth)); (x)-&gt;jd = _jd;(x)-&gt;sg = (date_sg_t)(_sg);(x)-&gt;year = _year;(x)-&gt;mon = _mon;(x)-&gt;mday = _mday;(x)-&gt;flags = (_flags) &amp; ~COMPLEX_DAT;} while (0)</cpp:value></cpp:define>









<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_to_simple</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>_nth</name></type></parameter>, <parameter><type><name>_jd</name></type></parameter> ,<parameter><type><name>_sg</name></type></parameter>, <parameter><type><name>_year</name></type></parameter>, <parameter><type><name>_mon</name></type></parameter>, <parameter><type><name>_mday</name></type></parameter>, <parameter><type><name>_flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {RB_OBJ_WRITE((obj), &amp;(x)-&gt;nth, canon(_nth)); (x)-&gt;jd = _jd;(x)-&gt;sg = (date_sg_t)(_sg);(x)-&gt;year = _year;(x)-&gt;pc = PACK2(_mon, _mday);(x)-&gt;flags = (_flags) &amp; ~COMPLEX_DAT;} while (0)</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_to_complex</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>_nth</name></type></parameter>, <parameter><type><name>_jd</name></type></parameter> ,<parameter><type><name>_df</name></type></parameter>, <parameter><type><name>_sf</name></type></parameter>, <parameter><type><name>_of</name></type></parameter>, <parameter><type><name>_sg</name></type></parameter>,<parameter><type><name>_year</name></type></parameter>, <parameter><type><name>_mon</name></type></parameter>, <parameter><type><name>_mday</name></type></parameter>, <parameter><type><name>_hour</name></type></parameter>, <parameter><type><name>_min</name></type></parameter>, <parameter><type><name>_sec</name></type></parameter>, <parameter><type><name>_flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {RB_OBJ_WRITE((obj), &amp;(x)-&gt;nth, canon(_nth));(x)-&gt;jd = _jd;(x)-&gt;df = _df;RB_OBJ_WRITE((obj), &amp;(x)-&gt;sf, canon(_sf));(x)-&gt;of = _of;(x)-&gt;sg = (date_sg_t)(_sg);(x)-&gt;year = _year;(x)-&gt;mon = _mon;(x)-&gt;mday = _mday;(x)-&gt;hour = _hour;(x)-&gt;min = _min;(x)-&gt;sec = _sec;(x)-&gt;flags = (_flags) | COMPLEX_DAT;} while (0)</cpp:value></cpp:define>
















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_to_complex</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>_nth</name></type></parameter>, <parameter><type><name>_jd</name></type></parameter> ,<parameter><type><name>_df</name></type></parameter>, <parameter><type><name>_sf</name></type></parameter>, <parameter><type><name>_of</name></type></parameter>, <parameter><type><name>_sg</name></type></parameter>,<parameter><type><name>_year</name></type></parameter>, <parameter><type><name>_mon</name></type></parameter>, <parameter><type><name>_mday</name></type></parameter>, <parameter><type><name>_hour</name></type></parameter>, <parameter><type><name>_min</name></type></parameter>, <parameter><type><name>_sec</name></type></parameter>, <parameter><type><name>_flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {RB_OBJ_WRITE((obj), &amp;(x)-&gt;nth, canon(_nth));(x)-&gt;jd = _jd;(x)-&gt;df = _df;RB_OBJ_WRITE((obj), &amp;(x)-&gt;sf, canon(_sf));(x)-&gt;of = _of;(x)-&gt;sg = (date_sg_t)(_sg);(x)-&gt;year = _year;(x)-&gt;pc = PACK5(_mon, _mday, _hour, _min, _sec);(x)-&gt;flags = (_flags) | COMPLEX_DAT;} while (0)</cpp:value></cpp:define>












<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copy_simple_to_complex</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {RB_OBJ_WRITE((obj), &amp;(x)-&gt;nth, (y)-&gt;nth);(x)-&gt;jd = (y)-&gt;jd;(x)-&gt;df = 0;(x)-&gt;sf = INT2FIX(0);(x)-&gt;of = 0;(x)-&gt;sg = (date_sg_t)((y)-&gt;sg);(x)-&gt;year = (y)-&gt;year;(x)-&gt;mon = (y)-&gt;mon;(x)-&gt;mday = (y)-&gt;mday;(x)-&gt;hour = 0;(x)-&gt;min = 0;(x)-&gt;sec = 0;(x)-&gt;flags = (y)-&gt;flags;} while (0)</cpp:value></cpp:define>















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copy_simple_to_complex</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {RB_OBJ_WRITE((obj), &amp;(x)-&gt;nth, (y)-&gt;nth);(x)-&gt;jd = (y)-&gt;jd;(x)-&gt;df = 0;RB_OBJ_WRITE((obj), &amp;(x)-&gt;sf, INT2FIX(0));(x)-&gt;of = 0;(x)-&gt;sg = (date_sg_t)((y)-&gt;sg);(x)-&gt;year = (y)-&gt;year;(x)-&gt;pc = PACK5(EX_MON((y)-&gt;pc), EX_MDAY((y)-&gt;pc), 0, 0, 0);(x)-&gt;flags = (y)-&gt;flags;} while (0)</cpp:value></cpp:define>











<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copy_complex_to_simple</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {RB_OBJ_WRITE((obj), &amp;(x)-&gt;nth, (y)-&gt;nth);(x)-&gt;jd = (y)-&gt;jd;(x)-&gt;sg = (date_sg_t)((y)-&gt;sg);(x)-&gt;year = (y)-&gt;year;(x)-&gt;mon = (y)-&gt;mon;(x)-&gt;mday = (y)-&gt;mday;(x)-&gt;flags = (y)-&gt;flags;} while (0)</cpp:value></cpp:define>









<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copy_complex_to_simple</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {RB_OBJ_WRITE((obj), &amp;(x)-&gt;nth, (y)-&gt;nth);(x)-&gt;jd = (y)-&gt;jd;(x)-&gt;sg = (date_sg_t)((y)-&gt;sg);(x)-&gt;year = (y)-&gt;year;(x)-&gt;pc = PACK2(EX_MON((y)-&gt;pc), EX_MDAY((y)-&gt;pc));(x)-&gt;flags = (y)-&gt;flags;} while (0)</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>c_valid_civil_p</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_find_fdoy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>c_valid_civil_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_find_ldoy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>c_valid_civil_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">31</literal> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_find_fdom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>c_valid_civil_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_find_ldom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>c_valid_civil_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">31</literal> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>c_civil_to_jd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>jd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>y</name> <operator>/</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <name>a</name> <operator>+</operator> <call><name>floor</name><argument_list>(<argument><expr><name>a</name> <operator>/</operator> <literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><literal type="number">365.25</literal> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">4716</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
<call><name>floor</name><argument_list>(<argument><expr><literal type="number">30.6001</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator>
<name>d</name> <operator>+</operator> <name>b</name> <operator>-</operator> <literal type="number">1524</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jd</name> <operator>&lt;</operator> <name>sg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>rjd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>jd</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>c_jd_to_civil</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rdom</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>dom</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>jd</name> <operator>&lt;</operator> <name>sg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>jd</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><operator>(</operator><name>jd</name> <operator>-</operator> <literal type="number">1867216.25</literal><operator>)</operator> <operator>/</operator> <literal type="number">36524.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>jd</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>+</operator> <literal type="number">1524</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>-</operator> <literal type="number">122.1</literal><operator>)</operator> <operator>/</operator> <literal type="number">365.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><literal type="number">365.25</literal> <operator>*</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>-</operator> <name>d</name><operator>)</operator> <operator>/</operator> <literal type="number">30.6001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dom</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>d</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><literal type="number">30.6001</literal> <operator>*</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>e</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="number">4716</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>e</name> <operator>-</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="number">4715</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rm</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rdom</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>dom</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>c_ordinal_to_jd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ns2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_find_fdoy</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rjd</name> <operator>+=</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ns</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>rjd</name> <operator>&lt;</operator> <name>sg</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>c_jd_to_ordinal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rm2</name></decl>, <decl><type ref="prev"/><name>rd2</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_find_fdoy</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <operator>(</operator><name>jd</name> <operator>-</operator> <name>rjd</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>c_commercial_to_jd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd2</name></decl>, <decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_find_fdoy</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rjd2</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rjd</name> <operator>=</operator>
<operator>(</operator><name>rjd2</name> <operator>-</operator> <call><name>MOD</name><argument_list>(<argument><expr><operator>(</operator><name>rjd2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator>
<literal type="number">7</literal> <operator>*</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name>d</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ns</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>rjd</name> <operator>&lt;</operator> <name>sg</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>c_jd_to_commercial</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ry2</name></decl>, <decl><type ref="prev"/><name>rm2</name></decl>, <decl><type ref="prev"/><name>rd2</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>, <decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><name>jd</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>ry2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_commercial_to_jd</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jd</name> <operator>&gt;=</operator> <name>rjd2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>c_commercial_to_jd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rw</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>DIV</name><argument_list>(<argument><expr><name>jd</name> <operator>-</operator> <name>rjd2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>MOD</name><argument_list>(<argument><expr><name>jd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>c_weeknum_to_jd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd2</name></decl>, <decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_find_fdoy</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rjd2</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rjd</name> <operator>=</operator> <operator>(</operator><name>rjd2</name> <operator>-</operator> <call><name>MOD</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>rjd2</name> <operator>-</operator> <name>f</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>w</name> <operator>+</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ns</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>rjd</name> <operator>&lt;</operator> <name>sg</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>c_jd_to_weeknum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rm</name></decl>, <decl><type ref="prev"/><name>rd2</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_find_fdoy</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rjd</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>jd</name> <operator>-</operator> <operator>(</operator><name>rjd</name> <operator>-</operator> <call><name>MOD</name><argument_list>(<argument><expr><operator>(</operator><name>rjd</name> <operator>-</operator> <name>f</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rw</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>DIV</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>MOD</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>c_nth_kday_to_jd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd2</name></decl>, <decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>c_find_fdom</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rjd2</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>c_find_ldom</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rjd2</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rjd</name> <operator>=</operator> <operator>(</operator><name>rjd2</name> <operator>-</operator> <call><name>MOD</name><argument_list>(<argument><expr><operator>(</operator><name>rjd2</name> <operator>-</operator> <name>k</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ns</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>rjd</name> <operator>&lt;</operator> <name>sg</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>c_jd_to_wday</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>MOD</name><argument_list>(<argument><expr><name>jd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>c_jd_to_nth_kday</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rn</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rd</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_find_fdom</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><operator>*</operator><name>rm</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rn</name> <operator>=</operator> <call><name>DIV</name><argument_list>(<argument><expr><name>jd</name> <operator>-</operator> <name>rjd</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rk</name> <operator>=</operator> <call><name>c_jd_to_wday</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_valid_ordinal_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ry2</name></decl>, <decl><type ref="prev"/><name>rd2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd2</name></decl>, <decl><type ref="prev"/><name>ns2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_find_ldoy</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>c_jd_to_ordinal</name><argument_list>(<argument><expr><name>rjd2</name> <operator>+</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ry2</name> <operator>!=</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>rd2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>c_ordinal_to_jd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_ordinal</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ry2</name> <operator>!=</operator> <name>y</name> <operator>||</operator> <name>rd2</name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>monthtab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>c_julian_leap_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>MOD</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>c_gregorian_leap_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>MOD</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>%</operator> <literal type="number">100</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <call><name>MOD</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_julian_last_day_of_month</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>&lt;=</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>monthtab</name><index>[<expr><ternary><condition><expr><call><name>c_julian_leap_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_gregorian_last_day_of_month</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>&lt;=</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>monthtab</name><index>[<expr><ternary><condition><expr><call><name>c_gregorian_leap_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_valid_julian_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <literal type="number">13</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>m</name></expr></argument> &gt;</argument_list></name> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>c_julian_last_day_of_month</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>last</name> <operator>+</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>d</name></expr></argument> &gt;</argument_list></name> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rm</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_valid_gregorian_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <literal type="number">13</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>m</name></expr></argument> &gt;</argument_list></name> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>c_gregorian_last_day_of_month</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>last</name> <operator>+</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>d</name></expr></argument> &gt;</argument_list></name> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rm</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_valid_civil_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>+=</operator> <literal type="number">13</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_find_ldom</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name> <operator>+</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ry</name> <operator>!=</operator> <name>y</name> <operator>||</operator> <operator>*</operator><name>rm</name> <operator>!=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><name>rd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>c_civil_to_jd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ry</name> <operator>!=</operator> <name>y</name> <operator>||</operator> <operator>*</operator><name>rm</name> <operator>!=</operator> <name>m</name> <operator>||</operator> <operator>*</operator><name>rd</name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_valid_commercial_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ns2</name></decl>, <decl><type ref="prev"/><name>ry2</name></decl>, <decl><type ref="prev"/><name>rw2</name></decl>, <decl><type ref="prev"/><name>rd2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_commercial_to_jd</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_commercial</name><argument_list>(<argument><expr><name>rjd2</name> <operator>+</operator> <name>w</name> <operator>*</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rw2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ry2</name> <operator>!=</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>rw2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>c_commercial_to_jd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_commercial</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry2</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>ry2</name> <operator>||</operator> <name>w</name> <operator>!=</operator> <operator>*</operator><name>rw</name> <operator>||</operator> <name>d</name> <operator>!=</operator> <operator>*</operator><name>rd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_valid_weeknum_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ns2</name></decl>, <decl><type ref="prev"/><name>ry2</name></decl>, <decl><type ref="prev"/><name>rw2</name></decl>, <decl><type ref="prev"/><name>rd2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_weeknum_to_jd</name><argument_list>(<argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_weeknum</name><argument_list>(<argument><expr><name>rjd2</name> <operator>+</operator> <name>w</name> <operator>*</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rw2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ry2</name> <operator>!=</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>rw2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>c_weeknum_to_jd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_weeknum</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry2</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>ry2</name> <operator>||</operator> <name>w</name> <operator>!=</operator> <operator>*</operator><name>rw</name> <operator>||</operator> <name>d</name> <operator>!=</operator> <operator>*</operator><name>rd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_valid_nth_kday_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rn</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ns2</name></decl>, <decl><type ref="prev"/><name>ry2</name></decl>, <decl><type ref="prev"/><name>rm2</name></decl>, <decl><type ref="prev"/><name>rn2</name></decl>, <decl><type ref="prev"/><name>rk2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>ny</name></decl>, <decl><type ref="prev"/><name>nm</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>y</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ny</name> <operator>=</operator> <call><name>DIV</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nm</name> <operator>=</operator> <call><name>MOD</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>c_nth_kday_to_jd</name><argument_list>(<argument><expr><name>ny</name></expr></argument>, <argument><expr><name>nm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_nth_kday</name><argument_list>(<argument><expr><name>rjd2</name> <operator>+</operator> <name>n</name> <operator>*</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rn2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rk2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ry2</name> <operator>!=</operator> <name>y</name> <operator>||</operator> <name>rm2</name> <operator>!=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>rn2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>c_nth_kday_to_jd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_nth_kday</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry2</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rn</name></expr></argument>, <argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>ry2</name> <operator>||</operator> <name>m</name> <operator>!=</operator> <operator>*</operator><name>rm</name> <operator>||</operator> <name>n</name> <operator>!=</operator> <operator>*</operator><name>rn</name> <operator>||</operator> <name>k</name> <operator>!=</operator> <operator>*</operator><name>rk</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_valid_time_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rh</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rmin</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min</name> <operator>+=</operator> <literal type="number">60</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">60</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rh</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rmin</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rs</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><operator>(</operator><name><name>h</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>h</name></expr></argument> &gt;</argument_list></name> <literal type="number">24</literal> <operator>||</operator>
<name><name>min</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>min</name></expr></argument> &gt;</argument_list></name> <literal type="number">59</literal> <operator>||</operator>
<name><name>s</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>s</name></expr></argument> &gt;</argument_list></name> <literal type="number">59</literal> <operator>||</operator>
<operator>(</operator><name>h</name> <operator>==</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>min</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>s</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>c_valid_start_p</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sg</name> <argument_list type="generic">&lt; <argument><expr><name>REFORM_BEGIN_JD</name> <operator>||</operator> <name>sg</name></expr></argument> &gt;</argument_list></name> <name>REFORM_END_JD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>df_local_to_utc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>of</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <name>of</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>df</name> <operator>+=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>df</name> <operator>&gt;=</operator> <name>DAY_IN_SECONDS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>df</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>df_utc_to_local</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>of</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>+=</operator> <name>of</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>df</name> <operator>+=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>df</name> <operator>&gt;=</operator> <name>DAY_IN_SECONDS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>df</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>jd_local_to_utc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>of</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <name>of</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jd</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>df</name> <operator>&gt;=</operator> <name>DAY_IN_SECONDS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jd</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>jd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>jd_utc_to_local</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>df</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>of</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>+=</operator> <name>of</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jd</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>df</name> <operator>&gt;=</operator> <name>DAY_IN_SECONDS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jd</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>jd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>time_to_df</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>h</name> <operator>*</operator> <name>HOUR_IN_SECONDS</name> <operator>+</operator> <name>min</name> <operator>*</operator> <name>MINUTE_IN_SECONDS</name> <operator>+</operator> <name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>df_to_time</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>df</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name>df</name> <operator>/</operator> <name>HOUR_IN_SECONDS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>%=</operator> <name>HOUR_IN_SECONDS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>df</name> <operator>/</operator> <name>MINUTE_IN_SECONDS</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>df</name> <operator>%</operator> <name>MINUTE_IN_SECONDS</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sec_to_day</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>DAY_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_quo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>DAY_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>isec_to_day</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>sec_to_day</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ns_to_day</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>day_in_nanoseconds</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_quo</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>day_in_nanoseconds</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ms_to_sec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_MILLISECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_quo</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_MILLISECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ns_to_sec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_quo</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>ins_to_day</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ns_to_day</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>safe_mul_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>ix</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ix</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>&lt;=</operator> <operator>(</operator><name>FIXNUM_MIN</name> <operator>/</operator> <name>m</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ix</name> <operator>&gt;=</operator> <operator>(</operator><name>FIXNUM_MAX</name> <operator>/</operator> <name>m</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>day_to_sec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>safe_mul_p</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>DAY_IN_SECONDS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>DAY_IN_SECONDS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_mul</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>DAY_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>day_to_ns</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_mul</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>day_in_nanoseconds</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sec_to_ms</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>safe_mul_p</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SECOND_IN_MILLISECONDS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>SECOND_IN_MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_mul</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_MILLISECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sec_to_ns</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>safe_mul_p</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_mul</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>isec_to_ns</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>sec_to_ns</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>div_day</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_floor</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>div_df</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name> <init>= <expr><call><name>day_to_sec</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_floor</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>div_sf</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name> <init>= <expr><call><name>sec_to_ns</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_floor</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_day</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>jd</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>df</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>sf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>jd</name> <operator>=</operator> <call><name>div_day</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>df</name> <operator>=</operator> <call><name>div_df</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>sf</name> <operator>=</operator> <call><name>sec_to_ns</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>double</name></type>
<name>s_virtual_sg</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>sg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>sg</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>nth</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>sg</name></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_negative_p</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>nth</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>positive_inf</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>negative_inf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>double</name></type>
<name>c_virtual_sg</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sg</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sg</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nth</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sg</name></name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_negative_p</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nth</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>positive_inf</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>negative_inf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>double</name></type>
<name>m_virtual_sg</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>s_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>c_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>canonicalize_jd</name><parameter_list>(<parameter><type><name>_nth</name></type></parameter>, <parameter><type><name>_jd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (_jd &lt; 0) {_nth = f_sub(_nth, INT2FIX(1));_jd += CM_PERIOD;}if (_jd &gt;= CM_PERIOD) {_nth = f_add(_nth, INT2FIX(1));_jd -= CM_PERIOD;}} while (0)</cpp:value></cpp:define>











<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>canonicalize_s_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>nth</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_jd_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>canonicalize_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>nth</name></name></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name> <operator>!=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HAVE_CIVIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>get_s_jd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_jd_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_civil_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>c_civil_to_jd</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mon</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mday</name></name></expr></argument>,
<argument><expr><call><name>s_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>c_civil_to_jd</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>EX_MON</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EX_MDAY</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>s_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name> <operator>=</operator> <name>jd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HAVE_JD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>get_s_civil</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_civil_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_jd_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name></expr></argument>, <argument><expr><call><name>s_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>year</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mon</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mday</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pc</name></name> <operator>=</operator> <call><name>PACK2</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HAVE_CIVIL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>get_c_df</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>complex_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_df_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_time_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name> <operator>=</operator> <call><name>df_local_to_utc</name><argument_list>(<argument><expr><call><name>time_to_df</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hour</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name> <operator>=</operator> <call><name>df_local_to_utc</name><argument_list>(<argument><expr><call><name>time_to_df</name><argument_list>(<argument><expr><call><name>EX_HOUR</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>EX_MIN</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>EX_SEC</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HAVE_DF</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>get_c_time</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>complex_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_time_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_df_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>df_utc_to_local</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>df_to_time</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hour</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HAVE_TIME</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_df_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>EX_MON</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>EX_MDAY</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>df_utc_to_local</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>df_to_time</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name> <operator>=</operator> <call><name>PACK5</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HAVE_TIME</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>canonicalize_c_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name> <init>= <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nth</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_jd_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>canonicalize_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nth</name></name></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name> <operator>!=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HAVE_CIVIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>get_c_jd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>complex_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_jd_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_civil_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>c_civil_to_jd</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mon</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mday</name></name></expr></argument>,
<argument><expr><call><name>c_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>c_civil_to_jd</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>EX_MON</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EX_MDAY</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>get_c_time</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name> <operator>=</operator> <call><name>jd_local_to_utc</name><argument_list>(<argument><expr><name>jd</name></expr></argument>,
<argument><expr><call><name>time_to_df</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hour</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sec</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name> <operator>=</operator> <call><name>jd_local_to_utc</name><argument_list>(<argument><expr><name>jd</name></expr></argument>,
<argument><expr><call><name>time_to_df</name><argument_list>(<argument><expr><call><name>EX_HOUR</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>EX_MIN</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>EX_SEC</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HAVE_JD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>get_c_civil</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>complex_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>have_civil_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_jd_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_c_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>jd_utc_to_local</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><call><name>c_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>year</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mon</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mday</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>EX_HOUR</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>EX_MIN</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>EX_SEC</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name> <operator>=</operator> <call><name>PACK5</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HAVE_CIVIL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>local_jd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>complex_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_jd_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_df_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>jd_utc_to_local</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>local_df</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>complex_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_df_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>df_utc_to_local</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_year</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>style</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>period</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>style</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>CM_PERIOD_GCY</name></expr> </then><else>:
<expr><name>CM_PERIOD_JCY</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>iy</name></decl>, <decl><type ref="prev"/><name>it</name></decl>, <decl><type ref="prev"/><name>inth</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iy</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iy</name> <operator>&gt;=</operator> <operator>(</operator><name>FIXNUM_MAX</name> <operator>-</operator> <literal type="number">4712</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>big</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>it</name> <operator>=</operator> <name>iy</name> <operator>+</operator> <literal type="number">4712</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>inth</name> <operator>=</operator> <call><name>DIV</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name>period</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nth</name> <operator>=</operator> <call><name>LONG2FIX</name><argument_list>(<argument><expr><name>inth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>MOD</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name>period</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>it</name> <operator>-</operator> <literal type="number">4712</literal></expr>;</expr_stmt> 
<return>return;</return>
</block_content>}</block></if></if_stmt>
<label><name>big</name>:</label>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><operator>*</operator><name>nth</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_nonzero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4712</literal></expr>;</expr_stmt> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>encode_year</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>style</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>period</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>style</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>CM_PERIOD_GCY</name></expr> </then><else>:
<expr><name>CM_PERIOD_JCY</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_mul</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>nth</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rjd</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rjd</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_mod</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>encode_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rjd</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rjd</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>double</name></type>
<name>guess_style</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>sg</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <ternary><condition><expr><call><name>f_positive_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>negative_inf</name></expr> </then><else>: <expr><name>positive_inf</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>iy</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>iy</name> <operator>&lt;</operator> <name>REFORM_BEGIN_YEAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>positive_inf</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>iy</name> <operator>&gt;</operator> <name>REFORM_END_YEAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>style</name> <operator>=</operator> <name>negative_inf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>style</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>m_canonicalize_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_s_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>canonicalize_s_jd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>canonicalize_c_jd</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>m_nth</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>nth</name></name></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_civil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nth</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_jd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_s_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_real_jd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_local_jd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_s_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_c_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>local_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_real_local_jd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_local_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_df</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_df_in_day</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>isec_to_day</name><argument_list>(<argument><expr><call><name>m_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_local_df</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>local_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_local_df_in_day</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>isec_to_day</name><argument_list>(<argument><expr><call><name>m_local_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>m_sf</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sf</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_sf_in_day</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ns_to_day</name><argument_list>(<argument><expr><call><name>m_sf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_sf_in_sec</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ns_to_sec</name><argument_list>(<argument><expr><call><name>m_sf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_fr</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>df</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sf</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>m_local_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>m_sf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <call><name>isec_to_day</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_nonzero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><call><name>ns_to_day</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>fr</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_DAYS_IN_SECONDS</name></cpp:macro> <cpp:value>(DAY_IN_SECONDS / 2)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_ajd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>df</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>m_real_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <operator>(</operator><name>FIXNUM_MAX</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>ir</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ir</name> <operator>=</operator> <name>ir</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>ir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>m_real_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <name>HALF_DAYS_IN_SECONDS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>isec_to_day</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>m_sf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_nonzero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ns_to_day</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_amjd</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>df</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>m_real_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>FIXNUM_MIN</name> <operator>+</operator> <literal type="number">2400001</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>ir</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ir</name> <operator>-=</operator> <literal type="number">2400001</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rb_rational_new1</name><argument_list>(<argument><expr><call><name>LONG2FIX</name><argument_list>(<argument><expr><name>ir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rb_rational_new1</name><argument_list>(<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><call><name>m_real_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2400001</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>isec_to_day</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>m_sf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_nonzero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ns_to_day</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_of</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_of_in_day</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>isec_to_day</name><argument_list>(<argument><expr><call><name>m_of</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>double</name></type>
<name>m_sg</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>sg</name></name></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sg</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_julian_p</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_s_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>s_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>c_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>sg</name> <operator>==</operator> <name>positive_inf</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>jd</name> <operator>&lt;</operator> <name>sg</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_gregorian_p</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>m_julian_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_proleptic_julian_p</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>m_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>sg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_proleptic_gregorian_p</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>m_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>sg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_year</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_s_civil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>year</name></name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_civil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>year</name></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_real_year</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>year</name> <operator>=</operator> <call><name>m_year</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>encode_year</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>year</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>m_gregorian_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_mon</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_s_civil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mon</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>EX_MON</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_civil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mon</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>EX_MON</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_mday</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_s_civil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mday</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>EX_MDAY</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_civil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mday</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>EX_MDAY</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>yeartab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">273</literal></expr>, <expr><literal type="number">304</literal></expr>, <expr><literal type="number">334</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">274</literal></expr>, <expr><literal type="number">305</literal></expr>, <expr><literal type="number">335</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_julian_to_yday</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>&lt;=</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>yeartab</name><index>[<expr><ternary><condition><expr><call><name>c_julian_leap_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>c_gregorian_to_yday</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>&lt;=</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>yeartab</name><index>[<expr><ternary><condition><expr><call><name>c_gregorian_leap_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_yday</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_local_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>m_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>m_proleptic_gregorian_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>jd</name> <operator>-</operator> <name>sg</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">366</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>c_gregorian_to_yday</name><argument_list>(<argument><expr><call><name>m_year</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_mon</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_mday</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>m_proleptic_julian_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>c_julian_to_yday</name><argument_list>(<argument><expr><call><name>m_year</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_mon</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_mday</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>c_jd_to_ordinal</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_wday</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>c_jd_to_wday</name><argument_list>(<argument><expr><call><name>m_local_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_cwyear</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_commercial</name><argument_list>(<argument><expr><call><name>m_local_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_real_cwyear</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>year</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>year</name> <operator>=</operator> <call><name>m_cwyear</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>encode_year</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>year</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>m_gregorian_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_cweek</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_commercial</name><argument_list>(<argument><expr><call><name>m_local_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rw</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_cwday</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>m_wday</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>w</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_wnumx</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_weeknum</name><argument_list>(<argument><expr><call><name>m_local_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>m_virtual_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rw</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_wnum0</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>m_wnumx</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>m_wnum1</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>m_wnumx</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_hour</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_time</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hour</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>EX_HOUR</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_min</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_time</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>min</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>EX_MIN</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>m_sec</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_time</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sec</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>EX_SEC</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decode_offset</name><parameter_list>(<parameter><type><name>of</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>do {int a;s = (of &lt; 0) ? '-' : '+';a = (of &lt; 0) ? -of : of;h = a / HOUR_IN_SECONDS;m = a % HOUR_IN_SECONDS / MINUTE_IN_SECONDS;} while (0)</cpp:value></cpp:define>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>of2str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>of</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_offset</name><argument_list>(<argument><expr><name>of</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_enc_sprintf</name><argument_list>(<argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%c%02d:%02d"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>m_zone</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_usascii_str_new2</name><argument_list>(<argument><expr><literal type="string">"+00:00"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>of2str</name><argument_list>(<argument><expr><call><name>m_of</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>f_kind_of_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>k_date_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_kind_of_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>k_numeric_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_kind_of_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>rb_cNumeric</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>k_rational_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>f_kind_of_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>rb_cRational</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>expect_numeric</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"expected numeric"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>civil_to_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_civil_to_jd</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>ns</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth2</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_civil_to_jd</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>jd_to_civil</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ordinal_to_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_ordinal_to_jd</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>ns</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth2</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_ordinal_to_jd</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>jd_to_ordinal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_ordinal</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>commercial_to_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_commercial_to_jd</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>ns</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth2</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_commercial_to_jd</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>jd_to_commercial</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_commercial</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>weeknum_to_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_weeknum_to_jd</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>ns</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth2</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_weeknum_to_jd</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>jd_to_weeknum</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_weeknum</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nth_kday_to_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_nth_kday_to_jd</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>ns</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth2</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_nth_kday_to_jd</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>jd_to_nth_kday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rn</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_nth_kday</name><argument_list>(<argument><expr><operator>*</operator><name>rjd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rn</name></expr></argument>, <argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>valid_ordinal_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_ordinal_p</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>ns</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth2</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_ordinal_p</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>valid_gregorian_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>c_valid_gregorian_p</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>valid_civil_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_civil_p</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>ns</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth2</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>style</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_gregorian_p</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_julian_p</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>c_civil_to_jd</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><operator>*</operator><name>rm</name></expr></argument>, <argument><expr><operator>*</operator><name>rd</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>valid_commercial_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_commercial_p</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>ns</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth2</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_commercial_p</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>valid_weeknum_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_weeknum_p</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>ns</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth2</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_weeknum_p</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>valid_nth_kday_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ry</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rn</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>style</name> <init>= <expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>style</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_nth_kday_p</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rn</name></expr></argument>, <argument><expr><name>rk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><operator>*</operator><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ry</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>*</operator><name>ns</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth2</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>c_valid_nth_kday_p</name><argument_list>(<argument><expr><operator>*</operator><name>ry</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rn</name></expr></argument>, <argument><expr><name>rk</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>VALUE</name></type> <name>date_zone_to_diff</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>offset_to_sec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>vof</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>try_rational</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<label><name>again</name>:</label>
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>vof</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>vof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rof</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name> <operator>*</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>T_FLOAT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>vof</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>DAY_IN_SECONDS</name> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <name>DAY_IN_SECONDS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rof</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rof</name> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"fraction of offset is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><call><name>expect_numeric</name><argument_list>(<argument><expr><name>vof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vof</name> <operator>=</operator> <call><name>f_to_r</name><argument_list>(<argument><expr><name>vof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_rational_p</name><argument_list>(<argument><expr><name>vof</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_rational</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>vof</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>try_rational</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vs</name></decl>, <decl><type ref="prev"/><name>vn</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vs</name> <operator>=</operator> <call><name>day_to_sec</name><argument_list>(<argument><expr><name>vof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_rational_p</name><argument_list>(<argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>vn</name> <operator>=</operator> <name>vs</name></expr>;</expr_stmt>
<goto>goto <name>rounded</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vn</name> <operator>=</operator> <call><name>rb_rational_num</name><argument_list>(<argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vd</name> <operator>=</operator> <call><name>rb_rational_den</name><argument_list>(<argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>vn</name> <operator>=</operator> <call><name>f_round</name><argument_list>(<argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>vn</name></expr></argument>, <argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"fraction of offset is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>rounded</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>DAY_IN_SECONDS</name> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <name>DAY_IN_SECONDS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rof</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>T_STRING</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vs</name> <init>= <expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name>vof</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>DAY_IN_SECONDS</name> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <name>DAY_IN_SECONDS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>rof</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>valid_sg</name><parameter_list>(<parameter><type><name>sg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (!c_valid_start_p(sg)) {sg = 0;rb_warning("invalid start is ignored");}} while (0)</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>valid_jd_sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_jd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name> <init>= <expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>valid_sg</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__valid_jd_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vjd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vjd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>valid_jd_sub</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_valid_jd_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vjd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_FALSE_UNLESS_NUMERIC</name><argument_list>(<argument><expr><name>vjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vjd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>valid_jd_sub</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>valid_civil_sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_jd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>valid_sg</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_jd</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_gregorian_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rjd2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_civil_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_jd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd2</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__valid_civil_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vm</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"31"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>valid_civil_sub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_valid_civil_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vm</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"31"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_FALSE_UNLESS_NUMERIC</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_FALSE_UNLESS_NUMERIC</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_FALSE_UNLESS_NUMERIC</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>valid_civil_sub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>valid_ordinal_sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_jd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>valid_sg</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rjd2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_ordinal_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_jd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd2</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__valid_ordinal_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"21"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>valid_ordinal_sub</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_valid_ordinal_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"21"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_FALSE_UNLESS_NUMERIC</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_FALSE_UNLESS_NUMERIC</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>valid_ordinal_sub</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>valid_commercial_sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_jd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>valid_sg</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rjd2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_commercial_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_jd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd2</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__valid_commercial_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vw</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"31"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>valid_commercial_sub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_valid_commercial_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vw</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"31"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_FALSE_UNLESS_NUMERIC</name><argument_list>(<argument><expr><name>vy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_FALSE_UNLESS_NUMERIC</name><argument_list>(<argument><expr><name>vw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RETURN_FALSE_UNLESS_NUMERIC</name><argument_list>(<argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>valid_commercial_sub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>valid_weeknum_sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_jd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>valid_sg</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rjd2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_weeknum_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_jd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd2</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__valid_weeknum_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vw</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vf</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"41"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>vf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>valid_weeknum_sub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_valid_weeknum_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vw</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vf</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"41"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>vf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>valid_weeknum_sub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>valid_nth_kday_sub</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_jd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rn</name></decl>, <decl><type ref="prev"/><name>rk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rjd2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_nth_kday_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_jd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd2</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__valid_nth_kday_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vm</name></decl>, <decl><type ref="prev"/><name>vn</name></decl>, <decl><type ref="prev"/><name>vk</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"41"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>vk</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>valid_nth_kday_sub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_valid_nth_kday_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vm</name></decl>, <decl><type ref="prev"/><name>vn</name></decl>, <decl><type ref="prev"/><name>vk</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"41"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>vn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>vk</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>vsg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>valid_nth_kday_sub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_zone_to_diff</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_julian_leap_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>c_julian_leap_p</name><argument_list>(<argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_gregorian_leap_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>c_gregorian_leap_p</name><argument_list>(<argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>d_lite_gc_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>dat</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>nth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>d_lite_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>dat</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><call><name>complex_dat_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ComplexDateData</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SimpleDateData</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>d_lite_type</name> <init>= <expr><block>{
<expr><literal type="string">"Date"</literal></expr>,
<expr><block>{<expr><name>d_lite_gc_mark</name></expr>, <expr><name>RUBY_TYPED_DEFAULT_FREE</name></expr>, <expr><name>d_lite_memsize</name></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
<expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name><operator>|</operator><name>RUBY_TYPED_WB_PROTECTED</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>d_simple_new_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name></type> <name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>SimpleDateData</name></name> <modifier>*</modifier></type><name>dat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>SimpleDateData</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>d_lite_type</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_to_simple</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_jd_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>have_civil_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>d_complex_new_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name></type> <name>nth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jd</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>df</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>of</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ComplexDateData</name></name> <modifier>*</modifier></type><name>dat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>ComplexDateData</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>d_lite_type</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_to_complex</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><name>of</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_jd_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>have_civil_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>have_df_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>have_time_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_s_alloc_simple</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>d_simple_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>DEFAULT_SG</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_s_alloc_complex</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>d_complex_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DEFAULT_SG</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_DF</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_s_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>d_lite_s_alloc_complex</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>old_to_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ajd</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>of</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sg</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>rnth</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>rsf</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rof</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>rsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>df</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>, <decl><type ref="prev"/><name>of2</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_day</name><argument_list>(<argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name>ajd</name></expr></argument>, <argument><expr><name>half_days_in_day</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>df</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>day_to_sec</name><argument_list>(<argument><expr><name>of</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>of2</name> <operator>=</operator> <call><name>f_round</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>of2</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"fraction of offset is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>rnth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rdf</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rsf</name> <operator>=</operator> <name>sf</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rof</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>of2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rsg</name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rdf</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>rdf</name> <operator>&gt;=</operator> <name>DAY_IN_SECONDS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid day fraction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_lt_p</name><argument_list>(<argument><expr><operator>*</operator><name>rsf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>f_ge_p</name><argument_list>(<argument><expr><operator>*</operator><name>rsf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>rof</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>DAY_IN_SECONDS</name> <operator>||</operator> <operator>*</operator><name>rof</name></expr></argument> &gt;</argument_list></name> <name>DAY_IN_SECONDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"invalid offset is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_start_p</name><argument_list>(<argument><expr><operator>*</operator><name>rsg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rsg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"invalid start is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_new_bang</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ajd</name></decl>, <decl><type ref="prev"/><name>of</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>, <decl><type ref="prev"/><name>nth</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>df</name></decl>, <decl><type ref="prev"/><name>rof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>rsg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"03"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ajd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>of</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>ajd</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>of</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>old_to_new</name><argument_list>(<argument><expr><name>ajd</name></expr></argument>, <argument><expr><name>of</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>df</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>df</name> <operator>&amp;&amp;</operator> <call><name>f_zero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>rof</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_simple_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>,
<argument><expr><name>rsg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>d_complex_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>,
<argument><expr><name>df</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>,
<argument><expr><name>rof</name></expr></argument>, <argument><expr><name>rsg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_DF</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type>
<name>wholenum_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>T_FLOAT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>round</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>d</name></expr>;</return>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>den</name> <init>= <expr><call><name>rb_rational_den</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>to_integer</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RB_INTEGER_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_to_i</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>d_trunc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wholenum_p</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rd</name> <operator>=</operator> <call><name>to_integer</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rd</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>rd</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jd_trunc</name></cpp:macro> <cpp:value>d_trunc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>k_trunc</name></cpp:macro> <cpp:value>d_trunc</cpp:value></cpp:define>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>h_trunc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rh</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wholenum_p</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rh</name> <operator>=</operator> <call><name>to_integer</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rh</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>f_quo</name><argument_list>(<argument><expr><operator>*</operator><name>fr</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>rh</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>min_trunc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rmin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wholenum_p</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rmin</name> <operator>=</operator> <call><name>to_integer</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rmin</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>f_quo</name><argument_list>(<argument><expr><operator>*</operator><name>fr</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1440</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>rmin</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>VALUE</name></type>
<name>s_trunc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wholenum_p</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rs</name> <operator>=</operator> <call><name>to_integer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rs</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>=</operator> <call><name>f_quo</name><argument_list>(<argument><expr><operator>*</operator><name>fr</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>rs</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>num2num_with_frac</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {s = s##_trunc(v##s, &amp;fr);if (f_nonzero_p(fr)) {if (argc &gt; n)rb_raise(eDateError, "invalid fraction");fr2 = fr;}} while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>num2int_with_frac</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {s = NUM2INT(s##_trunc(v##s, &amp;fr));if (f_nonzero_p(fr)) {if (argc &gt; n)rb_raise(eDateError, "invalid fraction");fr2 = fr;}} while (0)</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>canon24oc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do {if (rh == 24) {rh = 0;fr2 = f_add(fr2, INT2FIX(1));}} while (0)</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_frac</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do {if (f_nonzero_p(fr2))ret = d_lite_plus(ret, fr2);} while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>val2sg</name><parameter_list>(<parameter><type><name>vsg</name></type></parameter>,<parameter><type><name>dsg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {dsg = NUM2DBL(vsg);if (!c_valid_start_p(dsg)) {dsg = DEFAULT_SG;rb_warning("invalid start is ignored");}} while (0)</cpp:value></cpp:define>








<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>d_lite_plus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_jd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vjd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>jd</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vjd</name></expr></argument>, <argument><expr><literal type="string">"jd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2num_with_frac</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rjd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_simple_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>,
<argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_ordinal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"03"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"yday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_ordinal_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_simple_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>,
<argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_civil</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date_initialize</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>d_lite_s_alloc_simple</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vm</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>SimpleDateData</name></name> <modifier>*</modifier></type><name>dat</name> <init>= <expr><call><name>rb_check_typeddata</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_lite_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"Date expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"04"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"day"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><literal type="string">"month"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_gregorian_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_to_simple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>HAVE_CIVIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_civil_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>set_to_simple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_CIVIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_commercial</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vw</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"04"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cwday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vw</name></expr></argument>, <argument><expr><literal type="string">"cweek"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_commercial_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_simple_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>,
<argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_weeknum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vw</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vf</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"05"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_weeknum_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_simple_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>,
<argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_nth_kday</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vm</name></decl>, <decl><type ref="prev"/><name>vn</name></decl>, <decl><type ref="prev"/><name>vk</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"05"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rn</name></decl>, <decl><type ref="prev"/><name>rk</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_nth_kday_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_simple_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>,
<argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMTIME_R</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name><modifier>*</modifier></type>
<name>gmtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>auto</specifier> struct <name>tm</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>gmtime</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tm</name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tm</name></name><modifier>*</modifier></type>
<name>localtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>auto</specifier> struct <name>tm</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>tm</name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_sg</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_today</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vsg</name></decl>, <decl><type ref="prev"/><name>nth</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"localtime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_simple_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>GREGORIAN</name></expr></argument>,
<argument><expr><name>ry</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
<argument><expr><name>HAVE_CIVIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_hash0</name><parameter_list>(<parameter><type><name>k</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_aset(hash, k, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ref_hash0</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_aref(hash, k)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>del_hash0</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_delete(hash, k)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sym</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ID2SYM(rb_intern(x""))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_hash</name><parameter_list>(<parameter><type><name>k</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>set_hash0(sym(k), v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ref_hash</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ref_hash0(sym(k))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>del_hash</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>del_hash0(sym(k))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rt_rewrite_frags</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>seconds</name></decl>;</decl_stmt>

<expr_stmt><expr><name>seconds</name> <operator>=</operator> <call><name>del_hash</name><argument_list>(<argument><expr><literal type="string">"seconds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>seconds</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>DAY_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>DAY_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>HOUR_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>HOUR_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>MINUTE_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>MINUTE_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fr</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"jd"</literal></expr></argument>, <argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name>UNIX_EPOCH_IN_CJD</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>, <argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>d_lite_year</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>d_lite_wday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>d_lite_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rt_complete_frags</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>tab</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tab</name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>Qnil</name></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"jd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"ordinal"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"civil"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"commercial"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"cweek"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wnum0"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wnum0"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wnum1"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wnum1"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>Qnil</name></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"cweek"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>Qnil</name></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wnum0"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><name>Qnil</name></expr></argument>,
<argument><expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wnum1"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sym</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>eno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash0</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>eno</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>eno</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>eno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>eno</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>e</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <call><name>sym</name><argument_list>(<argument><expr><literal type="string">"ordinal"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>date_s_today</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>d_lite_year</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <call><name>sym</name><argument_list>(<argument><expr><literal type="string">"civil"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash0</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>date_s_today</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash0</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <call><name>sym</name><argument_list>(<argument><expr><literal type="string">"commercial"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash0</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>date_s_today</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash0</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"cweek"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cweek"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>date_s_today</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"jd"</literal></expr></argument>, <argument><expr><call><name>d_lite_jd</name><argument_list>(<argument><expr><call><name>f_add</name><argument_list>(<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><name>d</name></expr></argument>,
<argument><expr><call><name>d_lite_wday</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wnum0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash0</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>date_s_today</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash0</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"wnum0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"wnum0"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <call><name>sym</name><argument_list>(<argument><expr><literal type="string">"wnum1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash0</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>date_s_today</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash0</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"wnum1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"wnum1"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>==</operator> <call><name>sym</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_le_p</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>cDateTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>date_s_today</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"jd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"jd"</literal></expr></argument>, <argument><expr><call><name>d_lite_jd</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_gt_p</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rt__valid_jd_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>jd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rt__valid_ordinal_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_ordinal_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd2</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rt__valid_civil_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_civil_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd2</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rt__valid_commercial_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_commercial_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd2</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rt__valid_weeknum_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_weeknum_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rjd2</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rt__valid_date_frags_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vjd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>vjd</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"jd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>jd</name> <init>= <expr><call><name>rt__valid_jd_p</name><argument_list>(<argument><expr><name>vjd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>jd</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>year</name></decl>, <decl><type ref="prev"/><name>yday</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>yday</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>year</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>jd</name> <init>= <expr><call><name>rt__valid_ordinal_p</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>yday</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>jd</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>year</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>mday</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>mday</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>mon</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>year</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>jd</name> <init>= <expr><call><name>rt__valid_civil_p</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>mday</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>jd</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>year</name></decl>, <decl><type ref="prev"/><name>week</name></decl>, <decl><type ref="prev"/><name>wday</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>wday</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>wday</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>wday</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>wday</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>week</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"cweek"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>year</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>jd</name> <init>= <expr><call><name>rt__valid_commercial_p</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>week</name></expr></argument>, <argument><expr><name>wday</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>jd</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>year</name></decl>, <decl><type ref="prev"/><name>week</name></decl>, <decl><type ref="prev"/><name>wday</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>wday</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>wday</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>wday</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>wday</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>week</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"wnum0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>year</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>jd</name> <init>= <expr><call><name>rt__valid_weeknum_p</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>week</name></expr></argument>, <argument><expr><name>wday</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>jd</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>year</name></decl>, <decl><type ref="prev"/><name>week</name></decl>, <decl><type ref="prev"/><name>wday</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>wday</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>wday</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wday</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><name>wday</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>wday</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>week</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"wnum1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>year</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>jd</name> <init>= <expr><call><name>rt__valid_weeknum_p</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>week</name></expr></argument>, <argument><expr><name>wday</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>jd</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_new_by_frags</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>jd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_start_p</name><argument_list>(<argument><expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"invalid start is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"jd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>rt__valid_civil_p</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rt_rewrite_frags</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rt_complete_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>rt__valid_date_frags_p</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rjd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_simple_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>,
<argument><expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<function_decl><type><name>VALUE</name></type> <name>date__strptime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>flen</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__strptime_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vstr</name></decl>, <decl><type ref="prev"/><name>vfmt</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>slen</name></decl>, <decl><type ref="prev"/><name>flen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_enc_str_asciicompat_p</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr><literal type="string">"string should have ASCII compatible encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>default_fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>default_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>vfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_enc_str_asciicompat_p</name><argument_list>(<argument><expr><name>vfmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr><literal type="string">"format should have ASCII compatible encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>vfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>vfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>date__strptime</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name> <init>= <expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>left</name> <init>= <expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"leftover"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_enc_copy</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_enc_copy</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"leftover"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__strptime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date_s__strptime_internal</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="string">"%F"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_strptime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>fmt</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"03"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"%F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>date_s__strptime</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<function_decl><type><name>VALUE</name></type> <name>date__parse</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>comp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__parse_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vstr</name></decl>, <decl><type ref="prev"/><name>vcomp</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vcomp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_enc_str_asciicompat_p</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr><literal type="string">"string should have ASCII compatible encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vcomp</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>date__parse</name><argument_list>(<argument><expr><name>vstr</name></expr></argument>, <argument><expr><name>vcomp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__parse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date_s__parse_internal</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_parse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>comp</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"03"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>date_s__parse</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<function_decl><type><name>VALUE</name></type> <name>date__iso8601</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>date__rfc3339</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>date__xmlschema</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>date__rfc2822</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>date__httpdate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>date__jisx0301</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__iso8601</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date__iso8601</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_iso8601</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__iso8601</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>d_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__rfc3339</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date__rfc3339</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_rfc3339</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01T00:00:00+00:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__rfc3339</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>d_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__xmlschema</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date__xmlschema</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_xmlschema</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__xmlschema</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>d_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__rfc2822</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date__rfc2822</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_rfc2822</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Mon, 1 Jan -4712 00:00:00 +0000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__rfc2822</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>d_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__httpdate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date__httpdate</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_httpdate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Mon, 01 Jan -4712 00:00:00 GMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__httpdate</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>d_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__jisx0301</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date__jisx0301</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_jisx0301</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__jisx0301</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>d_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dup_obj</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1a</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new</name> <init>= <expr><call><name>d_lite_s_alloc_simple</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1b</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name><name>adat</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITTEN</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>nth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new</name> <init>= <expr><call><name>d_lite_s_alloc_complex</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1b</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>adat</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITTEN</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITTEN</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dup_obj_as_complex</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1a</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new</name> <init>= <expr><call><name>d_lite_s_alloc_complex</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1b</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_simple_to_complex</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bdat</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>adat</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HAVE_DF</name> <operator>|</operator> <name>COMPLEX_DAT</name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new</name> <init>= <expr><call><name>d_lite_s_alloc_complex</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1b</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>adat</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITTEN</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITTEN</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>Qundef</name></expr></argument>, <argument><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>val2off</name><parameter_list>(<parameter><type><name>vof</name></type></parameter>,<parameter><type><name>iof</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (!offset_to_sec(vof, &amp;iof)) {iof = 0;rb_warning("invalid offset is ignored");}} while (0)</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static VALUE
d_lite_initialize(int argc, VALUE *argv, VALUE self)
{
VALUE jd, vjd, vdf, sf, vsf, vof, vsg;
int df, of;
double sg;

rb_check_frozen(self);

rb_scan_args(argc, argv, "05", &amp;vjd, &amp;vdf, &amp;vsf, &amp;vof, &amp;vsg);

jd = INT2FIX(0);
df = 0;
sf = INT2FIX(0);
of = 0;
sg = DEFAULT_SG;

switch (argc) {
case 5:
val2sg(vsg, sg);
case 4:
val2off(vof, of);
case 3:
sf = vsf;
if (f_lt_p(sf, INT2FIX(0)) ||
f_ge_p(sf, INT2FIX(SECOND_IN_NANOSECONDS)))
rb_raise(eDateError, "invalid second fraction");
case 2:
df = NUM2INT(vdf);
if (df &lt; 0 || df &gt;= DAY_IN_SECONDS)
rb_raise(eDateError, "invalid day fraction");
case 1:
jd = vjd;
}

{
VALUE nth;
int rjd;

get_d1(self);

decode_jd(jd, &amp;nth, &amp;rjd);
if (!df &amp;&amp; f_zero_p(sf) &amp;&amp; !of) {
set_to_simple(self, &amp;dat-&gt;s, nth, rjd, sg, 0, 0, 0, HAVE_JD);
}
else {
if (!complex_dat_p(dat))
rb_raise(rb_eArgError,
"cannot load complex into simple");

set_to_complex(self, &amp;dat-&gt;c, nth, rjd, df, sf, of, sg,
0, 0, 0, 0, 0, 0, HAVE_JD | HAVE_DF);
}
}
return self;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_initialize_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>date</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_check_frozen</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>copy</name> <operator>==</operator> <name>date</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>copy</name></expr>;</return></block_content></block></if></if_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d2</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>flags</name></name> <operator>|</operator> <name>COMPLEX_DAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nth</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>nth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sf</name></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sg</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>sg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>year</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>year</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mon</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mon</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mday</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hour</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>hour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>min</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>sec</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pc</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>complex_dat_p</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr><literal type="string">"cannot load complex into simple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>bdat</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<return>return <expr><name>copy</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_fill</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_s_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_s_civil</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_c_civil</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_c_df</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_c_time</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_ajd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>m_ajd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_amjd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>m_amjd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_jd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>m_real_local_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_mjd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_sub</name><argument_list>(<argument><expr><call><name>m_real_local_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2400001</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_ld</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_sub</name><argument_list>(<argument><expr><call><name>m_real_local_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2299160</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_year</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>m_real_year</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_yday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_yday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_mon</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_mon</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_mday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_mday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_day_fraction</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>m_fr</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_cwyear</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>m_real_cwyear</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_cweek</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_cweek</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_cwday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_cwday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_wnum0</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_wnum0</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_wnum1</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_wnum1</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_wday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_wday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_sunday_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>m_wday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_monday_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>m_wday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_tuesday_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>m_wday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_wednesday_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>m_wday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_thursday_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>m_wday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_friday_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>m_wday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_saturday_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>m_wday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_nth_kday_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>m_wday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>c_nth_kday_to_jd</name><argument_list>(<argument><expr><call><name>m_year</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_mon</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_virtual_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, 
<argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>m_local_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>rjd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_hour</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_hour</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_min</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_min</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_sec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_sec</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_sec_fraction</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>m_sf_in_sec</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_offset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>m_of_in_day</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_zone</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>m_zone</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_julian_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>m_julian_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_gregorian_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>m_gregorian_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_leap_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rjd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>m_gregorian_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><call><name>c_gregorian_leap_p</name><argument_list>(<argument><expr><call><name>m_year</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>c_civil_to_jd</name><argument_list>(<argument><expr><call><name>m_year</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>m_virtual_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><name>rjd</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>m_virtual_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_boolcast</name><argument_list>(<argument><expr><name>rd</name> <operator>==</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_start</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>m_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>clear_civil</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>year</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HAVE_CIVIL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>year</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>HAVE_CIVIL</name> <operator>|</operator> <name>HAVE_TIME</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_sg</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>get_s_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_civil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>sg</name></name> <operator>=</operator> <operator>(</operator><name>date_sg_t</name><operator>)</operator><name>sg</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_c_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_c_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_civil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sg</name></name> <operator>=</operator> <operator>(</operator><name>date_sg_t</name><operator>)</operator><name>sg</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dup_obj_with_new_start</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>dup</name> <init>= <expr><call><name>dup_obj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_new_start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>dup_obj_with_new_start</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_italy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dup_obj_with_new_start</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_england</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dup_obj_with_new_start</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ENGLAND</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_julian</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dup_obj_with_new_start</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>JULIAN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_gregorian</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dup_obj_with_new_start</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_of</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>of</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>complex_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_c_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_c_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_civil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name> <operator>=</operator> <name>of</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dup_obj_with_new_offset</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>of</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>dup</name> <init>= <expr><call><name>dup_obj_as_complex</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_of</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><name>of</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_new_offset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rof</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>val2off</name><argument_list>(<argument><expr><name>vof</name></expr></argument>, <argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>dup_obj_with_new_offset</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_plus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>try_rational</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>again</name>:</label>
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>DIV</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>DIV</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>MOD</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>canonicalize_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_simple_new_internal</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>sg</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>dat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>flags</name></name> <operator>|</operator> <name>HAVE_JD</name><operator>)</operator> <operator>&amp;</operator>
<operator>~</operator><name>HAVE_CIVIL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>d_complex_new_internal</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sf</name></name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sg</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hour</name></name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>min</name></name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sec</name></name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><call><name>EX_HOUR</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>EX_MIN</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>EX_SEC</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><operator>(</operator><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|</operator> <name>HAVE_JD</name><operator>)</operator> <operator>&amp;</operator>
<operator>~</operator><name>HAVE_CIVIL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_positive_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>f_negate</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_mod</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>f_negate</name><argument_list>(<argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <operator>-</operator><name>jd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>jd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>canonicalize_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>m_nth</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_simple_new_internal</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>sg</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>dat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>flags</name></name> <operator>|</operator> <name>HAVE_JD</name><operator>)</operator> <operator>&amp;</operator>
<operator>~</operator><name>HAVE_CIVIL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>d_complex_new_internal</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sf</name></name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>, <argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sg</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hour</name></name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>min</name></name></expr></argument>,
<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sec</name></name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><call><name>EX_HOUR</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>EX_MIN</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>EX_SEC</name><argument_list>(<argument><expr><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><operator>(</operator><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|</operator> <name>HAVE_JD</name><operator>)</operator> <operator>&amp;</operator>
<operator>~</operator><name>HAVE_CIVIL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>T_FLOAT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>o</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>df</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <operator>-</operator><name>o</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>modf</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>floor</name><argument_list>(<argument><expr><name>tmp</name> <operator>/</operator> <name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>modf</name><argument_list>(<argument><expr><name>tmp</name> <operator>/</operator> <name>CM_PERIOD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>f_floor</name><argument_list>(<argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>f</name> <operator>*</operator> <name>CM_PERIOD</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>o</name> <operator>*=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>modf</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>*=</operator> <name>SECOND_IN_NANOSECONDS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <operator>-</operator><name>jd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>=</operator> <operator>-</operator><name>df</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_negate</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>m_sf</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>m_sf</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_lt_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>df</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>df</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>+=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>df</name> <operator>&gt;=</operator> <name>DAY_IN_SECONDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>jd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>canonicalize_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>m_nth</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>df</name> <operator>&amp;&amp;</operator> <call><name>f_zero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>m_of</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_simple_new_internal</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>jd</name></expr></argument>,
<argument><expr><call><name>m_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>dat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>flags</name></name> <operator>|</operator> <name>HAVE_JD</name><operator>)</operator> <operator>&amp;</operator>
<operator>~</operator><operator>(</operator><name>HAVE_CIVIL</name> <operator>|</operator> <name>HAVE_TIME</name> <operator>|</operator>
<name>COMPLEX_DAT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>d_complex_new_internal</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>jd</name></expr></argument>,
<argument><expr><name>df</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>,
<argument><expr><call><name>m_of</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|</operator>
<name>HAVE_JD</name> <operator>|</operator> <name>HAVE_DF</name><operator>)</operator> <operator>&amp;</operator>
<operator>~</operator><operator>(</operator><name>HAVE_CIVIL</name> <operator>|</operator> <name>HAVE_TIME</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>expect_numeric</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>f_to_r</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_rational_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>try_rational</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>try_rational</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>df</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wholenum_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>rb_rational_num</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_positive_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>other</name> <operator>=</operator> <call><name>f_negate</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_idiv</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_mul</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>DAY_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_idiv</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_mul</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>f_negate</name><argument_list>(<argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <operator>-</operator><name>jd</name></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>=</operator> <operator>-</operator><name>df</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_negate</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>m_sf</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>m_sf</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_lt_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>df</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>df</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>+=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>df</name> <operator>&gt;=</operator> <name>DAY_IN_SECONDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>jd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>canonicalize_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>m_nth</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>df</name> <operator>&amp;&amp;</operator> <call><name>f_zero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>m_of</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>d_simple_new_internal</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>,
<argument><expr><call><name>m_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>dat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>flags</name></name> <operator>|</operator> <name>HAVE_JD</name><operator>)</operator> <operator>&amp;</operator>
<operator>~</operator><operator>(</operator><name>HAVE_CIVIL</name> <operator>|</operator> <name>HAVE_TIME</name> <operator>|</operator>
<name>COMPLEX_DAT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>d_complex_new_internal</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>,
<argument><expr><name>df</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>,
<argument><expr><call><name>m_of</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>dat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|</operator>
<name>HAVE_JD</name> <operator>|</operator> <name>HAVE_DF</name><operator>)</operator> <operator>&amp;</operator>
<operator>~</operator><operator>(</operator><name>HAVE_CIVIL</name> <operator>|</operator> <name>HAVE_TIME</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>minus_dd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>df</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><call><name>m_nth</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_nth</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><call><name>m_sf</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_sf</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>canonicalize_jd</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>df</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>+=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>df</name> <operator>&gt;=</operator> <name>DAY_IN_SECONDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <name>DAY_IN_SECONDS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_lt_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>df</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>f_zero_p</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>f_mul</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>CM_PERIOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>rb_rational_new1</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>isec_to_day</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_nonzero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ns_to_day</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>T_RATIONAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_rational_new1</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_minus</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>k_date_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>minus_dd</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<return>return <expr><call><name>d_lite_plus</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><operator>-</operator><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>T_FLOAT</name></expr>:</case>
<return>return <expr><call><name>d_lite_plus</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><operator>-</operator><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>expect_numeric</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>
<case>case <expr><name>T_RATIONAL</name></expr>:</case>
<return>return <expr><call><name>d_lite_plus</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>f_negate</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_next_day</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_lite_plus</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_prev_day</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_lite_minus</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_next</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>d_lite_next_day</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_rshift</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>nth</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_add3</name><argument_list>(<argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><call><name>m_real_year</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_mon</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>it</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>DIV</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>MOD</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>it</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>f_idiv</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>f_mod</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>m_mday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>m_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>valid_civil_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>d</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>encode_jd</name><argument_list>(<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_lite_plus</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><name>rjd2</name></expr></argument>, <argument><expr><call><name>m_real_local_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_lshift</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>expect_numeric</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_lite_rshift</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>f_negate</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_next_month</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_lite_rshift</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_prev_month</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_lite_lshift</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_next_year</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_lite_rshift</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_prev_year</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>d_lite_lshift</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>f_mul</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>d_lite_cmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_step</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>limit</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>step</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (f_zero_p(step))
rb_raise(rb_eArgError, "step can't be 0");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>date</name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>f_cmp</name><argument_list>(<argument><expr><name>step</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>d_lite_cmp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>d_lite_plus</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<while>while <condition>(<expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>d_lite_cmp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>d_lite_plus</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_upto</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>date</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>date</name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>d_lite_cmp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>d_lite_plus</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_downto</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>min</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>date</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RETURN_ENUMERATOR</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>date</name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>d_lite_cmp</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>date</name> <operator>=</operator> <call><name>d_lite_plus</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>cmp_gen</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>f_cmp</name><argument_list>(<argument><expr><call><name>m_ajd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>k_date_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>f_cmp</name><argument_list>(<argument><expr><call><name>m_ajd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>f_ajd</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_num_coerce_cmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>id_cmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>cmp_dd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a_nth</name></decl>, <decl><type ref="prev"/><name>b_nth</name></decl>,
<decl><type ref="prev"/><name>a_sf</name></decl>, <decl><type ref="prev"/><name>b_sf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_jd</name></decl>, <decl><type ref="prev"/><name>b_jd</name></decl>,
<decl><type ref="prev"/><name>a_df</name></decl>, <decl><type ref="prev"/><name>b_df</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>m_canonicalize_jd</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>m_canonicalize_jd</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a_nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>a_nth</name></expr></argument>, <argument><expr><name>b_nth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a_jd</name> <operator>==</operator> <name>b_jd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_df</name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_df</name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a_df</name> <operator>==</operator> <name>b_df</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_sf</name> <operator>=</operator> <call><name>m_sf</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_sf</name> <operator>=</operator> <call><name>m_sf</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>a_sf</name></expr></argument>, <argument><expr><name>b_sf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_lt_p</name><argument_list>(<argument><expr><name>a_sf</name></expr></argument>, <argument><expr><name>b_sf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>a_df</name> <operator>&lt;</operator> <name>b_df</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>a_jd</name> <operator>&lt;</operator> <name>b_jd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_lt_p</name><argument_list>(<argument><expr><name>a_nth</name></expr></argument>, <argument><expr><name>b_nth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_cmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_date_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cmp_gen</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<expr_stmt><expr><call><name>get_d2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>simple_dat_p</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>m_gregorian_p</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>m_gregorian_p</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cmp_dd</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a_nth</name></decl>, <decl><type ref="prev"/><name>b_nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_jd</name></decl>, <decl><type ref="prev"/><name>b_jd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>m_canonicalize_jd</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>m_canonicalize_jd</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a_nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>a_nth</name></expr></argument>, <argument><expr><name>b_nth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a_jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_jd</name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a_jd</name> <operator>==</operator> <name>b_jd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>a_jd</name> <operator>&lt;</operator> <name>b_jd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_lt_p</name><argument_list>(<argument><expr><name>a_nth</name></expr></argument>, <argument><expr><name>b_nth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>equal_gen</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><call><name>m_real_local_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>k_date_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><call><name>m_real_local_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>f_jd</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_num_coerce_cmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>id_eqeq_p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_equal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_date_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>equal_gen</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<expr_stmt><expr><call><name>get_d2</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>m_gregorian_p</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>m_gregorian_p</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>equal_gen</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a_nth</name></decl>, <decl><type ref="prev"/><name>b_nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_jd</name></decl>, <decl><type ref="prev"/><name>b_jd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>m_canonicalize_jd</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>m_canonicalize_jd</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a_nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_nth</name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a_jd</name> <operator>=</operator> <call><name>m_local_jd</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b_jd</name> <operator>=</operator> <call><name>m_local_jd</name><argument_list>(<argument><expr><name>bdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>a_nth</name></expr></argument>, <argument><expr><name>b_nth</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>a_jd</name> <operator>==</operator> <name>b_jd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block>
</block_content>}</block>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_eql_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_date_p</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_zero_p</name><argument_list>(<argument><expr><call><name>d_lite_cmp</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_hash</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_index_t</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name><name>h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>m_nth</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>m_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>m_sf</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_memhash</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ST2FIX</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"date_tmx.h"</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_tmx</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tmx</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>strftimev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tmx</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_to_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>mk_inspect_raw</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>flags</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COMPLEX_DAT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'C'</literal></expr> </then><else>: <expr><literal type="char">'S'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAVE_JD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'j'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flags</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAVE_DF</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'d'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flags</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAVE_CIVIL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'c'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flags</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HAVE_TIME</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'t'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flags</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_enc_sprintf</name><argument_list>(<argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"#&lt;%"</literal><name>PRIsVALUE</name><literal type="string">": "</literal>
<literal type="string">"(%+"</literal><name>PRIsVALUE</name><literal type="string">"th,%dj),+0s,%.0fj; "</literal>
<literal type="string">"%dy%dm%dd; %s&gt;"</literal></expr></argument>,
<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>nth</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>sg</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mon</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>mday</name></name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>year</name></name></expr></argument>,
<argument><expr><call><name>EX_MON</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EX_MDAY</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>rb_enc_sprintf</name><argument_list>(<argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"#&lt;%"</literal><name>PRIsVALUE</name><literal type="string">": "</literal>
<literal type="string">"(%+"</literal><name>PRIsVALUE</name><literal type="string">"th,%dj,%ds,%+"</literal><name>PRIsVALUE</name><literal type="string">"n),"</literal>
<literal type="string">"%+ds,%.0fj; "</literal>
<literal type="string">"%dy%dm%dd %dh%dm%ds; %s&gt;"</literal></expr></argument>,
<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nth</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>jd</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sf</name></name></expr></argument>,
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>of</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sg</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mon</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>mday</name></name></expr></argument>,
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hour</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sec</name></name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>year</name></name></expr></argument>,
<argument><expr><call><name>EX_MON</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EX_MDAY</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>EX_HOUR</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EX_MIN</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>EX_SEC</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_inspect_raw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mk_inspect_raw</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>mk_inspect</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>to_s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_enc_sprintf</name><argument_list>(<argument><expr><call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="string">"#&lt;%"</literal><name>PRIsVALUE</name><literal type="string">": %"</literal><name>PRIsVALUE</name><literal type="string">" "</literal>
<literal type="string">"((%+"</literal><name>PRIsVALUE</name><literal type="string">"j,%ds,%+"</literal><name>PRIsVALUE</name><literal type="string">"n),%+ds,%.0fj)&gt;"</literal></expr></argument>,
<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>to_s</name></expr></argument>,
<argument><expr><call><name>m_real_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_sf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>m_of</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>m_sg</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>mk_inspect</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"date_tmx.h"</cpp:file></cpp:include>

<function_decl><type><name>size_t</name></type> <name>date_strftime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tmx</name></name> <modifier>*</modifier></type><name>tmx</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMALLBUF</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>date_strftime_alloc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>tmx</name></name> <modifier>*</modifier></type><name>tmx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>flen</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>date_strftime</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>SMALLBUF</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>tmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ERANGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>size</name><operator>=</operator><literal type="number">1024</literal></expr>;</init> <condition>;</condition> <incr><expr><name>size</name><operator>*=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>date_strftime</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>tmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">1024</literal> <operator>*</operator> <name>flen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tmx_m_secs</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>df</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>day_to_sec</name><argument_list>(<argument><expr><call><name>f_sub</name><argument_list>(<argument><expr><call><name>m_real_jd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>UNIX_EPOCH_IN_CJD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>m_df</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>df</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MILLISECOND_IN_NANOSECONDS</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>tmx_m_msecs</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sec_to_ms</name><argument_list>(<argument><expr><call><name>tmx_m_secs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>m_sf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_nonzero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>f_div</name><argument_list>(<argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>MILLISECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tmx_m_of</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>m_of</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>tmx_m_zone</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>DateData</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name> <init>= <expr><call><name>m_zone</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>tmx_funcs</name></name></type> <name>tmx_funcs</name> <init>= <expr><block>{
<expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_real_year</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_yday</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_mon</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_mday</name></expr>,
<expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_real_cwyear</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_cweek</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_cwday</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_wnum0</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_wnum1</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_wday</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_hour</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_min</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_sec</name></expr>,
<expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>m_sf_in_sec</name></expr>,
<expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>tmx_m_secs</name></expr>,
<expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>tmx_m_msecs</name></expr>,
<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>tmx_m_of</name></expr>,
<expr><operator>(</operator><name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>tmx_m_zone</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_tmx</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tmx</name></name> <modifier>*</modifier></type><name>tmx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmx</name><operator>-&gt;</operator><name>dat</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>dat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmx</name><operator>-&gt;</operator><name>funcs</name></name> <operator>=</operator> <operator>&amp;</operator><name>tmx_funcs</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_strftime_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_fmt</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tmx</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vfmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>SMALLBUF</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tmx</name></name></type> <name>tmx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vfmt</name> <operator>=</operator> <call><name>rb_usascii_str_new2</name><argument_list>(<argument><expr><name>default_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>vfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_enc_str_asciicompat_p</name><argument_list>(<argument><expr><name>vfmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr><literal type="string">"format should have ASCII compatible encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>vfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>vfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>fmt</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pe</name> <init>= <expr><name>fmt</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>pe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>date_strftime_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>fmt</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pe</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>fmt</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>rb_enc_copy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>vfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>date_strftime_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_enc_copy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>vfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>


















































































































































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_strftime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date_strftime_internal</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>,
<argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>strftimev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tmx</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>SMALLBUF</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tmx</name></name></type> <name>tmx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>date_strftime_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_usascii_str_new</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_asctime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%a %b %e %H:%M:%S %Y"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_iso8601</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_rfc3339</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%dT%H:%M:%S%:z"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_rfc2822</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%a, %-d %b %Y %T %z"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_httpdate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>dup</name> <init>= <expr><call><name>dup_obj_with_new_offset</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%a, %d %b %Y %T GMT"</literal></expr></argument>, <argument><expr><name>dup</name></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<enum>enum <block>{
<decl><name>DECIMAL_SIZE_OF_LONG</name> <init>= <expr><call><name>DECIMAL_SIZE_OF_BITS</name><argument_list>(<argument><expr><name>CHAR_BIT</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>,
<decl><name>JISX0301_DATE_SIZE</name> <init>= <expr><name>DECIMAL_SIZE_OF_LONG</name><operator>+</operator><literal type="number">8</literal></expr></init></decl>
}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>jisx0301_date_format</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>d</name> <init>= <expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">2405160</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"%Y-%m-%d"</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">2419614</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'M'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1867</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">2424875</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'T'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1911</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">2447535</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1925</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">2458605</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'H'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1988</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">2018</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%c%02ld"</literal> <literal type="string">".%%m.%%d"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>fmt</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="string">"%Y-%m-%d"</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_jisx0301</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fmtbuf</name><index>[<expr><name>JISX0301_DATE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>jisx0301_date_format</name><argument_list>(<argument><expr><name>fmtbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmtbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>m_real_local_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>m_real_year</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_marshal_dump_old</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><call><name>m_ajd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>m_of_in_day</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>m_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FL_TEST</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>FL_EXIVAR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_copy_generic_ivar</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FL_SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>FL_EXIVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_marshal_dump</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><call><name>m_nth</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_jd</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_df</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>m_sf</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_of</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><call><name>m_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FL_TEST</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>FL_EXIVAR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_copy_generic_ivar</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FL_SET</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>FL_EXIVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_marshal_load</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>df</name></decl>, <decl><type ref="prev"/><name>of</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_check_frozen</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"expected an array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ajd</name></decl>, <decl><type ref="prev"/><name>vof</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ajd</name> <operator>=</operator> <call><name>f_sub</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>half_days_in_day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vof</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsg</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>k_numeric_p</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>vsg</name> <operator>=</operator> <call><name>DBL2NUM</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>GREGORIAN</name></expr> </then><else>: <expr><name>JULIAN</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ajd</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vof</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsg</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>old_to_new</name><argument_list>(<argument><expr><name>ajd</name></expr></argument>, <argument><expr><name>vof</name></expr></argument>, <argument><expr><name>vsg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>df</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>of</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name>nth</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>of</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"invalid size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>df</name> <operator>||</operator> <operator>!</operator><call><name>f_zero_p</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>of</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr><literal type="string">"cannot load complex into simple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_to_simple</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dat</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>HAVE_JD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>set_to_complex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dat</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>jd</name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><name>of</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_DF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FL_TEST</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>FL_EXIVAR</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_copy_generic_ivar</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FL_SET</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>FL_EXIVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s__load</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rb_marshal_load</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>d_lite_s_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>d_lite_marshal_load</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_jd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vjd</name></decl>, <decl><type ref="prev"/><name>vh</name></decl>, <decl><type ref="prev"/><name>vmin</name></decl>, <decl><type ref="prev"/><name>vs</name></decl>, <decl><type ref="prev"/><name>vof</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>jd</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>rof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"06"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>min</name> <operator>=</operator> <name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>val2off</name><argument_list>(<argument><expr><name>vof</name></expr></argument>, <argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vmin</name></expr></argument>, <argument><expr><literal type="string">"minute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vh</name></expr></argument>, <argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vjd</name></expr></argument>, <argument><expr><literal type="string">"jd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2num_with_frac</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rh</name></decl>, <decl><type ref="prev"/><name>rmin</name></decl>, <decl><type ref="prev"/><name>rs</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_time_p</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>canon24oc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rjd2</name> <operator>=</operator> <call><name>jd_local_to_utc</name><argument_list>(<argument><expr><name>rjd</name></expr></argument>,
<argument><expr><call><name>time_to_df</name><argument_list>(<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_complex_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd2</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,
<argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_ordinal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vh</name></decl>, <decl><type ref="prev"/><name>vmin</name></decl>, <decl><type ref="prev"/><name>vs</name></decl>, <decl><type ref="prev"/><name>vof</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>rof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"07"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>min</name> <operator>=</operator> <name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>val2off</name><argument_list>(<argument><expr><name>vof</name></expr></argument>, <argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vmin</name></expr></argument>, <argument><expr><literal type="string">"minute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vh</name></expr></argument>, <argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"yday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rh</name></decl>, <decl><type ref="prev"/><name>rmin</name></decl>, <decl><type ref="prev"/><name>rs</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_ordinal_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_time_p</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>canon24oc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rjd2</name> <operator>=</operator> <call><name>jd_local_to_utc</name><argument_list>(<argument><expr><name>rjd</name></expr></argument>,
<argument><expr><call><name>time_to_df</name><argument_list>(<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_complex_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd2</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,
<argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_civil</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>datetime_initialize</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><call><name>d_lite_s_alloc_complex</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vm</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vh</name></decl>, <decl><type ref="prev"/><name>vmin</name></decl>, <decl><type ref="prev"/><name>vs</name></decl>, <decl><type ref="prev"/><name>vof</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>rof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ComplexDateData</name></name> <modifier>*</modifier></type><name>dat</name> <init>= <expr><call><name>rb_check_typeddata</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_lite_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>complex_dat_p</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"DateTime expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"08"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>min</name> <operator>=</operator> <name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><call><name>val2off</name><argument_list>(<argument><expr><name>vof</name></expr></argument>, <argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vmin</name></expr></argument>, <argument><expr><literal type="string">"minute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vh</name></expr></argument>, <argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"day"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vm</name></expr></argument>, <argument><expr><literal type="string">"month"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>guess_style</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rh</name></decl>, <decl><type ref="prev"/><name>rmin</name></decl>, <decl><type ref="prev"/><name>rs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_gregorian_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_time_p</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>canon24oc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_to_complex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>,
<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,
<argument><expr><name>HAVE_CIVIL</name> <operator>|</operator> <name>HAVE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rh</name></decl>, <decl><type ref="prev"/><name>rmin</name></decl>, <decl><type ref="prev"/><name>rs</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_civil_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_time_p</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>canon24oc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rjd2</name> <operator>=</operator> <call><name>jd_local_to_utc</name><argument_list>(<argument><expr><name>rjd</name></expr></argument>,
<argument><expr><call><name>time_to_df</name><argument_list>(<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_to_complex</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd2</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rm</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>,
<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,
<argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_CIVIL</name> <operator>|</operator> <name>HAVE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_commercial</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vw</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vh</name></decl>, <decl><type ref="prev"/><name>vmin</name></decl>, <decl><type ref="prev"/><name>vs</name></decl>, <decl><type ref="prev"/><name>vof</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>rof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"08"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>min</name> <operator>=</operator> <name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><call><name>val2off</name><argument_list>(<argument><expr><name>vof</name></expr></argument>, <argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vs</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vmin</name></expr></argument>, <argument><expr><literal type="string">"minute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vh</name></expr></argument>, <argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vd</name></expr></argument>, <argument><expr><literal type="string">"cwday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vw</name></expr></argument>, <argument><expr><literal type="string">"cweek"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><call><name>check_numeric</name><argument_list>(<argument><expr><name>vy</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rh</name></decl>, <decl><type ref="prev"/><name>rmin</name></decl>, <decl><type ref="prev"/><name>rs</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_commercial_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_time_p</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>canon24oc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rjd2</name> <operator>=</operator> <call><name>jd_local_to_utc</name><argument_list>(<argument><expr><name>rjd</name></expr></argument>,
<argument><expr><call><name>time_to_df</name><argument_list>(<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_complex_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd2</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,
<argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_weeknum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vw</name></decl>, <decl><type ref="prev"/><name>vd</name></decl>, <decl><type ref="prev"/><name>vf</name></decl>, <decl><type ref="prev"/><name>vh</name></decl>, <decl><type ref="prev"/><name>vmin</name></decl>, <decl><type ref="prev"/><name>vs</name></decl>, <decl><type ref="prev"/><name>vof</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>rof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"09"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vf</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>vh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>min</name> <operator>=</operator> <name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><call><name>val2off</name><argument_list>(<argument><expr><name>vof</name></expr></argument>, <argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rw</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"/><name>rh</name></decl>, <decl><type ref="prev"/><name>rmin</name></decl>, <decl><type ref="prev"/><name>rs</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_weeknum_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_time_p</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>canon24oc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rjd2</name> <operator>=</operator> <call><name>jd_local_to_utc</name><argument_list>(<argument><expr><name>rjd</name></expr></argument>,
<argument><expr><call><name>time_to_df</name><argument_list>(<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_complex_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd2</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,
<argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_nth_kday</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vy</name></decl>, <decl><type ref="prev"/><name>vm</name></decl>, <decl><type ref="prev"/><name>vn</name></decl>, <decl><type ref="prev"/><name>vk</name></decl>, <decl><type ref="prev"/><name>vh</name></decl>, <decl><type ref="prev"/><name>vmin</name></decl>, <decl><type ref="prev"/><name>vs</name></decl>, <decl><type ref="prev"/><name>vof</name></decl>, <decl><type ref="prev"/><name>vsg</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>fr</name></decl>, <decl><type ref="prev"/><name>fr2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>rof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"09"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vk</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>vh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vof</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4712</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>min</name> <operator>=</operator> <name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fr2</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>val2sg</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><call><name>val2off</name><argument_list>(<argument><expr><name>vof</name></expr></argument>, <argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>positive_inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><call><name>num2int_with_frac</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>vy</name></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>rm</name></decl>, <decl><type ref="prev"/><name>rn</name></decl>, <decl><type ref="prev"/><name>rk</name></decl>, <decl><type ref="prev"/><name>rh</name></decl>, <decl><type ref="prev"/><name>rmin</name></decl>, <decl><type ref="prev"/><name>rs</name></decl>, <decl><type ref="prev"/><name>rjd</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valid_nth_kday_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_time_p</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>canon24oc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rjd2</name> <operator>=</operator> <call><name>jd_local_to_utc</name><argument_list>(<argument><expr><name>rjd</name></expr></argument>,
<argument><expr><call><name>time_to_df</name><argument_list>(<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_complex_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd2</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rof</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>,
<argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>add_frac</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_now</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vsg</name></decl>, <decl><type ref="prev"/><name>nth</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sg</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>sf</name></decl>, <decl><type ref="prev"/><name>of</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <name>DEFAULT_SG</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>NUM2DBL</name><argument_list>(<argument><expr><name>vsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"clock_gettime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"gettimeofday"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"localtime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">59</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_GMTOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>of</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMEZONE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>of</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>altzone</name></expr> </then><else>: <expr><name>timezone</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>of</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><name>timezone</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec2</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sec2</name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>of</name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>difftime</name><argument_list>(<argument><expr><name>sec2</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TIMEGM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sec2</name> <operator>=</operator> <call><name>timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>of</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>difftime</name><argument_list>(<argument><expr><name>sec2</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"gmtime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tm2</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_isdst</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sec2</name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>of</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>difftime</name><argument_list>(<argument><expr><name>sec</name></expr></argument>, <argument><expr><name>sec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>of</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>DAY_IN_SECONDS</name> <operator>||</operator> <name>of</name></expr></argument> &gt;</argument_list></name> <name>DAY_IN_SECONDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>of</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"invalid offset is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_complex_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>of</name></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>,
<argument><expr><name>ry</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><name>HAVE_CIVIL</name> <operator>|</operator> <name>HAVE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dt_new_by_frags</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>jd</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>df</name></decl>, <decl><type ref="prev"/><name>of</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_start_p</name><argument_list>(<argument><expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"invalid start is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"jd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>rt__valid_civil_p</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rt_rewrite_frags</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rt_complete_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jd</name> <operator>=</operator> <call><name>rt__valid_date_frags_p</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>jd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rh</name></decl>, <decl><type ref="prev"/><name>rmin</name></decl>, <decl><type ref="prev"/><name>rs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>c_valid_time_p</name><argument_list>(<argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>rh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eDateError</name></expr></argument>, <argument><expr><literal type="string">"invalid date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>time_to_df</name><argument_list>(<argument><expr><name>rh</name></expr></argument>, <argument><expr><name>rmin</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>sec_to_ns</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>of</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>of</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>of</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><name>DAY_IN_SECONDS</name> <operator>||</operator> <name>of</name></expr></argument> &gt;</argument_list></name> <name>DAY_IN_SECONDS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>of</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"invalid offset is ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>nth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rjd</name></decl>, <decl><type ref="prev"/><name>rjd2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_jd</name><argument_list>(<argument><expr><name>jd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rjd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rjd2</name> <operator>=</operator> <call><name>jd_local_to_utc</name><argument_list>(<argument><expr><name>rjd</name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><name>of</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>df_local_to_utc</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><name>of</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>d_complex_new_internal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><name>rjd2</name></expr></argument>,
<argument><expr><name>df</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>,
<argument><expr><name>of</name></expr></argument>, <argument><expr><call><name>NUM2DBL</name><argument_list>(<argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>HAVE_JD</name> <operator>|</operator> <name>HAVE_DF</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s__strptime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date_s__strptime_internal</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="string">"%FT%T%z"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_strptime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>fmt</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"03"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01T00:00:00+00:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"%FT%T%z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>date_s__strptime</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dt_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_parse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>comp</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"03"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01T00:00:00+00:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>date_s__parse</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dt_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_iso8601</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01T00:00:00+00:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__iso8601</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dt_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_rfc3339</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01T00:00:00+00:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__rfc3339</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dt_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_xmlschema</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01T00:00:00+00:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__xmlschema</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dt_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_rfc2822</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Mon, 1 Jan -4712 00:00:00 +0000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__rfc2822</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dt_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_httpdate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"Mon, 01 Jan -4712 00:00:00 GMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__httpdate</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dt_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_s_jisx0301</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>sg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"-4712-01-01T00:00:00+00:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>sg</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name> <init>= <expr><call><name>date_s__jisx0301</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dt_new_by_frags</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dt_lite_to_s</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%dT%H:%M:%S%:z"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



















































































































































































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dt_lite_strftime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date_strftime_internal</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>,
<argument><expr><literal type="string">"%Y-%m-%dT%H:%M:%S%:z"</literal></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>iso8601_timediv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>timefmt</name><index>[]</index></name> <init>= <expr><literal type="string">"T%H:%M:%S"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zone</name><index>[]</index></name> <init>= <expr><literal type="string">"%:z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fmt</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>timefmt</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>rb_strlen_lit</name><argument_list>(<argument><expr><literal type="string">".%N"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
<name>DECIMAL_SIZE_OF_LONG</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>fmt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>timefmt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timefmt</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>timefmt</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fmt</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>p</name></expr></argument>, <argument><expr><literal type="string">".%%%ldN"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>strftimev</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dt_lite_iso8601</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_str_append</name><argument_list>(<argument><expr><call><name>strftimev</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>set_tmx</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>iso8601_timediv</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dt_lite_rfc3339</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>dt_lite_iso8601</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>dt_lite_jisx0301</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_str_append</name><argument_list>(<argument><expr><call><name>d_lite_jisx0301</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>iso8601_timediv</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_subsec</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("subsec"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_utc_offset</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("utc_offset"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_local3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("local"), 3, y, m, d)</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_to_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_to_date</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>nth</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>f_year</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_mon</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_mday</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_simple_new_internal</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>GREGORIAN</name></expr></argument>,
<argument><expr><name>ry</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
<argument><expr><name>HAVE_CIVIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>time_to_datetime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>, <decl><type ref="prev"/><name>nth</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ry</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>of</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>f_year</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_mon</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_mday</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_hour</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_min</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_sec</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">59</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sf</name> <operator>=</operator> <call><name>sec_to_ns</name><argument_list>(<argument><expr><call><name>f_subsec</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>of</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>f_utc_offset</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_year</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>d_complex_new_internal</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>,
<argument><expr><name>nth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sf</name></expr></argument>,
<argument><expr><name>of</name></expr></argument>, <argument><expr><name>DEFAULT_SG</name></expr></argument>,
<argument><expr><name>ry</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
<argument><expr><name>h</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><name>HAVE_CIVIL</name> <operator>|</operator> <name>HAVE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_sg</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><name>DEFAULT_SG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_to_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1a</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>m_julian_p</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name> <init>= <expr><call><name>d_lite_gregorian</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_d1b</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>adat</name> <operator>=</operator> <name>bdat</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>f_local3</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>,
<argument><expr><call><name>m_real_year</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_mon</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_mday</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_to_date</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_to_datetime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1a</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new</name> <init>= <expr><call><name>d_lite_s_alloc_simple</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1b</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name><name>adat</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new</name> <init>= <expr><call><name>d_lite_s_alloc_complex</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1b</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>adat</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>df</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_OBJ_WRITE</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sf</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_PACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name> <operator>=</operator> <call><name>PACK5</name><argument_list>(<argument><expr><call><name>EX_MON</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EX_MDAY</name><argument_list>(<argument><expr><name><name>adat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>HAVE_DF</name> <operator>|</operator> <name>HAVE_TIME</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_to_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>VALUE</name></type> <name>dup</name> <init>= <expr><call><name>dup_obj</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_d1</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>,
<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">7</literal></expr></argument>,
<argument><expr><call><name>m_real_year</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_mon</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_mday</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_hour</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_min</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>f_add</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_sec</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>m_sf_in_sec</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>m_of</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_to_date</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1a</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>simple_dat_p</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new</name> <init>= <expr><call><name>d_lite_s_alloc_simple</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1b</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name><name>adat</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name> <operator>=</operator> <call><name>m_local_jd</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>new</name> <init>= <expr><call><name>d_lite_s_alloc_simple</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>get_d1b</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copy_complex_to_simple</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bdat</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>adat</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jd</name></name> <operator>=</operator> <call><name>m_local_jd</name><argument_list>(<argument><expr><name>adat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdat</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>HAVE_DF</name> <operator>|</operator> <name>HAVE_TIME</name> <operator>|</operator> <name>COMPLEX_DAT</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>datetime_to_datetime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_YEAR</name></cpp:macro> <cpp:value>-4713</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_YEAR</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_JD</name></cpp:macro> <cpp:value>-327</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_JD</name></cpp:macro> <cpp:value>366963925</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>test_civil</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"test_civil: %d...%d (%d) - %.0f\n"</literal></expr></argument>,
<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>rj</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_civil</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_civil_to_jd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>rj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d != %d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>rj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_test_civil</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_civil</name><argument_list>(<argument><expr><name>MIN_JD</name></expr></argument>, <argument><expr><name>MIN_JD</name> <operator>+</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_civil</name><argument_list>(<argument><expr><literal type="number">2305814</literal></expr></argument>, <argument><expr><literal type="number">2598007</literal></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_civil</name><argument_list>(<argument><expr><name>MAX_JD</name> <operator>-</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>MAX_JD</name></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_civil</name><argument_list>(<argument><expr><name>MIN_JD</name></expr></argument>, <argument><expr><name>MIN_JD</name> <operator>+</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_civil</name><argument_list>(<argument><expr><literal type="number">2305814</literal></expr></argument>, <argument><expr><literal type="number">2598007</literal></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_civil</name><argument_list>(<argument><expr><name>MAX_JD</name> <operator>-</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>MAX_JD</name></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>test_ordinal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"test_ordinal: %d...%d (%d) - %.0f\n"</literal></expr></argument>,
<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>rj</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_ordinal</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_ordinal_to_jd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>rj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d != %d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>rj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_test_ordinal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_ordinal</name><argument_list>(<argument><expr><name>MIN_JD</name></expr></argument>, <argument><expr><name>MIN_JD</name> <operator>+</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_ordinal</name><argument_list>(<argument><expr><literal type="number">2305814</literal></expr></argument>, <argument><expr><literal type="number">2598007</literal></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_ordinal</name><argument_list>(<argument><expr><name>MAX_JD</name> <operator>-</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>MAX_JD</name></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_ordinal</name><argument_list>(<argument><expr><name>MIN_JD</name></expr></argument>, <argument><expr><name>MIN_JD</name> <operator>+</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_ordinal</name><argument_list>(<argument><expr><literal type="number">2305814</literal></expr></argument>, <argument><expr><literal type="number">2598007</literal></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_ordinal</name><argument_list>(<argument><expr><name>MAX_JD</name> <operator>-</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>MAX_JD</name></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>test_commercial</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"test_commercial: %d...%d (%d) - %.0f\n"</literal></expr></argument>,
<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>rj</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_commercial</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_commercial_to_jd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>rj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d != %d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>rj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_test_commercial</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_commercial</name><argument_list>(<argument><expr><name>MIN_JD</name></expr></argument>, <argument><expr><name>MIN_JD</name> <operator>+</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_commercial</name><argument_list>(<argument><expr><literal type="number">2305814</literal></expr></argument>, <argument><expr><literal type="number">2598007</literal></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_commercial</name><argument_list>(<argument><expr><name>MAX_JD</name> <operator>-</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>MAX_JD</name></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_commercial</name><argument_list>(<argument><expr><name>MIN_JD</name></expr></argument>, <argument><expr><name>MIN_JD</name> <operator>+</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_commercial</name><argument_list>(<argument><expr><literal type="number">2305814</literal></expr></argument>, <argument><expr><literal type="number">2598007</literal></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_commercial</name><argument_list>(<argument><expr><name>MAX_JD</name> <operator>-</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>MAX_JD</name></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>test_weeknum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"test_weeknum: %d...%d (%d) - %.0f\n"</literal></expr></argument>,
<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>rj</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_weeknum</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_weeknum_to_jd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>rj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d != %d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>rj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_test_weeknum</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_weeknum</name><argument_list>(<argument><expr><name>MIN_JD</name></expr></argument>, <argument><expr><name>MIN_JD</name> <operator>+</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_weeknum</name><argument_list>(<argument><expr><literal type="number">2305814</literal></expr></argument>, <argument><expr><literal type="number">2598007</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_weeknum</name><argument_list>(<argument><expr><name>MAX_JD</name> <operator>-</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>MAX_JD</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_weeknum</name><argument_list>(<argument><expr><name>MIN_JD</name></expr></argument>, <argument><expr><name>MIN_JD</name> <operator>+</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_weeknum</name><argument_list>(<argument><expr><literal type="number">2305814</literal></expr></argument>, <argument><expr><literal type="number">2598007</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_weeknum</name><argument_list>(<argument><expr><name>MAX_JD</name> <operator>-</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>MAX_JD</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>test_nth_kday</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"test_nth_kday: %d...%d (%d) - %.0f\n"</literal></expr></argument>,
<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>to</name> <operator>-</operator> <name>from</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>rj</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>c_jd_to_nth_kday</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>c_nth_kday_to_jd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>sg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>rj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d != %d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>rj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_test_nth_kday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_nth_kday</name><argument_list>(<argument><expr><name>MIN_JD</name></expr></argument>, <argument><expr><name>MIN_JD</name> <operator>+</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_nth_kday</name><argument_list>(<argument><expr><literal type="number">2305814</literal></expr></argument>, <argument><expr><literal type="number">2598007</literal></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_nth_kday</name><argument_list>(<argument><expr><name>MAX_JD</name> <operator>-</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>MAX_JD</name></expr></argument>, <argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_nth_kday</name><argument_list>(<argument><expr><name>MIN_JD</name></expr></argument>, <argument><expr><name>MIN_JD</name> <operator>+</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_nth_kday</name><argument_list>(<argument><expr><literal type="number">2305814</literal></expr></argument>, <argument><expr><literal type="number">2598007</literal></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_nth_kday</name><argument_list>(<argument><expr><name>MAX_JD</name> <operator>-</operator> <literal type="number">366</literal></expr></argument>, <argument><expr><name>MAX_JD</name></expr></argument>, <argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>test_unit_v2v</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>i</name></decl></parameter>,
<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier> <name>conv1</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier> <name>conv2</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>conv1</name>)<argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call>(<modifier>*</modifier><name>conv2</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>f_eqeq_p</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>test_unit_v2v_iter2</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier> <name>conv1</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier> <name>conv2</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1073741823</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><literal type="number">1073741824</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v</name><argument_list>(<argument><expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>test_unit_v2v_iter</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier> <name>conv1</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
<parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier> <name>conv2</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v_iter2</name><argument_list>(<argument><expr><name>conv1</name></expr></argument>, <argument><expr><name>conv2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v_iter2</name><argument_list>(<argument><expr><name>conv2</name></expr></argument>, <argument><expr><name>conv1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_test_unit_conv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v_iter</name><argument_list>(<argument><expr><name>sec_to_day</name></expr></argument>, <argument><expr><name>day_to_sec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v_iter</name><argument_list>(<argument><expr><name>ms_to_sec</name></expr></argument>, <argument><expr><name>sec_to_ms</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v_iter</name><argument_list>(<argument><expr><name>ns_to_day</name></expr></argument>, <argument><expr><name>day_to_ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>test_unit_v2v_iter</name><argument_list>(<argument><expr><name>ns_to_sec</name></expr></argument>, <argument><expr><name>sec_to_ns</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>date_s_test_all</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>date_s_test_civil</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Qfalse</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>date_s_test_ordinal</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Qfalse</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>date_s_test_commercial</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Qfalse</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>date_s_test_weeknum</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Qfalse</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>date_s_test_nth_kday</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Qfalse</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>date_s_test_unit_conv</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Qfalse</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Qtrue</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>monthnames</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><literal type="string">"January"</literal></expr>, <expr><literal type="string">"February"</literal></expr>, <expr><literal type="string">"March"</literal></expr>,
<expr><literal type="string">"April"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"June"</literal></expr>,
<expr><literal type="string">"July"</literal></expr>, <expr><literal type="string">"August"</literal></expr>, <expr><literal type="string">"September"</literal></expr>,
<expr><literal type="string">"October"</literal></expr>, <expr><literal type="string">"November"</literal></expr>, <expr><literal type="string">"December"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>abbr_monthnames</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>,
<expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>, <expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>,
<expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>daynames</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Sunday"</literal></expr>, <expr><literal type="string">"Monday"</literal></expr>, <expr><literal type="string">"Tuesday"</literal></expr>, <expr><literal type="string">"Wednesday"</literal></expr>,
<expr><literal type="string">"Thursday"</literal></expr>, <expr><literal type="string">"Friday"</literal></expr>, <expr><literal type="string">"Saturday"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>abbr_daynames</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Sun"</literal></expr>, <expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Tue"</literal></expr>, <expr><literal type="string">"Wed"</literal></expr>,
<expr><literal type="string">"Thu"</literal></expr>, <expr><literal type="string">"Fri"</literal></expr>, <expr><literal type="string">"Sat"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>mk_ary_of_str</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>a</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rb_usascii_str_new2</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_obj_freeze</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rb_obj_freeze</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>o</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>d_lite_zero</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Init_date_core</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_intern</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_intern_const(str)</cpp:value></cpp:define>

<expr_stmt><expr><name>id_cmp</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"&lt;=&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_le_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_ge_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id_eqeq_p</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"=="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>half_days_in_day</name> <operator>=</operator> <call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LONG_MAX</name> <operator>/</operator> <name>DAY_IN_SECONDS</name><operator>)</operator> <operator>&gt;</operator> <name>SECOND_IN_NANOSECONDS</name></expr></cpp:if>
<expr_stmt><expr><name>day_in_nanoseconds</name> <operator>=</operator> <call><name>LONG2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DAY_IN_SECONDS</name> <operator>*</operator>
<name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_LONG_LONG</name></expr></cpp:elif>
<expr_stmt><expr><name>day_in_nanoseconds</name> <operator>=</operator> <call><name>LL2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>LONG_LONG</name><operator>)</operator><name>DAY_IN_SECONDS</name> <operator>*</operator>
<name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>day_in_nanoseconds</name> <operator>=</operator> <call><name>f_mul</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>DAY_IN_SECONDS</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>SECOND_IN_NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>half_days_in_day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>day_in_nanoseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>positive_inf</name> <operator>=</operator> <operator>+</operator><name>INFINITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>negative_inf</name> <operator>=</operator> <operator>-</operator><name>INFINITY</name></expr>;</expr_stmt>



















































































































































<expr_stmt><expr><name>cDate</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Date"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eDateError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>, <argument><expr><name>rb_eArgError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_include_module</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><name>rb_mComparable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"MONTHNAMES"</literal></expr></argument>, <argument><expr><call><name>mk_ary_of_str</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>monthnames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"ABBR_MONTHNAMES"</literal></expr></argument>,
<argument><expr><call><name>mk_ary_of_str</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>abbr_monthnames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"DAYNAMES"</literal></expr></argument>, <argument><expr><call><name>mk_ary_of_str</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>daynames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"ABBR_DAYNAMES"</literal></expr></argument>, <argument><expr><call><name>mk_ary_of_str</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>abbr_daynames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"ITALY"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>ITALY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"ENGLAND"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>ENGLAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"JULIAN"</literal></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>JULIAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"GREGORIAN"</literal></expr></argument>, <argument><expr><call><name>DBL2NUM</name><argument_list>(<argument><expr><name>GREGORIAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><name>d_lite_s_alloc_simple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"_valid_jd?"</literal></expr></argument>,
<argument><expr><name>date_s__valid_jd_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"_valid_ordinal?"</literal></expr></argument>,
<argument><expr><name>date_s__valid_ordinal_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"_valid_civil?"</literal></expr></argument>,
<argument><expr><name>date_s__valid_civil_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"_valid_date?"</literal></expr></argument>,
<argument><expr><name>date_s__valid_civil_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"_valid_commercial?"</literal></expr></argument>,
<argument><expr><name>date_s__valid_commercial_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"_valid_weeknum?"</literal></expr></argument>,
<argument><expr><name>date_s__valid_weeknum_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"_valid_nth_kday?"</literal></expr></argument>,
<argument><expr><name>date_s__valid_nth_kday_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"valid_jd?"</literal></expr></argument>, <argument><expr><name>date_s_valid_jd_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"valid_ordinal?"</literal></expr></argument>,
<argument><expr><name>date_s_valid_ordinal_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"valid_civil?"</literal></expr></argument>, <argument><expr><name>date_s_valid_civil_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"valid_date?"</literal></expr></argument>, <argument><expr><name>date_s_valid_civil_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"valid_commercial?"</literal></expr></argument>,
<argument><expr><name>date_s_valid_commercial_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid_weeknum?"</literal></expr></argument>,
<argument><expr><name>date_s_valid_weeknum_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid_nth_kday?"</literal></expr></argument>,
<argument><expr><name>date_s_valid_nth_kday_p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zone_to_diff"</literal></expr></argument>,
<argument><expr><name>date_s_zone_to_diff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"julian_leap?"</literal></expr></argument>, <argument><expr><name>date_s_julian_leap_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"gregorian_leap?"</literal></expr></argument>,
<argument><expr><name>date_s_gregorian_leap_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"leap?"</literal></expr></argument>,
<argument><expr><name>date_s_gregorian_leap_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"new!"</literal></expr></argument>, <argument><expr><name>date_s_new_bang</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><call><name>rb_singleton_class</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new_l!"</literal></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"jd"</literal></expr></argument>, <argument><expr><name>date_s_jd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"ordinal"</literal></expr></argument>, <argument><expr><name>date_s_ordinal</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"civil"</literal></expr></argument>, <argument><expr><name>date_s_civil</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"commercial"</literal></expr></argument>, <argument><expr><name>date_s_commercial</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"weeknum"</literal></expr></argument>, <argument><expr><name>date_s_weeknum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"nth_kday"</literal></expr></argument>, <argument><expr><name>date_s_nth_kday</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"today"</literal></expr></argument>, <argument><expr><name>date_s_today</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"_strptime"</literal></expr></argument>, <argument><expr><name>date_s__strptime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"strptime"</literal></expr></argument>, <argument><expr><name>date_s_strptime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"_parse"</literal></expr></argument>, <argument><expr><name>date_s__parse</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"parse"</literal></expr></argument>, <argument><expr><name>date_s_parse</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"_iso8601"</literal></expr></argument>, <argument><expr><name>date_s__iso8601</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"iso8601"</literal></expr></argument>, <argument><expr><name>date_s_iso8601</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"_rfc3339"</literal></expr></argument>, <argument><expr><name>date_s__rfc3339</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"rfc3339"</literal></expr></argument>, <argument><expr><name>date_s_rfc3339</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"_xmlschema"</literal></expr></argument>, <argument><expr><name>date_s__xmlschema</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"xmlschema"</literal></expr></argument>, <argument><expr><name>date_s_xmlschema</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"_rfc2822"</literal></expr></argument>, <argument><expr><name>date_s__rfc2822</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"_rfc822"</literal></expr></argument>, <argument><expr><name>date_s__rfc2822</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"rfc2822"</literal></expr></argument>, <argument><expr><name>date_s_rfc2822</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"rfc822"</literal></expr></argument>, <argument><expr><name>date_s_rfc2822</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"_httpdate"</literal></expr></argument>, <argument><expr><name>date_s__httpdate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"httpdate"</literal></expr></argument>, <argument><expr><name>date_s_httpdate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"_jisx0301"</literal></expr></argument>, <argument><expr><name>date_s__jisx0301</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"jisx0301"</literal></expr></argument>, <argument><expr><name>date_s_jisx0301</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>date_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>d_lite_initialize_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"fill"</literal></expr></argument>, <argument><expr><name>d_lite_fill</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"ajd"</literal></expr></argument>, <argument><expr><name>d_lite_ajd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"amjd"</literal></expr></argument>, <argument><expr><name>d_lite_amjd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"jd"</literal></expr></argument>, <argument><expr><name>d_lite_jd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"mjd"</literal></expr></argument>, <argument><expr><name>d_lite_mjd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>, <argument><expr><name>d_lite_ld</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>d_lite_year</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><name>d_lite_yday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><name>d_lite_mon</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"month"</literal></expr></argument>, <argument><expr><name>d_lite_mon</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><name>d_lite_mday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"day"</literal></expr></argument>, <argument><expr><name>d_lite_mday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"day_fraction"</literal></expr></argument>, <argument><expr><name>d_lite_day_fraction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"cwyear"</literal></expr></argument>, <argument><expr><name>d_lite_cwyear</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"cweek"</literal></expr></argument>, <argument><expr><name>d_lite_cweek</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"cwday"</literal></expr></argument>, <argument><expr><name>d_lite_cwday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"wnum0"</literal></expr></argument>, <argument><expr><name>d_lite_wnum0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"wnum1"</literal></expr></argument>, <argument><expr><name>d_lite_wnum1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"wday"</literal></expr></argument>, <argument><expr><name>d_lite_wday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"sunday?"</literal></expr></argument>, <argument><expr><name>d_lite_sunday_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"monday?"</literal></expr></argument>, <argument><expr><name>d_lite_monday_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"tuesday?"</literal></expr></argument>, <argument><expr><name>d_lite_tuesday_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"wednesday?"</literal></expr></argument>, <argument><expr><name>d_lite_wednesday_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"thursday?"</literal></expr></argument>, <argument><expr><name>d_lite_thursday_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"friday?"</literal></expr></argument>, <argument><expr><name>d_lite_friday_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"saturday?"</literal></expr></argument>, <argument><expr><name>d_lite_saturday_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"nth_kday?"</literal></expr></argument>, <argument><expr><name>d_lite_nth_kday_p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><name>d_lite_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><name>d_lite_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"minute"</literal></expr></argument>, <argument><expr><name>d_lite_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name>d_lite_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>, <argument><expr><name>d_lite_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"julian?"</literal></expr></argument>, <argument><expr><name>d_lite_julian_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"gregorian?"</literal></expr></argument>, <argument><expr><name>d_lite_gregorian_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"leap?"</literal></expr></argument>, <argument><expr><name>d_lite_leap_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><name>d_lite_start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"new_start"</literal></expr></argument>, <argument><expr><name>d_lite_new_start</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"italy"</literal></expr></argument>, <argument><expr><name>d_lite_italy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"england"</literal></expr></argument>, <argument><expr><name>d_lite_england</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"julian"</literal></expr></argument>, <argument><expr><name>d_lite_julian</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"gregorian"</literal></expr></argument>, <argument><expr><name>d_lite_gregorian</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>d_lite_plus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>d_lite_minus</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"next_day"</literal></expr></argument>, <argument><expr><name>d_lite_next_day</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"prev_day"</literal></expr></argument>, <argument><expr><name>d_lite_prev_day</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"next"</literal></expr></argument>, <argument><expr><name>d_lite_next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"succ"</literal></expr></argument>, <argument><expr><name>d_lite_next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>, <argument><expr><name>d_lite_rshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;"</literal></expr></argument>, <argument><expr><name>d_lite_lshift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"next_month"</literal></expr></argument>, <argument><expr><name>d_lite_next_month</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"prev_month"</literal></expr></argument>, <argument><expr><name>d_lite_prev_month</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"next_year"</literal></expr></argument>, <argument><expr><name>d_lite_next_year</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"prev_year"</literal></expr></argument>, <argument><expr><name>d_lite_prev_year</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"step"</literal></expr></argument>, <argument><expr><name>d_lite_step</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"upto"</literal></expr></argument>, <argument><expr><name>d_lite_upto</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"downto"</literal></expr></argument>, <argument><expr><name>d_lite_downto</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"&lt;=&gt;"</literal></expr></argument>, <argument><expr><name>d_lite_cmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"==="</literal></expr></argument>, <argument><expr><name>d_lite_equal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"eql?"</literal></expr></argument>, <argument><expr><name>d_lite_eql_p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><name>d_lite_hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>d_lite_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"inspect_raw"</literal></expr></argument>, <argument><expr><name>d_lite_inspect_raw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>d_lite_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"strftime"</literal></expr></argument>, <argument><expr><name>d_lite_strftime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"asctime"</literal></expr></argument>, <argument><expr><name>d_lite_asctime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"ctime"</literal></expr></argument>, <argument><expr><name>d_lite_asctime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"iso8601"</literal></expr></argument>, <argument><expr><name>d_lite_iso8601</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"xmlschema"</literal></expr></argument>, <argument><expr><name>d_lite_iso8601</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"rfc3339"</literal></expr></argument>, <argument><expr><name>d_lite_rfc3339</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"rfc2822"</literal></expr></argument>, <argument><expr><name>d_lite_rfc2822</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"rfc822"</literal></expr></argument>, <argument><expr><name>d_lite_rfc2822</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"httpdate"</literal></expr></argument>, <argument><expr><name>d_lite_httpdate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"jisx0301"</literal></expr></argument>, <argument><expr><name>d_lite_jisx0301</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"marshal_dump_old"</literal></expr></argument>, <argument><expr><name>d_lite_marshal_dump_old</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"marshal_dump"</literal></expr></argument>, <argument><expr><name>d_lite_marshal_dump</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"marshal_load"</literal></expr></argument>, <argument><expr><name>d_lite_marshal_load</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"_load"</literal></expr></argument>, <argument><expr><name>date_s__load</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>













































































































































<expr_stmt><expr><name>cDateTime</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"DateTime"</literal></expr></argument>, <argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><name>d_lite_s_alloc_complex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"jd"</literal></expr></argument>, <argument><expr><name>datetime_s_jd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"ordinal"</literal></expr></argument>, <argument><expr><name>datetime_s_ordinal</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"civil"</literal></expr></argument>, <argument><expr><name>datetime_s_civil</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><name>datetime_s_civil</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"commercial"</literal></expr></argument>,
<argument><expr><name>datetime_s_commercial</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"weeknum"</literal></expr></argument>,
<argument><expr><name>datetime_s_weeknum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"nth_kday"</literal></expr></argument>,
<argument><expr><name>datetime_s_nth_kday</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"today"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"now"</literal></expr></argument>, <argument><expr><name>datetime_s_now</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"_strptime"</literal></expr></argument>,
<argument><expr><name>datetime_s__strptime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"strptime"</literal></expr></argument>,
<argument><expr><name>datetime_s_strptime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"parse"</literal></expr></argument>,
<argument><expr><name>datetime_s_parse</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"iso8601"</literal></expr></argument>,
<argument><expr><name>datetime_s_iso8601</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"rfc3339"</literal></expr></argument>,
<argument><expr><name>datetime_s_rfc3339</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"xmlschema"</literal></expr></argument>,
<argument><expr><name>datetime_s_xmlschema</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"rfc2822"</literal></expr></argument>,
<argument><expr><name>datetime_s_rfc2822</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"rfc822"</literal></expr></argument>,
<argument><expr><name>datetime_s_rfc2822</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"httpdate"</literal></expr></argument>,
<argument><expr><name>datetime_s_httpdate</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"jisx0301"</literal></expr></argument>,
<argument><expr><name>datetime_s_jisx0301</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><name>d_lite_hour</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><name>d_lite_min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"minute"</literal></expr></argument>, <argument><expr><name>d_lite_min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name>d_lite_sec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>, <argument><expr><name>d_lite_sec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>, <argument><expr><name>d_lite_sec_fraction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"second_fraction"</literal></expr></argument>, <argument><expr><name>d_lite_sec_fraction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name>d_lite_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name>d_lite_zone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"new_offset"</literal></expr></argument>, <argument><expr><name>d_lite_new_offset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>dt_lite_to_s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"strftime"</literal></expr></argument>, <argument><expr><name>dt_lite_strftime</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"iso8601"</literal></expr></argument>, <argument><expr><name>dt_lite_iso8601</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"xmlschema"</literal></expr></argument>, <argument><expr><name>dt_lite_iso8601</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"rfc3339"</literal></expr></argument>, <argument><expr><name>dt_lite_rfc3339</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"jisx0301"</literal></expr></argument>, <argument><expr><name>dt_lite_jisx0301</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"to_time"</literal></expr></argument>, <argument><expr><name>time_to_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"to_date"</literal></expr></argument>, <argument><expr><name>time_to_date</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><literal type="string">"to_datetime"</literal></expr></argument>, <argument><expr><name>time_to_datetime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"to_time"</literal></expr></argument>, <argument><expr><name>date_to_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"to_date"</literal></expr></argument>, <argument><expr><name>date_to_date</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"to_datetime"</literal></expr></argument>, <argument><expr><name>date_to_datetime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"to_time"</literal></expr></argument>, <argument><expr><name>datetime_to_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"to_date"</literal></expr></argument>, <argument><expr><name>datetime_to_date</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cDateTime</name></expr></argument>, <argument><expr><literal type="string">"to_datetime"</literal></expr></argument>, <argument><expr><name>datetime_to_datetime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>


<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"test_civil"</literal></expr></argument>, <argument><expr><name>date_s_test_civil</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"test_ordinal"</literal></expr></argument>, <argument><expr><name>date_s_test_ordinal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"test_commercial"</literal></expr></argument>,
<argument><expr><name>date_s_test_commercial</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"test_weeknum"</literal></expr></argument>, <argument><expr><name>date_s_test_weeknum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"test_nth_kday"</literal></expr></argument>, <argument><expr><name>date_s_test_nth_kday</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"test_unit_conv"</literal></expr></argument>,
<argument><expr><name>date_s_test_unit_conv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="string">"test_all"</literal></expr></argument>, <argument><expr><name>date_s_test_all</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






</unit>
