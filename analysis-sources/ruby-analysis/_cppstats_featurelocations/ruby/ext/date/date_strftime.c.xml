<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\date\date_strftime.c">





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"date_tmx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strchr</name></cpp:undef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>range</name><parameter_list>(<parameter><type><name>low</name></type></parameter>, <parameter><type><name>item</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(item)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), '+', 1, (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sub</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), '-', 1, (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mul</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), '*', 1, (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>quo</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), rb_intern("quo"), 1, (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>div</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), rb_intern("div"), 1, (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), '%', 1, (y)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>upcase</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ISLOWER</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>TOUPPER</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>s</name><operator>++</operator></expr><operator>,</operator> <expr><operator>--</operator><name>i</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>downcase</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ISUPPER</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>TOLOWER</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>s</name><operator>++</operator></expr><operator>,</operator> <expr><operator>--</operator><name>i</name></expr>)</condition>;</do>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>date_strftime_with_tmx</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tmx</name></name> <modifier>*</modifier></type><name>tmx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name> <init>= <expr><name>s</name> <operator>+</operator> <name>maxsize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>auto</specifier> <name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>colons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>precision</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>padding</name></decl>;</decl_stmt>

<enum>enum <block>{<decl><name>LEFT</name></decl>, <decl><name>CHCASE</name></decl>, <decl><name>LOWER</name></decl>, <decl><name>UPPER</name></decl>, <decl><name>LOCALE_O</name></decl>, <decl><name>LOCALE_E</name></decl>, <decl><name>COLONS</name></decl>}</block>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_OF</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1U&lt;&lt;(n))</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>days_l</name><index>[]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Sunday"</literal></expr>, <expr><literal type="string">"Monday"</literal></expr>, <expr><literal type="string">"Tuesday"</literal></expr>, <expr><literal type="string">"Wednesday"</literal></expr>,
<expr><literal type="string">"Thursday"</literal></expr>, <expr><literal type="string">"Friday"</literal></expr>, <expr><literal type="string">"Saturday"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>months_l</name><index>[]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"January"</literal></expr>, <expr><literal type="string">"February"</literal></expr>, <expr><literal type="string">"March"</literal></expr>, <expr><literal type="string">"April"</literal></expr>,
<expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"June"</literal></expr>, <expr><literal type="string">"July"</literal></expr>, <expr><literal type="string">"August"</literal></expr>, <expr><literal type="string">"September"</literal></expr>,
<expr><literal type="string">"October"</literal></expr>, <expr><literal type="string">"November"</literal></expr>, <expr><literal type="string">"December"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ampm</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"AM"</literal></expr>, <expr><literal type="string">"PM"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>tmx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>maxsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>maxsize</name></expr>)</condition> <block>{<block_content>
<label><name>err</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>format</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>endp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>format</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_FOUND</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (precision &gt; 0 || flags &amp; (BIT_OF(LOCALE_E) | BIT_OF(LOCALE_O) | BIT_OF(COLONS))) goto unknown; } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEEDS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do if (s &gt;= endp || (n) &gt;= endp - s - 1) goto err; while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_PADDING</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(flags &amp; BIT_OF(LEFT)) &amp;&amp; precision &gt; (i)) { NEEDS(precision); memset(s, padding ? padding : ' ', precision - (i)); s += precision - (i); } else { NEEDS(i); } } while (0);</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name><parameter_list>(<parameter><type><name>def_pad</name></type></parameter>, <parameter><type><name>def_prec</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int l; if (precision &lt;= 0) precision = (def_prec); if (flags &amp; BIT_OF(LEFT)) precision = 1; l = snprintf(s, endp - s, ((padding == '0' || (!padding &amp;&amp; (def_pad) == '0')) ? "%0*"fmt : "%*"fmt), precision, (val)); if (l &lt; 0) goto err; s += l; } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRFTIME</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { i = date_strftime_with_tmx(s, endp - s, (fmt), tmx); if (!i) return 0; if (flags &amp; BIT_OF(UPPER)) upcase(s, i); if (!(flags &amp; BIT_OF(LEFT)) &amp;&amp; precision &gt; i) { if (start + maxsize &lt; s + precision) { errno = ERANGE; return 0; } memmove(s + precision - i, s, i); memset(s, padding ? padding : ' ', precision - i); s += precision; } else s += i; } while (0)</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMTV</name><parameter_list>(<parameter><type><name>def_pad</name></type></parameter>, <parameter><type><name>def_prec</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { VALUE tmp = (val); if (FIXNUM_P(tmp)) { FMT((def_pad), (def_prec), "l"fmt, FIX2LONG(tmp)); } else { VALUE args[2], result; size_t l; if (precision &lt;= 0) precision = (def_prec); if (flags &amp; BIT_OF(LEFT)) precision = 1; args[0] = INT2FIX(precision); args[1] = (val); if (padding == '0' || (!padding &amp;&amp; (def_pad) == '0')) result = rb_str_format(2, args, rb_str_new2("%0*"fmt)); else result = rb_str_format(2, args, rb_str_new2("%*"fmt)); l = strlcpy(s, StringValueCStr(result), endp - s); if ((size_t)(endp - s) &lt;= l) goto err; s += l; } } while (0)</cpp:value></cpp:define>























<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>format</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>colons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>again</name>:</label>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<expr_stmt><expr><name>format</name><operator>--</operator></expr>;</expr_stmt>
<goto>goto <name>unknown</name>;</goto>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> 
<case>case <expr><literal type="char">'a'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wday</name> <init>= <expr><name>tmx_wday</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>wday</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>wday</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tp</name> <operator>=</operator> <name><name>days_l</name><index>[<expr><name>wday</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <name><name>days_l</name><index>[<expr><name>wday</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> 
<case>case <expr><literal type="char">'b'</literal></expr>:</case> 
<case>case <expr><literal type="char">'h'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mon</name> <init>= <expr><name>tmx_mon</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mon</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>mon</name></expr></argument> &gt;</argument_list></name> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tp</name> <operator>=</operator> <name><name>months_l</name><index>[<expr><name>mon</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <name><name>months_l</name><index>[<expr><name>mon</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><literal type="char">'C'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FMTV</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name>div</name><argument_list>(<argument><expr><name>tmx_year</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%a %b %e %H:%M:%S %Y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 
<case>case <expr><literal type="char">'e'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmx_mday</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'d'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'G'</literal></expr>:</case> 
<case>case <expr><literal type="char">'Y'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>year</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'G'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>tmx_cwyear</name></expr> </then><else>: <expr><name>tmx_year</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>y</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><ternary><condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>y</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>FMTV</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<continue>continue;</continue>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> 
<case>case <expr><literal type="char">'y'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>mod</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'g'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>tmx_cwyear</name></expr> </then><else>: <expr><name>tmx_year</name></expr></else></ternary></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'H'</literal></expr>:</case> 
<case>case <expr><literal type="char">'k'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmx_hour</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'H'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> 
<case>case <expr><literal type="char">'l'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmx_hour</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'I'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmx_yday</name></expr></argument>, <argument><expr><literal type="number">366</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> 
<case>case <expr><literal type="char">'N'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsec</name> <init>= <expr><name>tmx_sec_fraction</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ww</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ww</name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">9</literal> <operator>&lt;=</operator> <name>ww</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>subsec</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ww</name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>ww</name></expr>;</condition> <incr><expr><name>ww</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subsec</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subsec</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"%0*ld"</literal></expr></argument>,
<argument><expr><name>precision</name></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>precision</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>subsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_str_format</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"%0*d"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strlcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>precision</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<continue>continue;</continue>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmx_min</name></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmx_mon</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FILL_PADDING</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FILL_PADDING</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'P'</literal></expr>:</case> 
<case>case <expr><literal type="char">'p'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmx_hour</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>ampm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>ampm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FMTV</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>tmx_msecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%H:%M"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%I:%M:%S %p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmx_sec</name></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FMTV</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>tmx_secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> 
<case>case <expr><literal type="char">'W'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'U'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>tmx_wnum0</name></expr> </then><else>: <expr><name>tmx_wnum1</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmx_cwday</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmx_cweek</name></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%e-%b-%Y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tmx_wday</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zone</name> <init>= <expr><name>tmx_zone</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>zone</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case> 
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>off</name></decl>, <decl><type ref="prev"/><name>aoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hl</name></decl>, <decl><type ref="prev"/><name>hw</name></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>tmx_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>aoff</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aoff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aoff</name> <operator>=</operator> <operator>-</operator><name>off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>aoff</name> <operator>/</operator> <literal type="number">3600</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hl</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>hw</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>LEFT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>hl</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>colons</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">3</literal> <operator>+</operator> <name>hw</name><operator>)</operator></expr> ?</condition><then> <expr><name>hw</name></expr> </then><else>: <expr><name>precision</name> <operator>-</operator> <literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>hw</name><operator>)</operator></expr> ?</condition><then> <expr><name>hw</name></expr> </then><else>: <expr><name>precision</name> <operator>-</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">7</literal> <operator>+</operator> <name>hw</name><operator>)</operator></expr> ?</condition><then> <expr><name>hw</name></expr> </then><else>: <expr><name>precision</name> <operator>-</operator> <literal type="number">7</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aoff</name> <operator>%</operator> <literal type="number">3600</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>hw</name><operator>)</operator></expr> ?</condition><then>
<expr><name>hw</name></expr> </then><else>: <expr><name>precision</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>aoff</name> <operator>%</operator> <literal type="number">60</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>hw</name><operator>)</operator></expr> ?</condition><then>
<expr><name>hw</name></expr> </then><else>: <expr><name>precision</name> <operator>-</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">7</literal> <operator>+</operator> <name>hw</name><operator>)</operator></expr> ?</condition><then>
<expr><name>hw</name></expr> </then><else>: <expr><name>precision</name> <operator>-</operator> <literal type="number">7</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>format</name><operator>--</operator></expr>;</expr_stmt>
<goto>goto <name>unknown</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>precision</name> <operator>&gt;</operator> <name>hl</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name>precision</name> <operator>-</operator> <name>hl</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <name>hl</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>-</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"%.*ld"</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>off</name> <operator>/</operator> <literal type="number">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>off</name> <operator>%</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>colons</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>off</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>colons</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>off</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>off</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>colons</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>off</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>&lt;=</operator> <name>colons</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<continue>continue;</continue>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%a %b %e %H:%M:%S %Z %Y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOCALE_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>format</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"cCxXyY"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>format</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>again</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>unknown</name>;</goto>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOCALE_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>format</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"deHkIlmMSuUVwWy"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>format</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>again</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>unknown</name>;</goto>

<case>case <expr><literal type="char">':'</literal></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>COLONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>strspn</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>format</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>colons</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name><operator>--</operator></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>format</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block>
<goto>goto <name>unknown</name>;</goto>

<case>case <expr><literal type="char">'_'</literal></expr>:</case>
<expr_stmt><expr><call><name>FLAG_FOUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><call><name>FLAG_FOUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><call><name>FLAG_FOUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<expr_stmt><expr><call><name>FLAG_FOUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><call><name>FLAG_FOUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>prec</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name>prec</name> <operator>&gt;</operator> <name>maxsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>prec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>e</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<expr_stmt><expr><call><name>FILL_PADDING</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<default>default:</default>
<label><name>unknown</name>:</label>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>format</name> <operator>-</operator> <name>sp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>colons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FILL_PADDING</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>upcase</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><call><name>downcase</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>endp</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>err</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>s</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>date_strftime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tmx</name></name> <modifier>*</modifier></type><name>tmx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>date_strftime_with_tmx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>tmx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






</unit>
