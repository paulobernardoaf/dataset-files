<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\date\date_parse.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/re.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_int_positive_pow</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>RUBY_EXTERN</name> <name>unsigned</name> <name>long</name></type> <name>ruby_scan_digits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>retlen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sizeof_array</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof o / sizeof o[0])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_negate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("-@"), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_add</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '+', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_sub</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '-', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_mul</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '*', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_div</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '/', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_idiv</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("div"), 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_mod</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '%', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_expt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("**"), 1, y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_lt_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '&lt;', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_gt_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, '&gt;', 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_le_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("&lt;="), 1, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_ge_p</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("&gt;="), 1, y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_to_s</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(x, rb_intern("to_s"), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_match</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(r, rb_intern("match"), 1, s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_aref</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(o, rb_intern("[]"), 1, i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_aref2</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(o, rb_intern("[]"), 2, i, j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_begin</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(o, rb_intern("begin"), 1, i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_end</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(o, rb_intern("end"), 1, i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_aset</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(o, rb_intern("[]="), 2, i, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_aset2</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(o, rb_intern("[]="), 3, i, j, v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_sub_bang</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>r</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(s, rb_intern("sub!"), 2, r, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_gsub_bang</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>r</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_funcall(s, rb_intern("gsub!"), 2, r, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_hash</name><parameter_list>(<parameter><type><name>k</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_aset(hash, ID2SYM(rb_intern(k"")), v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ref_hash</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_aref(hash, ID2SYM(rb_intern(k"")))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>del_hash</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_delete(hash, ID2SYM(rb_intern(k"")))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cstr2num</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_cstr_to_inum(s, 10, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str2num</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_str_to_inum(s, 10, 0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>abbr_days</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"sun"</literal></expr>, <expr><literal type="string">"mon"</literal></expr>, <expr><literal type="string">"tue"</literal></expr>, <expr><literal type="string">"wed"</literal></expr>,
<expr><literal type="string">"thu"</literal></expr>, <expr><literal type="string">"fri"</literal></expr>, <expr><literal type="string">"sat"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>abbr_months</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"jan"</literal></expr>, <expr><literal type="string">"feb"</literal></expr>, <expr><literal type="string">"mar"</literal></expr>, <expr><literal type="string">"apr"</literal></expr>, <expr><literal type="string">"may"</literal></expr>, <expr><literal type="string">"jun"</literal></expr>,
<expr><literal type="string">"jul"</literal></expr>, <expr><literal type="string">"aug"</literal></expr>, <expr><literal type="string">"sep"</literal></expr>, <expr><literal type="string">"oct"</literal></expr>, <expr><literal type="string">"nov"</literal></expr>, <expr><literal type="string">"dec"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>issign</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == '-' || (c) == '+')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asp_string</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rb_str_new(" ", 1)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asuba_string</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rb_str_new("\001", 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asubb_string</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rb_str_new("\002", 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asubw_string</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rb_str_new("\027", 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asubt_string</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>rb_str_new("\024", 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>digit_span</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>s</name> <operator>+</operator> <name>i</name> <operator>&lt;</operator> <name>e</name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>s3e</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vbuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>c</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>f_to_s</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>oy</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>om</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>od</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>od</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>oy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>om</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>RSTRING_END</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>ep</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>issign</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>ep</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>no_date</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>issign</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>digit_span</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>no_date</name>:</label><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>oy</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>om</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>od</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>om</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>od</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>oy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>oy</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>od</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>od</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>oy</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>iy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>RSTRING_END</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>ep</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>issign</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>ep</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>no_year</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>issign</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>digit_span</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>bp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ep</name> <operator>-</operator> <name>bp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>iy</name> <operator>=</operator> <call><name>cstr2num</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>iy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>no_year</name>:</label><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"_bc"</literal></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>im</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>RSTRING_END</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>ep</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>ep</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>no_month</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>digit_span</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>l</name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>bp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ep</name> <operator>-</operator> <name>bp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>im</name> <operator>=</operator> <call><name>cstr2num</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><name>im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>no_month</name>:</label><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>RSTRING_END</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>ep</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>ep</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>no_mday</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>digit_span</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>l</name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>bp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ep</name> <operator>-</operator> <name>bp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>cstr2num</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>no_mday</name>:</label><empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"_comp"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAYS</name></cpp:macro> <cpp:value>"sunday|monday|tuesday|wednesday|thursday|friday|saturday"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MONTHS</name></cpp:macro> <cpp:value>"january|february|march|april|may|june|july|august|september|october|november|december"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABBR_DAYS</name></cpp:macro> <cpp:value>"sun|mon|tue|wed|thu|fri|sat"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABBR_MONTHS</name></cpp:macro> <cpp:value>"jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_DAYS</name></cpp:macro> <cpp:value>"(?:" DAYS ")" "|(?:tues|wednes|thurs|thur|" ABBR_DAYS ")\\.?"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_MONTHS</name></cpp:macro> <cpp:value>"(?:" MONTHS ")" "|(?:sept|" ABBR_MONTHS ")\\.?"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOTLESS_VALID_MONTHS</name></cpp:macro> <cpp:value>"(?:" MONTHS ")" "|(?:sept|" ABBR_MONTHS ")"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOS</name></cpp:macro> <cpp:value>"\\A\\s*"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPA</name></cpp:macro> <cpp:value>"\\001"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPB</name></cpp:macro> <cpp:value>"\\002"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPW</name></cpp:macro> <cpp:value>"\\027"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPT</name></cpp:macro> <cpp:value>"\\024"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPW_COM</name></cpp:macro> <cpp:value>"\\s*(?:" FPW "\\s*,?)?\\s*"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPT_COM</name></cpp:macro> <cpp:value>"\\s*(?:" FPT "\\s*,?)?\\s*"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_FPW</name></cpp:macro> <cpp:value>"\\s*(?:,?\\s*" FPW ")?\\s*"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COM_FPT</name></cpp:macro> <cpp:value>"\\s*(?:,?\\s*(?:@|\\b[aA][tT]\\b)?\\s*" FPT ")?\\s*"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEE_FPT</name></cpp:macro> <cpp:value>"\\s*(?:[tT]?" FPT ")?"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOS</name></cpp:macro> <cpp:value>"\\s*\\z"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>regcomp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pat</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pat</name> <operator>=</operator> <call><name>rb_reg_new</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pat</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGCOMP</name><parameter_list>(<parameter><type><name>pat</name></type></parameter>,<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (NIL_P(pat)) pat = regcomp(pat##_source, sizeof pat##_source - 1, opt); } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGCOMP_0</name><parameter_list>(<parameter><type><name>pat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REGCOMP(pat, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGCOMP_I</name><parameter_list>(<parameter><type><name>pat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REGCOMP(pat, ONIG_OPTION_IGNORECASE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { return match(s, p, hash, c); } while (0)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>match</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>pat</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>f_match</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>cb</name>)<argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>subx</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>rep</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>pat</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>f_match</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>be</name></decl>, <decl><type ref="prev"/><name>en</name></decl>;</decl_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <call><name>f_begin</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>en</name> <operator>=</operator> <call><name>f_end</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f_aset2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>be</name></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>NUM2LONG</name><argument_list>(<argument><expr><name>en</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>cb</name>)<argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBS</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { return subx(s, asp_string(), p, hash, c); } while (0)</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBA</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { return subx(s, asuba_string(), p, hash, c); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBB</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { return subx(s, asubb_string(), p, hash, c); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBW</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { return subx(s, asubw_string(), p, hash, c); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { return subx(s, asubt_string(), p, hash, c); } while (0)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zonetab.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>str_end_with_word</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>n</name> <operator>||</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>l</name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><name>l</name> <operator>-</operator> <name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<do>do<block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt></block_content></block> while <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>l</name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>shrunk_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ni</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ni</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ni</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ni</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><ternary><condition><expr><name>ni</name> <operator>&lt;</operator> <name>l</name></expr> ?</condition><then> <expr><name>ni</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>shrink_space</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ni</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ni</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>d</name><index>[<expr><name>ni</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>ni</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>ni</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>date_zone_to_diff</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>offset</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vbuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>dst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>str_end_with_word</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wtime</name> <init>= <expr><name>w</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>str_end_with_word</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"standard"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>str_end_with_word</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"daylight"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>+=</operator> <name>wtime</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>w</name> <operator>=</operator> <call><name>str_end_with_word</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"dst"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>sl</name> <init>= <expr><call><name>shrunk_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sl</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sl</name> <operator>&lt;=</operator> <name>MAX_WORD_LENGTH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>shrink_space</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>l</name> <operator>&lt;=</operator> <name>MAX_WORD_LENGTH</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>zone</name></name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>zonetab</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">3600</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>hour</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"gmt"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strncasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"utc"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>issign</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>hour</name> <operator>=</operator> <call><name>STRTOUL</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>STRTOUL</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>STRTOUL</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>num</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>STRTOUL</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hour</name> <operator>=</operator> <operator>-</operator><name>hour</name></expr>;</expr_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>-</operator><name>min</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>rb_rational_new</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_int_positive_pow</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>hour</name> <operator>*</operator> <literal type="number">3600</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>ok</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ov</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hour</name> <operator>=</operator> <call><name>ruby_scan_digits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>-</operator> <name>l</name> <operator>%</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>ruby_scan_digits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <name>l</name> <operator>%</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>ruby_scan_digits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">4</literal> <operator>-</operator> <name>l</name> <operator>%</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>num</name>;</goto>
</block_content>}</block></if></if_stmt>
<label><name>num</name>:</label>
<expr_stmt><expr><name>sec</name> <operator>+=</operator> <name>min</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>hour</name> <operator>*</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sec</name> <operator>=</operator> <operator>-</operator><name>sec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>ok</name>:</label>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>day_num</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>sizeof_array</name><argument_list>(<argument><expr><name>abbr_days</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>abbr_days</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mon_num</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>sizeof_array</name><argument_list>(<argument><expr><name>abbr_months</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>abbr_months</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_day_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>day_num</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_day</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"\\b("</literal> <name>ABBR_DAYS</name> <literal type="string">")[^-/\\d\\s]*"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"("</literal> <name>VALID_DAYS</name> <literal type="string">")"</literal></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_day_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SUBW</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_day_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_time2_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>f_expt</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ih</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ih</name> <operator>%=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'P'</literal> <operator>||</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ih</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>ih</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_time_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A(\\d+)h?"</literal>
<literal type="string">"(?:\\s*:?\\s*(\\d+)m?"</literal>
<literal type="string">"(?:"</literal>
<literal type="string">"\\s*:?\\s*(\\d+)(?:[,.](\\d+))?s?"</literal>
<literal type="string">")?"</literal>
<literal type="string">")?"</literal>
<literal type="string">"(?:\\s*([ap])(?:m\\b|\\.m\\.))?"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>m</name> <init>= <expr><call><name>f_match</name><argument_list>(<argument><expr><name>pat</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>parse_time2_cb</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"("</literal>
<literal type="string">"(?:"</literal>
<literal type="string">"\\d+\\s*:\\s*\\d+"</literal>
<literal type="string">"(?:"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"\\s*:\\s*\\d+(?:[,.]\\d*)?"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"\\s*:\\s*\\d+(?:[,.]\\d+)?"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">")?"</literal>
<literal type="string">"|"</literal>
<literal type="string">"\\d+\\s*h(?:\\s*\\d+m?(?:\\s*\\d+s?)?)?"</literal>
<literal type="string">")"</literal>
<literal type="string">"(?:"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"[ap](?:m\\b|\\.m\\.)"</literal>
<literal type="string">")?"</literal>
<literal type="string">"|"</literal>
<literal type="string">"\\d+\\s*[ap](?:m\\b|\\.m\\.)"</literal>
<literal type="string">")"</literal>
<literal type="string">"(?:"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"("</literal>
<literal type="string">"(?:gmt|utc?)?[-+]\\d+(?:[,.:]\\d+(?::\\d+)?)?"</literal>
<literal type="string">"|"</literal>
<literal type="string">"(?-i:[[:alpha:].\\s]+)(?:standard|daylight)\\stime\\b"</literal>
<literal type="string">"|"</literal>
<literal type="string">"(?-i:[[:alpha:]]+)(?:\\sdst)?\\b"</literal>
<literal type="string">")"</literal>
<literal type="string">")?"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_time_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SUBT</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_time_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_era1_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_era1</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"(a(?:d|\\.d\\.))"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBA</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_era1_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_era2_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator>
<operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"_bc"</literal></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_era2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"(c(?:e|\\.e\\.)|b(?:ce|\\.c\\.e\\.)|b(?:c|\\.c\\.))"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBB</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_era2_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_era</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_era1</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_era2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>ok</name>:</label>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_year_width</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>l</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_apost</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_year_width</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_year_width</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_year_width</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_eu_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator>
<operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_eu</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"('?\\d+)[^-\\d\\s]*"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"(\\d+)(?:(?:st|nd|rd|th)\\b)?"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"\\s*"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"("</literal> <name>ABBR_MONTHS</name> <literal type="string">")[^-\\d\\s']*"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"("</literal> <name>VALID_MONTHS</name> <literal type="string">")"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"(?:"</literal>
<literal type="string">"\\s*"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"(c(?:e|\\.e\\.)|b(?:ce|\\.c\\.e\\.)|a(?:d|\\.d\\.)|b(?:c|\\.c\\.))?"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"('?-?\\d+(?:(?:st|nd|rd|th)\\b)?)"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"(?:"</literal> <name>FPA</name> <literal type="string">")?"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"([-']?\\d+)"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"(?:"</literal> <name>FPA</name> <literal type="string">"|"</literal> <name>FPB</name> <literal type="string">")?"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">")?"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_eu_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_us_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator>
<operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_us</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"\\b("</literal> <name>ABBR_MONTHS</name> <literal type="string">")[^-\\d\\s']*"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"\\b("</literal> <name>VALID_MONTHS</name> <literal type="string">")"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"\\s*"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"('?\\d+)[^-\\d\\s']*"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"('?\\d+)(?:(?:st|nd|rd|th)\\b)?"</literal>
<name>COM_FPT</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"(?:"</literal>
<literal type="string">"\\s*,?"</literal>
<literal type="string">"\\s*"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"(c(?:e|\\.e\\.)|b(?:ce|\\.c\\.e\\.)|a(?:d|\\.d\\.)|b(?:c|\\.c\\.))?"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"('?-?\\d+)"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"(?:"</literal> <name>FPA</name> <literal type="string">")?"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"([-']?\\d+)"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"(?:"</literal> <name>FPA</name> <literal type="string">"|"</literal> <name>FPB</name> <literal type="string">")?"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">")?"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_us_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"('?[-+]?\\d+)-(\\d+)-('?-?\\d+)"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"([-+']?\\d+)-(\\d+)-([-']?\\d+)"</literal>
<name>TEE_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_iso_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso21_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cweek"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso21</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"\\b(\\d{2}|\\d{4})?-?w(\\d{2})(?:-?(\\d))?\\b"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"(\\d{2}|\\d{4})?-?w(\\d{2})(?:-?(\\d))?"</literal>
<name>TEE_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_iso21_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso22_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso22</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"-w-(\\d)\\b"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"-w-(\\d)"</literal>
<name>TEE_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_iso22_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso23_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso23</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"--(\\d{2})?-(\\d{2})\\b"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"--(\\d{2})?-(\\d{2})"</literal>
<name>TEE_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_iso23_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso24_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso24</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"--(\\d{2})(\\d{2})?\\b"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"--(\\d{2})(\\d{2})?"</literal>
<name>TEE_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_iso24_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso25_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso25</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat0_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"[,.](\\d{2}|\\d{4})-\\d{3}\\b"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"[,.](\\d{2}|\\d{4})-\\d{3}"</literal>
<name>TEE_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat0</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"\\b(\\d{2}|\\d{4})-(\\d{3})\\b"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"(\\d{2}|\\d{4})-(\\d{3})"</literal>
<name>TEE_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>f_match</name><argument_list>(<argument><expr><name>pat0</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_iso25_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso26_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso26</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat0_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"\\d-\\d{3}\\b"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"\\d-\\d{3}"</literal>
<name>TEE_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat0</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"\\b-(\\d{3})\\b"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"-(\\d{3})"</literal>
<name>TEE_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>f_match</name><argument_list>(<argument><expr><name>pat0</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_iso26_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_iso2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_iso21</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_iso22</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_iso23</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_iso24</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_iso25</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_iso26</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>ok</name>:</label>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JISX0301_ERA_INITIALS</name></cpp:macro> <cpp:value>"mtshr"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JISX0301_DEFAULT_ERA</name></cpp:macro> <cpp:value>'H'</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gengo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'M'</literal></expr>:</case> <case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1867</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case> <case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1911</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1925</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case> <case>case <expr><literal type="char">'h'</literal></expr>:</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1988</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case> <case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">2018</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_jis_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>gengo</name><argument_list>(<argument><expr><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>f_add</name><argument_list>(<argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_jis</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"\\b(["</literal> <name>JISX0301_ERA_INITIALS</name> <literal type="string">"])(\\d+)\\.(\\d+)\\.(\\d+)"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"(["</literal> <name>JISX0301_ERA_INITIALS</name> <literal type="string">"])(\\d+)\\.(\\d+)\\.(\\d+)"</literal>
<name>TEE_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_jis_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_vms11_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_vms11</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"('?-?\\d+)-("</literal> <name>ABBR_MONTHS</name> <literal type="string">")[^-/.]*"</literal>
<literal type="string">"-('?-?\\d+)"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"([-']?\\d+)-("</literal> <name>DOTLESS_VALID_MONTHS</name> <literal type="string">")"</literal>
<literal type="string">"-([-']?\\d+)"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_vms11_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_vms12_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_vms12</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"\\b("</literal> <name>ABBR_MONTHS</name> <literal type="string">")[^-/.]*"</literal>
<literal type="string">"-('?-?\\d+)(?:-('?-?\\d+))?"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"("</literal> <name>DOTLESS_VALID_MONTHS</name> <literal type="string">")"</literal>
<literal type="string">"-([-']?\\d+)(?:-([-']?\\d+))?"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_vms12_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_vms</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_vms11</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_vms12</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>ok</name>:</label>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_sla_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_sla</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"('?-?\\d+)/\\s*('?\\d+)(?:\\D\\s*('?-?\\d+))?"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"([-']?\\d+)/\\s*('?\\d+)(?:(?:[-/]|\\s+)\\s*([-']?\\d+))?"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_sla_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_sla2_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_sla2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"([-']?\\d+)/\\s*("</literal> <name>DOTLESS_VALID_MONTHS</name> <literal type="string">")(?:(?:[-/]|\\s+)\\s*([-']?\\d+))?"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_sla2_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_sla3_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_sla3</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"("</literal> <name>DOTLESS_VALID_MONTHS</name> <literal type="string">")/\\s*([-']?\\d+)(?:(?:[-/]|\\s+)\\s*([-']?\\d+))?"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_sla3_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_dot_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_dot</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"('?-?\\d+)\\.\\s*('?\\d+)\\.\\s*('?-?\\d+)"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"([-']?\\d+)\\.\\s*(\\d+)\\.\\s*([-']?\\d+)"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_dot_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_dot2_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_dot2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"([-']?\\d+)\\.\\s*("</literal> <name>DOTLESS_VALID_MONTHS</name> <literal type="string">")(?:(?:[./])\\s*([-']?\\d+))?"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_dot2_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_dot3_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>mon</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_apost</name><argument_list>(<argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s3e</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mon</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_dot3</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"("</literal> <name>DOTLESS_VALID_MONTHS</name> <literal type="string">")\\.\\s*([-']?\\d+)(?:(?:[./])\\s*([-']?\\d+))?"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_dot3_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_year_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_year</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"'(\\d+)\\b"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"'(\\d+)"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_year_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_mon_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mon</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mon</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name>mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_mon</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"\\b("</literal> <name>ABBR_MONTHS</name> <literal type="string">")\\S*"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"("</literal> <name>VALID_MONTHS</name> <literal type="string">")"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_mon_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_mday_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_mday</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"(\\d+)(st|nd|rd|th)\\b"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>BOS</name>
<name>FPW_COM</name> <name>FPT_COM</name>
<literal type="string">"(\\d+)(st|nd|rd|th)"</literal>
<name>COM_FPT</name> <name>COM_FPW</name>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_mday_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>n2i</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>f</name> <operator>+</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>f</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>e</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_ddd_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cs2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cs3</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cs5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>l2</name></decl>, <decl><type ref="prev"/><name>l3</name></decl>, <decl><type ref="prev"/><name>l4</name></decl>, <decl><type ref="prev"/><name>l5</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s4</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cs2</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>l2</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<case>case <expr><literal type="number">10</literal></expr>:</case>
<case>case <expr><literal type="number">12</literal></expr>:</case>
<case>case <expr><literal type="number">14</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l2</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l2</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l2</name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"_comp"</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l2</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l2</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l2</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"_comp"</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><name>l2</name><operator>-</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cs3</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l3</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>l3</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs3</name></expr></argument>, <argument><expr><name>l3</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l3</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs3</name></expr></argument>, <argument><expr><name>l3</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l3</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs3</name></expr></argument>, <argument><expr><name>l3</name><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>l3</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l3</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>l3</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>n2i</name><argument_list>(<argument><expr><name>cs3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l4</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>,
<argument><expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>f_expt</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>l4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cs5</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l5</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cs5</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l5</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>cs5</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>l5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <call><name>rb_str_subseq</name><argument_list>(<argument><expr><name>s5</name></expr></argument>, <argument><expr><name>s2</name> <operator>-</operator> <name>cs5</name></expr></argument>, <argument><expr><name>l5</name> <operator>-</operator> <operator>(</operator><name>s2</name> <operator>-</operator> <name>s1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <call><name>rb_str_subseq</name><argument_list>(<argument><expr><name>s5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name> <operator>-</operator> <name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <call><name>rb_str_subseq</name><argument_list>(<argument><expr><name>s5</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>l5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>s1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <call><name>rb_str_append</name><argument_list>(<argument><expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <name>zone</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_ddd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>BOS</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"([-+]?)(\\d{2,14})"</literal>
<literal type="string">"(?:"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"t?"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"(\\d{2,6})?(?:[,.](\\d*))?"</literal>
<literal type="string">")?"</literal>
<literal type="string">"(?:"</literal>
<literal type="string">"\\s*"</literal>
<literal type="string">"("</literal>
<literal type="string">"z\\b"</literal>
<literal type="string">"|"</literal>
<literal type="string">"[-+]\\d{1,4}\\b"</literal>
<literal type="string">"|"</literal>
<literal type="string">"\\[[-+]?\\d[^\\]]*\\]"</literal>
<literal type="string">")"</literal>
<literal type="string">")?"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>EOS</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_ddd_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_bc_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"_bc"</literal></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_bc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\b(bc\\b|bce\\b|b\\.c\\.|b\\.c\\.e\\.)"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_bc_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_frag_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>f_le_p</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>f_le_p</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_frag</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>= <expr><literal type="string">"\\A\\s*(\\d{1,2})\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_frag_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_dummy_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_wday_only</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>= <expr><literal type="string">"\\A\\s*"</literal> <name>FPW</name> <literal type="string">"\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_dummy_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_time_only</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>= <expr><literal type="string">"\\A\\s*"</literal> <name>FPT</name> <literal type="string">"\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_dummy_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_wday_and_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>= <expr><literal type="string">"\\A\\s*("</literal> <name>FPW</name> <literal type="string">"\\s+"</literal> <name>FPT</name> <literal type="string">"|"</literal> <name>FPT</name> <literal type="string">"\\s+"</literal> <name>FPW</name> <literal type="string">")\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SUBS</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>parse_dummy_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>have_invalid_char_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>iscntrl</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ALPHA</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DIGIT</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DASH</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DOT</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SLASH</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>check_class</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>HAVE_ALPHA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>HAVE_DIGIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>HAVE_DASH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>HAVE_DOT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>HAVE_SLASH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ELEM_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((check_class(str) &amp; (x)) == (x))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSER_ERROR</name></cpp:macro> <cpp:value>return rb_hash_new()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>VALUE</name></type>
<name>date__parse</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>comp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>backref</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>have_invalid_char_p</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>PARSER_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>backref</name> <operator>=</operator> <call><name>rb_backref_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_match_busy</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="string">"[^-+',./:@[:alnum:]\\[\\]]+"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"[^[:graph:]]+"</literal></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_0</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>f_gsub_bang</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><call><name>asp_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"_comp"</literal></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_ALPHA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_day</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_DIGIT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_time</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_ALPHA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_era</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_ALPHA</name><operator>|</operator><name>HAVE_DIGIT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_eu</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_us</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_DIGIT</name><operator>|</operator><name>HAVE_DASH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_iso</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_DIGIT</name><operator>|</operator><name>HAVE_DOT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_jis</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_ALPHA</name><operator>|</operator><name>HAVE_DIGIT</name><operator>|</operator><name>HAVE_DASH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_vms</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_DIGIT</name><operator>|</operator><name>HAVE_SLASH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_sla</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_ALPHA</name><operator>|</operator><name>HAVE_DIGIT</name><operator>|</operator><name>HAVE_SLASH</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_sla2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_sla3</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_DIGIT</name><operator>|</operator><name>HAVE_DOT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_dot</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_ALPHA</name><operator>|</operator><name>HAVE_DIGIT</name><operator>|</operator><name>HAVE_DOT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_dot2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_dot3</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_DIGIT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_iso2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_DIGIT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_year</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_ALPHA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_mon</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_DIGIT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_mday</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_DIGIT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>parse_ddd</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>parse_wday_only</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_time_only</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>parse_wday_and_time</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>PARSER_ERROR</name></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>ok</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TIGHT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_ALPHA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_bc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>HAVE_ELEM_P</name><argument_list>(<argument><expr><name>HAVE_DIGIT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_frag</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>del_hash</name><argument_list>(<argument><expr><literal type="string">"_bc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>f_negate</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>f_add</name><argument_list>(<argument><expr><call><name>f_negate</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>del_hash</name><argument_list>(<argument><expr><literal type="string">"_comp"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_le_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">69</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>, <argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1900</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>, <argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_le_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">69</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1900</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>f_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block>

<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name> <init>= <expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NIL_P</name><argument_list>(<argument><expr><call><name>ref_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>rb_backref_set</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>comp_year69</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">69</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1900</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>comp_year50</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>f_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1900</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>f_add</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sec_fraction</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_rational_new2</name><argument_list>(<argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>f_expt</name><argument_list>(<argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso8601_ext_datetime_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>comp_year69</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>comp_year69</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cweek"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>comp_year69</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>, <argument><expr><call><name>sec_fraction</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso8601_ext_datetime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*(?:([-+]?\\d{2,}|-)-(\\d{2})?(?:-(\\d{2}))?|"</literal>
<literal type="string">"([-+]?\\d{2,})?-(\\d{3})|"</literal>
<literal type="string">"(\\d{4}|\\d{2})?-w(\\d{2})-(\\d)|"</literal>
<literal type="string">"-w-(\\d))"</literal>
<literal type="string">"(?:t"</literal>
<literal type="string">"(\\d{2}):(\\d{2})(?::(\\d{2})(?:[,.](\\d+))?)?"</literal>
<literal type="string">"(z|[-+]\\d{2}(?::?\\d{2})?)?)?\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>iso8601_ext_datetime_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso8601_bas_datetime_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>comp_year69</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>comp_year69</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"yday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cweek"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>comp_year69</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwyear"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cweek"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"cwday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>, <argument><expr><call><name>sec_fraction</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso8601_bas_datetime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*(?:([-+]?(?:\\d{4}|\\d{2})|--)(\\d{2}|-)(\\d{2})|"</literal>
<literal type="string">"([-+]?(?:\\d{4}|\\d{2}))(\\d{3})|"</literal>
<literal type="string">"-(\\d{3})|"</literal>
<literal type="string">"(\\d{4}|\\d{2})w(\\d{2})(\\d)|"</literal>
<literal type="string">"-w(\\d{2})(\\d)|"</literal>
<literal type="string">"-w-(\\d))"</literal>
<literal type="string">"(?:t?"</literal>
<literal type="string">"(\\d{2})(\\d{2})(?:(\\d{2})(?:[,.](\\d+))?)?"</literal>
<literal type="string">"(z|[-+]\\d{2}(?:\\d{2})?)?)?\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>iso8601_bas_datetime_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso8601_ext_time_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>, <argument><expr><call><name>sec_fraction</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iso8601_bas_time_cb</name></cpp:macro> <cpp:value>iso8601_ext_time_cb</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso8601_ext_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*(\\d{2}):(\\d{2})(?::(\\d{2})(?:[,.](\\d+))?"</literal>
<literal type="string">"(z|[-+]\\d{2}(:?\\d{2})?)?)?\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>iso8601_ext_time_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso8601_bas_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*(\\d{2})(\\d{2})(?:(\\d{2})(?:[,.](\\d+))?"</literal>
<literal type="string">"(z|[-+]\\d{2}(\\d{2})?)?)?\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>iso8601_bas_time_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>date__iso8601</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>backref</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>backref</name> <operator>=</operator> <call><name>rb_backref_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_match_busy</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>iso8601_ext_datetime</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>iso8601_bas_datetime</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>iso8601_ext_time</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>iso8601_bas_time</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>

<label><name>ok</name>:</label>
<expr_stmt><expr><call><name>rb_backref_set</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rfc3339_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>, <argument><expr><call><name>sec_fraction</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rfc3339</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*(-?\\d{4})-(\\d{2})-(\\d{2})"</literal>
<literal type="string">"(?:t|\\s)"</literal>
<literal type="string">"(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?"</literal>
<literal type="string">"(z|[-+]\\d{2}:\\d{2})\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>rfc3339_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>date__rfc3339</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>backref</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>backref</name> <operator>=</operator> <call><name>rb_backref_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_match_busy</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rfc3339</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_backref_set</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xmlschema_datetime_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>, <argument><expr><call><name>sec_fraction</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xmlschema_datetime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*(-?\\d{4,})(?:-(\\d{2})(?:-(\\d{2}))?)?"</literal>
<literal type="string">"(?:t"</literal>
<literal type="string">"(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?)?"</literal>
<literal type="string">"(z|[-+]\\d{2}:\\d{2})?\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>xmlschema_datetime_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xmlschema_time_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>, <argument><expr><call><name>sec_fraction</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xmlschema_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?"</literal>
<literal type="string">"(z|[-+]\\d{2}:\\d{2})?\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>xmlschema_time_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xmlschema_trunc_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>xmlschema_trunc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*(?:--(\\d{2})(?:-(\\d{2}))?|---(\\d{2}))"</literal>
<literal type="string">"(z|[-+]\\d{2}:\\d{2})?\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>xmlschema_trunc_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>date__xmlschema</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>backref</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>backref</name> <operator>=</operator> <call><name>rb_backref_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_match_busy</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xmlschema_datetime</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xmlschema_time</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>xmlschema_trunc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>

<label><name>ok</name>:</label>
<expr_stmt><expr><call><name>rb_backref_set</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rfc2822_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>day_num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>comp_year50</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rfc2822</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*(?:("</literal> <name>ABBR_DAYS</name> <literal type="string">")\\s*,\\s+)?"</literal>
<literal type="string">"(\\d{1,2})\\s+"</literal>
<literal type="string">"("</literal> <name>ABBR_MONTHS</name> <literal type="string">")\\s+"</literal>
<literal type="string">"(-?\\d{2,})\\s+"</literal>
<literal type="string">"(\\d{2}):(\\d{2})(?::(\\d{2}))?\\s*"</literal>
<literal type="string">"([-+]\\d{4}|ut|gmt|e[sd]t|c[sd]t|m[sd]t|p[sd]t|[a-ik-z])\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>rfc2822_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>date__rfc2822</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>backref</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>backref</name> <operator>=</operator> <call><name>rb_backref_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_match_busy</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rfc2822</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_backref_set</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>httpdate_type1_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>day_num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>httpdate_type1</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*("</literal> <name>ABBR_DAYS</name> <literal type="string">")\\s*,\\s+"</literal>
<literal type="string">"(\\d{2})\\s+"</literal>
<literal type="string">"("</literal> <name>ABBR_MONTHS</name> <literal type="string">")\\s+"</literal>
<literal type="string">"(-?\\d{4})\\s+"</literal>
<literal type="string">"(\\d{2}):(\\d{2}):(\\d{2})\\s+"</literal>
<literal type="string">"(gmt)\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>httpdate_type1_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>httpdate_type2_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>day_num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>f_ge_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>f_le_p</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>comp_year69</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>httpdate_type2</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*("</literal> <name>DAYS</name> <literal type="string">")\\s*,\\s+"</literal>
<literal type="string">"(\\d{2})\\s*-\\s*"</literal>
<literal type="string">"("</literal> <name>ABBR_MONTHS</name> <literal type="string">")\\s*-\\s*"</literal>
<literal type="string">"(\\d{2})\\s+"</literal>
<literal type="string">"(\\d{2}):(\\d{2}):(\\d{2})\\s+"</literal>
<literal type="string">"(gmt)\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>httpdate_type2_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>httpdate_type3_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"wday"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>day_num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>mon_num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>httpdate_type3</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*("</literal> <name>ABBR_DAYS</name> <literal type="string">")\\s+"</literal>
<literal type="string">"("</literal> <name>ABBR_MONTHS</name> <literal type="string">")\\s+"</literal>
<literal type="string">"(\\d{1,2})\\s+"</literal>
<literal type="string">"(\\d{2}):(\\d{2}):(\\d{2})\\s+"</literal>
<literal type="string">"(\\d{4})\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>httpdate_type3_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>date__httpdate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>backref</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>backref</name> <operator>=</operator> <call><name>rb_backref_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_match_busy</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>httpdate_type1</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>httpdate_type2</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>httpdate_type3</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>

<label><name>ok</name>:</label>
<expr_stmt><expr><call><name>rb_backref_set</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SNUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SNUM</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>jisx0301_cb</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>s</name><index>[<expr><name>SNUM</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ep</name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rb_reg_nth_match</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>gengo</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>JISX0301_DEFAULT_ERA</name></expr> </then><else>: <expr><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"year"</literal></expr></argument>, <argument><expr><call><name>f_add</name><argument_list>(<argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"mday"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"hour"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><call><name>str2num</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"sec_fraction"</literal></expr></argument>, <argument><expr><call><name>sec_fraction</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"zone"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_hash</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><call><name>date_zone_to_diff</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>jisx0301</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pat_source</name><index>[]</index></name> <init>=
<expr><literal type="string">"\\A\\s*(["</literal> <name>JISX0301_ERA_INITIALS</name> <literal type="string">"])?(\\d{2})\\.(\\d{2})\\.(\\d{2})"</literal>
<literal type="string">"(?:t"</literal>
<literal type="string">"(?:(\\d{2}):(\\d{2})(?::(\\d{2})(?:[,.](\\d*))?)?"</literal>
<literal type="string">"(z|[-+]\\d{2}(?::?\\d{2})?)?)?)?\\s*\\z"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>pat</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>REGCOMP_I</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MATCH</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr><name>jisx0301_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>date__jisx0301</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>backref</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>backref</name> <operator>=</operator> <call><name>rb_backref_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_match_busy</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>jisx0301</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ok</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>date__iso8601</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>ok</name>:</label>
<expr_stmt><expr><call><name>rb_backref_set</name><argument_list>(<argument><expr><name>backref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>






</unit>
