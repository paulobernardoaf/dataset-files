<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\win32ole\win32ole_param.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cWIN32OLE_PARAM</name></decl>;</decl_stmt>

<struct>struct <name>oleparamdata</name> <block>{
<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>method_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>index</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oleparam_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>oleparam_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>oleparam_ole_param_from_index</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>param_index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>oleparam_ole_param</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>olemethod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>olemethod</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_param_ole_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_ole_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_param_ole_type_detail</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_ole_type_detail</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_param_flag_mask</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>USHORT</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_input</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_output</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_optional</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_retval</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_param_default</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_default</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>foleparam_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>oleparam_datatype</name> <init>= <expr><block>{
<expr><literal type="string">"win32ole_param"</literal></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>oleparam_free</name></expr>, <expr><name>oleparam_size</name></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>oleparam_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pole</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OLE_FREE</name><argument_list>(<argument><expr><name><name>pole</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>oleparam_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>oleparamdata</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>create_win32ole_param</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pparam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>foleparam_s_allocate</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>oleparamdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleparam_datatype</name></expr></argument>, <argument><expr><name>pparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pparam</name><operator>-&gt;</operator><name>pTypeInfo</name></name> <operator>=</operator> <name>pTypeInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OLE_ADDREF</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pparam</name><operator>-&gt;</operator><name>method_index</name></name> <operator>=</operator> <name>method_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pparam</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pparam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,
<argument><expr>struct <name>oleparamdata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>oleparam_datatype</name></expr></argument>, <argument><expr><name>pparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pparam</name><operator>-&gt;</operator><name>pTypeInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pparam</name><operator>-&gt;</operator><name>method_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pparam</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>oleparam_ole_param_from_index</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>param_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>bstrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pparam</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"fail to ITypeInfo::GetFuncDesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bstrs</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>BSTR</name></expr></argument>, <argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>cParams</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetNames</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>memid</name></name></expr></argument>,
<argument><expr><name>bstrs</name></expr></argument>, <argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>cParams</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"fail to ITypeInfo::GetNames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name><name>bstrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>param_index</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>len</name> <operator>&lt;=</operator> <operator>(</operator><name>UINT</name><operator>)</operator><name>param_index</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eIndexError</name></expr></argument>, <argument><expr><literal type="string">"index of param must be in 1..%d"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleparamdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleparam_datatype</name></expr></argument>, <argument><expr><name>pparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pparam</name><operator>-&gt;</operator><name>pTypeInfo</name></name> <operator>=</operator> <name>pTypeInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OLE_ADDREF</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pparam</name><operator>-&gt;</operator><name>method_index</name></name> <operator>=</operator> <name>method_index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pparam</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>param_index</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name><name>bstrs</name><index>[<expr><name>param_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>oleparam_ole_param</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>olemethod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name> <init>= <expr><call><name>olemethod_data_get_struct</name><argument_list>(<argument><expr><name>olemethod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>oleparam_ole_param_from_index</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>olemethod</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>olemethod</name></expr></argument>, <argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"1st parameter must be WIN32OLE_METHOD object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>oleparam_ole_param</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>olemethod</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ole_param_ole_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name> <init>= <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"unknown type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>type</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ole_typedesc2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFuncDesc</name><operator>-&gt;</operator><name>lprgelemdescParam</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>tdesc</name><operator>)</operator></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_ole_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pparam</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleparamdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleparam_datatype</name></expr></argument>, <argument><expr><name>pparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_param_ole_type</name><argument_list>(<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>method_index</name></name></expr></argument>,
<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ole_param_ole_type_detail</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>typedetail</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>typedetail</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ole_typedesc2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,
<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFuncDesc</name><operator>-&gt;</operator><name>lprgelemdescParam</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>tdesc</name><operator>)</operator></expr></argument>, <argument><expr><name>typedetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>typedetail</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_ole_type_detail</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pparam</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleparamdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleparam_datatype</name></expr></argument>, <argument><expr><name>pparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_param_ole_type_detail</name><argument_list>(<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>method_index</name></name></expr></argument>,
<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ole_param_flag_mask</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>USHORT</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>V_UNION1</name><argument_list>(<argument><expr><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>pFuncDesc</name><operator>-&gt;</operator><name>lprgelemdescParam</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>paramdesc</name></expr></argument>)</argument_list></call><operator>.</operator><name>wParamFlags</name> <operator>&amp;</operator><name>mask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_input</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pparam</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleparamdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleparam_datatype</name></expr></argument>, <argument><expr><name>pparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_param_flag_mask</name><argument_list>(<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>method_index</name></name></expr></argument>,
<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>PARAMFLAG_FIN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_output</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pparam</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleparamdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleparam_datatype</name></expr></argument>, <argument><expr><name>pparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_param_flag_mask</name><argument_list>(<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>method_index</name></name></expr></argument>,
<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>PARAMFLAG_FOUT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_optional</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pparam</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleparamdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleparam_datatype</name></expr></argument>, <argument><expr><name>pparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_param_flag_mask</name><argument_list>(<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>method_index</name></name></expr></argument>,
<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>PARAMFLAG_FOPT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_retval</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pparam</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleparamdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleparam_datatype</name></expr></argument>, <argument><expr><name>pparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_param_flag_mask</name><argument_list>(<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>method_index</name></name></expr></argument>,
<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>PARAMFLAG_FRETVAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ole_param_default</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ELEMDESC</name> <modifier>*</modifier></type><name>pElemDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARAMDESCEX</name> <modifier>*</modifier></type> <name>pParamDescEx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>wParamFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>mask</name> <init>= <expr><name>PARAMFLAG_FOPT</name><operator>|</operator><name>PARAMFLAG_FHASDEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>defval</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>defval</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pElemDesc</name> <operator>=</operator> <operator>&amp;</operator><name><name>pFuncDesc</name><operator>-&gt;</operator><name>lprgelemdescParam</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wParamFlags</name> <operator>=</operator> <call><name>V_UNION1</name><argument_list>(<argument><expr><name>pElemDesc</name></expr></argument>, <argument><expr><name>paramdesc</name></expr></argument>)</argument_list></call><operator>.</operator><name>wParamFlags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wParamFlags</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>==</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pParamDescEx</name> <operator>=</operator> <call><name>V_UNION1</name><argument_list>(<argument><expr><name>pElemDesc</name></expr></argument>, <argument><expr><name>paramdesc</name></expr></argument>)</argument_list></call><operator>.</operator><name>pparamdescex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>defval</name> <operator>=</operator> <call><name>ole_variant2val</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamDescEx</name><operator>-&gt;</operator><name>varDefaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>defval</name></expr>;</return>
</block_content>}</block></function>






























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_default</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oleparamdata</name></name> <modifier>*</modifier></type><name>pparam</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>oleparamdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oleparam_datatype</name></expr></argument>, <argument><expr><name>pparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_param_default</name><argument_list>(<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>method_index</name></name></expr></argument>,
<argument><expr><name><name>pparam</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>foleparam_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>detail</name> <init>= <expr><call><name>foleparam_name</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>defval</name> <init>= <expr><call><name>foleparam_default</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>defval</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>detail</name></expr></argument>, <argument><expr><call><name>rb_inspect</name><argument_list>(<argument><expr><name>defval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>make_inspect</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE_PARAM"</literal></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Init_win32ole_param</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>cWIN32OLE_PARAM</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE_PARAM"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><name>foleparam_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>foleparam_initialize</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>foleparam_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"ole_type"</literal></expr></argument>, <argument><expr><name>foleparam_ole_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"ole_type_detail"</literal></expr></argument>, <argument><expr><name>foleparam_ole_type_detail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"input?"</literal></expr></argument>, <argument><expr><name>foleparam_input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"output?"</literal></expr></argument>, <argument><expr><name>foleparam_output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"optional?"</literal></expr></argument>, <argument><expr><name>foleparam_optional</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"retval?"</literal></expr></argument>, <argument><expr><name>foleparam_retval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><name>foleparam_default</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_PARAM</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>foleparam_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
