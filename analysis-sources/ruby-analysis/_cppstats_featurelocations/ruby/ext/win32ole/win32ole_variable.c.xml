<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\win32ole\win32ole_variable.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole.h"</cpp:file></cpp:include>

<struct>struct <name>olevariabledata</name> <block>{
<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>index</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>olevariable_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>olevariable_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariable_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_variable_ole_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariable_ole_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_variable_ole_type_detail</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariable_ole_type_detail</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_variable_value</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariable_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_variable_visible</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariable_visible</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_variable_kind</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariable_variable_kind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_variable_varkind</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariable_varkind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariable_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>olevariable_datatype</name> <init>= <expr><block>{
<expr><literal type="string">"win32ole_variable"</literal></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>olevariable_free</name></expr>, <expr><name>olevariable_size</name></expr>,}</block></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>olevariable_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>olevariabledata</name></name> <modifier>*</modifier></type><name>polevar</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OLE_FREE</name><argument_list>(<argument><expr><name><name>polevar</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>polevar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>olevariable_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>olevariabledata</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>







<function><type><name>VALUE</name></type>
<name>create_win32ole_variable</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>olevariabledata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIABLE</name></expr></argument>, <argument><expr>struct <name>olevariabledata</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>olevariable_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pvar</name><operator>-&gt;</operator><name>pTypeInfo</name></name> <operator>=</operator> <name>pTypeInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OLE_ADDREF</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvar</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>folevariable_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ole_variable_ole_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VARDESC</name> <modifier>*</modifier></type><name>pVarDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>var_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetVarDesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ole_typedesc2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pVarDesc</name><operator>-&gt;</operator><name>elemdescVar</name><operator>.</operator><name>tdesc</name></name><operator>)</operator></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>folevariable_ole_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>olevariabledata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariabledata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariable_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_variable_ole_type</name><argument_list>(<argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ole_variable_ole_type_detail</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VARDESC</name> <modifier>*</modifier></type><name>pVarDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>var_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetVarDesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ole_typedesc2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pVarDesc</name><operator>-&gt;</operator><name>elemdescVar</name><operator>.</operator><name>tdesc</name></name><operator>)</operator></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>folevariable_ole_type_detail</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>olevariabledata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariabledata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariable_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_variable_ole_type_detail</name><argument_list>(<argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ole_variable_value</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VARDESC</name> <modifier>*</modifier></type><name>pVarDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>var_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>pVarDesc</name><operator>-&gt;</operator><name>varkind</name></name> <operator>==</operator> <name>VAR_CONST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ole_variant2val</name><argument_list>(<argument><expr><call><name>V_UNION1</name><argument_list>(<argument><expr><name>pVarDesc</name></expr></argument>, <argument><expr><name>lpvarValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>folevariable_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>olevariabledata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariabledata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariable_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_variable_value</name><argument_list>(<argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ole_variable_visible</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VARDESC</name> <modifier>*</modifier></type><name>pVarDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>visible</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>var_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>visible</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pVarDesc</name><operator>-&gt;</operator><name>wVarFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>VARFLAG_FHIDDEN</name> <operator>|</operator>
<name>VARFLAG_FRESTRICTED</name> <operator>|</operator>
<name>VARFLAG_FNONBROWSABLE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>visible</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>visible</name></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>folevariable_visible</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>olevariabledata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariabledata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariable_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_variable_visible</name><argument_list>(<argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ole_variable_kind</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VARDESC</name> <modifier>*</modifier></type><name>pVarDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>kind</name> <init>= <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>var_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>kind</name></expr>;</return></block_content></block></if></if_stmt>
<switch>switch<condition>(<expr><name><name>pVarDesc</name><operator>-&gt;</operator><name>varkind</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VAR_PERINSTANCE</name></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"PERINSTANCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VAR_STATIC</name></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"STATIC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VAR_CONST</name></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"CONSTANT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VAR_DISPATCH</name></expr>:</case>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"DISPATCH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kind</name></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>folevariable_variable_kind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>olevariabledata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariabledata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariable_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_variable_kind</name><argument_list>(<argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>ole_variable_varkind</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>var_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VARDESC</name> <modifier>*</modifier></type><name>pVarDesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>kind</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>var_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>kind</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseVarDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pVarDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>pVarDesc</name><operator>-&gt;</operator><name>varkind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>kind</name></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>folevariable_varkind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>olevariabledata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariabledata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariable_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ole_variable_varkind</name><argument_list>(<argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pvar</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>folevariable_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rb_inspect</name><argument_list>(<argument><expr><call><name>folevariable_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>n</name> <init>= <expr><call><name>folevariable_name</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>detail</name> <init>= <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRIsVALUE</name><literal type="string">"=%"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>make_inspect</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE_VARIABLE"</literal></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_win32ole_variable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>cWIN32OLE_VARIABLE</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE_VARIABLE"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIABLE</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>folevariable_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIABLE</name></expr></argument>, <argument><expr><literal type="string">"ole_type"</literal></expr></argument>, <argument><expr><name>folevariable_ole_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIABLE</name></expr></argument>, <argument><expr><literal type="string">"ole_type_detail"</literal></expr></argument>, <argument><expr><name>folevariable_ole_type_detail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIABLE</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>folevariable_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIABLE</name></expr></argument>, <argument><expr><literal type="string">"visible?"</literal></expr></argument>, <argument><expr><name>folevariable_visible</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIABLE</name></expr></argument>, <argument><expr><literal type="string">"variable_kind"</literal></expr></argument>, <argument><expr><name>folevariable_variable_kind</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIABLE</name></expr></argument>, <argument><expr><literal type="string">"varkind"</literal></expr></argument>, <argument><expr><name>folevariable_varkind</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIABLE</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>folevariable_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIABLE</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
