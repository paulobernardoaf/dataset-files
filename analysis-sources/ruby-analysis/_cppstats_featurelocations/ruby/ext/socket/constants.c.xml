<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\socket\constants.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubysocket.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_mSockConst</name></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constdefs.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>constant_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>str_to_int</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>rb_sym2str</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>str</name>;</goto>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name> <operator>=</operator> <call><name>rb_check_string_type</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<label><name>str</name>:</label>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>str_to_int</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rsock_family_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>domain</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>rsock_family_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown socket domain"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rsock_socktype_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>rsock_socktype_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown socket type"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rsock_level_arg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_IP_FAMILY</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>rsock_ip_level_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown protocol level"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>rsock_unknown_level_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown protocol level"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rsock_optname_arg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>optname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_IP_FAMILY</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SOL_SOCKET</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_so_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown socket level option name"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>IPPROTO_IP</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_ip_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown IP level option name"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>IPPROTO_IPV6</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_ipv6_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown IPv6 level option name"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>IPPROTO_TCP</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_tcp_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown TCP level option name"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>IPPROTO_UDP</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_udp_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown UDP level option name"</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SOL_SOCKET</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_so_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown socket level option name"</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rsock_cmsg_type_arg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_IP_FAMILY</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SOL_SOCKET</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>rsock_scm_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown UNIX control message"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>IPPROTO_IP</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>rsock_ip_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown IP control message"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>IPPROTO_IPV6</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>rsock_ipv6_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown IPv6 control message"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>IPPROTO_TCP</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>rsock_tcp_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown TCP control message"</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>IPPROTO_UDP</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>rsock_udp_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown UDP control message"</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>
<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SOL_SOCKET</name></expr>:</case>
<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>rsock_scm_optname_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown UNIX control message"</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rsock_shutdown_how_arg</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>how</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>constant_arg</name><argument_list>(<argument><expr><name>how</name></expr></argument>, <argument><expr><name>rsock_shutdown_how_to_int</name></expr></argument>, <argument><expr><literal type="string">"unknown shutdown argument"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type>
<name>rsock_init_socket_constants</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>init_constants</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
