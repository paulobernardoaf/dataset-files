<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\socket\getnameinfo.c">



































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_EXTCONF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> RUBY_EXTCONF_H</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_NAMESER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/nameser.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RESOLV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;resolv.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;=</operator> <literal type="number">1200</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOCKS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;socks.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_SOCKLEN_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>socklen_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"addrinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockport.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubysocket.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<struct>struct <name>sockinet</name> <block>{
<decl_stmt><decl><type><name>u_char</name></type> <name>si_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name>si_family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>si_port</name></decl>;</decl_stmt>
}</block>;</struct>

<struct><specifier>static</specifier> struct <name>afd</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>a_af</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_socklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_off</name></decl>;</decl_stmt>
}</block> <decl><name><name>afdl</name> <index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_INET6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<expr><block>{<expr><name>PF_INET6</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>,
<macro><name>offsetof</name><argument_list>(<argument>struct sockaddr_in6</argument>, <argument>sin6_addr</argument>)</argument_list></macro>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_INET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_INET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>PF_INET</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>,
<macro><name>offsetof</name><argument_list>(<argument>struct sockaddr_in</argument>, <argument>sin_addr</argument>)</argument_list></macro>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_NOSOCKET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_NOSERVNAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_NOHOSTNAME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_MEMORY</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_SYSTEM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_FAMILY</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENI_SALEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>getnameinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>salen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>hostlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>serv</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>servlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>afd</name></name> <modifier>*</modifier></type><name>afd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>family</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>v4a</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u_char</name></type> <name>pfx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>h_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>numserv</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>numaddr</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sa</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENI_NOSOCKET</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALIDATE_SOCKLEN</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ENI_SALEN</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>salen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>family</name> <operator>=</operator> <name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>afdl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a_af</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>afdl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a_af</name> <operator>==</operator> <name>family</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>afd</name> <operator>=</operator> <operator>&amp;</operator><name><name>afdl</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></for>
<return>return <expr><name>ENI_FAMILY</name></expr>;</return>

<label><name>found</name>:</label>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name><name>afd</name><operator>-&gt;</operator><name>a_socklen</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ENI_SALEN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockinet</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>si_port</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sa</name> <operator>+</operator> <name><name>afd</name><operator>-&gt;</operator><name>a_off</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>serv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>servlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NI_NUMERICSERV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>numserv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numserv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>numserv</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>servlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name>numserv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETSERVBYPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><call><name>getservbyport</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>NI_DGRAM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"udp"</literal></expr> </then><else>: <expr><literal type="string">"tcp"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>s_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>servlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name><name>sp</name><operator>-&gt;</operator><name>s_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><name>ENI_NOSERVNAME</name></expr>;</return></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>ENI_NOSERVNAME</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>v4a</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IN_MULTICAST</name><argument_list>(<argument><expr><name>v4a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IN_EXPERIMENTAL</name><argument_list>(<argument><expr><name>v4a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NI_NUMERICHOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v4a</name> <operator>&gt;&gt;=</operator> <name>IN_CLASSA_NSHIFT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v4a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NI_NUMERICHOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ADDR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pfx</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name><name>sin6_addr</name><operator>.</operator><name>s6_addr8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>pfx</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name><name>sin6_addr</name><operator>.</operator><name>s6_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>pfx</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pfx</name> <operator>==</operator> <literal type="number">0xfe</literal> <operator>||</operator> <name>pfx</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NI_NUMERICHOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hostlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NI_NUMERICHOST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_af</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>numaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENI_SYSTEM</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>numaddr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>hostlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>numaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>getipnodebyaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_addrlen</name></name></expr></argument>, <argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_af</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>gethostbyaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_addrlen</name></name></expr></argument>, <argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_af</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h_error</name> <operator>=</operator> <name>h_errno</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>hp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NI_NOFQDN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>hostlen</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>freehostent</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ENI_MEMORY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>freehostent</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NI_NAMEREQD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENI_NOHOSTNAME</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_af</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>numaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENI_NOHOSTNAME</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>numaddr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>hostlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ENI_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>numaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
