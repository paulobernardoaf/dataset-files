




























#ifndef ADDR_INFO_H
#define ADDR_INFO_H


#undef EAI_ADDRFAMILY
#undef EAI_AGAIN
#undef EAI_BADFLAGS
#undef EAI_FAIL
#undef EAI_FAMILY
#undef EAI_MEMORY
#undef EAI_NODATA
#undef EAI_NONAME
#undef EAI_SERVICE
#undef EAI_SOCKTYPE
#undef EAI_SYSTEM
#undef EAI_BADHINTS
#undef EAI_PROTOCOL
#undef EAI_MAX

#undef AI_PASSIVE
#undef AI_CANONNAME
#undef AI_NUMERICHOST
#undef AI_NUMERICSERV
#undef AI_ALL
#undef AI_ADDRCONFIG
#undef AI_V4MAPPED
#undef AI_DEFAULT

#undef NI_NOFQDN
#undef NI_NUMERICHOST
#undef NI_NAMEREQD
#undef NI_NUMERICSERV
#undef NI_DGRAM

#ifndef __P
#ifdef HAVE_PROTOTYPES
#define __P(args) args
#else
#define __P(args) ()
#endif
#endif







#define EAI_ADDRFAMILY 1 
#define EAI_AGAIN 2 
#define EAI_BADFLAGS 3 
#define EAI_FAIL 4 
#define EAI_FAMILY 5 
#define EAI_MEMORY 6 
#define EAI_NODATA 7 
#define EAI_NONAME 8 
#define EAI_SERVICE 9 
#define EAI_SOCKTYPE 10 
#define EAI_SYSTEM 11 
#define EAI_BADHINTS 12
#define EAI_PROTOCOL 13
#define EAI_MAX 14




#define AI_PASSIVE 0x00000001 
#define AI_CANONNAME 0x00000002 
#define AI_NUMERICHOST 0x00000004 
#define AI_NUMERICSERV 0x00000008 

#ifndef __HAIKU__
#undef AI_MASK
#define AI_MASK (AI_PASSIVE | AI_CANONNAME | AI_NUMERICHOST | AI_NUMERICSERV)
#endif

#define AI_ALL 0x00000100 
#define AI_V4MAPPED_CFG 0x00000200 
#define AI_ADDRCONFIG 0x00000400 
#define AI_V4MAPPED 0x00000800 

#define AI_DEFAULT (AI_V4MAPPED_CFG | AI_ADDRCONFIG)




#ifndef NI_MAXHOST
#define NI_MAXHOST 1025
#define NI_MAXSERV 32
#endif




#define NI_NOFQDN 0x00000001
#define NI_NUMERICHOST 0x00000002
#define NI_NAMEREQD 0x00000004
#define NI_NUMERICSERV 0x00000008
#define NI_DGRAM 0x00000010

#ifndef HAVE_TYPE_STRUCT_ADDRINFO
struct addrinfo {
int ai_flags; 
int ai_family; 
int ai_socktype; 
int ai_protocol; 
size_t ai_addrlen; 
char *ai_canonname; 
struct sockaddr *ai_addr; 
struct addrinfo *ai_next; 
};
#endif

#ifndef HAVE_GETADDRINFO
#undef getaddrinfo
#define getaddrinfo getaddrinfo__compat
#endif
#ifndef HAVE_GETNAMEINFO
#undef getnameinfo
#define getnameinfo getnameinfo__compat
#endif
#ifndef HAVE_FREEHOSTENT
#undef freehostent
#define freehostent freehostent__compat
#endif
#ifndef HAVE_FREEADDRINFO
#undef freeaddrinfo
#define freeaddrinfo freeaddrinfo__compat
#endif

extern int getaddrinfo __P((
const char *hostname, const char *servname,
const struct addrinfo *hints,
struct addrinfo **res));

extern int getnameinfo __P((
const struct sockaddr *sa,
socklen_t salen,
char *host,
socklen_t hostlen,
char *serv,
socklen_t servlen,
int flags));

extern void freehostent __P((struct hostent *));
extern void freeaddrinfo __P((struct addrinfo *));
extern
#ifdef GAI_STRERROR_CONST
const
#endif
char *gai_strerror __P((int));




#ifndef offsetof
#define offsetof(p_type,field) ((size_t)&(((p_type *)0)->field))
#endif

#endif
