<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\socket\basicsocket.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubysocket.h"</cpp:file></cpp:include>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_s_for_fd</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sock</name> <init>= <expr><call><name>rsock_init_sock</name><argument_list>(<argument><expr><call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></function>




























<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>howto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>how</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>howto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>howto</name> <operator>==</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>how</name> <operator>=</operator> <name>SHUT_RDWR</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>how</name> <operator>=</operator> <call><name>rsock_shutdown_how_arg</name><argument_list>(<argument><expr><name>howto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>how</name> <operator>!=</operator> <name>SHUT_WR</name> <operator>&amp;&amp;</operator> <name>how</name> <operator>!=</operator> <name>SHUT_RD</name> <operator>&amp;&amp;</operator> <name>how</name> <operator>!=</operator> <name>SHUT_RDWR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"`how' should be either :SHUT_RD, :SHUT_WR, :SHUT_RDWR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"shutdown(2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_close_read</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>FMODE_WRITABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_io_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMODE_READABLE</name></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_close_write</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>FMODE_READABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_io_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMODE_WRITABLE</name></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>


























































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_setsockopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>lev</name></decl>, <decl><type ref="prev"/><name>optname</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>family</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lev</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"level"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optname</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"optname"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"30"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>family</name> <operator>=</operator> <call><name>rsock_getfamily</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>rsock_level_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>rsock_optname_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_FIXNUM</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>numval</name>;</goto>
<case>case <expr><name>T_FALSE</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>numval</name>;</goto>
<case>case <expr><name>T_TRUE</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>numval</name>:</label>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>vlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vlen</name> <operator>=</operator> <call><name>RSTRING_SOCKLEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>rb_io_check_closed</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rsock_sys_fail_path</name><argument_list>(<argument><expr><literal type="string">"setsockopt(2)"</literal></expr></argument>, <argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>pathv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

























































<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_getsockopt</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>lev</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>optname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>family</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>family</name> <operator>=</operator> <call><name>rsock_getfamily</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>rsock_level_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>rsock_optname_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name>option</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SO_DEBUG</name></expr>:</case>
<case>case <expr><name>SO_REUSEADDR</name></expr>:</case>
<case>case <expr><name>SO_KEEPALIVE</name></expr>:</case>
<case>case <expr><name>SO_DONTROUTE</name></expr>:</case>
<case>case <expr><name>SO_BROADCAST</name></expr>:</case>
<case>case <expr><name>SO_OOBINLINE</name></expr>:</case>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_io_check_closed</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rsock_sys_fail_path</name><argument_list>(<argument><expr><literal type="string">"getsockopt(2)"</literal></expr></argument>, <argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>pathv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>rsock_sockopt_new</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_getsockname</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>union_sockaddr</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <name>buf</name></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len0</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"getsockname(2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len0</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_getpeername</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>union_sockaddr</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <name>buf</name></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len0</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"getpeername(2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len0</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPEEREID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SO_PEERCRED</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPEERUCRED</name></expr></argument>)</argument_list></call></expr></cpp:if>






















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_getpeereid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPEEREID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>euid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>egid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getpeereid</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>euid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>egid</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"getpeereid(3)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>UIDT2NUM</name><argument_list>(<argument><expr><name>euid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GIDT2NUM</name><argument_list>(<argument><expr><name>egid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_PEERCRED</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ucred</name></name></type> <name>cred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>cred</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_PEERCRED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"getsockopt(SO_PEERCRED)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>UIDT2NUM</name><argument_list>(<argument><expr><name><name>cred</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GIDT2NUM</name><argument_list>(<argument><expr><name><name>cred</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPEERUCRED</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ucred_t</name> <modifier>*</modifier></type><name>uc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getpeerucred</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"getpeerucred(3C)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>UIDT2NUM</name><argument_list>(<argument><expr><call><name>ucred_geteuid</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GIDT2NUM</name><argument_list>(<argument><expr><call><name>ucred_getegid</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ucred_free</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bsock_getpeereid</name></cpp:macro> <cpp:value>rb_f_notimplement</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_local_address</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>union_sockaddr</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <name>buf</name></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len0</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"getsockname(2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len0</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>rsock_fd_socket_addrinfo</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_remote_address</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>union_sockaddr</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof <name>buf</name></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len0</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"getpeername(2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len0</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>rsock_fd_socket_addrinfo</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><name>VALUE</name></type>
<name>rsock_bsock_send</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rsock_send_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_blocking_function_t</name> <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"21"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>.</operator><name>mesg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>mesg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SockAddrStringValue</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>rb_str_new4</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>to</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>tolen</name></name> <operator>=</operator> <call><name>RSTRING_SOCKLEN</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>rsock_sendto_blocking</name></expr>;</expr_stmt>
<expr_stmt><expr><name>funcname</name> <operator>=</operator> <literal type="string">"sendto(2)"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>rsock_send_blocking</name></expr>;</expr_stmt>
<expr_stmt><expr><name>funcname</name> <operator>=</operator> <literal type="string">"send(2)"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>rsock_maybe_fd_writable</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><operator>(</operator><name>n</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><call><name>BLOCKING_REGION_FD</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_io_wait_writable</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>SSIZET2NUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_do_not_reverse_lookup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>fptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>FMODE_NOREVLOOKUP</name><operator>)</operator></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_do_not_reverse_lookup_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>FMODE_NOREVLOOKUP</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>fptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FMODE_NOREVLOOKUP</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></function>






















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_recv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rsock_s_recvfrom</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>RECV_RECV</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_recv_nonblock</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>flg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rsock_s_recvfrom_nonblock</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flg</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>RECV_RECV</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_do_not_rev_lookup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>rsock_do_not_reverse_lookup</name></expr>?</condition><then><expr><name>Qtrue</name></expr></then><else>:<expr><name>Qfalse</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>bsock_do_not_rev_lookup_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>rsock_do_not_reverse_lookup</name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rsock_init_basicsocket</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>





<expr_stmt><expr><name>rb_cBasicSocket</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"BasicSocket"</literal></expr></argument>, <argument><expr><name>rb_cIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"do_not_reverse_lookup"</literal></expr></argument>,
<argument><expr><name>bsock_do_not_rev_lookup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"do_not_reverse_lookup="</literal></expr></argument>,
<argument><expr><name>bsock_do_not_rev_lookup_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"for_fd"</literal></expr></argument>, <argument><expr><name>bsock_s_for_fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"close_read"</literal></expr></argument>, <argument><expr><name>bsock_close_read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"close_write"</literal></expr></argument>, <argument><expr><name>bsock_close_write</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"shutdown"</literal></expr></argument>, <argument><expr><name>bsock_shutdown</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"setsockopt"</literal></expr></argument>, <argument><expr><name>bsock_setsockopt</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"getsockopt"</literal></expr></argument>, <argument><expr><name>bsock_getsockopt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"getsockname"</literal></expr></argument>, <argument><expr><name>bsock_getsockname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"getpeername"</literal></expr></argument>, <argument><expr><name>bsock_getpeername</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"getpeereid"</literal></expr></argument>, <argument><expr><name>bsock_getpeereid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"local_address"</literal></expr></argument>, <argument><expr><name>bsock_local_address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"remote_address"</literal></expr></argument>, <argument><expr><name>bsock_remote_address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"send"</literal></expr></argument>, <argument><expr><name>rsock_bsock_send</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"recv"</literal></expr></argument>, <argument><expr><name>bsock_recv</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"do_not_reverse_lookup"</literal></expr></argument>, <argument><expr><name>bsock_do_not_reverse_lookup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"do_not_reverse_lookup="</literal></expr></argument>, <argument><expr><name>bsock_do_not_reverse_lookup_set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>,
<argument><expr><literal type="string">"__recv_nonblock"</literal></expr></argument>, <argument><expr><name>bsock_recv_nonblock</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSG_DONTWAIT_RELIABLE</name></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>,
<argument><expr><literal type="string">"__read_nonblock"</literal></expr></argument>, <argument><expr><name>rsock_read_nonblock</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>,
<argument><expr><literal type="string">"__write_nonblock"</literal></expr></argument>, <argument><expr><name>rsock_write_nonblock</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"__sendmsg"</literal></expr></argument>,
<argument><expr><name>rsock_bsock_sendmsg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"__sendmsg_nonblock"</literal></expr></argument>,
<argument><expr><name>rsock_bsock_sendmsg_nonblock</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"__recvmsg"</literal></expr></argument>,
<argument><expr><name>rsock_bsock_recvmsg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_private_method</name><argument_list>(<argument><expr><name>rb_cBasicSocket</name></expr></argument>, <argument><expr><literal type="string">"__recvmsg_nonblock"</literal></expr></argument>,
<argument><expr><name>rsock_bsock_recvmsg_nonblock</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
