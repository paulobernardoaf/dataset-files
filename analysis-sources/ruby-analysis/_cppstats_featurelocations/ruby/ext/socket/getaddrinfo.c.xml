<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\socket\getaddrinfo.c">







































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_EXTCONF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> RUBY_EXTCONF_H</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_NAMESER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/nameser.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RESOLV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;resolv.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;=</operator> <literal type="number">1200</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOCKS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;socks.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_SOCKLEN_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>socklen_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"addrinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockport.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FAITH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>translate</name> <init>= <expr><name>NO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>in6_addr</name></name></type> <name>faith_prefix</name> <init>= <expr><name>IN6ADDR_ANY_INIT</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>in_addrany</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>in6_addrany</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>in_loopback</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">127</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>in6_loopback</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>sockinet</name> <block>{
<decl_stmt><decl><type><name>u_char</name></type> <name>si_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name>si_family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>si_port</name></decl>;</decl_stmt>
}</block>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>afd</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>a_af</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_socklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a_addrany</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a_loopback</name></decl>;</decl_stmt>
}</block> <decl><name><name>afdl</name> <index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_INET6</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<expr><block>{<expr><name>PF_INET6</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>, <argument><expr><name>sin6_addr</name></expr></argument>)</argument_list></call></expr>,
<expr><name>in6_addrany</name></expr>, <expr><name>in6_loopback</name></expr>}</block></expr>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_INET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_INET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>PF_INET</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>,
<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>, <argument><expr><name>sin_addr</name></expr></argument>)</argument_list></call></expr>,
<expr><name>in_addrany</name></expr>, <expr><name>in_loopback</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTON_MAX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTON_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>get_name</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> struct <name>afd</name> <operator>*</operator><operator>,</operator>
struct <name>addrinfo</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>,</operator> struct <name>addrinfo</name> <operator>*</operator><operator>,</operator>
<name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>get_addr</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> struct <name>addrinfo</name> <operator>*</operator><operator>*</operator><operator>,</operator>
struct <name>addrinfo</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>str_isnumber</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GAI_STRERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ai_errlist</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"success."</literal></expr>,
<expr><literal type="string">"address family for hostname not supported."</literal></expr>, 
<expr><literal type="string">"temporary failure in name resolution."</literal></expr>, 
<expr><literal type="string">"invalid value for ai_flags."</literal></expr>, 
<expr><literal type="string">"non-recoverable failure in name resolution."</literal></expr>, 
<expr><literal type="string">"ai_family not supported."</literal></expr>, 
<expr><literal type="string">"memory allocation failure."</literal></expr>, 
<expr><literal type="string">"no address associated with hostname."</literal></expr>, 
<expr><literal type="string">"hostname nor servname provided, or not known."</literal></expr>,
<expr><literal type="string">"servname not supported for ai_socktype."</literal></expr>, 
<expr><literal type="string">"ai_socktype not supported."</literal></expr>, 
<expr><literal type="string">"system error returned in errno."</literal></expr>, 
<expr><literal type="string">"invalid value for hints."</literal></expr>, 
<expr><literal type="string">"resolved protocol is unknown."</literal></expr>, 
<expr><literal type="string">"unknown error."</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CANONNAME</name><parameter_list>(<parameter><type><name>ai</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (pai-&gt;ai_flags &amp; AI_CANONNAME) {if (((ai)-&gt;ai_canonname = (char *)malloc(strlen(str) + 1)) != NULL) {strcpy((ai)-&gt;ai_canonname, (str));} else {error = EAI_MEMORY;goto free;}}</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_AI</name><parameter_list>(<parameter><type><name>ai</name></type></parameter>, <parameter><type><name>afd</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>port</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{char *p;if (((ai) = (struct addrinfo *)malloc(sizeof(struct addrinfo) +((afd)-&gt;a_socklen)))== NULL) {error = EAI_MEMORY;goto free;}memcpy((ai), pai, sizeof(struct addrinfo));(ai)-&gt;ai_addr = (struct sockaddr *)((ai) + 1);(ai)-&gt;ai_family = (afd)-&gt;a_af;(ai)-&gt;ai_addrlen = (afd)-&gt;a_socklen;INIT_SOCKADDR((ai)-&gt;ai_addr, (afd)-&gt;a_af, (afd)-&gt;a_socklen);((struct sockinet *)(ai)-&gt;ai_addr)-&gt;si_port = (port);p = (char *)((ai)-&gt;ai_addr);memcpy(p + (afd)-&gt;a_off, (addr), (afd)-&gt;a_addrlen);}</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name><parameter_list>(<parameter><type><name>err</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ error = (err); goto bad; }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GAI_STRERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GAI_STRERROR_CONST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>char</name> <modifier>*</modifier></type>
<name>gai_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ecode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ecode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ecode</name></expr></argument> &gt;</argument_list></name> <name>EAI_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ecode</name> <operator>=</operator> <name>EAI_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ai_errlist</name><index>[<expr><name>ecode</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>freeaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>ai</name> <operator>=</operator> <name>next</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>str_isnumber</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NO</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>YES</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INET_PTON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_pton</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pton</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INET_ATON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_aton</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>d1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<literal type="number">0</literal> <operator>&lt;=</operator> <name>d1</name> <operator>&amp;&amp;</operator> <name>d1</name> <operator>&lt;=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>d2</name> <operator>&amp;&amp;</operator> <name>d2</name> <operator>&lt;=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator>
<literal type="number">0</literal> <operator>&lt;=</operator> <name>d3</name> <operator>&amp;&amp;</operator> <name>d3</name> <operator>&lt;=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>d4</name> <operator>&amp;&amp;</operator> <name>d4</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(
<argument><expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name>d1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name>d2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name>d3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name>d4</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pton</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>sentinel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pton</name><index>[<expr><name>PTON_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>pai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>port</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FAITH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>firsttime</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>firsttime</name></expr>)</condition> <block>{<block_content>

<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GAI"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&amp;&amp;</operator> <call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>faith_prefix</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>translate</name> <operator>=</operator> <name>YES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>firsttime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>ai_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>&amp;</operator><name>sentinel</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pai</name> <operator>=</operator> <operator>&amp;</operator><name>ai</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>ANY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>ANY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name>ANY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hostname</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>servname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EAI_NONAME</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hints</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>||</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>||</operator>
<name><name>hints</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>||</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_BADHINTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>AI_MASK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_BADFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PF_UNSPEC</name></expr>:</case>
<case>case <expr><name>PF_INET</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>PF_INET6</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_FAMILY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pai</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ANY</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ANY</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>IPPROTO_UDP</name></expr>:</case>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>IPPROTO_TCP</name></expr>:</case>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOCK_RAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_RAW</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOCK_RAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>SOCK_RAW</name></expr>:</case>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>SOCK_DGRAM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>!=</operator> <name>IPPROTO_UDP</name> <operator>&amp;&amp;</operator>
<name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>!=</operator> <name>ANY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_BADHINTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SOCK_STREAM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>!=</operator> <name>IPPROTO_TCP</name> <operator>&amp;&amp;</operator>
<name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>!=</operator> <name>ANY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_BADHINTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_SOCKTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>servname</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>str_isnumber</name><argument_list>(<argument><expr><name>servname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <name>ANY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>servname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_NUMERICSERV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_NONAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl>;</decl_stmt>

<expr_stmt><expr><name>proto</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ANY</name></expr>:</case>
<expr_stmt><expr><name>proto</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SOCK_DGRAM</name></expr>:</case>
<expr_stmt><expr><name>proto</name> <operator>=</operator> <literal type="string">"udp"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SOCK_STREAM</name></expr>:</case>
<expr_stmt><expr><name>proto</name> <operator>=</operator> <literal type="string">"tcp"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"panic!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sp</name> <operator>=</operator> <call><name>getservbyname</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>servname</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>s_port</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <name>ANY</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>s_proto</name></name></expr></argument>, <argument><expr><literal type="string">"udp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>sp</name><operator>-&gt;</operator><name>s_proto</name></name></expr></argument>, <argument><expr><literal type="string">"tcp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>hostname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>afd</name></name> <modifier>*</modifier></type><name>afd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>afd</name> <operator>=</operator> <operator>&amp;</operator><name><name>afdl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name><name>afd</name><operator>-&gt;</operator><name>a_af</name></name></expr>;</condition> <incr><expr><name>afd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>PF_UNSPEC</name>
<operator>||</operator> <name><name>pai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name><name>afd</name><operator>-&gt;</operator><name>a_af</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_af</name></name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_PASSIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GET_AI</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><name>afd</name></expr></argument>, <argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_addrany</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>GET_AI</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><name>afd</name></expr></argument>, <argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_loopback</name></name></expr></argument>,
<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>sentinel</name><operator>.</operator><name>ai_next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>good</name>;</goto></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_FAMILY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>afdl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a_af</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name><name>afdl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a_af</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>pton</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>u_long</name></type> <name>v4a</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u_char</name></type> <name>pfx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name><name>afdl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a_af</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>v4a</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>in_addr</name> <operator>*</operator><operator>)</operator><name>pton</name><operator>)</operator><operator>-&gt;</operator><name>s_addr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IN_MULTICAST</name><argument_list>(<argument><expr><name>v4a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IN_EXPERIMENTAL</name><argument_list>(<argument><expr><name>v4a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AI_CANONNAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>v4a</name> <operator>&gt;&gt;=</operator> <name>IN_CLASSA_NSHIFT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v4a</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>v4a</name> <operator>==</operator> <name>IN_LOOPBACKNET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AI_CANONNAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>pfx</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>in6_addr</name> <operator>*</operator><operator>)</operator><name>pton</name><operator>)</operator><operator>-&gt;</operator><name><name>s6_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pfx</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pfx</name> <operator>==</operator> <literal type="number">0xfe</literal> <operator>||</operator> <name>pfx</name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AI_CANONNAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name><name>afdl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a_af</name> <operator>||</operator>
<name><name>pai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>PF_UNSPEC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>pai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_CANONNAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GET_AI</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>afdl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pton</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>good</name>;</goto>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><call><name>get_name</name><argument_list>(<argument><expr><name>pton</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>afdl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><name>pton</name></expr></argument>, <argument><expr><name>pai</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>good</name>;</goto>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_FAMILY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>pai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_NUMERICHOST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_NONAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>get_addr</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>pai</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><name>pai</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition> <block>{<block_content>
<label><name>good</name>:</label>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
<return>return <expr><name>SUCCESS</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAI_FAIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>free</name>:</label>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>bad</name>:</label>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>afd</name></name> <modifier>*</modifier></type><name>afd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>numaddr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>pai</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_short</name></type> <name>port</name> <init>= <expr><name>port0</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>h_error</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>getipnodebyaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_addrlen</name></name></expr></argument>, <argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_af</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>gethostbyaddr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name><name>afd</name><operator>-&gt;</operator><name>a_addrlen</name></name></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_name</name></name> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GET_AI</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>afd</name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_CANONNAME</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>GET_AI</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>afd</name></expr></argument>, <argument><expr><name>numaddr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freehostent</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
<return>return <expr><name>SUCCESS</name></expr>;</return>
<label><name>free</name>:</label>
<if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freehostent</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>pai</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_short</name></type> <name>port</name> <init>= <expr><name>port0</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>sentinel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>afd</name></name> <modifier>*</modifier></type><name>afd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>h_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel</name><operator>.</operator><name>ai_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>&amp;</operator><name>sentinel</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>af</name> <operator>==</operator> <name>AF_UNSPEC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>getipnodebyname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>AF_INET6</name></expr></argument>,
<argument><expr><name>AI_ADDRCONFIG</name><operator>|</operator><name>AI_ALL</name><operator>|</operator><name>AI_V4MAPPED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>getipnodebyname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>af</name></expr></argument>, <argument><expr><name>AI_ADDRCONFIG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>NI_MAXHOST</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_NODATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h_error</name> <operator>=</operator> <name>h_errno</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>h_error</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>HOST_NOT_FOUND</name></expr>:</case>
<case>case <expr><name>NO_DATA</name></expr>:</case>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAI_NODATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRY_AGAIN</name></expr>:</case>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAI_AGAIN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NO_RECOVERY</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAI_FAIL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>h_name</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>h_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>hp</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>EAI_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>ap</name> <operator>=</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><name>af</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>afd</name> <operator>=</operator> <operator>&amp;</operator><name><name>afdl</name><index>[<expr><name>N_INET6</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<default>default:</default> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>afd</name> <operator>=</operator> <operator>&amp;</operator><name><name>afdl</name><index>[<expr><name>N_INET</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<default>default:</default> 
<if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_V4MAPPED</name><argument_list>(<argument><expr><operator>(</operator>struct <name>in6_addr</name> <operator>*</operator><operator>)</operator><name>ap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ap</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator>
<sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>afd</name> <operator>=</operator> <operator>&amp;</operator><name><name>afdl</name><index>[<expr><name>N_INET</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>afd</name> <operator>=</operator> <operator>&amp;</operator><name><name>afdl</name><index>[<expr><name>N_INET6</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FAITH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>translate</name> <operator>&amp;&amp;</operator> <name><name>afd</name><operator>-&gt;</operator><name>a_af</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>in6</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_AI</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>afdl</name><index>[<expr><name>N_INET6</name></expr>]</index></name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in6</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>ai_next</name><operator>-&gt;</operator><name>ai_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in6</name><operator>-&gt;</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>faith_prefix</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in6</name><operator>-&gt;</operator><name>s6_addr</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ap</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr_stmt><expr><call><name>GET_AI</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr></argument>, <argument><expr><name>afd</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <operator>&amp;</operator><name>sentinel</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>top</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GET_CANONNAME</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>freehostent</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
<return>return <expr><name>SUCCESS</name></expr>;</return>
<label><name>free</name>:</label>
<if_stmt><if>if <condition>(<expr><name>top</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freehostent</name><argument_list>(<argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>bad</name>:</label>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>
</unit>
