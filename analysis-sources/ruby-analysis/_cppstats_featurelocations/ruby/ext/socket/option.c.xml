<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\ext\socket\option.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubysocket.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_cSockOpt</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pack_var</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_str_new((const char *)&amp;(v), sizeof(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##y</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCAT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CAT(x,y)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNU__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_IP_MULTICAST_LOOP</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_IP_MULTICAST_TTL</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_IP_MULTICAST_LOOP</name></cpp:macro> <cpp:value>byte</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_IP_MULTICAST_TTL</name></cpp:macro> <cpp:value>byte</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_INSPECT_BYTE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_size</name><parameter_list>(<parameter><type><name>len</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((len) == (size) ? (void)0 : rb_raise(rb_eTypeError, "size differ. expected as "#size"=%d but %ld", (int)size, (long)(len)))</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_pack_byte</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>i</name> <init>= <expr><call><name>NUM2CHR</name><argument_list>(<argument><expr><call><name>rb_to_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>pack_var</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_pack_int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>rb_to_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>pack_var</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>constant_to_sym</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>constant</name></decl></parameter>, <parameter><function_decl><type><name>ID</name></type> (<modifier>*</modifier><name>intern_const</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ID</name></type> <name>name</name> <init>= <expr><call><name>intern_const</name><argument_list>(<argument><expr><name>constant</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>constant</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>optname_to_sym</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SOL_SOCKET</name></expr>:</case>
<return>return <expr><call><name>constant_to_sym</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_intern_so_optname</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>IPPROTO_IP</name></expr>:</case>
<return>return <expr><call><name>constant_to_sym</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_intern_ip_optname</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>IPPROTO_IPV6</name></expr>:</case>
<return>return <expr><call><name>constant_to_sym</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_intern_ipv6_optname</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>IPPROTO_TCP</name></expr>:</case>
<return>return <expr><call><name>constant_to_sym</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_intern_tcp_optname</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>IPPROTO_UDP</name></expr>:</case>
<return>return <expr><call><name>constant_to_sym</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name>rsock_intern_udp_optname</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vfamily</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vlevel</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>voptname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>rsock_family_arg</name><argument_list>(<argument><expr><name>vfamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>rsock_level_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>vlevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optname</name> <init>= <expr><call><name>rsock_optname_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>voptname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"family"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"level"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"optname"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rsock_sockopt_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>NEWOBJ_OF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>RObject</name></expr></argument>, <argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><name>T_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sockopt_initialize</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>obj</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>obj</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_family_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"family"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sockopt_level</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"level"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_level_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>sockopt_level</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sockopt_optname</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"optname"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_optname_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>sockopt_optname</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_data</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_s_byte</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vfamily</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vlevel</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>voptname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>rsock_family_arg</name><argument_list>(<argument><expr><name>vfamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>rsock_level_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>vlevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optname</name> <init>= <expr><call><name>rsock_optname_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>voptname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rsock_sockopt_new</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><call><name>sockopt_pack_byte</name><argument_list>(<argument><expr><name>vint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_byte</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>data</name> <init>= <expr><call><name>sockopt_data</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_size</name><argument_list>(<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>CHR2FIX</name><argument_list>(<argument><expr><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_s_int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vfamily</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vlevel</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>voptname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>rsock_family_arg</name><argument_list>(<argument><expr><name>vfamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>rsock_level_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>vlevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optname</name> <init>= <expr><call><name>rsock_optname_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>voptname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rsock_sockopt_new</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><call><name>sockopt_pack_int</name><argument_list>(<argument><expr><name>vint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>data</name> <init>= <expr><call><name>sockopt_data</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_size</name><argument_list>(<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_s_bool</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vfamily</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vlevel</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>voptname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vbool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>rsock_family_arg</name><argument_list>(<argument><expr><name>vfamily</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>rsock_level_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>vlevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optname</name> <init>= <expr><call><name>rsock_optname_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>voptname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>vbool</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rsock_sockopt_new</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><call><name>pack_var</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_bool</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>data</name> <init>= <expr><call><name>sockopt_data</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>check_size</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_s_linger</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vonoff</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vsecs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>linger</name></name></type> <name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name> <operator>=</operator> <call><name>rb_check_to_integer</name><argument_list>(<argument><expr><name>vonoff</name></expr></argument>, <argument><expr><literal type="string">"to_int"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l</name><operator>.</operator><name>l_onoff</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>l</name><operator>.</operator><name>l_onoff</name></name> <operator>=</operator> <ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>vonoff</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>l</name><operator>.</operator><name>l_linger</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>vsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rsock_sockopt_new</name><argument_list>(<argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_LINGER</name></expr></argument>, <argument><expr><call><name>pack_var</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_linger</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>sockopt_level</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optname</name> <init>= <expr><call><name>sockopt_optname</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>data</name> <init>= <expr><call><name>sockopt_data</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>linger</name></name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>vonoff</name></decl>, <decl><type ref="prev"/><name>vsecs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>!=</operator> <name>SOL_SOCKET</name> <operator>||</operator> <name>optname</name> <operator>!=</operator> <name>SO_LINGER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"linger socket option expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>check_size</name><argument_list>(<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>linger</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>linger</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>l</name><operator>.</operator><name>l_onoff</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>vonoff</name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>vonoff</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>vonoff</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>l_onoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>vsecs</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>l_linger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>vonoff</name></expr></argument>, <argument><expr><name>vsecs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_s_ipv4_multicast_loop</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_MULTICAST_LOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VALUE</name></type> <name>o</name> <init>= <expr><call><call><name>XCAT</name><argument_list>(<argument><expr><name>sockopt_pack_</name></expr></argument>,<argument><expr><name>TYPE_IP_MULTICAST_LOOP</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rsock_sockopt_new</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_MULTICAST_LOOP</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> IPPROTO_IP or IP_MULTICAST_LOOP is not implemented</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_ipv4_multicast_loop</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>sockopt_family_m</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>sockopt_level</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optname</name> <init>= <expr><call><name>sockopt_optname</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_MULTICAST_LOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name>optname</name> <operator>==</operator> <name>IP_MULTICAST_LOOP</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><call><name>XCAT</name><argument_list>(<argument><expr><name>sockopt_</name></expr></argument>,<argument><expr><name>TYPE_IP_MULTICAST_LOOP</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"ipv4_multicast_loop socket option expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_ipv4_multicast_loop</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XCAT(inspect_,TYPE_IP_MULTICAST_LOOP)(a,b,c,d)</cpp:value></cpp:define>














<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_s_ipv4_multicast_ttl</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_MULTICAST_TTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VALUE</name></type> <name>o</name> <init>= <expr><call><call><name>XCAT</name><argument_list>(<argument><expr><name>sockopt_pack_</name></expr></argument>,<argument><expr><name>TYPE_IP_MULTICAST_TTL</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rsock_sockopt_new</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_MULTICAST_TTL</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> IPPROTO_IP or IP_MULTICAST_TTL is not implemented</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_ipv4_multicast_ttl</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>sockopt_family_m</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>sockopt_level</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optname</name> <init>= <expr><call><name>sockopt_optname</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_MULTICAST_TTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name>optname</name> <operator>==</operator> <name>IP_MULTICAST_TTL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><call><name>XCAT</name><argument_list>(<argument><expr><name>sockopt_</name></expr></argument>,<argument><expr><name>TYPE_IP_MULTICAST_TTL</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"ipv4_multicast_ttl socket option expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_ipv4_multicast_ttl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XCAT(inspect_,TYPE_IP_MULTICAST_TTL)(a,b,c,d)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_INSPECT_BYTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_byte</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_errno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s (%d)"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_MULTICAST_LOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_uint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOL_SOCKET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SO_LINGER</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_linger</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>linger</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>linger</name></name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>s</name><operator>.</operator><name>l_onoff</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" on(%d)"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>l_onoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %dsec"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>l_linger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOL_SOCKET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SO_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_socktype</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rsock_intern_socktype</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_timeval_as_interval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %ld.%06ldsec"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>s</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>s</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


















































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>HAVE_INET_NTOP</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>defined</name> <name>_WIN32</name></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>inet_ntop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>numaddr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numaddr_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INET_NTOA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>numaddr</name></expr></argument>, <argument><expr><name>numaddr_len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>numaddr</name></expr></argument>, <argument><expr><name>numaddr_len</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>numaddr</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_if_indextoname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>succ_prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fail_prefix</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ifindex</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IF_INDEXTONAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>ifbuf</name><index>[<expr><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>if_indextoname</name><argument_list>(<argument><expr><name>ifindex</name></expr></argument>, <argument><expr><name>ifbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><name>fail_prefix</name></expr></argument>, <argument><expr><name>ifindex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>succ_prefix</name></expr></argument>, <argument><expr><name>ifbuf</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IFNAMSIZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFNAMSIZ</name></cpp:macro> <cpp:value>(sizeof(unsigned int)*3+1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><name>fail_prefix</name></expr></argument>, <argument><expr><name>ifindex</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_IP_MREQ</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_ipv4_mreq</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip_mreq</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ip_mreq</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>imr_multiaddr</name></name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" invalid-address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>imr_interface</name></name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" invalid-address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_IP_MREQN</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_ipv4_mreqn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip_mreqn</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ip_mreqn</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ifbuf</name><index>[<expr><literal type="number">32</literal><operator>+</operator><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>imr_multiaddr</name></name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" invalid-address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>imr_address</name></name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" invalid-address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>rb_if_indextoname</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">" ifindex:"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>imr_ifindex</name></name></expr></argument>, <argument><expr><name>ifbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ifbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_IP_MREQ</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_ipv4_add_drop_membership</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip_mreq</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>inspect_ipv4_mreq</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_IP_MREQN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip_mreqn</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>inspect_ipv4_mreqn</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_MULTICAST_IF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_IP_MREQN</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_ipv4_multicast_if</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" invalid-address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip_mreqn</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>inspect_ipv4_mreqn</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_MULTICAST_IF</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_ipv6_multicast_if</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>ifbuf</name><index>[<expr><literal type="number">32</literal><operator>+</operator><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ifindex</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ifindex</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_if_indextoname</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>ifindex</name></expr></argument>, <argument><expr><name>ifbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ifbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IPV6</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_IPV6_MREQ</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_ipv6_mreq</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ipv6_mreq</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ipv6_mreq</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ifbuf</name><index>[<expr><literal type="number">32</literal><operator>+</operator><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>ipv6mr_multiaddr</name></name></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" invalid-address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>addrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>rb_if_indextoname</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">" interface:"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>ipv6mr_interface</name></name></expr></argument>, <argument><expr><name>ifbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ifbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TCP_INFO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_TCP_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_ESTABLISHED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_ESTABLISHED</name></cpp:macro> <cpp:value>TCPS_ESTABLISHED</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_SYN_SENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_SYN_SENT</name></cpp:macro> <cpp:value>TCPS_SYN_SENT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_SYN_RECV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_SYN_RECV</name></cpp:macro> <cpp:value>TCPS_SYN_RECEIVED</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_FIN_WAIT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_FIN_WAIT1</name></cpp:macro> <cpp:value>TCPS_FIN_WAIT_1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_FIN_WAIT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_FIN_WAIT2</name></cpp:macro> <cpp:value>TCPS_FIN_WAIT_2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_TIME_WAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_TIME_WAIT</name></cpp:macro> <cpp:value>TCPS_TIME_WAIT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_CLOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_CLOSE</name></cpp:macro> <cpp:value>TCPS_CLOSED</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_CLOSE_WAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_CLOSE_WAIT</name></cpp:macro> <cpp:value>TCPS_CLOSE_WAIT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_LAST_ACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_LAST_ACK</name></cpp:macro> <cpp:value>TCPS_LAST_ACK</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_LISTEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_LISTEN</name></cpp:macro> <cpp:value>TCPS_LISTEN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_CLOSING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_CLOSING</name></cpp:macro> <cpp:value>TCPS_CLOSING</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_ESTABLISHED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_ESTABLISHED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_ESTABLISHED</name></cpp:macro> <cpp:value>TCP_ESTABLISHED</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_SYN_SENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_SYN_SENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_SYN_SENT</name></cpp:macro> <cpp:value>TCP_SYN_SENT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_SYN_RECV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_SYN_RECV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_SYN_RECV</name></cpp:macro> <cpp:value>TCP_SYN_RECV</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_FIN_WAIT1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_FIN_WAIT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_FIN_WAIT1</name></cpp:macro> <cpp:value>TCP_FIN_WAIT1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_FIN_WAIT2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_FIN_WAIT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_FIN_WAIT2</name></cpp:macro> <cpp:value>TCP_FIN_WAIT2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_TIME_WAIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_TIME_WAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_TIME_WAIT</name></cpp:macro> <cpp:value>TCP_TIME_WAIT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_CLOSE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_CLOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_CLOSE</name></cpp:macro> <cpp:value>TCP_CLOSE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_CLOSE_WAIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_CLOSE_WAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_CLOSE_WAIT</name></cpp:macro> <cpp:value>TCP_CLOSE_WAIT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_LAST_ACK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_LAST_ACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_LAST_ACK</name></cpp:macro> <cpp:value>TCP_LAST_ACK</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_LISTEN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_LISTEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_LISTEN</name></cpp:macro> <cpp:value>TCP_LISTEN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_TCP_CLOSING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TCP_CLOSING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_CLOSING</name></cpp:macro> <cpp:value>TCP_CLOSING</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>inspect_tcpi_options</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sep</name> <init>= <expr><literal type="char">'='</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSPECT_TCPI_OPTION</name><parameter_list>(<parameter><type><name>optval</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (options &amp; (optval)) { options &amp;= ~(uint8_t)(optval); rb_str_catf(ret, "%c%s", sep, name); sep = ','; }</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCPI_OPT_TIMESTAMPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>INSPECT_TCPI_OPTION</name><argument_list>(<argument><expr><name>TCPI_OPT_TIMESTAMPS</name></expr></argument>, <argument><expr><literal type="string">"TIMESTAMPS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCPI_OPT_SACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>INSPECT_TCPI_OPTION</name><argument_list>(<argument><expr><name>TCPI_OPT_SACK</name></expr></argument>, <argument><expr><literal type="string">"SACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCPI_OPT_WSCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>INSPECT_TCPI_OPTION</name><argument_list>(<argument><expr><name>TCPI_OPT_WSCALE</name></expr></argument>, <argument><expr><literal type="string">"WSCALE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCPI_OPT_ECN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>INSPECT_TCPI_OPTION</name><argument_list>(<argument><expr><name>TCPI_OPT_ECN</name></expr></argument>, <argument><expr><literal type="string">"ECN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCPI_OPT_ECN_SEEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>INSPECT_TCPI_OPTION</name><argument_list>(<argument><expr><name>TCPI_OPT_ECN_SEEN</name></expr></argument>, <argument><expr><literal type="string">"ECN_SEEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCPI_OPT_SYN_DATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>INSPECT_TCPI_OPTION</name><argument_list>(<argument><expr><name>TCPI_OPT_SYN_DATA</name></expr></argument>, <argument><expr><literal type="string">"SYN_DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCPI_OPT_TOE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>INSPECT_TCPI_OPTION</name><argument_list>(<argument><expr><name>TCPI_OPT_TOE</name></expr></argument>, <argument><expr><literal type="string">"TOE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INSPECT_TCPI_OPTION</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>||</operator> <name>sep</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"%c%u"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>inspect_tcpi_usec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"%s%u.%06us"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>t</name> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><name>t</name> <operator>%</operator> <literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>__FreeBSD__</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>defined</name> <name>HAVE_STRUCT_TCP_INFO_TCPI_LAST_DATA_SENT</name> <operator>||</operator> <name>defined</name> <name>HAVE_STRUCT_TCP_INFO_TCPI_LAST_DATA_RECV</name> <operator>||</operator> <name>defined</name> <name>HAVE_STRUCT_TCP_INFO_TCPI_LAST_ACK_SENT</name> <operator>||</operator> <name>defined</name> <name>HAVE_STRUCT_TCP_INFO_TCPI_LAST_ACK_RECV</name> <operator>||</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:if>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>inspect_tcpi_msec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"%s%u.%03us"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>t</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name>t</name> <operator>%</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_rto</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_usec(ret, " rto=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_last_data_recv</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_usec(ret, " last_data_recv=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_rtt</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_usec(ret, " rtt=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_rttvar</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_usec(ret, " rttvar=", t)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_rto</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_usec(ret, " rto=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_ato</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_usec(ret, " ato=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_last_data_sent</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_msec(ret, " last_data_sent=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_last_data_recv</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_msec(ret, " last_data_recv=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_last_ack_sent</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_msec(ret, " last_ack_sent=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_last_ack_recv</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_msec(ret, " last_ack_recv=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_rtt</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_usec(ret, " rtt=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_rttvar</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_usec(ret, " rttvar=", t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inspect_tcpi_rcv_rtt</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inspect_tcpi_usec(ret, " rcv_rtt=", t)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_tcp_info</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>actual_size</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tcp_info</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>actual_size</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tcp_info</name></name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_STATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name><name>s</name><operator>.</operator><name>tcpi_state</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_ESTABLISHED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_ESTABLISHED</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=ESTABLISHED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_SYN_SENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_SYN_SENT</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=SYN_SENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_SYN_RECV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_SYN_RECV</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=SYN_RECV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_FIN_WAIT1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_FIN_WAIT1</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=FIN_WAIT1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_FIN_WAIT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_FIN_WAIT2</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=FIN_WAIT2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_TIME_WAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_TIME_WAIT</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=TIME_WAIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_CLOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_CLOSE</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=CLOSED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_CLOSE_WAIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_CLOSE_WAIT</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=CLOSE_WAIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_LAST_ACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_LAST_ACK</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=LAST_ACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_LISTEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_LISTEN</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=LISTEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_CLOSING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TCP_CLOSING</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=CLOSING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default> <expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" state=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_CA_STATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch <condition>(<expr><name><name>s</name><operator>.</operator><name>tcpi_ca_state</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TCP_CA_Open</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" ca_state=Open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TCP_CA_Disorder</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" ca_state=Disorder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TCP_CA_CWR</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" ca_state=CWR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TCP_CA_Recovery</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" ca_state=Recovery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>TCP_CA_Loss</name></expr>:</case> <expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" ca_state=Loss"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" ca_state=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_ca_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RETRANSMITS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" retransmits=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_retransmits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_PROBES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" probes=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_probes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_BACKOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" backoff=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_backoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_OPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inspect_tcpi_options</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_SND_WSCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" snd_wscale=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_snd_wscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RCV_WSCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" rcv_wscale=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_rcv_wscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inspect_tcpi_rto</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_rto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_ATO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inspect_tcpi_ato</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_ato</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_SND_MSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" snd_mss=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_snd_mss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RCV_MSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" rcv_mss=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_rcv_mss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_UNACKED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" unacked=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_unacked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_SACKED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" sacked=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_sacked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_LOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" lost=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_lost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RETRANS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" retrans=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_retrans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_FACKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" fackets=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_fackets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_LAST_DATA_SENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inspect_tcpi_last_data_sent</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_last_data_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_LAST_ACK_SENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inspect_tcpi_last_ack_sent</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_last_ack_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_LAST_DATA_RECV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inspect_tcpi_last_data_recv</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_last_data_recv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_LAST_ACK_RECV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inspect_tcpi_last_ack_recv</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_last_ack_recv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_PMTU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" pmtu=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_pmtu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RCV_SSTHRESH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" rcv_ssthresh=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_rcv_ssthresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RTT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inspect_tcpi_rtt</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_rtt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RTTVAR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inspect_tcpi_rttvar</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_rttvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_SND_SSTHRESH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" snd_ssthresh=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_snd_ssthresh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_SND_CWND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" snd_cwnd=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_snd_cwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_ADVMSS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" advmss=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_advmss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_REORDERING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" reordering=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_reordering</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RCV_RTT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>inspect_tcpi_rcv_rtt</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_rcv_rtt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RCV_SPACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" rcv_space=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_rcv_space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_TOTAL_RETRANS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" total_retrans=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_total_retrans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_SND_WND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" snd_wnd=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_snd_wnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_SND_BWND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" snd_bwnd=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_snd_bwnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_SND_NXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" snd_nxt=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_snd_nxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RCV_NXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" rcv_nxt=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_rcv_nxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_TOE_TID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" toe_tid=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_toe_tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_SND_REXMITPACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" snd_rexmitpack=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_snd_rexmitpack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_RCV_OOOPACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" rcv_ooopack=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_rcv_ooopack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TCP_INFO_TCPI_SND_ZEROWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" snd_zerowin=%u"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>tcpi_snd_zerowin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tcp_info</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>actual_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" (%u bytes too long)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>actual_size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>tcp_info</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SOL_SOCKET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SO_PEERCRED</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_SOCK_PEERCRED</name></cpp:macro> <cpp:value>struct sockpeercred</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_SOCK_PEERCRED</name></cpp:macro> <cpp:value>struct ucred</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_peercred</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RUBY_SOCK_PEERCRED</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>RUBY_SOCK_PEERCRED</name></type> <name>cred</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RUBY_SOCK_PEERCRED</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" pid=%u euid=%u egid=%u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>cred</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>cred</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>cred</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" (ucred)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOCAL_PEERCRED</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inspect_local_peercred</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>xucred</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>xucred</name></name></type> <name>cred</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>xucred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>.</operator><name>cr_version</name></name> <operator>!=</operator> <name>XUCRED_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" version=%u"</literal></expr></argument>, <argument><expr><name><name>cred</name><operator>.</operator><name>cr_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" euid=%u"</literal></expr></argument>, <argument><expr><name><name>cred</name><operator>.</operator><name>cr_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cred</name><operator>.</operator><name>cr_ngroups</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">" groups="</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cred</name><operator>.</operator><name>cr_ngroups</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name><name>cred</name><operator>.</operator><name>cr_groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" (xucred)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>












<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>sockopt_family_m</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>sockopt_level_m</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optname</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>sockopt_optname_m</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>data</name> <init>= <expr><call><name>sockopt_data</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>family_id</name></decl>, <decl><type ref="prev"/><name>level_id</name></decl>, <decl><type ref="prev"/><name>optname_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inspected</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"#&lt;%s:"</literal></expr></argument>, <argument><expr><call><name>rb_obj_classname</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>family_id</name> <operator>=</operator> <call><name>rsock_intern_family_noprefix</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>family_id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name>family_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" family:%d"</literal></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>SOL_SOCKET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" SOCKET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optname_id</name> <operator>=</operator> <call><name>rsock_intern_so_optname</name><argument_list>(<argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>optname_id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name>optname_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" optname:%d"</literal></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_UNIX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" level:%d"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optname_id</name> <operator>=</operator> <call><name>rsock_intern_local_optname</name><argument_list>(<argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>optname_id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name>optname_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" optname:%d"</literal></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if <condition>(<expr><call><name>IS_IP_FAMILY</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>level_id</name> <operator>=</operator> <call><name>rsock_intern_iplevel</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>level_id</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name>level_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" level:%d"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>optname_to_sym</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><call><name>rb_sym2str</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" optname:%d"</literal></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" level:%d"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" optname:%d"</literal></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>inspected</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>SOL_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>family</name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>family</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_UNSPEC</name></expr>:</case>
<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>SOL_SOCKET</name></expr>:</case>
<switch>switch <condition>(<expr><name>optname</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_DEBUG</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_ERROR</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_ERROR</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_errno</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_TYPE</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_TYPE</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_socktype</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_ACCEPTCONN</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_ACCEPTCONN</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_BROADCAST</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_BROADCAST</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_REUSEADDR</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_REUSEADDR</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_KEEPALIVE</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_KEEPALIVE</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_OOBINLINE</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_OOBINLINE</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_SNDBUF</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_SNDBUF</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_RCVBUF</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_RCVBUF</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_DONTROUTE</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_DONTROUTE</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_RCVLOWAT</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_RCVLOWAT</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_SNDLOWAT</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_SNDLOWAT</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_LINGER</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_LINGER</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_linger</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_RCVTIMEO</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_RCVTIMEO</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_timeval_as_interval</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_SNDTIMEO</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_SNDTIMEO</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_timeval_as_interval</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_PEERCRED</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>SO_PEERCRED</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_peercred</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>AF_INET</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>IPPROTO_IP</name></expr>:</case>
<switch>switch <condition>(<expr><name>optname</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_MULTICAST_IF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_IP_MREQN</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IP_MULTICAST_IF</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_ipv4_multicast_if</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_ADD_MEMBERSHIP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IP_ADD_MEMBERSHIP</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_ipv4_add_drop_membership</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_DROP_MEMBERSHIP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IP_DROP_MEMBERSHIP</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_ipv4_add_drop_membership</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_MULTICAST_LOOP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IP_MULTICAST_LOOP</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_ipv4_multicast_loop</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_MULTICAST_TTL</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IP_MULTICAST_TTL</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_ipv4_multicast_ttl</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>IPPROTO_IPV6</name></expr>:</case>
<switch>switch <condition>(<expr><name>optname</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_MULTICAST_HOPS</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IPV6_MULTICAST_HOPS</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_MULTICAST_IF</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IPV6_MULTICAST_IF</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_ipv6_multicast_if</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_MULTICAST_LOOP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IPV6_MULTICAST_LOOP</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_uint</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_JOIN_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IPV6_JOIN_GROUP</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_ipv6_mreq</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_LEAVE_GROUP</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IPV6_LEAVE_GROUP</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_ipv6_mreq</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_UNICAST_HOPS</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IPV6_UNICAST_HOPS</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_V6ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>IPV6_V6ONLY</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>IPPROTO_TCP</name></expr>:</case>
<switch>switch <condition>(<expr><name>optname</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_NODELAY</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>TCP_NODELAY</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_int</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_INFO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_TCP_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if> 
<case>case <expr><name>TCP_INFO</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_tcp_info</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_UNIX</name></expr>:</case>
<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<switch>switch <condition>(<expr><name>optname</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOCAL_PEERCRED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LOCAL_PEERCRED</name></expr>:</case> <expr_stmt><expr><name>inspected</name> <operator>=</operator> <call><name>inspect_local_peercred</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inspected</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>rb_str_dump</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>sockopt_unpack</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>template</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>sockopt_data</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"unpack"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rsock_init_sockopt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>








<expr_stmt><expr><name>rb_cSockOpt</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>rb_cSocket</name></expr></argument>, <argument><expr><literal type="string">"Option"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>sockopt_initialize</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"family"</literal></expr></argument>, <argument><expr><name>sockopt_family_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><name>sockopt_level_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"optname"</literal></expr></argument>, <argument><expr><name>sockopt_optname_m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>sockopt_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>sockopt_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>, <argument><expr><name>sockopt_s_int</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>, <argument><expr><name>sockopt_int</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"byte"</literal></expr></argument>, <argument><expr><name>sockopt_s_byte</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"byte"</literal></expr></argument>, <argument><expr><name>sockopt_byte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>, <argument><expr><name>sockopt_s_bool</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>, <argument><expr><name>sockopt_bool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"linger"</literal></expr></argument>, <argument><expr><name>sockopt_s_linger</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"linger"</literal></expr></argument>, <argument><expr><name>sockopt_linger</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"ipv4_multicast_ttl"</literal></expr></argument>, <argument><expr><name>sockopt_s_ipv4_multicast_ttl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"ipv4_multicast_ttl"</literal></expr></argument>, <argument><expr><name>sockopt_ipv4_multicast_ttl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"ipv4_multicast_loop"</literal></expr></argument>, <argument><expr><name>sockopt_s_ipv4_multicast_loop</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"ipv4_multicast_loop"</literal></expr></argument>, <argument><expr><name>sockopt_ipv4_multicast_loop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"unpack"</literal></expr></argument>, <argument><expr><name>sockopt_unpack</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockOpt</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>sockopt_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>
</unit>
