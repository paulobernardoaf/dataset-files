<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\win32\win32.c">




















<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__STRICT_ANSI__</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincon.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;share.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mbstring.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlwapi.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crtdbg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rtcapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mswsock.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/win32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/vm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32/dir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32/file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/enc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/static_assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stdbool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encindex.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isdirsep</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == '/' || (x) == '\\')</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_MSC_VER</name> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;=</operator> <literal type="number">1200</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CharNextExA</name><parameter_list>(<parameter><type><name>cp</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CharNextExA((WORD)(cp), (p), (flags))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>w32_wopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oflag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>perm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>w32_stati128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>lstat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>w32_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getenv</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLN_FIND_EXTRA_ARG_DECL</name></cpp:macro> <cpp:value>,UINT cp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLN_FIND_EXTRA_ARG</name></cpp:macro> <cpp:value>,cp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_w32_stati128</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>st</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>w32_stati128(path, st, cp, FALSE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getenv</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>w32_getenv(name, cp)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CharNext</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CharNext</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CharNextExA(cp, (p), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dln_find_exe_r</name></cpp:macro> <cpp:value>rb_w32_udln_find_exe_r</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dln_find_file_r</name></cpp:macro> <cpp:value>rb_w32_udln_find_file_r</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dln.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dln_find.c"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAXPATHLEN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_w32_stati128</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dln_find_exe_r</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dln_find_file_r</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dln_find_exe_r</name><parameter_list>(<parameter><type><name>fname</name></type></parameter>, <parameter><type><name>path</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_w32_udln_find_exe_r(fname, path, buf, size, cp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dln_find_file_r</name><parameter_list>(<parameter><type><name>fname</name></type></parameter>, <parameter><type><name>path</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_w32_udln_find_file_r(fname, path, buf, size, cp)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CharNext</name></cpp:undef> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>MAX_PATH</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_MAX</name></cpp:macro> <cpp:value>MAX_PATH</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_SYS_PARAM_H</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_MAX</name></cpp:macro> <cpp:value>MAXPATHLEN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENV_MAX</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>stat</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fclose</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>close</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>setsockopt</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dup2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strdup</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">140</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_filbuf</name></cpp:macro> <cpp:value>_fgetc_nolock</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_flsbuf</name></cpp:macro> <cpp:value>_fputc_nolock</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>enough_to_get</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(--(n) &gt;= 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>enough_to_put</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(--(n) &gt;= 0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Debug</name><parameter_list>(<parameter><type><name>something</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>something</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Debug</name><parameter_list>(<parameter><type><name>something</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_SOCKET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_get_osfhandle(x)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rb_w32_reparse_symlink_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>has_redirection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_w32_wait_events</name><parameter_list>(<parameter><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>events</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rb_w32_open_osfhandle</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>osfhandle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>wstati128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>lstat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_w32_conv_from_wchar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>wstr</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ruby_brace_glob_with_enc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>ruby_glob_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FARPROC</name></type> <name>get_proc_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>mh</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_CRITICAL</name></cpp:macro> <cpp:value>if (0) {} else</cpp:value></cpp:define> 


<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>winerr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
}</block> <decl><name><name>errmap</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ERROR_INVALID_FUNCTION</name></expr>, <expr><name>EINVAL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_FILE_NOT_FOUND</name></expr>, <expr><name>ENOENT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_PATH_NOT_FOUND</name></expr>, <expr><name>ENOENT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_TOO_MANY_OPEN_FILES</name></expr>, <expr><name>EMFILE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_ACCESS_DENIED</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_HANDLE</name></expr>, <expr><name>EBADF</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_ARENA_TRASHED</name></expr>, <expr><name>ENOMEM</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NOT_ENOUGH_MEMORY</name></expr>, <expr><name>ENOMEM</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_BLOCK</name></expr>, <expr><name>ENOMEM</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BAD_ENVIRONMENT</name></expr>, <expr><name>E2BIG</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BAD_FORMAT</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_ACCESS</name></expr>, <expr><name>EINVAL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_DATA</name></expr>, <expr><name>EINVAL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_DRIVE</name></expr>, <expr><name>ENOENT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_CURRENT_DIRECTORY</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NOT_SAME_DEVICE</name></expr>, <expr><name>EXDEV</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NO_MORE_FILES</name></expr>, <expr><name>ENOENT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_WRITE_PROTECT</name></expr>, <expr><name>EROFS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BAD_UNIT</name></expr>, <expr><name>ENODEV</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NOT_READY</name></expr>, <expr><name>ENXIO</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BAD_COMMAND</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_CRC</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BAD_LENGTH</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_SEEK</name></expr>, <expr><name>EIO</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NOT_DOS_DISK</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_SECTOR_NOT_FOUND</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_OUT_OF_PAPER</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_WRITE_FAULT</name></expr>, <expr><name>EIO</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_READ_FAULT</name></expr>, <expr><name>EIO</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_GEN_FAILURE</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_LOCK_VIOLATION</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_SHARING_VIOLATION</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_WRONG_DISK</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_SHARING_BUFFER_EXCEEDED</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BAD_NETPATH</name></expr>, <expr><name>ENOENT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NETWORK_ACCESS_DENIED</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BAD_NET_NAME</name></expr>, <expr><name>ENOENT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_FILE_EXISTS</name></expr>, <expr><name>EEXIST</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_CANNOT_MAKE</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_FAIL_I24</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_PARAMETER</name></expr>, <expr><name>EINVAL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NO_PROC_SLOTS</name></expr>, <expr><name>EAGAIN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_DRIVE_LOCKED</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BROKEN_PIPE</name></expr>, <expr><name>EPIPE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_DISK_FULL</name></expr>, <expr><name>ENOSPC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_TARGET_HANDLE</name></expr>, <expr><name>EBADF</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_HANDLE</name></expr>, <expr><name>EINVAL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_WAIT_NO_CHILDREN</name></expr>, <expr><name>ECHILD</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_CHILD_NOT_COMPLETE</name></expr>, <expr><name>ECHILD</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_DIRECT_ACCESS_HANDLE</name></expr>, <expr><name>EBADF</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NEGATIVE_SEEK</name></expr>, <expr><name>EINVAL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_SEEK_ON_DEVICE</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_DIR_NOT_EMPTY</name></expr>, <expr><name>ENOTEMPTY</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_DIRECTORY</name></expr>, <expr><name>ENOTDIR</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NOT_LOCKED</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BAD_PATHNAME</name></expr>, <expr><name>ENOENT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_MAX_THRDS_REACHED</name></expr>, <expr><name>EAGAIN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_LOCK_FAILED</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_ALREADY_EXISTS</name></expr>, <expr><name>EEXIST</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_STARTING_CODESEG</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_STACKSEG</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_MODULETYPE</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_EXE_SIGNATURE</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_EXE_MARKED_INVALID</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BAD_EXE_FORMAT</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_ITERATED_DATA_EXCEEDS_64k</name></expr>,<expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_MINALLOCSIZE</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_DYNLINK_FROM_INVALID_RING</name></expr>,<expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_IOPL_NOT_ENABLED</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INVALID_SEGDPL</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_AUTODATASEG_EXCEEDS_64k</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_RING2SEG_MUST_BE_MOVABLE</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_RELOC_CHAIN_XEEDS_SEGLIM</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_INFLOOP_IN_RELOC_CHAIN</name></expr>, <expr><name>ENOEXEC</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_FILENAME_EXCED_RANGE</name></expr>, <expr><name>ENOENT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NESTING_NOT_ALLOWED</name></expr>, <expr><name>EAGAIN</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERROR_PIPE_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_PIPE_LOCAL</name></cpp:macro> <cpp:value>229L</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>ERROR_PIPE_LOCAL</name></expr>, <expr><name>EPIPE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_BAD_PIPE</name></expr>, <expr><name>EPIPE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_PIPE_BUSY</name></expr>, <expr><name>EAGAIN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NO_DATA</name></expr>, <expr><name>EPIPE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_PIPE_NOT_CONNECTED</name></expr>, <expr><name>EPIPE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_OPERATION_ABORTED</name></expr>, <expr><name>EINTR</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_NOT_ENOUGH_QUOTA</name></expr>, <expr><name>ENOMEM</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_MOD_NOT_FOUND</name></expr>, <expr><name>ENOENT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ERROR_PRIVILEGE_NOT_HELD</name></expr>, <expr><name>EACCES</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>ERROR_CANT_RESOLVE_FILENAME</name></expr>, <expr><name>ELOOP</name></expr>, }</block></expr>,
<expr><block>{ <expr><name>WSAEINTR</name></expr>, <expr><name>EINTR</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEBADF</name></expr>, <expr><name>EBADF</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEACCES</name></expr>, <expr><name>EACCES</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEFAULT</name></expr>, <expr><name>EFAULT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEINVAL</name></expr>, <expr><name>EINVAL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEMFILE</name></expr>, <expr><name>EMFILE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEWOULDBLOCK</name></expr>, <expr><name>EWOULDBLOCK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEINPROGRESS</name></expr>, <expr><name>EINPROGRESS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEALREADY</name></expr>, <expr><name>EALREADY</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAENOTSOCK</name></expr>, <expr><name>ENOTSOCK</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEDESTADDRREQ</name></expr>, <expr><name>EDESTADDRREQ</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEMSGSIZE</name></expr>, <expr><name>EMSGSIZE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEPROTOTYPE</name></expr>, <expr><name>EPROTOTYPE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAENOPROTOOPT</name></expr>, <expr><name>ENOPROTOOPT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEPROTONOSUPPORT</name></expr>, <expr><name>EPROTONOSUPPORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAESOCKTNOSUPPORT</name></expr>, <expr><name>ESOCKTNOSUPPORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEOPNOTSUPP</name></expr>, <expr><name>EOPNOTSUPP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEPFNOSUPPORT</name></expr>, <expr><name>EPFNOSUPPORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEAFNOSUPPORT</name></expr>, <expr><name>EAFNOSUPPORT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEADDRINUSE</name></expr>, <expr><name>EADDRINUSE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEADDRNOTAVAIL</name></expr>, <expr><name>EADDRNOTAVAIL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAENETDOWN</name></expr>, <expr><name>ENETDOWN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAENETUNREACH</name></expr>, <expr><name>ENETUNREACH</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAENETRESET</name></expr>, <expr><name>ENETRESET</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAECONNABORTED</name></expr>, <expr><name>ECONNABORTED</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAECONNRESET</name></expr>, <expr><name>ECONNRESET</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAENOBUFS</name></expr>, <expr><name>ENOBUFS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEISCONN</name></expr>, <expr><name>EISCONN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAENOTCONN</name></expr>, <expr><name>ENOTCONN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAESHUTDOWN</name></expr>, <expr><name>ESHUTDOWN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAETOOMANYREFS</name></expr>, <expr><name>ETOOMANYREFS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAETIMEDOUT</name></expr>, <expr><name>ETIMEDOUT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAECONNREFUSED</name></expr>, <expr><name>ECONNREFUSED</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAELOOP</name></expr>, <expr><name>ELOOP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAENAMETOOLONG</name></expr>, <expr><name>ENAMETOOLONG</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEHOSTDOWN</name></expr>, <expr><name>EHOSTDOWN</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEHOSTUNREACH</name></expr>, <expr><name>EHOSTUNREACH</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEPROCLIM</name></expr>, <expr><name>EPROCLIM</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAENOTEMPTY</name></expr>, <expr><name>ENOTEMPTY</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEUSERS</name></expr>, <expr><name>EUSERS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEDQUOT</name></expr>, <expr><name>EDQUOT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAESTALE</name></expr>, <expr><name>ESTALE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>WSAEREMOTE</name></expr>, <expr><name>EREMOTE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>


<function><type><name>int</name></type>
<name>rb_w32_map_errno</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>winerr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>winerr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>errmap</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>errmap</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>errmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>winerr</name> <operator>==</operator> <name>winerr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>errmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>winerr</name> <operator>&gt;=</operator> <name>WSABASEERR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>winerr</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>EINVAL</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map_errno</name></cpp:macro> <cpp:value>rb_w32_map_errno</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NTLoginName</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSVERSIONINFO</name></type> <name>osver</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osver</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OSVERSIONINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>osver</name><operator>.</operator><name>dwOSVersionInfoSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSVERSIONINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetVersionEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>DWORD</name></type>
<name>rb_w32_osid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>osver</name><operator>.</operator><name>dwPlatformId</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>DWORD</name></type>
<name>rb_w32_osver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name></expr>;</return>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LK_ERR</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (f) i = 0; else { DWORD err = GetLastError(); if (err == ERROR_LOCK_VIOLATION || err == ERROR_IO_PENDING) errno = EWOULDBLOCK; else if (err == ERROR_NOT_LOCKED) i = 0; else errno = map_errno(err); } } while (0)</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LK_LEN</name></cpp:macro> <cpp:value>ULONG_MAX</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>uintptr_t</name></type>
<name>flock_winnt</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>HANDLE</name></type> <name>fh</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>self</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>oper</name> <init>= <expr><name>argc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>oper</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LOCK_SH</name></expr>:</case> 
<expr_stmt><expr><call><name>LK_ERR</name><argument_list>(<argument><expr><call><name>LockFileEx</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LOCK_EX</name></expr>:</case> 
<expr_stmt><expr><call><name>LK_ERR</name><argument_list>(<argument><expr><call><name>LockFileEx</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>LOCKFILE_EXCLUSIVE_LOCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LOCK_SH</name><operator>|</operator><name>LOCK_NB</name></expr>:</case> 
<expr_stmt><expr><call><name>LK_ERR</name><argument_list>(<argument><expr><call><name>LockFileEx</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>LOCKFILE_FAIL_IMMEDIATELY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LOCK_EX</name><operator>|</operator><name>LOCK_NB</name></expr>:</case> 
<expr_stmt><expr><call><name>LK_ERR</name><argument_list>(<argument><expr><call><name>LockFileEx</name><argument_list>(<argument><expr><name>fh</name></expr></argument>,
<argument><expr><name>LOCKFILE_EXCLUSIVE_LOCK</name><operator>|</operator><name>LOCKFILE_FAIL_IMMEDIATELY</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LOCK_UN</name></expr>:</case> 
<case>case <expr><name>LOCK_UN</name><operator>|</operator><name>LOCK_NB</name></expr>:</case> 
<expr_stmt><expr><call><name>LK_ERR</name><argument_list>(<argument><expr><call><name>UnlockFileEx</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> 
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LK_ERR</name></cpp:undef>


<function><type><name>int</name></type>
<name>flock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>asynchronous_func_t</name></type> <name>locker</name> <init>= <expr><name>flock_winnt</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_w32_asynchronize</name><argument_list>(<argument><expr><name>locker</name></expr></argument>,
<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>oper</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>WCHAR</name> <modifier>*</modifier></type>
<name>translate_wchar</name><parameter_list>(<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type>
<name>translate_char</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>p</name> <operator>==</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>to</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>CharNextExA</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CSIDL_LOCAL_APPDATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSIDL_LOCAL_APPDATA</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CSIDL_COMMON_APPDATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSIDL_COMMON_APPDATA</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CSIDL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSIDL_WINDOWS</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CSIDL_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSIDL_SYSTEM</name></cpp:macro> <cpp:value>37</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CSIDL_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSIDL_PROFILE</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>BOOL</name></type>
<name>get_special_folder</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LPITEMIDLIST</name></type> <name>pidl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPMALLOC</name></type> <name>alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>get_path_func</name>)<parameter_list>(<parameter><decl><type><name>LPITEMIDLIST</name></type></decl></parameter>, <parameter><decl><type><name>WCHAR</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>get_path_func</name></type> <name>func</name> <init>= <expr><operator>(</operator><name>get_path_func</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <operator>(</operator><name>get_path_func</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <operator>(</operator><name>get_path_func</name><operator>)</operator>
<call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"shell32"</literal></expr></argument>, <argument><expr><literal type="string">"SHGetPathFromIDListEx"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <name>MAX_PATH</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SHGetSpecialFolderLocation</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pidl</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>func</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>pidl</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>SHGetPathFromIDListW</name><argument_list>(<argument><expr><name>pidl</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>SHGetMalloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>alloc</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Free</name></name><argument_list>(<argument><expr><name>alloc</name></expr></argument>, <argument><expr><name>pidl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>alloc</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>regulate_path</name><parameter_list>(<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>translate_wchar</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>L</name><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>path</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>FARPROC</name></type>
<name>get_proc_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name> <modifier>*</modifier></type><name>mh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FARPROC</name></type> <name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mh</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>mh</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>VALUE</name></type>
<name>rb_w32_special_folder</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_special_folder</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regulate_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_w32_conv_from_wchar</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>rb_filesystem_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_MSC_VER</name> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&lt;=</operator> <literal type="number">1200</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetSystemWindowsDirectoryW</name></cpp:macro> <cpp:value>GetWindowsDirectoryW</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>UINT</name></type>
<name>rb_w32_system_tmpdir</name><parameter_list>(<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WCHAR</name></type> <name><name>temp</name><index>[]</index></name> <init>= <expr><literal type="string">L"temp"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_special_folder</name><argument_list>(<argument><expr><name>CSIDL_LOCAL_APPDATA</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GetSystemWindowsDirectoryW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>translate_wchar</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>L</name><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>L</name><literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>UINT</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>path</name> <operator>+</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>UINT</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>path</name> <operator>+</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>WCHAR</name> <modifier>*</modifier></type>
<name>rb_w32_home_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_len</name> <init>= <expr><name>MAX_PATH</name></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>HOME_NONE</name></decl>, <decl><name>ENV_HOME</name></decl>, <decl><name>ENV_DRIVEPATH</name></decl>, <decl><name>ENV_USERPROFILE</name></decl>
}</block> <decl><name>home_type</name> <init>= <expr><name>HOME_NONE</name></expr></init></decl>;</enum>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"HOME"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>home_type</name> <operator>=</operator> <name>ENV_HOME</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"HOMEDRIVE"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"HOMEPATH"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer_len</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>home_type</name> <operator>=</operator> <name>ENV_DRIVEPATH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"USERPROFILE"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buffer_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>home_type</name> <operator>=</operator> <name>ENV_USERPROFILE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>home_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENV_HOME</name></expr>:</case>
<expr_stmt><expr><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"HOME"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ENV_DRIVEPATH</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"HOMEDRIVE"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"HOMEPATH"</literal></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>buffer_len</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ENV_USERPROFILE</name></expr>:</case>
<expr_stmt><expr><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"USERPROFILE"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_special_folder</name><argument_list>(<argument><expr><name>CSIDL_PROFILE</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>get_special_folder</name><argument_list>(<argument><expr><name>CSIDL_PERSONAL</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>REALLOC_N</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><call><name>lstrlenW</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><call><name>regulate_path</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WCHAR</name></type> <name><name>TMPDIR</name><index>[]</index></name> <init>= <expr><literal type="string">L"TMPDIR"</literal></expr></init></decl>;</decl_stmt>
<struct>struct <block>{<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>eq</name></decl>, <decl><type ref="prev"/><name><name>val</name><index>[<expr><name>ENV_MAX</name></expr>]</index></name></decl>;</decl_stmt>}</block> <decl><name>wk</name></decl>;</struct>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>f</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>env</name></cpp:macro> <cpp:value>wk.val</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_env_val</name><parameter_list>(<parameter><type><name>vname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { typedef char wk_name_offset[(numberof(wk.name) - (numberof(vname) - 1)) * 2 + 1]; WCHAR *const buf = wk.name + sizeof(wk_name_offset) / 2; MEMCPY(buf, vname, WCHAR, numberof(vname) - 1); _wputenv(buf); } while (0)</cpp:value></cpp:define>






<expr_stmt><expr><name><name>wk</name><operator>.</operator><name>eq</name></name> <operator>=</operator> <name>L</name><literal type="char">'='</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"HOME"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"HOMEDRIVE"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"HOMEPATH"</literal></expr></argument>, <argument><expr><name>env</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"USERPROFILE"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>get_special_folder</name><argument_list>(<argument><expr><name>CSIDL_PROFILE</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>get_special_folder</name><argument_list>(<argument><expr><name>CSIDL_PERSONAL</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regulate_path</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_env_val</name><argument_list>(<argument><expr><literal type="string">L"HOME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"USER"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"USERNAME"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>GetUserNameW</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call><operator>,</operator> <operator>&amp;</operator><name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>NTLoginName</name> <operator>=</operator> <literal type="string">"&lt;Unknown&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>set_env_val</name><argument_list>(<argument><expr><literal type="string">L"USER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NTLoginName</name> <operator>=</operator> <call><name>rb_w32_wstr_to_mbstr</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>NTLoginName</name> <operator>=</operator> <call><name>rb_w32_wstr_to_mbstr</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><name>TMPDIR</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"TMP"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"TEMP"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>rb_w32_system_tmpdir</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>set_env_val</name><argument_list>(<argument><expr><name>TMPDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>env</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>set_env_val</name></cpp:undef>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_stdhandle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">80</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>invalid_parameter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>ruby_w32_rtc_error</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name> <name>__cdecl</name></type>
<name>rtc_error_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ruby_w32_rtc_error</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%d: "</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_vcatf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_write_error2</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>CRITICAL_SECTION</name></type> <name>select_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>st_table</name> <modifier>*</modifier></type><name>socklist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>st_table</name> <modifier>*</modifier></type><name>conlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conlist_disabled</name></cpp:macro> <cpp:value>((st_table *)-1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>uenvarea</name></decl>;</decl_stmt>


<struct>struct <name>constat</name> <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>, <decl><type ref="prev"/><name><name>seq</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>reverse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COORD</name></type> <name>saved</name></decl>;</decl_stmt>
}</block> <decl><name>vt100</name></decl>;</struct>
}</block>;</struct>
<enum>enum <block>{<decl><name>constat_init</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>, <decl><name>constat_esc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><name>constat_seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>}</block>;</enum>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>free_conlist</name><parameter_list>(<parameter><decl><type><name>st_data_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator>struct <name>constat</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ST_DELETE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>constat_delete</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>conlist</name> <operator>&amp;&amp;</operator> <name>conlist</name> <operator>!=</operator> <name>conlist_disabled</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>st_data_t</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>h</name></expr></init></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>st_delete</name><argument_list>(<argument><expr><name>conlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>(</operator>struct <name>constat</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>exit_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>select_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uenvarea</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uenvarea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uenvarea</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>vm_exit_handler</name><parameter_list>(<parameter><decl><type><name>ruby_vm_t</name> <modifier>*</modifier></type><name>vm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>socklist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>st_free_table</name><argument_list>(<argument><expr><name>socklist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>socklist</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>conlist</name> <operator>&amp;&amp;</operator> <name>conlist</name> <operator>!=</operator> <name>conlist_disabled</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>st_foreach</name><argument_list>(<argument><expr><name>conlist</name></expr></argument>, <argument><expr><name>free_conlist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>st_free_table</name><argument_list>(<argument><expr><name>conlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>conlist</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>install_vm_exit_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>installed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>installed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ruby_vm_at_exit</name><argument_list>(<argument><expr><name>vm_exit_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>installed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>StartSockets</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WORD</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSADATA</name></type> <name>retdata</name></decl>;</decl_stmt>





<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WSAStartup</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>retdata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"Unable to locate winsock library!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>LOBYTE</name><argument_list>(<argument><expr><name><name>retdata</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"could not find version 2 of winsock dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>select_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>exit_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_SOCKDATA</name><parameter_list>(<parameter><type><name>af</name></type></parameter>, <parameter><type><name>fl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((((int)af)&lt;&lt;4)|((fl)&amp;0xFFFF)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_FAMILY</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(((v)&gt;&gt;4)&amp;0xFFFF))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_FLAGS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((v)&amp;0xFFFF))</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>socklist_insert</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>socklist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>socklist</name> <operator>=</operator> <call><name>st_init_numtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>install_vm_exit_handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>st_insert</name><argument_list>(<argument><expr><name>socklist</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>flag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>socklist_lookup</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_data_t</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>socklist</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>st_lookup</name><argument_list>(<argument><expr><name>socklist</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name>flagp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>socklist_delete</name><parameter_list>(<parameter><decl><type><name>SOCKET</name> <modifier>*</modifier></type><name>sockp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_data_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>st_data_t</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>socklist</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>(</operator><name>st_data_t</name><operator>)</operator><operator>*</operator><name>sockp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flagp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>st_data_t</name><operator>)</operator><operator>*</operator><name>flagp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>st_delete</name><argument_list>(<argument><expr><name>socklist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sockp</name> <operator>=</operator> <operator>(</operator><name>SOCKET</name><operator>)</operator><name>key</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flagp</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>w32_cmdvector</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>UINT</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>void</name></type>
<name>rb_w32_sysinit</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">80</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>set_pioinfo_extra</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_CrtSetReportMode</name><argument_list>(<argument><expr><name>_CRT_ASSERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_set_invalid_parameter_handler</name><argument_list>(<argument><expr><name>invalid_parameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_RTC_SetErrorFunc</name><argument_list>(<argument><expr><name>rtc_error_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_pioinfo_extra</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SetErrorMode</name><argument_list>(<argument><expr><name>SEM_FAILCRITICALERRORS</name><operator>|</operator><name>SEM_NOGPFAULTERRORBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><operator>*</operator><name>argc</name> <operator>=</operator> <call><name>w32_cmdvector</name><argument_list>(<argument><expr><call><name>GetCommandLineW</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>OnigEncodingUTF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_env</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_stdhandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>StartSockets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>getlogin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NTLoginName</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXCHILDNUM</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 


<struct><specifier>static</specifier> struct <name>ChildRecord</name> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>rb_pid_t</name></type> <name>pid</name></decl>;</decl_stmt> 
}</block> <decl><name><name>ChildRecord</name><index>[<expr><name>MAXCHILDNUM</name></expr>]</index></name></decl>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREACH_CHILD</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { struct ChildRecord* v; for (v = ChildRecord; v &lt; ChildRecord + sizeof(ChildRecord) / sizeof(ChildRecord[0]); ++v)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_FOREACH_CHILD</name></cpp:macro> <cpp:value>} while (0)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>ChildRecord</name></name> <modifier>*</modifier></type>
<name>FindChildSlot</name><parameter_list>(<parameter><decl><type><name>rb_pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<macro><name>FOREACH_CHILD</name><argument_list>(<argument>child</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>child</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <expr_stmt><expr><name>END_FOREACH_CHILD</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>ChildRecord</name></name> <modifier>*</modifier></type>
<name>FindChildSlotByHandle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<macro><name>FOREACH_CHILD</name><argument_list>(<argument>child</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name> <operator>==</operator> <name>h</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>child</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <expr_stmt><expr><name>END_FOREACH_CHILD</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>CloseChildHandle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ChildRecord</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>ChildRecord</name></name> <modifier>*</modifier></type>
<name>FindFreeChildSlot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<macro><name>FOREACH_CHILD</name><argument_list>(<argument>child</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>child</name><operator>-&gt;</operator><name>pid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>child</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> <expr_stmt><expr><name>END_FOREACH_CHILD</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>InternalCmdsMax</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>szInternalCmds</name><index>[]</index><index>[<expr><name>InternalCmdsMax</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"\2"</literal> <literal type="string">"assoc"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"break"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"call"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"cd"</literal></expr>,
<expr><literal type="string">"\1"</literal> <literal type="string">"chcp"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"chdir"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"cls"</literal></expr>,
<expr><literal type="string">"\2"</literal> <literal type="string">"color"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"copy"</literal></expr>,
<expr><literal type="string">"\1"</literal> <literal type="string">"ctty"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"date"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"del"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"dir"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"echo"</literal></expr>,
<expr><literal type="string">"\2"</literal> <literal type="string">"endlocal"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"erase"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"exit"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"for"</literal></expr>,
<expr><literal type="string">"\2"</literal> <literal type="string">"ftype"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"goto"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"if"</literal></expr>,
<expr><literal type="string">"\1"</literal> <literal type="string">"lfnfor"</literal></expr>,
<expr><literal type="string">"\1"</literal> <literal type="string">"lh"</literal></expr>,
<expr><literal type="string">"\1"</literal> <literal type="string">"lock"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"md"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"mkdir"</literal></expr>,
<expr><literal type="string">"\2"</literal> <literal type="string">"move"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"path"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"pause"</literal></expr>,
<expr><literal type="string">"\2"</literal> <literal type="string">"popd"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"prompt"</literal></expr>,
<expr><literal type="string">"\2"</literal> <literal type="string">"pushd"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"rd"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"rem"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"ren"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"rename"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"rmdir"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"set"</literal></expr>,
<expr><literal type="string">"\2"</literal> <literal type="string">"setlocal"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"shift"</literal></expr>,
<expr><literal type="string">"\2"</literal> <literal type="string">"start"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"time"</literal></expr>,
<expr><literal type="string">"\2"</literal> <literal type="string">"title"</literal></expr>,
<expr><literal type="string">"\1"</literal> <literal type="string">"truename"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"type"</literal></expr>,
<expr><literal type="string">"\1"</literal> <literal type="string">"unlock"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"ver"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"verify"</literal></expr>,
<expr><literal type="string">"\3"</literal> <literal type="string">"vol"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>internal_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>elem</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>InternalCmdsMax</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_command_com</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">11</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isdirsep</name><argument_list>(<argument><expr><name><name>interp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>strcasecmp</name><argument_list>(<argument><expr><name>interp</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"command.com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>internal_cmd_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nt</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_internal_cmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>cmdname</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name>cmdname</name></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>cmd</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>cmdname</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cmdname</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cmd</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cmd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <case>case <expr><literal type="char">'|'</literal></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case> <case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>internal_cmd_match</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>, <argument><expr><name>nt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>internal_cmd_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nm</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nm</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>, <argument><expr><name>szInternalCmds</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szInternalCmds</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>szInternalCmds</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>szInternalCmds</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>internal_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nm</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>nm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><ternary><condition><expr><name>nt</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>SOCKET</name></type>
<name>rb_w32_get_osfhandle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>join_argv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>escape</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backslash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type>const <modifier>*</modifier><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>, <decl><type ref="prev"/><name>quote</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>argv</name></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <name>cmd</name></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>t</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name> <operator>||</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" \t\"'"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>bs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name>bs</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>n</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>++</operator><name>bs</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <name>bs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <case>case <expr><literal type="char">'|'</literal></expr>:</case> <case>case <expr><literal type="char">'^'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>escape</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>quote</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<default>default:</default>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>CharNextExA</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>backslash</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>backslash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>translate_char</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>cmd</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>cmd</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRNDUPV</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((char *)memcpy(((ptr) = ALLOCV((v), (len) + 1)), (src), (len)))[len] = 0)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_spawn_mode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>P_NOWAIT</name></expr>:</case>
<case>case <expr><name>P_OVERLAY</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>rb_pid_t</name></type>
<name>child_result</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ChildRecord</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>exitcode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>P_OVERLAY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseChildHandle</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><name>exitcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>child</name><operator>-&gt;</operator><name>pid</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>CreateChild</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ChildRecord</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>hInput</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>hOutput</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>hError</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>dwCreationFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>fRet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STARTUPINFOW</name></type> <name>aStartupInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>aProcessInformation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>sa</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>prog</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFAULT</name></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SECURITY_ATTRIBUTES</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aStartupInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aStartupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aProcessInformation</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aProcessInformation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aStartupInfo</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aStartupInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aStartupInfo</name><operator>.</operator><name>dwFlags</name></name> <operator>=</operator> <name>STARTF_USESTDHANDLES</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hInput</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aStartupInfo</name><operator>.</operator><name>hStdInput</name></name> <operator>=</operator> <name>hInput</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>aStartupInfo</name><operator>.</operator><name>hStdInput</name></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hOutput</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aStartupInfo</name><operator>.</operator><name>hStdOutput</name></name> <operator>=</operator> <name>hOutput</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>aStartupInfo</name><operator>.</operator><name>hStdOutput</name></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hError</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>aStartupInfo</name><operator>.</operator><name>hStdError</name></name> <operator>=</operator> <name>hError</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>aStartupInfo</name><operator>.</operator><name>hStdError</name></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dwCreationFlags</name> <operator>|=</operator> <name>NORMAL_PRIORITY_CLASS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstrlenW</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">32767</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>E2BIG</name></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>fRet</name> <operator>=</operator> <call><name>CreateProcessW</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>,
<argument><expr><name><name>sa</name><operator>.</operator><name>bInheritHandle</name></name></expr></argument>, <argument><expr><name>dwCreationFlags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>aStartupInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aProcessInformation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fRet</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>aProcessInformation</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name> <operator>=</operator> <name><name>aProcessInformation</name><operator>.</operator><name>hProcess</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <operator>(</operator><name>rb_pid_t</name><operator>)</operator><name><name>aProcessInformation</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>

<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_batch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmd</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cmd</name><operator>++</operator> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"bat"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"cmd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filecp</name></cpp:macro> <cpp:value>rb_w32_filecp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbstr_to_wstr</name></cpp:macro> <cpp:value>rb_w32_mbstr_to_wstr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wstr_to_mbstr</name></cpp:macro> <cpp:value>rb_w32_wstr_to_mbstr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>acp_to_wstr</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>plen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbstr_to_wstr(CP_ACP, str, -1, plen)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wstr_to_acp</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>plen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wstr_to_mbstr(CP_ACP, str, -1, plen)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filecp_to_wstr</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>plen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbstr_to_wstr(filecp(), str, -1, plen)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wstr_to_filecp</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>plen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wstr_to_mbstr(filecp(), str, -1, plen)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>utf8_to_wstr</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>plen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mbstr_to_wstr(CP_UTF8, str, -1, plen)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wstr_to_utf8</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>plen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wstr_to_mbstr(CP_UTF8, str, -1, plen)</cpp:value></cpp:define>


<function><type><name>MJIT_FUNC_EXPORTED</name> <name>HANDLE</name></type>
<name>rb_w32_start_process</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>abspath</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name><name>struct</name> <name>ChildRecord</name></name></type> <name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wprog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>outHandle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out_fd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>outHandle</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>rb_w32_get_osfhandle</name><argument_list>(<argument><expr><name>out_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>join_argv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>alloca</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>join_argv</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wcmd</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>E2BIG</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wprog</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>abspath</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>E2BIG</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreateChild</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>wcmd</name></expr></argument>, <argument><expr><name>wprog</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>outHandle</name></expr></argument>, <argument><expr><name>outHandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>child</name><operator>.</operator><name>hProcess</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>rb_pid_t</name></type>
<name>w32_spawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>fbuf</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wshell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_pid_t</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd_sep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_spawn_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prog</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>dln_find_exe_r</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <name>prog</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>translate_char</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>redir</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nt</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cmd</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>shell</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"RUBYSHELL"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>redir</name> <operator>=</operator> <call><name>has_redirection</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>shell_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>ALLOCV</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>shell_len</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" -c "</literal></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>shell</name></expr></argument>, <argument><expr><name>shell_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>translate_char</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>shell_len</name></expr></argument>, <argument><expr><literal type="string">" -c \"%s\""</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>shell</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"COMSPEC"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>nt</name> <operator>=</operator> <operator>!</operator><call><name>is_command_com</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call><operator>,</operator>
<operator>(</operator><ternary><condition><expr><name>redir</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>has_redirection</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>redir</name></expr></else></ternary><operator>)</operator> <operator>||</operator>
<call><name>is_internal_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>nt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>ALLOCV</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">" /c "</literal></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>nt</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nt</name></expr> ?</condition><then> <expr><literal type="string">"%s /c \"%s\""</literal></expr> </then><else>: <expr><literal type="string">"%s /c %s"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>shell</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>quote</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'"'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'"'</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>cmd</name> <operator>==</operator> <literal type="char">'\''</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'\''</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>prog</name> <operator>=</operator> <name>cmd</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>quote</name></expr>;</init><condition>;</condition> <incr><expr><name>prog</name> <operator>=</operator> <call><name>CharNextExA</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prog</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>slash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>prog</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>prog</name> <operator>-</operator> <name>cmd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRNDUPV</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>prog</name> <operator>==</operator> <name>quote</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>prog</name><operator>++</operator> <operator>-</operator> <name>cmd</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRNDUPV</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>prog</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"&lt;&gt;|*?\""</literal></expr></argument>, <argument><expr><operator>*</operator><name>prog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>prog</name> <operator>-</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRNDUPV</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>slash</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>cmd_sep</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cmd_sep</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <call><name>dln_find_exe_r</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>slash</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>translate_char</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shell</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><name>cmd</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>quote</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shell</name> <operator>==</operator> <name>fbuf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>fbuf</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>shell</name> <operator>!=</operator> <name>p</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STRNDUPV</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>shell</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>translate_char</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_batch</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>alen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>ALLOCV</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>alen</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>quote</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>shell</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>alen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>shell</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name> <operator>&amp;&amp;</operator> <name>shell</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>wshell</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>shell</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>E2BIG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd_sep</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cmd_sep</name> <operator>=</operator> <name>sep</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name> <operator>&amp;&amp;</operator> <name>cmd</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>wcmd</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>E2BIG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ChildRecord</name></name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>FindFreeChildSlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CreateChild</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>wcmd</name></expr></argument>, <argument><expr><name>wshell</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>child_result</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wshell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>rb_pid_t</name></type>
<name>rb_w32_spawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>w32_spawn</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>rb_pid_t</name></type>
<name>rb_w32_uspawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_spawn</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>rb_pid_t</name></type>
<name>w32_aspawn_flags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c_switch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>ntcmd</name> <init>= <expr><name>FALSE</name></expr></init></decl>, <decl><type ref="prev"/><name>tmpnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shell</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>, <decl><type ref="prev"/><name><name>fbuf</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wprog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_pid_t</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_spawn_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prog</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prog</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>shell</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"COMSPEC"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>internal_cmd_match</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>tmpnt</name> <operator>=</operator> <operator>!</operator><call><name>is_command_com</name><argument_list>(<argument><expr><name>shell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ntcmd</name> <operator>=</operator> <name>tmpnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <name>shell</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c_switch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>cmd</name> <operator>=</operator> <call><name>dln_find_exe_r</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>prog</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>cmd</name> <operator>=</operator> <name>fbuf</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>translate_char</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>cmd</name> <operator>=</operator> <name>fbuf</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STRNDUPV</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>translate_char</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c_switch</name> <operator>||</operator> <call><name>is_batch</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>progs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>progs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>prog</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>progs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>join_argv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>progs</name></expr></argument>, <argument><expr><name>ntcmd</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_switch</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>argv</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>join_argv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>ntcmd</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>ALLOCV</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>join_argv</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>progs</name></expr></argument>, <argument><expr><name>ntcmd</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c_switch</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strlcat</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">" /c"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>join_argv</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <call><name>strlcat</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>ntcmd</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prog</name> <operator>=</operator> <ternary><condition><expr><name>c_switch</name></expr> ?</condition><then> <expr><name>shell</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>join_argv</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>ALLOCV</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>join_argv</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name> <operator>&amp;&amp;</operator> <name>cmd</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>wcmd</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>E2BIG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name> <operator>&amp;&amp;</operator> <name>prog</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>wprog</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>E2BIG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ChildRecord</name></name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>FindFreeChildSlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CreateChild</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>wcmd</name></expr></argument>, <argument><expr><name>wprog</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>child_result</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>rb_pid_t</name></type>
<name>rb_w32_aspawn_flags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>w32_aspawn_flags</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>rb_pid_t</name></type>
<name>rb_w32_uaspawn_flags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_aspawn_flags</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>rb_pid_t</name></type>
<name>rb_w32_aspawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_w32_aspawn_flags</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>rb_pid_t</name></type>
<name>rb_w32_uaspawn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_w32_uaspawn_flags</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><struct>struct <name>_NtCmdLineElement</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>_NtCmdLineElement</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>NtCmdLineElement</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTGLOB</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTMALLOC</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTSTRING</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define> 


<function><type><specifier>static</specifier> <name>int</name></type>
<name>insert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vinfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>NtCmdLineElement</name> <modifier>*</modifier></type><name>tmpcurr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NtCmdLineElement</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>tail</name> <init>= <expr><operator>(</operator><name>NtCmdLineElement</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator><name>vinfo</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmpcurr</name> <operator>=</operator> <operator>(</operator><name>NtCmdLineElement</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NtCmdLineElement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmpcurr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MEMZERO</name><argument_list>(<argument><expr><name>tmpcurr</name></expr></argument>, <argument><expr><name>NtCmdLineElement</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpcurr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpcurr</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tmpcurr</name><operator>-&gt;</operator><name>str</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tmpcurr</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>NTMALLOC</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>*</operator><name>tail</name> <operator>=</operator> <name>tmpcurr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tail</name> <operator>=</operator> <operator>&amp;</operator><name><name>tmpcurr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>NtCmdLineElement</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>cmdglob</name><parameter_list>(<parameter><decl><type><name>NtCmdLineElement</name> <modifier>*</modifier></type><name>patt</name></decl></parameter>, <parameter><decl><type><name>NtCmdLineElement</name> <modifier>*</modifier><modifier>*</modifier></type><name>tail</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NtCmdLineElement</name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name> <init>= <expr><name>tail</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patt</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name>PATH_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>patt</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>patt</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>patt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name><name>patt</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>translate_char</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ruby_brace_glob_with_enc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>insert</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>||</operator> <name>last</name> <operator>==</operator> <name>tail</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>patt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NTMALLOC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patt</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>patt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tail</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>has_redirection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>quote</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>






<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>cmd</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>
<case>case <expr><literal type="char">'\"'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>quote</name> <operator>==</operator> <operator>*</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<case>case <expr><literal type="char">'|'</literal></expr>:</case>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quote</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISALPHA</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>ptr</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <call><name>ISALNUM</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>CharNextExA</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>WCHAR</name> <modifier>*</modifier></type>
<name>skipspace</name><parameter_list>(<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>w32_cmdvector</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>globbing</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elements</name></decl>, <decl><type ref="prev"/><name>strsz</name></decl>, <decl><type ref="prev"/><name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slashes</name></decl>, <decl><type ref="prev"/><name>escape</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>base</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>vptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name>quote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NtCmdLineElement</name> <modifier>*</modifier></type><name>curr</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NtCmdLineElement</name> <modifier>*</modifier></type><name>cmdhead</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>cmdtail</name> <init>= <expr><operator>&amp;</operator><name>cmdhead</name></expr></init></decl>;</decl_stmt>




<while>while <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cmd</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>vec</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>cmdline</name> <operator>=</operator> <call><name>wcsdup</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<while>while <condition>(<expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>skipspace</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>base</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <name>slashes</name> <operator>=</operator> <name>globbing</name> <operator>=</operator> <name>escape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name></expr>;</condition> <incr/>)</control> <block>{<block_content>






<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L</name><literal type="char">'\\'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>quote</name> <operator>!=</operator> <name>L</name><literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>slashes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>L</name><literal type="char">' '</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'\n'</literal></expr>:</case>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quote</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>L</name><literal type="char">'*'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'?'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'['</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'{'</literal></expr>:</case>





<if_stmt><if>if <condition>(<expr><name>quote</name> <operator>!=</operator> <name>L</name><literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>globbing</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>slashes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L</name><literal type="char">'\''</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'\"'</literal></expr>:</case>







<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>slashes</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>quote</name> <operator>==</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>quote</name> <operator>==</operator> <name>L</name><literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>quote</name> <operator>==</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>escape</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>slashes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>CharNextW</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slashes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>







<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>base</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>escape</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>base</name></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>slashes</name> <operator>=</operator> <name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>base</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L</name><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quote</name> <operator>!=</operator> <name>L</name><literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>slashes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>L</name><literal type="char">'\''</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'"'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>slashes</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>quote</name> <operator>&amp;&amp;</operator> <name>quote</name> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>slashes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>slashes</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <operator>(</operator><operator>~</operator><name>slashes</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>base</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>slashes</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>~</operator><name>slashes</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>-=</operator> <operator>(</operator><name>slashes</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>slashes</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>quote</name> <operator>==</operator> <name>L</name><literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>quote</name> <operator>==</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>quote</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>slashes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>CharNextW</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slashes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curr</name> <operator>=</operator> <operator>(</operator><name>NtCmdLineElement</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NtCmdLineElement</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curr</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>do_nothing</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>rb_w32_wstr_to_mbstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curr</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>NTMALLOC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>globbing</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tail</name> <operator>=</operator> <call><name>cmdglob</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>cmdtail</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdtail</name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cmdtail</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdtail</name> <operator>=</operator> <operator>&amp;</operator><name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>







<for>for <control>(<init><expr><name>elements</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>strsz</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>curr</name> <operator>=</operator> <name>cmdhead</name></expr>;</init> <condition><expr><name>curr</name></expr>;</condition> <incr><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>elements</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>strsz</name> <operator>+=</operator> <operator>(</operator><name><name>curr</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>elements</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>strsz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<label><name>do_nothing</name>:</label>
<while>while <condition>(<expr><operator>(</operator><name>curr</name> <operator>=</operator> <name>cmdhead</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cmdhead</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NTMALLOC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>vptr</name> <operator>=</operator> <operator>*</operator><name>vec</name></expr>;</init> <condition><expr><operator>*</operator><name>vptr</name></expr>;</condition> <incr><expr><operator>++</operator><name>vptr</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<return>return <expr><name>vptr</name> <operator>-</operator> <operator>*</operator><name>vec</name></expr>;</return>
</block_content>}</block></if></if_stmt>













<expr_stmt><expr><name>vptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cptr</name> <operator>=</operator> <name>buffer</name> <operator>+</operator> <operator>(</operator><name>elements</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>curr</name> <operator>=</operator> <name>cmdhead</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cptr</name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cptr</name><index>[<expr><name><name>curr</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>vptr</name><operator>++</operator> <operator>=</operator> <name>cptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cptr</name> <operator>+=</operator> <name><name>curr</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cmdhead</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NTMALLOC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>curr</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>vptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vec</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>elements</name></expr>;</return>
</block_content>}</block></function>





<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>get_final_path_func</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>WCHAR</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>get_final_path_func</name></type> <name>get_final_path</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type>
<name>get_final_path_fail</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type>
<name>get_final_path_unknown</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>get_final_path_func</name></type> <name>func</name> <init>= <expr><operator>(</operator><name>get_final_path_func</name><operator>)</operator>
<call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>, <argument><expr><literal type="string">"GetFinalPathNameByHandleW"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>func</name> <operator>=</operator> <name>get_final_path_fail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>get_final_path</name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<return>return <expr><call><name>func</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>get_final_path_func</name></type> <name>get_final_path</name> <init>= <expr><name>get_final_path_unknown</name></expr></init></decl>;</decl_stmt>



<function><type><specifier>static</specifier> <name>HANDLE</name></type>
<name>open_special</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>access</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>share_mode</name> <init>=
<expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name> <operator>|</operator> <name>FILE_SHARE_DELETE</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>CreateFileW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><name>share_mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>,
<argument><expr><name>FILE_FLAG_BACKUP_SEMANTICS</name><operator>|</operator><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetBit</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits)[(i) / CHAR_BIT] &amp; (1 &lt;&lt; (i) % CHAR_BIT))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetBit</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits)[(i) / CHAR_BIT] |= (1 &lt;&lt; (i) % CHAR_BIT))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BitOfIsDir</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) * 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BitOfIsRep</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) * 2 + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRENT_PER_CHAR</name></cpp:macro> <cpp:value>(CHAR_BIT / 2)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>HANDLE</name></type>
<name>open_dir_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>WIN32_FIND_DATAW</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>fullname</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <call><name>rb_strlen_lit</name><argument_list>(<argument><expr><literal type="string">"\\*"</literal></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>open_special</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_final_path</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>PATH_MAX</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt>
<return>return <expr><name>INVALID_HANDLE_VALUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>fullname</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>isdirsep</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name>L</name><literal type="char">':'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>++</operator><name>p</name> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>p</name> <operator>=</operator> <name>L</name><literal type="char">'*'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>p</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fh</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>DIR</name> <modifier>*</modifier></type>
<name>w32_wopendir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stati128</name></name></type> <name>sbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>pathlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>altlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>tmpW</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>wstati128</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sbuf</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IFDIR</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><call><name>ISALPHA</name><argument_list>(<argument><expr><name><name>wpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>wpath</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>L</name><literal type="char">':'</literal> <operator>||</operator> <name><name>wpath</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>L</name><literal type="char">'\0'</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name><name>wpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x5f</literal><operator>)</operator> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <call><name>GetLogicalDrives</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTDIR</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>open_dir_handle</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DIR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<do>do <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name><name>fd</name><operator>.</operator><name>cFileName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>altlen</name> <operator>=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name><name>fd</name><operator>.</operator><name>cAlternateFileName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>tmpW</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><operator>(</operator><name>idx</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>altlen</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmpW</name></expr>)</condition> <block>{<block_content>
<label><name>error</name>:</label>
<expr_stmt><expr><call><name>rb_w32_closedir</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>tmpW</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fd</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>idx</name> <operator>+</operator> <name>len</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fd</name><operator>.</operator><name>cAlternateFileName</name></name></expr></argument>, <argument><expr><name>altlen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>nfiles</name></name> <operator>%</operator> <name>DIRENT_PER_CHAR</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nfiles</name></name> <operator>/</operator> <name>DIRENT_PER_CHAR</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bits</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nfiles</name></name> <operator>/</operator> <name>DIRENT_PER_CHAR</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetBit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><call><name>BitOfIsDir</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nfiles</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>tmppath</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>pathlen</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>, <argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>pathlen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmppath</name><index>[<expr><name>pathlen</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmppath</name> <operator>+</operator> <name>pathlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>fd</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_w32_reparse_symlink_p</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetBit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><call><name>BitOfIsRep</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nfiles</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nfiles</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <name>altlen</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><call><name>FindNextFileW</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>curr</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>UINT</name></type>
<name>filecp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT</name></type> <name>cp</name> <init>= <expr><ternary><condition><expr><call><name>AreFileApisANSI</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>CP_ACP</name></expr> </then><else>: <expr><name>CP_OEMCP</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>rb_w32_wstr_to_mbstr</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>wstr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wstr</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wstr</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>plen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>WCHAR</name> <modifier>*</modifier></type>
<name>rb_w32_mbstr_to_wstr</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>plen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>plen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>DIR</name> <modifier>*</modifier></type>
<name>rb_w32_opendir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name> <init>= <expr><call><name>filecp_to_wstr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wpath</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>w32_wopendir</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>DIR</name> <modifier>*</modifier></type>
<name>rb_w32_uopendir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name> <init>= <expr><call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wpath</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>w32_wopendir</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>move_to_next_entry</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>loc</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name> <operator>+=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name> <operator>+=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name> <operator>&gt;=</operator> <operator>(</operator><name><name>dirp</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>dirp</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>BOOL</name></type>
<name>win32_direct_conv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>alt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>direct</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>UINT</name></type> <name>cp</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>UINT</name> <operator>*</operator><operator>)</operator><name>enc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>d_name</name></name> <operator>=</operator> <call><name>wstr_to_mbstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>d_namlen</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>alt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>alt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>altlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>d_altname</name></name> <operator>=</operator> <call><name>wstr_to_mbstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>alt</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>altlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>d_altlen</name></name> <operator>=</operator> <name>altlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>VALUE</name></type>
<name>rb_w32_conv_from_wchar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>wstr</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>lstrlenW</name><argument_list>(<argument><expr><name>wstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encindex</name> <init>= <expr><call><name>rb_enc_to_index</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>encindex</name> <operator>==</operator> <name>ENCINDEX_UTF_16LE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_enc_str_new</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>wstr</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> long should equal to int on Windows</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><call><name>rb_long2int</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wstr</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>rb_enc_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name>ENCINDEX_UTF_8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wstr</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<switch>switch <condition>(<expr><name>encindex</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ENCINDEX_ASCII</name></expr>:</case>
<case>case <expr><name>ENCINDEX_US_ASCII</name></expr>:</case>

<case>case <expr><name>ENCINDEX_UTF_8</name></expr>:</case>

<return>return <expr><name>src</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>rb_str_conv_enc_opts</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ECONV_UNDEF_REPLACE</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>rb_w32_conv_from_wstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>wstr</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_w32_conv_from_wchar</name><argument_list>(<argument><expr><name>wstr</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>wstr_to_filecp</name><argument_list>(<argument><expr><name>wstr</name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>BOOL</name></type>
<name>ruby_direct_conv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>alt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>direct</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>d_name</name></name> <operator>=</operator> <call><name>rb_w32_conv_from_wstr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>d_namlen</name></name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>alt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>alt</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>altlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>d_altname</name></name> <operator>=</operator> <call><name>rb_w32_conv_from_wstr</name><argument_list>(<argument><expr><name>alt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>altlen</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>d_altlen</name></name> <operator>=</operator> <name>altlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>direct</name></name> <modifier>*</modifier></type>
<name>readdir_internal</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl></parameter>, <parameter><function_decl><type><name>BOOL</name></type> (<modifier>*</modifier><name>conv</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>direct</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dummy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_altname</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_altname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_altname</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_altlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conv</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name></expr></argument>, <argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name> <operator>+</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name></name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_ino</name></name> <operator>=</operator> <name>dummy</name><operator>++</operator></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>GetBit</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><call><name>BitOfIsRep</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>loc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_type</name></name> <operator>=</operator> <name>DT_LNK</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>GetBit</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><call><name>BitOfIsDir</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>loc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_type</name></name> <operator>=</operator> <name>DT_DIR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_type</name></name> <operator>=</operator> <name>DT_REG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





<expr_stmt><expr><call><name>move_to_next_entry</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><operator>(</operator><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>direct</name></name> <modifier>*</modifier></type>
<name>rb_w32_readdir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>rb_enc_to_index</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>ENCINDEX_ASCII</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UINT</name></type> <name>cp</name> <init>= <expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>readdir_internal</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>, <argument><expr><name>win32_direct_conv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>idx</name> <operator>==</operator> <name>ENCINDEX_UTF_8</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UINT</name></type> <name>cp</name> <init>= <expr><name>CP_UTF8</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>readdir_internal</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>, <argument><expr><name>win32_direct_conv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>readdir_internal</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>, <argument><expr><name>ruby_direct_conv</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><name>long</name></type>
<name>rb_w32_telldir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>dirp</name><operator>-&gt;</operator><name>loc</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>rb_w32_seekdir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>loc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>loc</name></name> <operator>&gt;</operator> <name>loc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_w32_rewinddir</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name> <operator>&amp;&amp;</operator> <name><name>dirp</name><operator>-&gt;</operator><name>loc</name></name> <operator>&lt;</operator> <name>loc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>move_to_next_entry</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>rb_w32_rewinddir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>curr</name></name> <operator>=</operator> <name><name>dirp</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirp</name><operator>-&gt;</operator><name>loc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>rb_w32_closedir</name><parameter_list>(<parameter><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dirp</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_altname</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>dirstr</name><operator>.</operator><name>d_altname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dirp</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dirp</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">140</literal></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<union>union
<block>{
<decl_stmt><decl><type><name>FILE</name></type> <name>_public_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>_ptr</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_charbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_bufsiz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>_tmpfname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>_lock</name></decl>;</decl_stmt>
}</block></struct></type> <name>vcruntime_file</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_COUNT</name><parameter_list>(<parameter><type><name>stream</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vcruntime_file*)stream)-&gt;_cnt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_READPTR</name><parameter_list>(<parameter><type><name>stream</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vcruntime_file*)stream)-&gt;_ptr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FILENO</name><parameter_list>(<parameter><type><name>stream</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vcruntime_file*)stream)-&gt;_file</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_COUNT</name><parameter_list>(<parameter><type><name>stream</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stream-&gt;_cnt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_READPTR</name><parameter_list>(<parameter><type><name>stream</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stream-&gt;_ptr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FILENO</name><parameter_list>(<parameter><type><name>stream</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stream-&gt;_file</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">140</literal></expr></cpp:if>
<typedef>typedef <type><name>char</name></type> <name>lowio_text_mode</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name><name>lowio_pipe_lookahead</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intptr_t</name></type> <name>osfhnd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>__int64</name></type> <name>startpos</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>osfile</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>lowio_text_mode</name></type> <name>textmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lowio_pipe_lookahead</name></type> <name>_pipe_lookahead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>unicode</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>utf8translations</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>uint8_t</name></type> <name>dbcsBufferUsed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>dbcsBuffer</name></decl>;</decl_stmt> 
}</block></struct></type> <name>ioinfo</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>intptr_t</name></type> <name>osfhnd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>osfile</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name>pipech</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lockinitflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">80</literal></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name>textmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pipech2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>ioinfo</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>_CRTIMP</name> <operator>||</operator> <name>defined</name> <name>__MINGW32__</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_CRTIMP</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRTIMP</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">140</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>ioinfo</name> <modifier>*</modifier><modifier>*</modifier></type> <name>__pioinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOINFO_L2E</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>EXTERN_C</name> <name>_CRTIMP</name> <name>ioinfo</name> <modifier>*</modifier></type> <name><name>__pioinfo</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOINFO_L2E</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ioinfo</name><modifier>*</modifier></type> <name>_pioinfo</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOINFO_ARRAY_ELTS</name></cpp:macro> <cpp:value>(1 &lt;&lt; IOINFO_L2E)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_osfhnd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_pioinfo(i)-&gt;osfhnd)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_osfile</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_pioinfo(i)-&gt;osfile)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_acrt_lowio_lock_fh</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EnterCriticalSection(&amp;_pioinfo(i)-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_acrt_lowio_unlock_fh</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LeaveCriticalSection(&amp;_pioinfo(i)-&gt;lock)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">80</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>pioinfo_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 


<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_pioinfo_extra</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">140</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_RET</name></cpp:macro> <cpp:value>0xc3</cpp:value></cpp:define> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCRTBASE</name></cpp:macro> <cpp:value>"ucrtbased.dll"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCRTBASE</name></cpp:macro> <cpp:value>"ucrtbase.dll"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>get_proc_address</name><argument_list>(<argument><expr><name>UCRTBASE</name></expr></argument>, <argument><expr><literal type="string">"_isatty"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pend</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN64</name></expr></cpp:if>
<decl_stmt><decl><type><name>int32_t</name></type> <name>rel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rip</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_BEFORE_RET_MARK</name></cpp:macro> <cpp:value>"\x48\x83\xc4"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_SKIP_BYTES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIOINFO_MARK</name></cpp:macro> <cpp:value>"\x48\x8d\x0d"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIOINFO_MARK</name></cpp:macro> <cpp:value>"\x48\x8d\x15"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_BEFORE_RET_MARK</name></cpp:macro> <cpp:value>"\x5d"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_SKIP_BYTES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIOINFO_MARK</name></cpp:macro> <cpp:value>"\x8B\x04\x85"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>pend</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</init> <condition><expr><name>pend</name> <operator>&lt;</operator> <name>p</name> <operator>+</operator> <literal type="number">300</literal></expr>;</condition> <incr><expr><name>pend</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pend</name></expr></argument>, <argument><expr><name>FUNCTION_BEFORE_RET_MARK</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FUNCTION_BEFORE_RET_MARK</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><operator>(</operator><name>pend</name> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>FUNCTION_BEFORE_RET_MARK</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>FUNCTION_SKIP_BYTES</name><operator>)</operator> <operator>&amp;</operator> <name>FUNCTION_RET</name> <operator>==</operator> <name>FUNCTION_RET</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>pend</name> <operator>-=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PIOINFO_MARK</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>pend</name> <operator>&gt;</operator> <name>p</name></expr>;</condition> <incr><expr><name>pend</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pend</name></expr></argument>, <argument><expr><name>PIOINFO_MARK</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PIOINFO_MARK</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>pend</name></expr>;</expr_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unexpected "</literal> <name>UCRTBASE</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>found</name>:</label>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PIOINFO_MARK</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN64</name></expr></cpp:if>
<expr_stmt><expr><name>rel</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rip</name> <operator>=</operator> <name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>__pioinfo</name> <operator>=</operator> <operator>(</operator><name>ioinfo</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>rip</name> <operator>+</operator> <name>rel</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__pioinfo</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ioinfo</name><operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>_open</name><argument_list>(<argument><expr><literal type="string">"NUL"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>pioinfo_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pioinfo_extra</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>pioinfo_extra</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pioinfo_extra</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pioinfo_extra</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pioinfo_extra</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ioinfo</name><modifier>*</modifier></type>
<name>_pioinfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sizeof_ioinfo</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ioinfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>pioinfo_extra</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>ioinfo</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>__pioinfo</name><index>[<expr><name>fd</name> <operator>&gt;&gt;</operator> <name>IOINFO_L2E</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><name>fd</name> <operator>&amp;</operator> <operator>(</operator><name>IOINFO_ARRAY_ELTS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>sizeof_ioinfo</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_set_osfhnd</name><parameter_list>(<parameter><type><name>fh</name></type></parameter>, <parameter><type><name>osfh</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(_osfhnd(fh) = osfh)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_set_osflags</name><parameter_list>(<parameter><type><name>fh</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_osfile(fh) = (flags))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOPEN</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEOFLAG</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPIPE</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNOINHERIT</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAPPEND</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDEV</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTEXT</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define> 

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_socket</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_console</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>int</name></type>
<name>rb_w32_io_cancelable_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_socket</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>is_console</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_w32_open_osfhandle</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type> <name>osfhandle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>fileflags</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hF</name></decl>;</decl_stmt>


<expr_stmt><expr><name>fileflags</name> <operator>=</operator> <name>FDEV</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_APPEND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fileflags</name> <operator>|=</operator> <name>FAPPEND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_TEXT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fileflags</name> <operator>|=</operator> <name>FTEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_NOINHERIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fileflags</name> <operator>|=</operator> <name>FNOINHERIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>hF</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><literal type="string">"NUL"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_ALWAYS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>hF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMFILE</name></expr>;</expr_stmt> 
<expr_stmt><expr><name>_doserrno</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt> 
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_acrt_lowio_lock_fh</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_set_osfhnd</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>osfhandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fileflags</name> <operator>|=</operator> <name>FOPEN</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>_set_osflags</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>fileflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>fh</name></expr>;</return> 
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_stdhandle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nullfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open_null</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((nullfd &lt; 0) ? (nullfd = open("NUL", O_RDWR)) : 0), ((nullfd == (fd)) ? (keep = 1) : dup2(nullfd, fd)), (fd))</cpp:value></cpp:define>





<if_stmt><if>if <condition>(<expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FILE_FILENO</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>open_null</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>setmode</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FILE_FILENO</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>open_null</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FILE_FILENO</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>open_null</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nullfd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>keep</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>nullfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getsockopt</name></cpp:undef>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_socket</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>socklist_lookup</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_is_socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>is_socket</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strerror</name></cpp:undef>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>rb_w32_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>source</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>e</name></expr></argument> &gt;</argument_list></name> <name>sys_nerr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WSAEWOULDBLOCK</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <name>EADDRINUSE</name> <operator>&amp;&amp;</operator> <name>e</name> <operator>&lt;=</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>s</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>errmap</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>errmap</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>errmap</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>winerr</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>errmap</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>errmap</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>errmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>err</name> <operator>==</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>errmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>winerr</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>
<name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><name>e</name></expr></argument>,
<argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_ENGLISH</name></expr></argument>, <argument><expr><name>SUBLANG_ENGLISH_US</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator>
<name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"Unknown Error"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strpbrk</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROOT_UID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROOT_GID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<function><type><name>rb_uid_t</name></type>
<name>getuid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ROOT_UID</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>rb_uid_t</name></type>
<name>geteuid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ROOT_UID</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>rb_gid_t</name></type>
<name>getgid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ROOT_GID</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>rb_gid_t</name></type>
<name>getegid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>ROOT_GID</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>setuid</name><parameter_list>(<parameter><decl><type><name>rb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>uid</name> <operator>==</operator> <name>ROOT_UID</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>setgid</name><parameter_list>(<parameter><decl><type><name>rb_gid_t</name></type> <name>gid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>gid</name> <operator>==</operator> <name>ROOT_GID</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>ioctl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_w32_fdset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_CLR</name></cpp:undef>


<function><type><name>void</name></type>
<name>rb_w32_fdclr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name> <init>= <expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>set</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>set</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>set</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>set</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><operator>--</operator><name><name>set</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FD_ISSET</name></cpp:undef>


<function><type><name>int</name></type>
<name>rb_w32_fdisset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name> <init>= <expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <operator>(</operator><name>SOCKET</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RUBY_CRITICAL</name><argument_list>(<argument><expr><name>ret</name> <operator>=</operator> <call><name>__WSAFDIsSet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>rb_w32_fd_copy</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fd_set</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fd_count</name></name></expr></argument>, <argument><expr><operator>(</operator><name>UINT</name><operator>)</operator><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>UINT</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>capa</name></name> <operator>&lt;</operator> <operator>(</operator><name>UINT</name><operator>)</operator><name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>capa</name></name> <operator>=</operator> <operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>/</operator> <name>FD_SETSIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>FD_SETSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SOCKET</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>capa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_array</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>fd_array</name></name></expr></argument>,
<argument><expr><name>max</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>rb_w32_fd_dup</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_fdset_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>UINT</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>capa</name></name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>capa</name></name> <operator>=</operator> <operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>/</operator> <name>FD_SETSIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>FD_SETSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SOCKET</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>capa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_array</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_array</name></name></expr></argument>,
<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</expr_stmt>
</block_content>}</block></function>







<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>select</name></cpp:undef>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>extract_fd</name><parameter_list>(<parameter><decl><type><name>rb_fdset_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>SOCKET</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>fd_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>fd</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name> <operator>||</operator> <call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition> <block>{<block_content> 
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>d</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>d</name></expr>]</index></name> <operator>==</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&gt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>capa</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>capa</name></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>/</operator> <name>FD_SETSIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>FD_SETSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SOCKET</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>capa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><operator>--</operator><name><name>src</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>m</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><name>dst</name></expr> ?</condition><then> <expr><name><name>dst</name><operator>-&gt;</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name></expr> </then><else>: <expr><name>m</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_fd</name><parameter_list>(<parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name> <operator>||</operator> <operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>fd</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>d</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>d</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name>d</name></expr>]</index></name> <operator>==</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name><name>dst</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;</operator> <name>FD_SETSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fd_array</name><index>[<expr><name><name>dst</name><operator>-&gt;</operator><name>fd_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name><name>dst</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_not_socket</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>!</operator><call><name>is_socket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_pipe</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>GetFileType</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FILE_TYPE_PIPE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_readable_pipe</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>PeekNamedPipe</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_BROKEN_PIPE</name><operator>)</operator></expr>;</expr_stmt> 
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_console</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>ir</name></decl>;</decl_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>PeekConsoleInput</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_readable_console</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>ir</name></decl>;</decl_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>PeekConsoleInput</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>KEY_EVENT</name> <operator>&amp;&amp;</operator> <name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name> <operator>&amp;&amp;</operator>
<name><name>ir</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>ReadConsoleInput</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_invalid_handle</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_select</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>ex</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nfds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_w32_sleep</name><argument_list>(<argument><expr><name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_w32_sleep</name><argument_list>(<argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>select_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>select_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>rb_w32_time_subtract</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>rest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>wait</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rest</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name><name>wait</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name><name>rest</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&lt;</operator> <name><name>wait</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rest</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&lt;=</operator> <name><name>wait</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rest</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rest</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>+=</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>rest</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>-=</operator> <name><name>wait</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rest</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>-=</operator> <name><name>wait</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<return>return <expr><name><name>rest</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rest</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name><name>t2</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&gt;</operator> <name><name>t2</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&lt;</operator> <name><name>t2</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;</operator> <name><name>t2</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Sleep</name></cpp:undef>

<function_decl><type><name>int</name></type> <name>rb_w32_check_interrupt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 



<function><type><name>int</name></type>
<name>rb_w32_select_with_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>ex</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>th</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name></type> <name>pipe_rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name></type> <name>cons_rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name></type> <name>else_rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name></type> <name>else_wr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_fdset_t</name></type> <name>except</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nonsock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>limit</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nfds</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>timeout</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>limit</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>limit</name><operator>.</operator><name>tv_usec</name></name> <operator>+=</operator> <name><name>timeout</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>limit</name><operator>.</operator><name>tv_usec</name></name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>limit</name><operator>.</operator><name>tv_usec</name></name> <operator>-=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>limit</name><operator>.</operator><name>tv_sec</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><call><name>rb_fd_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>else_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nonsock</name> <operator>+=</operator> <call><name>extract_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>else_rd</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>is_not_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_fd_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>else_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nonsock</name> <operator>+=</operator> <call><name>extract_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>else_wr</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>, <argument><expr><name>is_not_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>extract_fd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>else_rd</name><operator>.</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>is_invalid_handle</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>extract_fd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>else_wr</name><operator>.</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>is_invalid_handle</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>else_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>else_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_fd_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pipe_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pipe_rd</name></expr></argument>, <argument><expr><name><name>else_rd</name><operator>.</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>is_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rb_fd_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cons_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cons_rd</name></expr></argument>, <argument><expr><name><name>else_rd</name><operator>.</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>is_console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rb_fd_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>except</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>except</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>is_not_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>rd</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>rd</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wr</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>wr</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ex</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>ex</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nfds</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nfds</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>rest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>wait</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>zero</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>&amp;&amp;</operator> <call><name>rb_w32_check_interrupt</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nonsock</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>extract_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>else_rd</name></expr></argument>, <argument><expr><name><name>pipe_rd</name><operator>.</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>is_readable_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>else_rd</name></expr></argument>, <argument><expr><name><name>cons_rd</name><operator>.</operator><name>fdset</name></name></expr></argument>, <argument><expr><name>is_readable_console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>else_rd</name><operator>.</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name> <operator>||</operator> <name><name>else_wr</name><operator>.</operator><name>fdset</name><operator>-&gt;</operator><name>fd_count</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>do_select</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>copy_fd</name><argument_list>(<argument><expr><name>rd</name></expr></argument>, <argument><expr><name><name>else_rd</name><operator>.</operator><name>fdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>copy_fd</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><name><name>else_wr</name><operator>.</operator><name>fdset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>ex</name><operator>-&gt;</operator><name>fd_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>dowait</name> <init>= <expr><operator>&amp;</operator><name>wait</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>orig_rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>orig_wr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fd_set</name></type> <name>orig_ex</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rd</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>copy_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_rd</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>copy_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_wr</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>copy_fd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_ex</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>do_select</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>rd</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>copy_fd</name><argument_list>(<argument><expr><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>wr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>copy_fd</name><argument_list>(<argument><expr><name>wr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ex</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>copy_fd</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>orig_ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rest</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_w32_time_subtract</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wait</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dowait</name> <operator>=</operator> <operator>&amp;</operator><name>rest</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name><name>dowait</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <operator>(</operator><name><name>dowait</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block>

<expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>except</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cons_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pipe_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>else_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_fd_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>else_rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_select</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>wr</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>ex</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_w32_select_with_thread</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>wr</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>FARPROC</name></type>
<name>get_wsa_extension_function</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GUID</name> <modifier>*</modifier></type><name>guid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dmy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FARPROC</name></type> <name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WSAIoctl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SIO_GET_EXTENSION_FUNCTION_POINTER</name></expr></argument>, <argument><expr><name>guid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>guid</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>accept</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_accept</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SetHandleInformation</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>rb_w32_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_BINARY</name><operator>|</operator><name>O_NOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>socklist_insert</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bind</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_bind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>connect</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>connect</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>WSAEWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINPROGRESS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getpeername</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_getpeername</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>getpeername</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getsockname</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_getsockname</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>wsaerror</name> <init>= <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wsaerror</name> <operator>==</operator> <name>WSAEINVAL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>socklist_lookup</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>af</name> <init>= <expr><call><name>GET_FAMILY</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>af</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>*</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>=</operator> <name>af</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>wsaerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getsockopt</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_getsockopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>optval</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>optlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>optval</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ioctlsocket</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_ioctlsocket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>u_long</name> <modifier>*</modifier></type><name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ioctlsocket</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>listen</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_listen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>listen</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>recv</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>recvfrom</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>send</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sendto</name></cpp:undef>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>finish_overlapped_socket</name><parameter_list>(<parameter><decl><type><name>BOOL</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>SOCKET</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>WSAOVERLAPPED</name> <modifier>*</modifier></type><name>wol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>WSA_IO_PENDING</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>rb_w32_wait_events_blocking</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wol</name><operator>-&gt;</operator><name>hEvent</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WAIT_OBJECT_0</name></expr>:</case>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WSAGetOverlappedResult</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>wol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>SOCKET_ERROR</name></expr>;</expr_stmt>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>WSAECONNABORTED</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>WSAEMSGSIZE</name> <operator>&amp;&amp;</operator> <name>input</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<case>case <expr><name>WAIT_OBJECT_0</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CancelIo</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>WSAECONNABORTED</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>wol</name><operator>-&gt;</operator><name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>overlapped_socket_io</name><parameter_list>(<parameter><decl><type><name>BOOL</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSAOVERLAPPED</name></type> <name>wol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSABUF</name></type> <name>wbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>socklist_lookup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_FLAGS</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>O_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name>addrlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name>addrlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>WSAECONNABORTED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rlen</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wbuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wbuf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name><name>wol</name><operator>.</operator><name>hEvent</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flg</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name>addrlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WSARecvFrom</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flg</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WSARecv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <name>addrlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WSASendTo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>*</operator><name>addrlen</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WSASend</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>finish_overlapped_socket</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rlen</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>rlen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_recv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>overlapped_socket_io</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_recvfrom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fromlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>overlapped_socket_io</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_send</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>overlapped_socket_io</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_sendto</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tolen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>overlapped_socket_io</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>to</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tolen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSG_TRUNC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>SOCKADDR</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSABUF</name> <modifier>*</modifier></type><name>lpBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBufferCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSABUF</name></type> <name>Control</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl>;</decl_stmt>
}</block></struct></type> <name>WSAMSG</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WSAID_WSARECVMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSAID_WSARECVMSG</name></cpp:macro> <cpp:value>{0xf689d7c8,0x6f1f,0x436b,{0x8a,0x53,0xe5,0x4f,0xe3,0x51,0xc3,0x22}}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WSAID_WSASENDMSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSAID_WSASENDMSG</name></cpp:macro> <cpp:value>{0xa441e712,0x754f,0x43ca,{0x84,0xa7,0x0d,0xee,0x44,0xcf,0x60,0x6d}}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>msghdr_to_wsamsg</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>wsamsg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; (wsamsg)-&gt;name = (msg)-&gt;msg_name; (wsamsg)-&gt;namelen = (msg)-&gt;msg_namelen; (wsamsg)-&gt;lpBuffers = ALLOCA_N(WSABUF, (msg)-&gt;msg_iovlen); (wsamsg)-&gt;dwBufferCount = (msg)-&gt;msg_iovlen; for (i = 0; i &lt; (msg)-&gt;msg_iovlen; ++i) { (wsamsg)-&gt;lpBuffers[i].buf = (msg)-&gt;msg_iov[i].iov_base; (wsamsg)-&gt;lpBuffers[i].len = (msg)-&gt;msg_iov[i].iov_len; } (wsamsg)-&gt;Control.buf = (msg)-&gt;msg_control; (wsamsg)-&gt;Control.len = (msg)-&gt;msg_controllen; (wsamsg)-&gt;dwFlags = (msg)-&gt;msg_flags; } while (0)</cpp:value></cpp:define>
















<function><type><name>int</name></type>
<name>recvmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>WSAAPI</name> <modifier>*</modifier><name>WSARecvMsg_t</name>)<parameter_list>(<parameter><decl><type><name>SOCKET</name></type></decl></parameter>, <parameter><decl><type><name>WSAMSG</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>WSAOVERLAPPED</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>LPWSAOVERLAPPED_COMPLETION_ROUTINE</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>WSARecvMsg_t</name></type> <name>pWSARecvMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSAMSG</name></type> <name>wsamsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pWSARecvMsg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>GUID</name></type> <name>guid</name> <init>= <expr><name>WSAID_WSARECVMSG</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pWSARecvMsg</name> <operator>=</operator> <operator>(</operator><name>WSARecvMsg_t</name><operator>)</operator><call><name>get_wsa_extension_function</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pWSARecvMsg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msghdr_to_wsamsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsamsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wsamsg</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>socklist_lookup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_FLAGS</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>O_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pWSARecvMsg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsamsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSAOVERLAPPED</name></type> <name>wol</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name><name>wol</name><operator>.</operator><name>hEvent</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pWSARecvMsg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsamsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>finish_overlapped_socket</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_name</name></name> <operator>=</operator> <name><name>wsamsg</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_namelen</name></name> <operator>=</operator> <name><name>wsamsg</name><operator>.</operator><name>namelen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_flags</name></name> <operator>=</operator> <name><name>wsamsg</name><operator>.</operator><name>dwFlags</name></name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>sendmsg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>WSAAPI</name> <modifier>*</modifier><name>WSASendMsg_t</name>)<parameter_list>(<parameter><decl><type><name>SOCKET</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WSAMSG</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>WSAOVERLAPPED</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>LPWSAOVERLAPPED_COMPLETION_ROUTINE</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>WSASendMsg_t</name></type> <name>pWSASendMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSAMSG</name></type> <name>wsamsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pWSASendMsg</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>GUID</name></type> <name>guid</name> <init>= <expr><name>WSAID_WSASENDMSG</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pWSASendMsg</name> <operator>=</operator> <operator>(</operator><name>WSASendMsg_t</name><operator>)</operator><call><name>get_wsa_extension_function</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pWSASendMsg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msghdr_to_wsamsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsamsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>socklist_lookup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GET_FLAGS</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>O_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pWSASendMsg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsamsg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSAOVERLAPPED</name></type> <name>wol</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name><name>wol</name><operator>.</operator><name>hEvent</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pWSASendMsg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsamsg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><call><name>finish_overlapped_socket</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wol</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>setsockopt</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_setsockopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>optval</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>shutdown</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>shutdown</name><argument_list>(<argument><expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>SOCKET</name></type>
<name>open_ifs_socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>proto_buffers_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>out</name> <init>= <expr><name>INVALID_SOCKET</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WSAEnumProtocols</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proto_buffers_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error_code</name> <operator>=</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>WSAENOBUFS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WSAPROTOCOL_INFO</name> <modifier>*</modifier></type><name>proto_buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>protocols_available</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>proto_buffers</name> <operator>=</operator> <operator>(</operator><name>WSAPROTOCOL_INFO</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>proto_buffers_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proto_buffers</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>WSASetLastError</name><argument_list>(<argument><expr><name>WSA_NOT_ENOUGH_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INVALID_SOCKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>protocols_available</name> <operator>=</operator>
<call><name>WSAEnumProtocols</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>proto_buffers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proto_buffers_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>protocols_available</name> <operator>!=</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>protocols_available</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>af</name> <operator>!=</operator> <name>AF_UNSPEC</name> <operator>&amp;&amp;</operator> <name>af</name> <operator>!=</operator> <name><name>proto_buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iAddressFamily</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>type</name> <operator>!=</operator> <name><name>proto_buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iSocketType</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>protocol</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>protocol</name> <operator>!=</operator> <name><name>proto_buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iProtocol</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>proto_buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dwServiceFlags1</name> <operator>&amp;</operator> <name>XP1_IFS_HANDLES</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>WSASocket</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>proto_buffers</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>WSA_FLAG_OVERLAPPED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>WSASocket</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetHandleInformation</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>out</name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proto_buffers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>socket</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>open_ifs_socket</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>rb_w32_open_osfhandle</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_BINARY</name><operator>|</operator><name>O_NOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>socklist_insert</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>MAKE_SOCKDATA</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>gethostbyaddr</name></cpp:undef>


<function><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier> <name>WSAAPI</name></type>
<name>rb_w32_gethostbyaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>gethostbyaddr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>gethostbyname</name></cpp:undef>


<function><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier> <name>WSAAPI</name></type>
<name>rb_w32_gethostbyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>gethostname</name></cpp:undef>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_gethostname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>gethostname</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getprotobyname</name></cpp:undef>


<function><type><name><name>struct</name> <name>protoent</name></name> <modifier>*</modifier> <name>WSAAPI</name></type>
<name>rb_w32_getprotobyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>protoent</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>getprotobyname</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getprotobynumber</name></cpp:undef>


<function><type><name><name>struct</name> <name>protoent</name></name> <modifier>*</modifier> <name>WSAAPI</name></type>
<name>rb_w32_getprotobynumber</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>protoent</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>getprotobynumber</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getservbyname</name></cpp:undef>


<function><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier> <name>WSAAPI</name></type>
<name>rb_w32_getservbyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>getservbyname</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getservbyport</name></cpp:undef>


<function><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier> <name>WSAAPI</name></type>
<name>rb_w32_getservbyport</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>getservbyport</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>socketpair_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>SOCKET</name> <modifier>*</modifier></type><name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>svr</name> <init>= <expr><name>INVALID_SOCKET</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>INVALID_SOCKET</name></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name>INVALID_SOCKET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sock_in4</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sock_in6</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>af</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>PF_INET</name> <operator>&amp;&amp;</operator> <name>PF_INET</name> <operator>!=</operator> <name>AF_INET</name></expr></cpp:if>
<case>case <expr><name>PF_INET</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sock_in4</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock_in4</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock_in4</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>INADDR_LOOPBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sock_in4</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sock_in4</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sock_in6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sock_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock_in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock_in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name>IN6ADDR_LOOPBACK_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sock_in6</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sock_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>SOCK_STREAM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPROTOTYPE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SOCKET</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SOCKET</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>svr</name> <operator>=</operator> <call><name>open_ifs_socket</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>svr</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>svr</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>svr</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>SOCK_STREAM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>listen</name><argument_list>(<argument><expr><name>svr</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>open_ifs_socket</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>svr</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetHandleInformation</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>sv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>svr</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>svr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>socketpair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name><name>pair</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>socketpair_internal</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>pair</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_w32_open_osfhandle</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_BINARY</name><operator>|</operator><name>O_NOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>rb_w32_open_osfhandle</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_BINARY</name><operator>|</operator><name>O_NOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_w32_close</name><argument_list>(<argument><expr><name><name>sv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>socklist_insert</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>MAKE_SOCKDATA</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>socklist_insert</name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>MAKE_SOCKDATA</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>str2guid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>GUID</name> <modifier>*</modifier></type><name>guid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hex2byte</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((isdigit(*(str)) ? *(str) - '0' : toupper(*(str)) - 'A' + 10) &lt;&lt; 4 | (isdigit(*((str) + 1)) ? *((str) + 1) - '0' : toupper(*((str) + 1)) - 'A' + 10))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>guid</name><operator>-&gt;</operator><name>Data1</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>guid</name><operator>-&gt;</operator><name>Data2</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>guid</name><operator>-&gt;</operator><name>Data3</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>hex2byte</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>hex2byte</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>guid</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>hex2byte</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_NET_LUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Value</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Reserved</name> <range>:<expr><literal type="number">24</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>NetLuidIndex</name> <range>:<expr><literal type="number">24</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>IfType</name> <range>:<expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><name>Info</name></decl>;</struct>
}</block></struct></type> <name>NET_LUID</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>cigl_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GUID</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>NET_LUID</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>cilnA_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NET_LUID</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>cigl_t</name></type> <name>pConvertInterfaceGuidToLuid</name> <init>= <expr><operator>(</operator><name>cigl_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>cilnA_t</name></type> <name>pConvertInterfaceLuidToNameA</name> <init>= <expr><operator>(</operator><name>cilnA_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>getifaddrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ifap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULONG</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IP_ADAPTER_ADDRESSES</name> <modifier>*</modifier></type><name>root</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetAdaptersAddresses</name><argument_list>(<argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ERROR_BUFFER_OVERFLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>ruby_xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetAdaptersAddresses</name><argument_list>(<argument><expr><name>AF_UNSPEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pConvertInterfaceGuidToLuid</name> <operator>==</operator> <operator>(</operator><name>cigl_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pConvertInterfaceGuidToLuid</name> <operator>=</operator>
<operator>(</operator><name>cigl_t</name><operator>)</operator><call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"iphlpapi.dll"</literal></expr></argument>,
<argument><expr><literal type="string">"ConvertInterfaceGuidToLuid"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pConvertInterfaceLuidToNameA</name> <operator>==</operator> <operator>(</operator><name>cilnA_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pConvertInterfaceLuidToNameA</name> <operator>=</operator>
<operator>(</operator><name>cilnA_t</name><operator>)</operator><call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"iphlpapi.dll"</literal></expr></argument>,
<argument><expr><literal type="string">"ConvertInterfaceLuidToNameA"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>addr</name> <operator>=</operator> <name>root</name></expr>;</init> <condition><expr><name>addr</name></expr>;</condition> <incr><expr><name>addr</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>Next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><call><name>ruby_xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ifa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name></type> <name>guid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NET_LUID</name></type> <name>luid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>ifa_next</name></name> <operator>=</operator> <name>ifa</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ifap</name> <operator>=</operator> <name>ifa</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>str2guid</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>AdapterName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pConvertInterfaceGuidToLuid</name> <operator>&amp;&amp;</operator> <name>pConvertInterfaceLuidToNameA</name> <operator>&amp;&amp;</operator>
<call><name>pConvertInterfaceGuidToLuid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>luid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NO_ERROR</name> <operator>&amp;&amp;</operator>
<call><name>pConvertInterfaceLuidToNameA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>luid</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name> <operator>=</operator> <call><name>ruby_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name> <operator>=</operator> <call><name>ruby_strdup</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>AdapterName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>IfType</name></name> <operator>&amp;</operator> <name>IF_TYPE_SOFTWARE_LOOPBACK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name> <operator>|=</operator> <name>IFF_LOOPBACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>OperStatus</name></name> <operator>==</operator> <name>IfOperStatusUp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name> <operator>|=</operator> <name>IFF_UP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>FirstUnicastAddress</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>IP_ADAPTER_UNICAST_ADDRESS</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>added</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>FirstUnicastAddress</name></name></expr>;</init> <condition><expr><name>cur</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>Next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>Flags</name></name> <operator>&amp;</operator> <name>IP_ADAPTER_ADDRESS_TRANSIENT</name> <operator>||</operator>
<name><name>cur</name><operator>-&gt;</operator><name>DadState</name></name> <operator>==</operator> <name>IpDadStateDeprecated</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>added</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>ifa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ifa</name> <operator>=</operator> <call><name>ruby_xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ifa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>ifa_next</name></name> <operator>=</operator> <name>ifa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name> <operator>=</operator> <call><name>ruby_strdup</name><argument_list>(<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>ifa_flags</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name> <operator>=</operator> <call><name>ruby_xmalloc</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>Address</name><operator>.</operator><name>iSockaddrLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>Address</name><operator>.</operator><name>lpSockaddr</name></name></expr></argument>,
<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>Address</name><operator>.</operator><name>iSockaddrLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>ifa</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>freeifaddrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>ifp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>ifp</name><operator>-&gt;</operator><name>ifa_next</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifp</name><operator>-&gt;</operator><name>ifa_name</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>ifp</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>ifp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ifp</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>void</name></type> <name>endhostent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>endnetent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>endprotoent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>endservent</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name><name>struct</name> <name>netent</name></name> <modifier>*</modifier></type><name>getnetent</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><operator>(</operator>struct <name>netent</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content>}</block></function>

<function><type><name><name>struct</name> <name>netent</name></name> <modifier>*</modifier></type><name>getnetbyaddr</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>net</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><operator>(</operator>struct <name>netent</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</return></block_content>}</block></function>

<function><type><name><name>struct</name> <name>netent</name></name> <modifier>*</modifier></type><name>getnetbyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><operator>(</operator>struct <name>netent</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr>;</return></block_content>}</block></function>

<function><type><name><name>struct</name> <name>protoent</name></name> <modifier>*</modifier></type><name>getprotoent</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><operator>(</operator>struct <name>protoent</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content>}</block></function>

<function><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier></type><name>getservent</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><operator>(</operator>struct <name>servent</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content>}</block></function>

<function><type><name>void</name></type> <name>sethostent</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>stayopen</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>void</name></type> <name>setnetent</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>stayopen</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>void</name></type> <name>setprotoent</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>stayopen</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>void</name></type> <name>setservent</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>stayopen</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>setfl</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>af</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>ioctlArg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>socklist_lookup</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>af</name> <operator>=</operator> <call><name>GET_FAMILY</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>GET_FLAGS</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;</operator> <name>O_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ioctlArg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>&amp;=</operator> <operator>~</operator><name>O_NONBLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ioctlArg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctlsocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ioctlArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>socklist_insert</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><call><name>MAKE_SOCKDATA</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>dupfd</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hDup</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fds</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>hDup</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>FOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>close_fds_and_return</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <name>minfd</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>close_fds_and_return</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fds</name><index>[<expr><name>filled</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>filled</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>numberof</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dupfd</name><argument_list>(<argument><expr><name>hDup</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>minfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>close_fds_and_return</name>:</label>
<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>filled</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>fds</name><index>[<expr><operator>--</operator><name>filled</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_set_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>fcntl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flag</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>F_SETFL</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name> <init>= <expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_socket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>setfl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>
<case>case <expr><name>F_DUPFD</name></expr>:</case> <case>case <expr><name>F_DUPFD_CLOEXEC</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hDup</name></decl>;</decl_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>DuplicateHandle</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>hDup</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,
<argument><expr><name>cmd</name> <operator>==</operator> <name>F_DUPFD</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>FNOINHERIT</name><operator>)</operator></expr></argument>,
<argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>!=</operator> <name>F_DUPFD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>FNOINHERIT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>&amp;=</operator> <operator>~</operator><name>FNOINHERIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dupfd</name><argument_list>(<argument><expr><name>hDup</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hDup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block>
<case>case <expr><name>F_GETFD</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>h</name> <init>= <expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetHandleInformation</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>HANDLE_FLAG_INHERIT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>FD_CLOEXEC</name></expr></else></ternary></expr>;</return>
</block_content>}</block>
<case>case <expr><name>F_SETFD</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>SIGNED_VALUE</name></type> <name>h</name> <init>= <expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetHandleInformation</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><name>HANDLE_FLAG_INHERIT</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>FD_CLOEXEC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>HANDLE_FLAG_INHERIT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;</operator> <name>FD_CLOEXEC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>FNOINHERIT</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <operator>~</operator><name>FNOINHERIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_set_nonblock2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name> <init>= <expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_socket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>setfl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nonblock</name></expr> ?</condition><then> <expr><name>O_NONBLOCK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>is_pipe</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>state</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetNamedPipeHandleState</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nonblock</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>|=</operator> <name>PIPE_NOWAIT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>state</name> <operator>&amp;=</operator> <operator>~</operator><name>PIPE_NOWAIT</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetNamedPipeHandleState</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_w32_set_nonblock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rb_w32_set_nonblock2</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WNOHANG</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>rb_pid_t</name></type>
<name>poll_child_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ChildRecord</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat_loc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>exitcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exitcode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ERROR_INVALID_PARAMETER</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECHILD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ERROR_INVALID_HANDLE</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<label><name>error_exit</name>:</label>
<expr_stmt><expr><call><name>CloseChildHandle</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>exitcode</name> <operator>!=</operator> <name>STILL_ACTIVE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_w32_wait_events_blocking</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error_exit</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseChildHandle</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stat_loc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>stat_loc</name> <operator>=</operator> <name>exitcode</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exitcode</name> <operator>&amp;</operator> <literal type="number">0xC0000000</literal></expr>)</condition> <block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sig</name></decl>;</decl_stmt>
}</block> <decl><name><name>table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>STATUS_ACCESS_VIOLATION</name></expr>, <expr><name>SIGSEGV</name></expr>}</block></expr>,
<expr><block>{<expr><name>STATUS_ILLEGAL_INSTRUCTION</name></expr>, <expr><name>SIGILL</name></expr>}</block></expr>,
<expr><block>{<expr><name>STATUS_PRIVILEGED_INSTRUCTION</name></expr>, <expr><name>SIGILL</name></expr>}</block></expr>,
<expr><block>{<expr><name>STATUS_FLOAT_DENORMAL_OPERAND</name></expr>, <expr><name>SIGFPE</name></expr>}</block></expr>,
<expr><block>{<expr><name>STATUS_FLOAT_DIVIDE_BY_ZERO</name></expr>, <expr><name>SIGFPE</name></expr>}</block></expr>,
<expr><block>{<expr><name>STATUS_FLOAT_INEXACT_RESULT</name></expr>, <expr><name>SIGFPE</name></expr>}</block></expr>,
<expr><block>{<expr><name>STATUS_FLOAT_INVALID_OPERATION</name></expr>, <expr><name>SIGFPE</name></expr>}</block></expr>,
<expr><block>{<expr><name>STATUS_FLOAT_OVERFLOW</name></expr>, <expr><name>SIGFPE</name></expr>}</block></expr>,
<expr><block>{<expr><name>STATUS_FLOAT_STACK_CHECK</name></expr>, <expr><name>SIGFPE</name></expr>}</block></expr>,
<expr><block>{<expr><name>STATUS_FLOAT_UNDERFLOW</name></expr>, <expr><name>SIGFPE</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STATUS_FLOAT_MULTIPLE_FAULTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>STATUS_FLOAT_MULTIPLE_FAULTS</name></expr>, <expr><name>SIGFPE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STATUS_FLOAT_MULTIPLE_TRAPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><name>STATUS_FLOAT_MULTIPLE_TRAPS</name></expr>, <expr><name>SIGFPE</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>STATUS_CONTROL_C_EXIT</name></expr>, <expr><name>SIGINT</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>numberof</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <name>exitcode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>stat_loc</name> <operator>|=</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sig</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>numberof</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>stat_loc</name> <operator>|=</operator> <name>SIGSEGV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>rb_pid_t</name></type>
<name>waitpid</name><parameter_list>(<parameter><decl><type><name>rb_pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat_loc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>timeout</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>WNOHANG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>INFINITE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>events</name><index>[<expr><name>MAXCHILDNUM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ChildRecord</name></name><modifier>*</modifier></type> <name>cause</name></decl>;</decl_stmt>

<macro><name>FOREACH_CHILD</name><argument_list>(<argument>child</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>child</name><operator>-&gt;</operator><name>pid</name></name> <operator>||</operator> <name><name>child</name><operator>-&gt;</operator><name>pid</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>poll_child_status</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>stat_loc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pid</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>events</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name></expr>;</expr_stmt>
</block_content>}</block> <expr_stmt><expr><name>END_FOREACH_CHILD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECHILD</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_w32_wait_events_blocking</name><argument_list>(<argument><expr><name>events</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>-=</operator> <name>WAIT_OBJECT_0</name><operator>)</operator> <operator>==</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cause</name> <operator>=</operator> <call><name>FindChildSlotByHandle</name><argument_list>(<argument><expr><name><name>events</name><index>[<expr><name>ret</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cause</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECHILD</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>poll_child_status</name><argument_list>(<argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stat_loc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ChildRecord</name></name><modifier>*</modifier></type> <name>child</name> <init>= <expr><call><name>FindChildSlot</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retried</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECHILD</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>poll_child_status</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>stat_loc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>rb_w32_wait_events_blocking</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_OBJECT_0</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>&amp;</operator> <name>WNOHANG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>retried</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>retried</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timeb.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>have_precisetime</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_systemtime</name><parameter_list>(<parameter><decl><type><name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>get_time_func</name>)<parameter_list>(<parameter><decl><type><name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>get_time_func</name></type> <name>func</name> <init>= <expr><operator>(</operator><name>get_time_func</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <operator>(</operator><name>get_time_func</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>func</name> <operator>=</operator> <operator>(</operator><name>get_time_func</name><operator>)</operator><call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>, <argument><expr><literal type="string">"GetSystemTimePreciseAsFileTime"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>func</name> <operator>=</operator> <name>GetSystemTimeAsFileTime</name></expr>;</expr_stmt>
<expr_stmt><expr><name>have_precisetime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>have_precisetime</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ft</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>filetime_split</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name><modifier>*</modifier></type> <name>ft</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>subsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>LONG_LONG</name></type> <name>lt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>LONG_LONG</name></type> <name>subsec_unit</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>LONG_LONG</name><operator>)</operator><literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <name><name>ft</name><operator>-&gt;</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name><name>ft</name><operator>-&gt;</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lt</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>lt</name> <operator>-=</operator> <operator>(</operator><name>LONG_LONG</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">1970</literal><operator>-</operator><literal type="number">1601</literal><operator>)</operator><operator>*</operator><literal type="number">365.2425</literal><operator>)</operator> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <name>subsec_unit</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>subsec</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>lt</name> <operator>%</operator> <name>subsec_unit</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>lt</name> <operator>/</operator> <name>subsec_unit</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>__cdecl</name></type>
<name>gettimeofday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timezone</name></name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>subsec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_systemtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>filetime_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name>subsec</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>clock_gettime</name><parameter_list>(<parameter><decl><type><name>clockid_t</name></type> <name>clock_id</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>clock_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CLOCK_REALTIME</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>subsec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_systemtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>filetime_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <name>subsec</name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>CLOCK_MONOTONIC</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>count</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>count</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <name><name>freq</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>freq</name><operator>.</operator><name>QuadPart</name></name> <operator>&lt;</operator> <literal type="number">1000000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name><name>count</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <name><name>freq</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000000</literal> <operator>/</operator> <name><name>freq</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>count</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <name><name>freq</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1000000000.0</literal> <operator>/</operator> <name><name>freq</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>clock_getres</name><parameter_list>(<parameter><decl><type><name>clockid_t</name></type> <name>clock_id</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>clock_id</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CLOCK_REALTIME</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>CLOCK_MONOTONIC</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>freq</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>freq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sp</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><literal type="number">1000000000.0</literal> <operator>/</operator> <name><name>freq</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>w32_getcwd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type><name>alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wlen</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>GetCurrentDirectoryW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetCurrentDirectoryW</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>translate_wchar</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>L</name><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call>(<modifier>*</modifier><name>alloc</name>)<argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>getcwd_alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>rb_w32_getcwd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_getcwd</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>getcwd_alloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>rb_w32_ugetcwd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_getcwd</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>getcwd_alloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>getcwd_value</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><operator>*</operator><operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><name>arg</name> <operator>=</operator> <call><name>rb_utf8_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>OBJ_TAINT</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>VALUE</name></type>
<name>rb_dir_getwd_ospath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>cwd</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>w32_getcwd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>getcwd_value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cwd</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>chown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_uchown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>lchown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_w32_ulchown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>owner</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>kill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>pid</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sig</name> <operator>!=</operator> <name>SIGINT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>pid</name> <operator>==</operator> <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>sig</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sig</name> <operator>!=</operator> <name>SIGKILL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>raise</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProc</name> <init>=
<expr><call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_QUERY_INFORMATION</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hProc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hProc</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_INVALID_PARAMETER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>SIGINT</name></expr>:</case>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ctrlEvent</name> <init>= <expr><name>CTRL_C_EVENT</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>ctrlEvent</name> <operator>=</operator> <name>CTRL_BREAK_EVENT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GenerateConsoleCtrlEvent</name><argument_list>(<argument><expr><name>ctrlEvent</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>SIGKILL</name></expr>:</case>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ChildRecord</name></name><modifier>*</modifier></type> <name>child</name> <init>= <expr><call><name>FindChildSlot</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hProc</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>hProcess</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>hProc</name> <operator>=</operator> <call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_TERMINATE</name> <operator>|</operator> <name>PROCESS_QUERY_INFORMATION</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hProc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hProc</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_INVALID_PARAMETER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>status</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name>hProc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>STILL_ACTIVE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TerminateProcess</name><argument_list>(<argument><expr><name>hProc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>child</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>wlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreateHardLinkW</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_ulink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wfrom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wfrom</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wto</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wlink</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>, <argument><expr><name>wto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>link</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wfrom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wfrom</name> <operator>=</operator> <call><name>filecp_to_wstr</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wto</name> <operator>=</operator> <call><name>filecp_to_wstr</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wlink</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>, <argument><expr><name>wto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FILE_DEVICE_FILE_SYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_DEVICE_FILE_SYSTEM</name></cpp:macro> <cpp:value>0x00000009</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FSCTL_GET_REPARSE_POINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSCTL_GET_REPARSE_POINT</name></cpp:macro> <cpp:value>((0x9&lt;&lt;16)|(42&lt;&lt;2))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IO_REPARSE_TAG_SYMLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO_REPARSE_TAG_SYMLINK</name></cpp:macro> <cpp:value>0xA000000CL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>reparse_symlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>rb_w32_reparse_buffer_t</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>open_special</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FILE_FLAG_OPEN_REPARSE_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DeviceIoControl</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>FSCTL_GET_REPARSE_POINT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>ReparseTag</name></name> <operator>!=</operator> <name>IO_REPARSE_TAG_SYMLINK</name> <operator>&amp;&amp;</operator>
<name><name>rp</name><operator>-&gt;</operator><name>ReparseTag</name></name> <operator>!=</operator> <name>IO_REPARSE_TAG_MOUNT_POINT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>ERROR_INVALID_PARAMETER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_reparse_symlink_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>wtmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_w32_reparse_buffer_t</name></type> <name>rbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rp</name> <init>= <expr><operator>&amp;</operator><name>rbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rb_w32_read_reparse_point</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>ERROR_MORE_DATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>rb_w32_reparse_buffer_size</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>ALLOCV</name><argument_list>(<argument><expr><name>wtmp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rb_w32_read_reparse_point</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>wtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><name>ERROR_MORE_DATA</name></expr>:</case>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_read_reparse_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>rb_w32_reparse_buffer_t</name> <modifier>*</modifier></type><name>rp</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>reparse_symlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>ERROR_MORE_DATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>ReparseTag</name></name> <operator>==</operator> <name>IO_REPARSE_TAG_SYMLINK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>rp</name><operator>-&gt;</operator><name>SymbolicLinkReparseBuffer</name><operator>.</operator><name>PathBuffer</name></name> <operator>+</operator>
<name><name>rp</name><operator>-&gt;</operator><name>SymbolicLinkReparseBuffer</name><operator>.</operator><name>PrintNameOffset</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>rp</name><operator>-&gt;</operator><name>SymbolicLinkReparseBuffer</name><operator>.</operator><name>PrintNameLength</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>ret</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>ReparseTag</name></name> <operator>==</operator> <name>IO_REPARSE_TAG_MOUNT_POINT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>volume</name> <init>= <expr><literal type="string">L"Volume{"</literal></expr></init></decl>;</decl_stmt>
<enum>enum <block>{<decl><name>volume_prefix_len</name> <init>= <macro><name>rb_strlen_lit</name><argument_list>(<argument><literal type="string">"\\??\\"</literal></argument>)</argument_list></macro></init></decl>}</block>;</enum>
<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>rp</name><operator>-&gt;</operator><name>MountPointReparseBuffer</name><operator>.</operator><name>PathBuffer</name></name> <operator>+</operator>
<name><name>rp</name><operator>-&gt;</operator><name>MountPointReparseBuffer</name><operator>.</operator><name>SubstituteNameOffset</name></name> <operator>+</operator>
<name>volume_prefix_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>rp</name><operator>-&gt;</operator><name>MountPointReparseBuffer</name><operator>.</operator><name>SubstituteNameLength</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>ret</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>-=</operator> <name>volume_prefix_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>volume</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>volume</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>volume</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name> <operator>+</operator> <name>ret</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>rp</name> <operator>+</operator> <name>bufsize</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>e</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><name>name</name><operator>)</operator><index>[<expr><name>ret</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>]</index> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>translate_wchar</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>L</name><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>w32_readlink</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>wtmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>rb_w32_reparse_buffer_size</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wpath</name> <init>= <expr><call><name>ALLOCV</name><argument_list>(<argument><expr><name>wtmp</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_w32_reparse_buffer_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>wpath</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rb_w32_read_reparse_point</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <name>e</name> <operator>!=</operator> <name>ERROR_MORE_DATA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>wtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>wname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>wtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>ssize_t</name></type>
<name>rb_w32_ureadlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_readlink</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>ssize_t</name></type>
<name>readlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_readlink</name><argument_list>(<argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYMBOLIC_LINK_FLAG_DIRECTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOLIC_LINK_FLAG_DIRECTORY</name></cpp:macro> <cpp:value>(0x1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE</name></cpp:macro> <cpp:value>(0x2)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>w32_symlink</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>atts</name></decl>, <decl><type ref="prev"/><name>len1</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wsrc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOLEAN</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>BOOLEAN</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>create_symbolic_link_func</name>)<parameter_list>(<parameter><decl><type><name>WCHAR</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>WCHAR</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>create_symbolic_link_func</name></type> <name>create_symbolic_link</name> <init>=
<expr><operator>(</operator><name>create_symbolic_link_func</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>create_flag</name> <init>= <expr><name>SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>create_symbolic_link</name> <operator>==</operator> <operator>(</operator><name>create_symbolic_link_func</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>create_symbolic_link</name> <operator>=</operator> <operator>(</operator><name>create_symbolic_link_func</name><operator>)</operator>
<call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>, <argument><expr><literal type="string">"CreateSymbolicLinkW"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>create_symbolic_link</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>link</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>src</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len1</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wsrc</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len1</name><operator>+</operator><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wlink</name> <operator>=</operator> <name>wsrc</name> <operator>+</operator> <name>len1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wsrc</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wlink</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>translate_wchar</name><argument_list>(<argument><expr><name>wsrc</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'/'</literal></expr></argument>, <argument><expr><name>L</name><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>atts</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wsrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>atts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>atts</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>SYMBOLIC_LINK_FLAG_DIRECTORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_symbolic_link</name><argument_list>(<argument><expr><name>wlink</name></expr></argument>, <argument><expr><name>wsrc</name></expr></argument>, <argument><expr><name>flag</name> <operator>|=</operator> <name>create_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>e</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>ERROR_INVALID_PARAMETER</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>create_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>&amp;=</operator> <operator>~</operator><name>SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_symbolic_link</name><argument_list>(<argument><expr><name>wlink</name></expr></argument>, <argument><expr><name>wsrc</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_usymlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_symlink</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>symlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_symlink</name><argument_list>(<argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>wait</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>waitpid</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>w32_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wenvarea</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wenv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>uenvarea</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uenvarea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uenvarea</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wenvarea</name> <operator>=</operator> <call><name>GetEnvironmentStringsW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wenvarea</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>wenv</name> <operator>=</operator> <name>wenvarea</name></expr><operator>,</operator> <expr><name>wlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>wenv</name></expr>;</condition> <incr><expr><name>wenv</name> <operator>+=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>wenv</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>wlen</name> <operator>+=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>wenv</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>uenvarea</name> <operator>=</operator> <call><name>wstr_to_mbstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>wenvarea</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeEnvironmentStringsW</name><argument_list>(<argument><expr><name>wenvarea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>uenvarea</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>env</name> <operator>=</operator> <name>uenvarea</name></expr>;</init> <condition><expr><operator>*</operator><name>env</name></expr>;</condition> <incr><expr><name>env</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>env</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>env</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>rb_w32_ugetenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>rb_w32_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_getenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>CP_ACP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>DWORD</name></type>
<name>get_attr_vsn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>atts</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>vsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>st</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>open_special</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FILE_FLAG_OPEN_REPARSE_POINT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSUME</name><argument_list>(<argument><expr><name>e</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ASSUME</name><argument_list>(<argument><expr><name>e</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>atts</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>dwFileAttributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>vsn</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>dwVolumeSerialNumber</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>wrename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>oldatts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>newatts</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>oldvsn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>newvsn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>get_attr_vsn</name><argument_list>(<argument><expr><name>oldpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldatts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldvsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>oldatts</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name> <init>= <expr><call><name>open_special</name><argument_list>(<argument><expr><name>oldpath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>ERROR_CANT_RESOLVE_FILENAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ELOOP</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>get_attr_vsn</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newatts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newvsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>newatts</name> <operator>!=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>newatts</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>newatts</name> <operator>&amp;</operator> <operator>~</operator> <name>FILE_ATTRIBUTE_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MoveFileExW</name><argument_list>(<argument><expr><name>oldpath</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>MOVEFILE_REPLACE_EXISTING</name> <operator>|</operator> <name>MOVEFILE_COPY_ALLOWED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>e</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>==</operator> <name>ERROR_ACCESS_DENIED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>oldatts</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>oldvsn</name> <operator>!=</operator> <name>newvsn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EXDEV</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>oldatts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>

<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>rb_w32_urename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wfrom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wfrom</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wto</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wrename</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>, <argument><expr><name>wto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>rb_w32_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wfrom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wfrom</name> <operator>=</operator> <call><name>filecp_to_wstr</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wto</name> <operator>=</operator> <call><name>filecp_to_wstr</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wrename</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>, <argument><expr><name>wto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>isUNCRoot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>path</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name><operator>++</operator></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_STAT</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dest</name></type></parameter>, <parameter><type><name>size_cast</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (dest).st_dev = (src).st_dev; (dest).st_ino = (src).st_ino; (dest).st_mode = (src).st_mode; (dest).st_nlink = (src).st_nlink; (dest).st_uid = (src).st_uid; (dest).st_gid = (src).st_gid; (dest).st_rdev = (src).st_rdev; (dest).st_size = size_cast(src).st_size; (dest).st_atime = (src).st_atime; (dest).st_mtime = (src).st_mtime; (dest).st_ctime = (src).st_ctime; } while (0)</cpp:value></cpp:define>













<function_decl><type><specifier>static</specifier> <name>time_t</name></type> <name>filetime_to_unixtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>long</name></type> <name>filetime_to_nsec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>name_for_stat</name><parameter_list>(<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>stati128_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fstat</name></cpp:undef>

<function><type><name>int</name></type>
<name>rb_w32_fstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><literal type="string">L"TZ"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_ENVVAR_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_atime</name></name> <operator>=</operator> <call><name>filetime_to_unixtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftLastAccessTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_mtime</name></name> <operator>=</operator> <call><name>filetime_to_unixtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftLastWriteTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_ctime</name></name> <operator>=</operator> <call><name>filetime_to_unixtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftCreationTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_fstati128</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>COPY_STAT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>st</name></expr></argument>, <argument><expr><operator>+</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stati128_handle</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>FILE_INVALID_FILE_ID</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>__MINGW32__</name></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>BYTE</name></type> <name><name>Identifier</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>FILE_ID_128</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT_WIN8</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_WIN32_WINNT</name> <operator>&lt;</operator> <literal type="number">0x602</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FileIdInfo</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>LONG_LONG</name></type> <name>VolumeSerialNumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE_ID_128</name></type> <name>FileId</name></decl>;</decl_stmt>
}</block></struct></type> <name>FILE_ID_INFO</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>DWORD</name></type>
<name>get_ino</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>FILE_ID_INFO</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>gfibhe_t</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>gfibhe_t</name></type> <name>pGetFileInformationByHandleEx</name> <init>= <expr><operator>(</operator><name>gfibhe_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pGetFileInformationByHandleEx</name> <operator>==</operator> <operator>(</operator><name>gfibhe_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pGetFileInformationByHandleEx</name> <operator>=</operator> <operator>(</operator><name>gfibhe_t</name><operator>)</operator><call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>, <argument><expr><literal type="string">"GetFileInformationByHandleEx"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pGetFileInformationByHandleEx</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pGetFileInformationByHandleEx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>FileIdInfo</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ERROR_INVALID_PARAMETER</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>DWORD</name></type>
<name>stati128_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>attr</name> <init>= <expr><operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>FILE_ID_INFO</name></type> <name>fii</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__int64</name><operator>)</operator><name><name>info</name><operator>.</operator><name>nFileSizeHigh</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>info</name><operator>.</operator><name>nFileSizeLow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_atime</name></name> <operator>=</operator> <call><name>filetime_to_unixtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftLastAccessTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_atimensec</name></name> <operator>=</operator> <call><name>filetime_to_nsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftLastAccessTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_mtime</name></name> <operator>=</operator> <call><name>filetime_to_unixtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftLastWriteTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_mtimensec</name></name> <operator>=</operator> <call><name>filetime_to_nsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftLastWriteTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_ctime</name></name> <operator>=</operator> <call><name>filetime_to_unixtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftCreationTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_ctimensec</name></name> <operator>=</operator> <call><name>filetime_to_nsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftCreationTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>nNumberOfLinks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>dwFileAttributes</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_ino</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fii</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_ino</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>__int64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fii</name><operator>.</operator><name>FileId</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_inohigh</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>__int64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fii</name><operator>.</operator><name>FileId</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_ino</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__int64</name><operator>)</operator><name><name>info</name><operator>.</operator><name>nFileIndexHigh</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>info</name><operator>.</operator><name>nFileIndexLow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_inohigh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>filetime_to_unixtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>subsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>filetime_split</name><argument_list>(<argument><expr><name>ft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>long</name></type>
<name>filetime_to_nsec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>have_precisetime</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <name><name>ft</name><operator>-&gt;</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name><name>ft</name><operator>-&gt;</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>tmp</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>fileattr_to_unixmode</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>S_IREAD</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>S_IREAD</name> <operator>|</operator> <name>S_IWRITE</name> <operator>|</operator> <name>S_IWUSR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rb_w32_reparse_symlink_p</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>S_IFLNK</name> <operator>|</operator> <name>S_IEXEC</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>S_IFDIR</name> <operator>|</operator> <name>S_IEXEC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>S_IFDIR</name> <operator>|</operator> <name>S_IEXEC</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>S_IFREG</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>S_IFREG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>path</name> <operator>+</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>path</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>CharPrevW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <name>L</name><literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>_wcsicmp</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">L".bat"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>_wcsicmp</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">L".cmd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>_wcsicmp</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">L".com"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>_wcsicmp</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="string">L".exe"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>S_IEXEC</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iswalnum</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>|=</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">0500</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>|=</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">0500</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_valid_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>full</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>dmy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>wcsstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">L"..."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name>wcsspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">L"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>==</operator> <name>path</name> <operator>||</operator> <call><name>wcschr</name><argument_list>(<argument><expr><literal type="string">L":/\\"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><operator>*</operator><name>q</name> <operator>||</operator> <call><name>wcschr</name><argument_list>(<argument><expr><literal type="string">L":/\\"</literal></expr></argument>, <argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFullPathNameW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>full</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>full</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmy</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>full</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">':'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>full</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>GetDriveTypeW</name><argument_list>(<argument><expr><name>full</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DRIVE_NO_ROOT_DIR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>open_dir_handle</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>stat_by_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>wfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>==</operator> <name>ERROR_FILE_NOT_FOUND</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>e</name> <operator>==</operator> <name>ERROR_INVALID_NAME</name><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>e</name> <operator>==</operator> <name>ERROR_PATH_NOT_FOUND</name> <operator>||</operator> <operator>(</operator><name>e</name> <operator>==</operator> <name>ERROR_BAD_NETPATH</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <call><name>fileattr_to_unixmode</name><argument_list>(<argument><expr><name><name>wfd</name><operator>.</operator><name>dwFileAttributes</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_atime</name></name> <operator>=</operator> <call><name>filetime_to_unixtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>ftLastAccessTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_atimensec</name></name> <operator>=</operator> <call><name>filetime_to_nsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>ftLastAccessTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_mtime</name></name> <operator>=</operator> <call><name>filetime_to_unixtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>ftLastWriteTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_mtimensec</name></name> <operator>=</operator> <call><name>filetime_to_nsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>ftLastWriteTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_ctime</name></name> <operator>=</operator> <call><name>filetime_to_unixtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>ftCreationTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_ctimensec</name></name> <operator>=</operator> <call><name>filetime_to_nsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfd</name><operator>.</operator><name>ftCreationTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__int64</name><operator>)</operator><name><name>wfd</name><operator>.</operator><name>nFileSizeHigh</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name><name>wfd</name><operator>.</operator><name>nFileSizeLow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>path_drive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>iswalpha</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">':'</literal><operator>)</operator></expr> ?</condition><then>
<expr><call><name>towupper</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>L</name><literal type="char">'A'</literal></expr> </then><else>: <expr><call><name>_getdrive</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WCHAR</name></type> <name><name>namespace_prefix</name><index>[]</index></name> <init>= <expr><block>{<expr><name>L</name><literal type="char">'\\'</literal></expr>, <expr><name>L</name><literal type="char">'\\'</literal></expr>, <expr><name>L</name><literal type="char">'?'</literal></expr>, <expr><name>L</name><literal type="char">'\\'</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>winnt_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>lstat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>lstat</name></expr> ?</condition><then> <expr><name>FILE_FLAG_OPEN_REPARSE_POINT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>finalname</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>open_special</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>attr</name> <init>= <expr><call><name>stati128_handle</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>len</name> <init>= <expr><call><name>get_final_path</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>finalname</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>finalname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rb_w32_reparse_symlink_p</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>FILE_ATTRIBUTE_REPARSE_POINT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_valid_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <call><name>fileattr_to_unixmode</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>finalname</name><index>[<expr><call><name>min</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>finalname</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>finalname</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>wcsncmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>namespace_prefix</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>namespace_prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>+=</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>namespace_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>stat_by_find</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>st_rdev</name></name> <operator>=</operator> <call><name>path_drive</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stati128</name></name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_w32_stati128</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>COPY_STAT</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>*</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>_off_t</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>wstati128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>lstat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>buf1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name> <operator>||</operator> <operator>!</operator><name>st</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFAULT</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>path</name> <operator>=</operator> <call><name>name_for_stat</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>winnt_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>lstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>WCHAR</name> <modifier>*</modifier></type>
<name>name_for_stat</name><parameter_list>(<parameter><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>path</name></expr><operator>,</operator> <expr><name>s</name> <operator>=</operator> <name>buf1</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L</name><literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>buf1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name>L</name><literal type="char">'\"'</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>s</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>buf1</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isUNCRoot</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <name>L</name><literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lstrcatW</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">L"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal> <operator>||</operator> <operator>(</operator><name>buf1</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>==</operator> <name>L</name><literal type="char">':'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lstrcatW</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">L"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>buf1</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_ustati128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_stati128</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_stati128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_stati128</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>w32_stati128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>lstat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wstati128</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>lstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_ulstati128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_stati128</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_lstati128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stati128</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_stati128</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>off_t</name></type>
<name>rb_w32_lseek</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>ofs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name> <init>= <expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_socket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_pipe</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESPIPE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>_lseeki64</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_access</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stati128</name></name></type> <name>stat</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_w32_stati128</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>stat</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>!=</operator> <name>mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_uaccess</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stati128</name></name></type> <name>stat</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rb_w32_ustati128</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>stat</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>!=</operator> <name>mode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_chsize</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>upos</name></decl>, <decl><type ref="prev"/><name>lpos</name></decl>, <decl><type ref="prev"/><name>usize</name></decl>, <decl><type ref="prev"/><name>lsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lpos</name> <operator>=</operator> <call><name>SetFilePointer</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>upos</name> <operator>=</operator> <literal type="number">0</literal><operator>,</operator> <operator>&amp;</operator><name>upos</name><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1L</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>e</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>usize</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>lsize</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SetFilePointer</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>lsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usize</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>e</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>SetEndOfFile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>SetFilePointer</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>lpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>upos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>w32_truncate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_chsize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_utruncate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_truncate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>CP_UTF8</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_truncate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>w32_truncate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><call><name>filecp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_ftruncate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_chsize</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>long</name></type>
<name>filetime_to_clock</name><parameter_list>(<parameter><decl><type><name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__int64</name></type> <name>qw</name> <init>= <expr><name><name>ft</name><operator>-&gt;</operator><name>dwHighDateTime</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>qw</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>qw</name> <operator>|=</operator> <name><name>ft</name><operator>-&gt;</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qw</name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt> 
<return>return <expr><operator>(</operator><name>long</name><operator>)</operator> <name>qw</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_times</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tms</name></name> <modifier>*</modifier></type><name>tmbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>create</name></decl>, <decl><type ref="prev"/><name>exit</name></decl>, <decl><type ref="prev"/><name>kernel</name></decl>, <decl><type ref="prev"/><name>user</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetProcessTimes</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>create</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kernel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>user</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tmbuf</name><operator>-&gt;</operator><name>tms_utime</name></name> <operator>=</operator> <call><name>filetime_to_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmbuf</name><operator>-&gt;</operator><name>tms_stime</name></name> <operator>=</operator> <call><name>filetime_to_clock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kernel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmbuf</name><operator>-&gt;</operator><name>tms_cutime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmbuf</name><operator>-&gt;</operator><name>tms_cstime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>tmbuf</name><operator>-&gt;</operator><name>tms_utime</name></name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmbuf</name><operator>-&gt;</operator><name>tms_stime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmbuf</name><operator>-&gt;</operator><name>tms_cutime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmbuf</name><operator>-&gt;</operator><name>tms_cstime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yield_once</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>Sleep(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yield_until</name><parameter_list>(<parameter><type><name>condition</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do yield_once(); while (!(condition))</cpp:value></cpp:define>


<struct>struct <name>asynchronous_arg_t</name> <block>{

<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>stackaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errnum</name></decl>;</decl_stmt>


<function_decl><type><name>uintptr_t</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name><modifier>*</modifier></type> <name>argv</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type>
<name>call_asynchronous</name><parameter_list>(<parameter><decl><type><name>PVOID</name></type> <name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>asynchronous_arg_t</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name>argp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>stackaddr</name></name> <operator>=</operator> <operator>&amp;</operator><name>argp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><call><name><name>arg</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>uintptr_t</name></type>
<name>rb_w32_asynchronize</name><parameter_list>(<parameter><decl><type><name>asynchronous_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>self</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name><modifier>*</modifier></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>intrval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>interrupted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>thr</name></decl>;</decl_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>asynchronous_arg_t</name></name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>stackaddr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>errnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>self</name></name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>

<expr_stmt><expr><name>thr</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>call_asynchronous</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>thr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yield_until</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>stackaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_w32_wait_events_blocking</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>interrupted</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TerminateThread</name><argument_list>(<argument><expr><name>thr</name></expr></argument>, <argument><expr><name>intrval</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>yield_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GetExitCodeThread</name><argument_list>(<argument><expr><name>thr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>thr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>interrupted</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>MEMORY_BASIC_INFORMATION</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VirtualQuery</name><argument_list>(<argument><expr><name><name>arg</name><operator>.</operator><name>stackaddr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"couldn't get stack base:%p:%d\n"</literal></expr></argument>,
<argument><expr><name><name>arg</name><operator>.</operator><name>stackaddr</name></name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>VirtualFree</name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>AllocationBase</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Debug</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"couldn't release stack:%p:%d\n"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>.</operator><name>AllocationBase</name></name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name><name>arg</name><operator>.</operator><name>errnum</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>thr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_fatal</name><argument_list>(<argument><expr><literal type="string">"failed to launch waiter thread:%ld"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>rb_w32_get_environ</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>envtop</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>myenvtop</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>myenv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>











<expr_stmt><expr><name>envtop</name> <operator>=</operator> <call><name>GetEnvironmentStringsW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>env</name> <operator>=</operator> <name>envtop</name></expr><operator>,</operator> <expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>env</name></expr>;</condition> <incr><expr><name>env</name> <operator>+=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>env</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>myenvtop</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>env</name> <operator>=</operator> <name>envtop</name></expr><operator>,</operator> <expr><name>myenv</name> <operator>=</operator> <name>myenvtop</name></expr>;</init> <condition><expr><operator>*</operator><name>env</name></expr>;</condition> <incr><expr><name>env</name> <operator>+=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>env</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>myenv</name> <operator>=</operator> <call><name>wstr_to_utf8</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>myenv</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>myenv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FreeEnvironmentStringsW</name><argument_list>(<argument><expr><name>envtop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>myenvtop</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>rb_w32_free_environ</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>t</name> <init>= <expr><name>env</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>t</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>rb_pid_t</name></type>
<name>rb_w32_getpid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>rb_pid_t</name></type>
<name>rb_w32_getppid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <function_decl><type><name>long</name></type> (<name>WINAPI</name> <name>query_func</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>ULONG</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>query_func</name> <modifier>*</modifier></type><name>pNtQueryInformationProcess</name> <init>= <expr><operator>(</operator><name>query_func</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_pid_t</name></type> <name>ppid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pNtQueryInformationProcess</name> <operator>==</operator> <operator>(</operator><name>query_func</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pNtQueryInformationProcess</name> <operator>=</operator> <operator>(</operator><name>query_func</name> <operator>*</operator><operator>)</operator><call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"ntdll.dll"</literal></expr></argument>, <argument><expr><literal type="string">"NtQueryInformationProcess"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pNtQueryInformationProcess</name></expr>)</condition> <block>{<block_content>
<struct>struct <block>{
<decl_stmt><decl><type><name>long</name></type> <name>ExitStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>PebBaseAddress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>AffinityMask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>BasePriority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>UniqueProcessId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>ParentProcessId</name></decl>;</decl_stmt>
}</block> <decl><name>pbi</name></decl>;</struct>
<decl_stmt><decl><type><name>ULONG</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>ret</name> <init>= <expr><call><name>pNtQueryInformationProcess</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pbi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pbi</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ppid</name> <operator>=</operator> <name><name>pbi</name><operator>.</operator><name>ParentProcessId</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>ppid</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>STATIC_ASSERT</name><argument_list>(<argument><expr><name>std_handle</name></expr></argument>, <argument><expr><operator>(</operator><name>STD_OUTPUT_HANDLE</name><operator>-</operator><name>STD_INPUT_HANDLE</name><operator>)</operator><operator>==</operator><operator>(</operator><name>STD_ERROR_HANDLE</name><operator>-</operator><name>STD_OUTPUT_HANDLE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_new_std_handle</name><parameter_list>(<parameter><type><name>newfd</name></type></parameter>, <parameter><type><name>handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((unsigned)(newfd) &gt; 2) break; SetStdHandle(STD_INPUT_HANDLE+(STD_OUTPUT_HANDLE-STD_INPUT_HANDLE)*(newfd), (handle)); } while (0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_new_std_fd</name><parameter_list>(<parameter><type><name>newfd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>set_new_std_handle(newfd, (HANDLE)rb_w32_get_osfhandle(newfd))</cpp:value></cpp:define>


<function><type><name>int</name></type>
<name>rb_w32_dup2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oldfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>oldfd</name> <operator>==</operator> <name>newfd</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>newfd</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dup2</name><argument_list>(<argument><expr><name>oldfd</name></expr></argument>, <argument><expr><name>newfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_new_std_fd</name><argument_list>(<argument><expr><name>newfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newfd</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_uopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oflag</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pmode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>oflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pmode</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wfile</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>w32_wopen</name><argument_list>(<argument><expr><name>wfile</name></expr></argument>, <argument><expr><name>oflag</name></expr></argument>, <argument><expr><name>pmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_if_wdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>wfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>attr</name> <init>= <expr><call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal> <operator>||</operator>
<operator>!</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator> <operator>||</operator>
<call><name>check_valid_dir</name><argument_list>(<argument><expr><name>wfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EISDIR</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oflag</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pmode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>oflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pmode</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wfile</name> <operator>=</operator> <call><name>filecp_to_wstr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>w32_wopen</name><argument_list>(<argument><expr><name>wfile</name></expr></argument>, <argument><expr><name>oflag</name></expr></argument>, <argument><expr><name>pmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_wopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oflag</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>pmode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>oflag</name> <operator>&amp;</operator> <name>O_CREAT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>oflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pmode</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>w32_wopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>oflag</name></expr></argument>, <argument><expr><name>pmode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>w32_wopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oflag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>attr</name> <init>= <expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>share_delete</name></decl>;</decl_stmt>

<expr_stmt><expr><name>share_delete</name> <operator>=</operator> <ternary><condition><expr><name>oflag</name> <operator>&amp;</operator> <name>O_SHARE_DELETE</name></expr> ?</condition><then> <expr><name>FILE_SHARE_DELETE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>oflag</name> <operator>&amp;=</operator> <operator>~</operator><name>O_SHARE_DELETE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflag</name> <operator>&amp;</operator> <name>O_TEXT</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>oflag</name> <operator>&amp;</operator> <name>O_BINARY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>_wopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>oflag</name></expr></argument>, <argument><expr><name>pmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EACCES</name></expr>:</case>
<expr_stmt><expr><call><name>check_if_wdir</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EINVAL</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sec</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>oflag</name> <operator>&amp;</operator> <name>O_NOINHERIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sec</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FNOINHERIT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>sec</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>oflag</name> <operator>&amp;=</operator> <operator>~</operator><name>O_NOINHERIT</name></expr>;</expr_stmt>


<expr_stmt><expr><name>oflag</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>O_BINARY</name> <operator>|</operator> <name>O_TEXT</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>oflag</name> <operator>&amp;</operator> <operator>(</operator><name>O_RDWR</name> <operator>|</operator> <name>O_RDONLY</name> <operator>|</operator> <name>O_WRONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>O_RDWR</name></expr>:</case>
<expr_stmt><expr><name>access</name> <operator>=</operator> <name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>O_RDONLY</name></expr>:</case>
<expr_stmt><expr><name>access</name> <operator>=</operator> <name>GENERIC_READ</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>O_WRONLY</name></expr>:</case>
<expr_stmt><expr><name>access</name> <operator>=</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>oflag</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>O_RDWR</name> <operator>|</operator> <name>O_RDONLY</name> <operator>|</operator> <name>O_WRONLY</name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>oflag</name> <operator>&amp;</operator> <operator>(</operator><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_TRUNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><name>O_CREAT</name></expr>:</case>
<expr_stmt><expr><name>create</name> <operator>=</operator> <name>OPEN_ALWAYS</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><name>O_EXCL</name></expr>:</case>
<expr_stmt><expr><name>create</name> <operator>=</operator> <name>OPEN_EXISTING</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr>:</case>
<case>case <expr><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_TRUNC</name></expr>:</case>
<expr_stmt><expr><name>create</name> <operator>=</operator> <name>CREATE_NEW</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>O_TRUNC</name></expr>:</case>
<case>case <expr><name>O_TRUNC</name> <operator>|</operator> <name>O_EXCL</name></expr>:</case>
<expr_stmt><expr><name>create</name> <operator>=</operator> <name>TRUNCATE_EXISTING</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>:</case>
<expr_stmt><expr><name>create</name> <operator>=</operator> <name>CREATE_ALWAYS</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>oflag</name> <operator>&amp;</operator> <name>O_CREAT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pmode</name> <operator>&amp;</operator> <name>S_IWRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>FILE_ATTRIBUTE_READONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>oflag</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_TRUNC</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oflag</name> <operator>&amp;</operator> <name>O_TEMPORARY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FILE_FLAG_DELETE_ON_CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>access</name> <operator>|=</operator> <name>DELETE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>oflag</name> <operator>&amp;=</operator> <operator>~</operator><name>O_TEMPORARY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oflag</name> <operator>&amp;</operator> <name>_O_SHORT_LIVED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FILE_ATTRIBUTE_TEMPORARY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>oflag</name> <operator>&amp;=</operator> <operator>~</operator><name>_O_SHORT_LIVED</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>oflag</name> <operator>&amp;</operator> <operator>(</operator><name>O_SEQUENTIAL</name> <operator>|</operator> <name>O_RANDOM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<break>break;</break>
<case>case <expr><name>O_SEQUENTIAL</name></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FILE_FLAG_SEQUENTIAL_SCAN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>O_RANDOM</name></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FILE_FLAG_RANDOM_ACCESS</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>oflag</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>O_SEQUENTIAL</name> <operator>|</operator> <name>O_RANDOM</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>oflag</name> <operator>&amp;</operator> <operator>~</operator><name>O_APPEND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><literal type="string">"NUL"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_ALWAYS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMFILE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><call><name>rb_acrt_lowio_lock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_set_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_set_osflags</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name> <operator>|</operator> <name>share_delete</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><name>create</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>e</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>ERROR_ACCESS_DENIED</name> <operator>||</operator> <operator>!</operator><call><name>check_if_wdir</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>quit</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>GetFileType</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_TYPE_CHAR</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FDEV</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_TYPE_PIPE</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FPIPE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_TYPE_UNKNOWN</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>quit</name>;</goto>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>FDEV</name> <operator>|</operator> <name>FPIPE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>oflag</name> <operator>&amp;</operator> <name>O_APPEND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FAPPEND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_set_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_set_osflags</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>FOPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>quit</name>:</label>
<empty_stmt>;</empty_stmt>
</block_content>}</block>

<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_fclose</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name> <init>= <expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_socket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>UnlockFile</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_set_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>serial</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>prefix</name><index>[]</index></name> <init>= <expr><literal type="string">"\\\\.\\pipe\\ruby"</literal></expr></init></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>width_of_prefix</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>width_of_pid</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rb_pid_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>width_of_serial</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>serial</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>width_of_ids</name> <init>= <expr><name>width_of_pid</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>width_of_serial</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>
}</block>;</enum>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>width_of_ids</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hRead</name></decl>, <decl><type ref="prev"/><name>hWrite</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fdRead</name></decl>, <decl><type ref="prev"/><name>fdWrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>width_of_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>width_of_prefix</name></expr></argument>, <argument><expr><name>width_of_ids</name></expr></argument>, <argument><expr><literal type="string">"%.*"</literal><name>PRI_PIDT_PREFIX</name><literal type="string">"x-%.*lx"</literal></expr></argument>,
<argument><expr><name>width_of_pid</name></expr></argument>, <argument><expr><call><name>rb_w32_getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>width_of_serial</name></expr></argument>, <argument><expr><name>serial</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sec</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>hRead</name> <operator>=</operator> <call><name>CreateNamedPipe</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>PIPE_ACCESS_DUPLEX</name> <operator>|</operator> <name>FILE_FLAG_OVERLAPPED</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>hRead</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_PIPE_BUSY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMFILE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<expr_stmt><expr><name>hWrite</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>,
<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><name>FILE_FLAG_OVERLAPPED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>hWrite</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><literal type="string">"NUL"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_ALWAYS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fdRead</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fdRead</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_acrt_lowio_lock_fh</name><argument_list>(<argument><expr><name>fdRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_set_osfhnd</name><argument_list>(<argument><expr><name>fdRead</name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>hRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_set_osflags</name><argument_list>(<argument><expr><name>fdRead</name></expr></argument>, <argument><expr><name>FOPEN</name> <operator>|</operator> <name>FPIPE</name> <operator>|</operator> <name>FNOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fdRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <do>do <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><literal type="string">"NUL"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_ALWAYS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fdWrite</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fdWrite</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_lock_fh</name><argument_list>(<argument><expr><name>fdWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_set_osfhnd</name><argument_list>(<argument><expr><name>fdWrite</name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>hWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_set_osflags</name><argument_list>(<argument><expr><name>fdWrite</name></expr></argument>, <argument><expr><name>FOPEN</name> <operator>|</operator> <name>FPIPE</name> <operator>|</operator> <name>FNOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fdWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_w32_close</name><argument_list>(<argument><expr><name>fdRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>fdRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>fdWrite</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>console_emulator_p</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>FALSE</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>func</name> <init>= <expr><name>WriteConsoleW</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MEMORY_BASIC_INFORMATION</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VirtualQuery</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>FALSE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>GetModuleHandle</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>HMODULE</name><operator>)</operator><name><name>m</name><operator>.</operator><name>AllocationBase</name></name> <operator>!=</operator> <name>k</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>constat</name></name> <modifier>*</modifier></type>
<name>constat_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_data_t</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>constat</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conlist</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>console_emulator_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>conlist</name> <operator>=</operator> <name>conlist_disabled</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>conlist</name> <operator>=</operator> <call><name>st_init_numtable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>install_vm_exit_handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>conlist</name> <operator>==</operator> <name>conlist_disabled</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>st_lookup</name><argument_list>(<argument><expr><name>conlist</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>constat</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ALLOC</name><argument_list>(<argument><expr>struct <name>constat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>constat_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <name>FOREGROUND_BLUE</name> <operator>|</operator> <name>FOREGROUND_GREEN</name> <operator>|</operator> <name>FOREGROUND_RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>reverse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>saved</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>saved</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>st_insert</name><argument_list>(<argument><expr><name>conlist</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>constat_reset</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>st_data_t</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>constat</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conlist</name> <operator>||</operator> <name>conlist</name> <operator>==</operator> <name>conlist_disabled</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>st_lookup</name><argument_list>(<argument><expr><name>conlist</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>constat</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>constat_init</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGROUND_MASK</name></cpp:macro> <cpp:value>(FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKGROUND_MASK</name></cpp:macro> <cpp:value>(BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_INTENSITY)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>constat_attr_color_reverse</name><parameter_list>(<parameter><type><name>attr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((attr) &amp; ~(FOREGROUND_MASK | BACKGROUND_MASK)) | (((attr) &amp; FOREGROUND_MASK) &lt;&lt; 4) | (((attr) &amp; BACKGROUND_MASK) &gt;&gt; 4)</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>WORD</name></type>
<name>constat_attr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>default_attr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>reverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rev</name> <init>= <expr><operator>*</operator><name>reverse</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>bold</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>attr</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rev</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>constat_attr_color_reverse</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bold</name> <operator>=</operator> <name>attr</name> <operator>&amp;</operator> <name>FOREGROUND_INTENSITY</name></expr>;</expr_stmt>
<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>FOREGROUND_INTENSITY</name> <operator>|</operator> <name>BACKGROUND_INTENSITY</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>seq</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>default_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bold</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>bold</name> <operator>=</operator> <name>FOREGROUND_INTENSITY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMMON_LVB_UNDERSCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_LVB_UNDERSCORE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>COMMON_LVB_UNDERSCORE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>rev</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">30</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>FOREGROUND_BLUE</name> <operator>|</operator> <name>FOREGROUND_GREEN</name> <operator>|</operator> <name>FOREGROUND_RED</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">17</literal></expr>:</case>
<case>case <expr><literal type="number">31</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>FOREGROUND_BLUE</name> <operator>|</operator> <name>FOREGROUND_GREEN</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>FOREGROUND_RED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">18</literal></expr>:</case>
<case>case <expr><literal type="number">32</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>FOREGROUND_BLUE</name> <operator>|</operator> <name>FOREGROUND_RED</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>FOREGROUND_GREEN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">19</literal></expr>:</case>
<case>case <expr><literal type="number">33</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><name>FOREGROUND_BLUE</name><operator>)</operator> <operator>|</operator> <name>FOREGROUND_GREEN</name> <operator>|</operator> <name>FOREGROUND_RED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">20</literal></expr>:</case>
<case>case <expr><literal type="number">34</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>FOREGROUND_GREEN</name> <operator>|</operator> <name>FOREGROUND_RED</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>FOREGROUND_BLUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">21</literal></expr>:</case>
<case>case <expr><literal type="number">35</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><name>FOREGROUND_GREEN</name><operator>)</operator> <operator>|</operator> <name>FOREGROUND_BLUE</name> <operator>|</operator> <name>FOREGROUND_RED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<case>case <expr><literal type="number">36</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><name>FOREGROUND_RED</name><operator>)</operator> <operator>|</operator> <name>FOREGROUND_BLUE</name> <operator>|</operator> <name>FOREGROUND_GREEN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<case>case <expr><literal type="number">37</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FOREGROUND_BLUE</name> <operator>|</operator> <name>FOREGROUND_GREEN</name> <operator>|</operator> <name>FOREGROUND_RED</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">40</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>BACKGROUND_BLUE</name> <operator>|</operator> <name>BACKGROUND_GREEN</name> <operator>|</operator> <name>BACKGROUND_RED</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">41</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>BACKGROUND_BLUE</name> <operator>|</operator> <name>BACKGROUND_GREEN</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>BACKGROUND_RED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">42</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>BACKGROUND_BLUE</name> <operator>|</operator> <name>BACKGROUND_RED</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>BACKGROUND_GREEN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">43</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><name>BACKGROUND_BLUE</name><operator>)</operator> <operator>|</operator> <name>BACKGROUND_GREEN</name> <operator>|</operator> <name>BACKGROUND_RED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">44</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>BACKGROUND_GREEN</name> <operator>|</operator> <name>BACKGROUND_RED</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>BACKGROUND_BLUE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">45</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><name>BACKGROUND_GREEN</name><operator>)</operator> <operator>|</operator> <name>BACKGROUND_BLUE</name> <operator>|</operator> <name>BACKGROUND_RED</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">46</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <operator>~</operator><name>BACKGROUND_RED</name><operator>)</operator> <operator>|</operator> <name>BACKGROUND_BLUE</name> <operator>|</operator> <name>BACKGROUND_GREEN</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">47</literal></expr>:</case>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>BACKGROUND_BLUE</name> <operator>|</operator> <name>BACKGROUND_GREEN</name> <operator>|</operator> <name>BACKGROUND_RED</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>bold</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rev</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>constat_attr_color_reverse</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>reverse</name> <operator>=</operator> <name>rev</name></expr>;</expr_stmt>
<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>constat_clear</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>WORD</name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>COORD</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>written</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FillConsoleOutputCharacterW</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>L</name><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>constat_apply</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>constat</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>WCHAR</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>seq</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arg0</name></decl>, <decl><type ref="prev"/><name>arg1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COORD</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>arg0</name> <operator>=</operator> <operator>(</operator><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg0</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>arg1</name> <operator>=</operator> <name><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>w</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L</name><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><call><name>constat_attr</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>attr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>reverse</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><name>L</name><literal type="char">'A'</literal></expr>:</case>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>-=</operator> <name>arg1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>&lt;</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'E'</literal></expr>:</case>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><name>L</name><literal type="char">'B'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>+=</operator> <name>arg1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>&gt;</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+=</operator> <name>arg1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>&gt;=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>-=</operator> <name>arg1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>&lt;</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'`'</literal></expr>:</case>
<expr_stmt><expr><name>arg1</name> <operator>+=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg1</name> <operator>&gt;</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg1</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>arg1</name> <operator>+=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arg1</name> <operator>&gt;</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>arg1</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'H'</literal></expr>:</case>
<case>case <expr><name>L</name><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name>arg1</name> <operator>+</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>Y</name></name> <operator>&gt;</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name>arg1</name> <operator>=</operator> <name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>arg1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name>arg1</name> <operator>+</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>X</name></name> <operator>&gt;</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'J'</literal></expr>:</case>
<switch>switch <condition>(<expr><ternary><condition><expr><name>arg0</name></expr> ?</condition><then> <expr><name>arg1</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><call><name>constat_clear</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>*</operator> <operator>(</operator><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator>
<operator>-</operator> <name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>constat_clear</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>*</operator> <operator>(</operator><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name><operator>)</operator>
<operator>+</operator> <name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>constat_clear</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>*</operator> <operator>(</operator><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>,
<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>constat_clear</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>*</operator> <name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>Y</name></name><operator>)</operator></expr></argument>,
<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'K'</literal></expr>:</case>
<switch>switch <condition>(<expr><ternary><condition><expr><name>arg0</name></expr> ?</condition><then> <expr><name>arg1</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><call><name>constat_clear</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name><operator>)</operator></expr></argument>,
<argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>constat_clear</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr></argument>,
<argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>constat_clear</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>wAttributes</name></name></expr></argument>,
<argument><expr><name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>saved</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'u'</literal></expr>:</case>
<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>saved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'h'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CONSOLE_CURSOR_INFO</name></type> <name>cci</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetConsoleCursorInfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cci</name><operator>.</operator><name>bVisible</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorInfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>L</name><literal type="char">'l'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>seq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">25</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CONSOLE_CURSOR_INFO</name></type> <name>cci</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetConsoleCursorInfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cci</name><operator>.</operator><name>bVisible</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorInfo</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>long</name></type> <name>MAXSIZE_CONSOLE_WRITING</name> <init>= <expr><literal type="number">31366</literal></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>long</name></type>
<name>constat_parse</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>constat</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptrp</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>*</operator><name>ptrp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rest</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><operator>*</operator><name>lenp</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name></type> <name>wc</name> <init>= <expr><operator>*</operator><name>ptr</name><operator>++</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>==</operator> <literal type="number">0x1b</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rest</name> <operator>=</operator> <operator>*</operator><name>lenp</name> <operator>-</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>constat_esc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rest</name><operator>++</operator></expr>;</expr_stmt> 
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>constat_init</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <name>L</name><literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>constat_esc</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>constat_esc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>!=</operator> <name>L</name><literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>constat_init</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rest</name> <operator>=</operator> <operator>*</operator><name>lenp</name> <operator>-</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rest</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>rest</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>constat_seq</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>&gt;=</operator> <name>constat_seq</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>&gt;=</operator> <name>L</name><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>wc</name> <operator>&lt;=</operator> <name>L</name><literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>numberof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>seq</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>seq</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>seq</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>wc</name> <operator>-</operator> <name>L</name><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>constat_seq</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wc</name> <operator>==</operator> <name>L</name><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>seq</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>numberof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>seq</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>numberof</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>!=</operator> <name>L</name><literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>constat_apply</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vt100</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>constat_init</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>rest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>rest</name> <operator>=</operator> <operator>*</operator><name>lenp</name> <operator>-</operator> <name>len</name><operator>)</operator> <operator>&lt;</operator> <name>MAXSIZE_CONSOLE_WRITING</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ptrp</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>rest</name></expr>;</return>
</block_content>}</block></while>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>lenp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptrp</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type>
<name>rb_w32_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name> <init>= <expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_socket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>UnlockFile</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>constat_delete</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>_set_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>socklist_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>setup_overlapped</name><parameter_list>(<parameter><decl><type><name>OVERLAPPED</name> <modifier>*</modifier></type><name>ol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iswrite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>FDEV</name> <operator>|</operator> <name>FPIPE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LONG</name></type> <name>high</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>DWORD</name></type> <name>method</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FAPPEND</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>iswrite</name><operator>)</operator></expr> ?</condition><then> <expr><name>FILE_END</name></expr> </then><else>: <expr><name>FILE_CURRENT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>low</name> <init>= <expr><call><name>SetFilePointer</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INVALID_SET_FILE_POINTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_SET_FILE_POINTER</name></cpp:macro> <cpp:value>((DWORD)-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>low</name> <operator>==</operator> <name>INVALID_SET_FILE_POINTER</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>NO_ERROR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ol</name><operator>-&gt;</operator><name>Offset</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ol</name><operator>-&gt;</operator><name>OffsetHigh</name></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ol</name><operator>-&gt;</operator><name>hEvent</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ol</name><operator>-&gt;</operator><name>hEvent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>finish_overlapped</name><parameter_list>(<parameter><decl><type><name>OVERLAPPED</name> <modifier>*</modifier></type><name>ol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ol</name><operator>-&gt;</operator><name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>FDEV</name> <operator>|</operator> <name>FPIPE</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>LONG</name></type> <name>high</name> <init>= <expr><name><name>ol</name><operator>-&gt;</operator><name>OffsetHigh</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>low</name> <init>= <expr><name><name>ol</name><operator>-&gt;</operator><name>Offset</name></name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>low</name> <operator>&lt;</operator> <name><name>ol</name><operator>-&gt;</operator><name>Offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>high</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetFilePointer</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high</name></expr></argument>, <argument><expr><name>FILE_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>read</name></cpp:undef>

<function><type><name>ssize_t</name></type>
<name>rb_w32_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name> <init>= <expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>wait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>ol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>isconsole</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>islineinput</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_socket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_w32_recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FTEXT</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_acrt_lowio_lock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name> <operator>||</operator> <call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FEOFLAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_set_osflags</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>FEOFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>isconsole</name> <operator>=</operator> <call><name>is_console</name><argument_list>(<argument><expr><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <operator>(</operator><name><name>osver</name><operator>.</operator><name>dwMajorVersion</name></name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>osver</name><operator>.</operator><name>dwMinorVersion</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>isconsole</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>islineinput</name> <operator>=</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>ENABLE_LINE_INPUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>retry</name>:</label>

<if_stmt><if>if <condition>(<expr><name>isconsole</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>constat_reset</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setup_overlapped</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ol</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ol</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_NO_DATA</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FPIPE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>state</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetNamedPipeHandleState</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>&amp;</operator> <name>PIPE_NOWAIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EWOULDBLOCK</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ol</name><operator>.</operator><name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_ACCESS_DENIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_BROKEN_PIPE</name> <operator>||</operator> <name>err</name> <operator>==</operator> <name>ERROR_HANDLE_EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wait</name> <operator>=</operator> <call><name>rb_w32_wait_events_blocking</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ol</name><operator>.</operator><name>hEvent</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wait</name> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wait</name> <operator>==</operator> <name>WAIT_OBJECT_0</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ol</name><operator>.</operator><name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CancelIo</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetOverlappedResult</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><name>err</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ERROR_HANDLE_EOF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_BROKEN_PIPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ol</name><operator>.</operator><name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CancelIo</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>finish_overlapped</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ol</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>read</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_OPERATION_ABORTED</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>isconsole</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>islineinput</name> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_set_osflags</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>FEOFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>write</name></cpp:undef>

<function><type><name>ssize_t</name></type>
<name>rb_w32_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name> <init>= <expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>wait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>ol</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_socket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>rb_w32_send</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FTEXT</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>!</operator><operator>(</operator><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FPIPE</name><operator>)</operator> <operator>||</operator> <name>fd</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>fd</name> <operator>==</operator> <call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>w</name> <init>= <expr><call><name>_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>w</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_acrt_lowio_lock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name> <operator>||</operator> <call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FEOFLAG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>retry</name>:</label>
<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FDEV</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>min</name><argument_list>(<argument><expr><name>MAXSIZE_CONSOLE_WRITING</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<label><name>retry2</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>setup_overlapped</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ol</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ol</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_IO_PENDING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ol</name><operator>.</operator><name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_ACCESS_DENIED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wait</name> <operator>=</operator> <call><name>rb_w32_wait_events_blocking</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ol</name><operator>.</operator><name>hEvent</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wait</name> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wait</name> <operator>==</operator> <name>WAIT_OBJECT_0</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ol</name><operator>.</operator><name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CancelIo</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetOverlappedResult</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>ol</name><operator>.</operator><name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CancelIo</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>finish_overlapped</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ol</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>newlen</name> <init>= <expr><name>len</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <name>newlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
<goto>goto <name>retry2</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EWOULDBLOCK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_acrt_lowio_unlock_fh</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>long</name></type>
<name>rb_w32_write_console</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>strarg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwMode</name></decl>, <decl><type ref="prev"/><name>reslen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><name>strarg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wbuffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>constat</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dwMode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>constat_handle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>encindex</name> <operator>=</operator> <call><name>ENCODING_GET</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>encindex</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_econv_has_convpath_p</name><argument_list>(<argument><expr><call><name>rb_enc_name</name><argument_list>(<argument><expr><call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name>encindex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_conv_enc_opts</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name>ENCINDEX_UTF_8</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ECONV_INVALID_REPLACE</name><operator>|</operator><name>ECONV_UNDEF_REPLACE</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ENCINDEX_US_ASCII</name></expr>:</case>
<case>case <expr><name>ENCINDEX_ASCII</name></expr>:</case>

<case>case <expr><name>ENCINDEX_UTF_8</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>wbuffer</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1L</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ENCINDEX_UTF_16LE</name></expr>:</case>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>WCHAR</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>reslen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dwMode</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> 
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteConsoleW</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reslen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>reslen</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>curlen</name> <init>= <expr><call><name>constat_parse</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>next</name> <operator>=</operator> <name>ptr</name>, <operator>&amp;</operator><name>next</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>reslen</name> <operator>+=</operator> <name>next</name> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>written</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteConsoleW</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>curlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>reslen</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1L</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wbuffer</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>long</name><operator>)</operator><name>reslen</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&lt;</operator> <literal type="number">80</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GMTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unixtime_to_filetime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>LONG_LONG</name><operator>)</operator><name>time</name> <operator>+</operator> <operator>(</operator><name>LONG_LONG</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">1970</literal><operator>-</operator><literal type="number">1601</literal><operator>)</operator><operator>*</operator><literal type="number">365.2425</literal><operator>)</operator> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>dwLowDateTime</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>LowPart</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>dwHighDateTime</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>HighPart</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>timespec_to_filetime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>LONG_LONG</name><operator>)</operator><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>+</operator> <operator>(</operator><name>LONG_LONG</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">1970</literal><operator>-</operator><literal type="number">1601</literal><operator>)</operator><operator>*</operator><literal type="number">365.2425</literal><operator>)</operator> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>QuadPart</name></name> <operator>+=</operator> <name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>dwLowDateTime</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>LowPart</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>dwHighDateTime</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>HighPart</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>wutimensat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>times</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>hFile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>atime</name></decl>, <decl><type ref="prev"/><name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stati128</name></name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>dirfd</name> <operator>!=</operator> <name>AT_FDCWD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> 
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wstati128</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>times</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>timespec_to_filetime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>timespec_to_filetime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>get_systemtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>atime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mtime</name> <operator>=</operator> <name>atime</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>attr</name> <init>= <expr><call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>attr</name> <operator>&amp;</operator> <operator>~</operator><name>FILE_ATTRIBUTE_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hFile</name> <operator>=</operator> <call><name>open_special</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hFile</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetFileTime</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_uutime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>utimbuf</name></name> <modifier>*</modifier></type><name>times</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name><name>ts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>times</name><operator>-&gt;</operator><name>actime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>times</name><operator>-&gt;</operator><name>modtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>rb_w32_uutimensat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_utime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>utimbuf</name></name> <modifier>*</modifier></type><name>times</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name><name>ts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>times</name><operator>-&gt;</operator><name>actime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>times</name><operator>-&gt;</operator><name>modtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>rb_w32_utimensat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_uutimes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>times</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name><name>ts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_usec</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_usec</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<return>return <expr><call><name>rb_w32_uutimensat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_utimes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>times</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name><name>ts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_usec</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name><name>times</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_usec</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
<return>return <expr><call><name>rb_w32_utimensat</name><argument_list>(<argument><expr><name>AT_FDCWD</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_uutimensat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>times</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wutimensat</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>times</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_utimensat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>times</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>filecp_to_wstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wutimensat</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>times</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_uchdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_wchdir</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>wmkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<macro><name>RUBY_CRITICAL</name></macro> <do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CreateDirectoryW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_wchmod</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RemoveDirectoryW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_umkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wmkdir</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>filecp_to_wstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wmkdir</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>wrmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>attr</name> <init>= <expr><call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>attr</name> <operator>&amp;</operator> <operator>~</operator><name>FILE_ATTRIBUTE_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RemoveDirectoryW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>filecp_to_wstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wrmdir</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_urmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wrmdir</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>wunlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>SYMLINKD</name> <init>= <expr><name>FILE_ATTRIBUTE_REPARSE_POINT</name><operator>|</operator><name>FILE_ATTRIBUTE_DIRECTORY</name></expr></init></decl>;</decl_stmt>
<macro><name>RUBY_CRITICAL</name></macro> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>attr</name> <init>= <expr><call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>SYMLINKD</name><operator>)</operator> <operator>==</operator> <name>SYMLINKD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RemoveDirectoryW</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>attr</name> <operator>&amp;</operator> <operator>~</operator><name>FILE_ATTRIBUTE_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DeleteFileW</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>!=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_uunlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wunlink</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>filecp_to_wstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wunlink</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_uchmod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wpath</name> <operator>=</operator> <call><name>utf8_to_wstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_wchmod</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>fchmod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>set_file_information_by_handle_func</name>)
<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>set_file_information_by_handle_func</name></type> <name>set_file_info</name> <init>=
<expr><operator>(</operator><name>set_file_information_by_handle_func</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<struct>struct <block>{
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>CreationTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>LastAccessTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>LastWriteTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>ChangeTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>FileAttributes</name></decl>;</decl_stmt>
}</block> <decl><name>info</name> <init>= <expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>, <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,}</block></expr></init></decl>;</struct> 
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>set_file_info</name> <operator>==</operator> <operator>(</operator><name>set_file_information_by_handle_func</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>set_file_info</name> <operator>=</operator> <operator>(</operator><name>set_file_information_by_handle_func</name><operator>)</operator>
<call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>, <argument><expr><literal type="string">"SetFileInformationByHandle"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>set_file_info</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>FileAttributes</name></name> <operator>=</operator> <name>FILE_ATTRIBUTE_NORMAL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">0200</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>info</name><operator>.</operator><name>FileAttributes</name></name> <operator>|=</operator> <name>FILE_ATTRIBUTE_READONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_file_info</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_isatty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleMode</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTTY</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>RUBY_MSVCRT_VERSION</name> <operator>&lt;=</operator> <literal type="number">60</literal></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>long</name></type> <name>_ftol</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>long</name></type>
<name>_ftol2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_ftol</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>long</name></type>
<name>_ftol2_sse</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_ftol</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>signbit</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type>
<name>signbit</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><name>ip</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>WSAAPI</name></type>
<name>rb_w32_inet_ntop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>numaddr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numaddr_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type>(<name>WSAAPI</name> <name>inet_ntop_t</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>inet_ntop_t</name> <modifier>*</modifier></type><name>pInetNtop</name> <init>= <expr><operator>(</operator><name>inet_ntop_t</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pInetNtop</name> <operator>==</operator> <operator>(</operator><name>inet_ntop_t</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pInetNtop</name> <operator>=</operator> <operator>(</operator><name>inet_ntop_t</name> <operator>*</operator><operator>)</operator><call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"ws2_32"</literal></expr></argument>, <argument><expr><literal type="string">"inet_ntop"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pInetNtop</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>pInetNtop</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>numaddr</name></expr></argument>, <argument><expr><name>numaddr_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>numaddr</name></expr></argument>, <argument><expr><name>numaddr_len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>numaddr</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name> <name>WSAAPI</name></type>
<name>rb_w32_inet_pton</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>WSAAPI</name> <name>inet_pton_t</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>inet_pton_t</name> <modifier>*</modifier></type><name>pInetPton</name> <init>= <expr><operator>(</operator><name>inet_pton_t</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pInetPton</name> <operator>==</operator> <operator>(</operator><name>inet_pton_t</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pInetPton</name> <operator>=</operator> <operator>(</operator><name>inet_pton_t</name> <operator>*</operator><operator>)</operator><call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"ws2_32"</literal></expr></argument>, <argument><expr><literal type="string">"inet_pton"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pInetPton</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>pInetPton</name><argument_list>(<argument><expr><name>af</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name></type>
<name>rb_w32_fd_is_text</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_osfile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FTEXT</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&lt;</operator> <literal type="number">80</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GMTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>unixtime_to_systemtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>SYSTEMTIME</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unixtime_to_filetime</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FileTimeToSystemTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>systemtime_to_tm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SYSTEMTIME</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>wYear</name></name></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>wMonth</name></name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>wDay</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>wSecond</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>wMinute</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>wHour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>wDay</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>wMonth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>y</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>wDayOfWeek</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">28</literal> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>y</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>y</name> <operator>%</operator> <literal type="number">400</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">153</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>systemtime_to_localtime</name><parameter_list>(<parameter><decl><type><name>TIME_ZONE_INFORMATION</name> <modifier>*</modifier></type><name>tz</name></decl></parameter>, <parameter><decl><type><name>SYSTEMTIME</name> <modifier>*</modifier></type><name>gst</name></decl></parameter>, <parameter><decl><type><name>SYSTEMTIME</name> <modifier>*</modifier></type><name>lst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TIME_ZONE_INFORMATION</name></type> <name>stdtz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>sst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SystemTimeToTzSpecificLocalTime</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name>gst</name></expr></argument>, <argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>GetTimeZoneInformation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stdtz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tz</name> <operator>=</operator> <operator>&amp;</operator><name>stdtz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tz</name><operator>-&gt;</operator><name>StandardBias</name></name> <operator>==</operator> <name><name>tz</name><operator>-&gt;</operator><name>DaylightBias</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tz</name><operator>-&gt;</operator><name>StandardDate</name><operator>.</operator><name>wMonth</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tz</name><operator>-&gt;</operator><name>DaylightDate</name><operator>.</operator><name>wMonth</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tz</name> <operator>!=</operator> <operator>&amp;</operator><name>stdtz</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>stdtz</name> <operator>=</operator> <operator>*</operator><name>tz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>stdtz</name><operator>.</operator><name>StandardDate</name><operator>.</operator><name>wMonth</name></name> <operator>=</operator> <name><name>stdtz</name><operator>.</operator><name>DaylightDate</name><operator>.</operator><name>wMonth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SystemTimeToTzSpecificLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stdtz</name></expr></argument>, <argument><expr><name>gst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lst</name><operator>-&gt;</operator><name>wMinute</name></name> <operator>==</operator> <name><name>sst</name><operator>.</operator><name>wMinute</name></name> <operator>&amp;&amp;</operator> <name><name>lst</name><operator>-&gt;</operator><name>wHour</name></name> <operator>==</operator> <name><name>sst</name><operator>.</operator><name>wHour</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GMTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE__LOCALTIME64_S</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MINGW_HAS_SECURE_API</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>_CRTIMP</name> <name>errno_t</name> <name>__cdecl</name></type> <name>_gmtime64_s</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name><modifier>*</modifier></type> <name>tm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__time64_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>_CRTIMP</name> <name>errno_t</name> <name>__cdecl</name></type> <name>_localtime64_s</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name><modifier>*</modifier></type> <name>tm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>__time64_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gmtime_s</name></cpp:macro> <cpp:value>_gmtime64_s</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>localtime_s</name></cpp:macro> <cpp:value>_localtime64_s</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>gmtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>rp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>EINVAL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tp</name> <operator>||</operator> <operator>!</operator><name>rp</name></expr>)</condition> <block>{<block_content>
<label><name>error</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">80</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE__GMTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>gmtime_s</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>st</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unixtime_to_systemtime</name><argument_list>(<argument><expr><operator>*</operator><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>systemtime_to_tm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>rp</name></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type>
<name>localtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>tp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>rp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>EINVAL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tp</name> <operator>||</operator> <operator>!</operator><name>rp</name></expr>)</condition> <block>{<block_content>
<label><name>error</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&gt;=</operator> <literal type="number">80</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE__LOCALTIME64_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>localtime_s</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>gst</name></decl>, <decl><type ref="prev"/><name>lst</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>unixtime_to_systemtime</name><argument_list>(<argument><expr><operator>*</operator><name>tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rp</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <call><name>systemtime_to_localtime</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>systemtime_to_tm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lst</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>rp</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_wrap_io_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>BOOL</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>getsockopt</name><argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_DEBUG</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>SOCKET_ERROR</name> <operator>||</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>WSAENOTSOCK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>O_NONBLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>socklist_insert</name><argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_NONBLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rb_w32_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>h</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>rb_w32_unwrap_io_handle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name> <init>= <expr><call><name>TO_SOCKET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_set_osfhnd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator><name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_socket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>UnlockFile</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>, <argument><expr><name>LK_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>constat_delete</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>socklist_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>double</name></type>
<name>rb_w32_pow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pow</name></cpp:undef>
<decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>default_control</name> <init>= <expr><call><name>_controlfp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_controlfp</name><argument_list>(<argument><expr><name>_PC_64</name></expr></argument>, <argument><expr><name>_MCW_PC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_controlfp</name><argument_list>(<argument><expr><name>default_control</name></expr></argument>, <argument><expr><name>_MCW_PC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>file_id_p</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>bhfi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE_ID_INFO</name></type> <name>fii</name></decl>;</decl_stmt>
}</block> <decl><name>info</name></decl>;</union>
}</block></struct></type> <name>w32_io_info_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>HANDLE</name></type>
<name>w32_io_info</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>w32_io_info_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_check_convert_type_with_id</name><argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>, <argument><expr><name>T_FILE</name></expr></argument>, <argument><expr><literal type="string">"IO"</literal></expr></argument>, <argument><expr><name>idTo_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>rb_w32_get_osfhandle</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INVALID_HANDLE_VALUE</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FilePathValue</name><argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_str_encode_ospath</name><argument_list>(<argument><expr><operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>,
<argument><expr><name>FILE_FLAG_BACKUP_SEMANTICS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>f</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetFileType</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FILE_TYPE_DISK</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>get_ino</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>fii</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>file_id_p</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_INVALID_PARAMETER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>INVALID_HANDLE_VALUE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bhfi</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>file_id_p</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>INVALID_HANDLE_VALUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>close_handle</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>w32_io_info_args</name> <block>{
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>w32_io_info_t</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>call_w32_io_info</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>w32_io_info_args</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>w32_io_info</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_w32_file_identical_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fname1</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>fname2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>w32_io_info_t</name></type> <name>st1</name></decl>, <decl><type ref="prev"/><name>st2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>f1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>w32_io_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fname1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f1</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f1</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>w32_io_info_args</name></name></type> <name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>fname</name></name> <operator>=</operator> <operator>&amp;</operator><name>fname2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>st</name></name> <operator>=</operator> <operator>&amp;</operator><name>st2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>rb_ensure</name><argument_list>(<argument><expr><name>call_w32_io_info</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>close_handle</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>w32_io_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fname2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f2</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>f2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st1</name><operator>.</operator><name>file_id_p</name></name> <operator>!=</operator> <name><name>st2</name><operator>.</operator><name>file_id_p</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st1</name><operator>.</operator><name>file_id_p</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st1</name><operator>.</operator><name>info</name><operator>.</operator><name>bhfi</name><operator>.</operator><name>dwVolumeSerialNumber</name></name> <operator>==</operator> <name><name>st2</name><operator>.</operator><name>info</name><operator>.</operator><name>bhfi</name><operator>.</operator><name>dwVolumeSerialNumber</name></name> <operator>&amp;&amp;</operator>
<name><name>st1</name><operator>.</operator><name>info</name><operator>.</operator><name>bhfi</name><operator>.</operator><name>nFileIndexHigh</name></name> <operator>==</operator> <name><name>st2</name><operator>.</operator><name>info</name><operator>.</operator><name>bhfi</name><operator>.</operator><name>nFileIndexHigh</name></name> <operator>&amp;&amp;</operator>
<name><name>st1</name><operator>.</operator><name>info</name><operator>.</operator><name>bhfi</name><operator>.</operator><name>nFileIndexLow</name></name> <operator>==</operator> <name><name>st2</name><operator>.</operator><name>info</name><operator>.</operator><name>bhfi</name><operator>.</operator><name>nFileIndexLow</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st1</name><operator>.</operator><name>info</name><operator>.</operator><name>fii</name><operator>.</operator><name>VolumeSerialNumber</name></name> <operator>==</operator> <name><name>st2</name><operator>.</operator><name>info</name><operator>.</operator><name>fii</name><operator>.</operator><name>VolumeSerialNumber</name></name> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st1</name><operator>.</operator><name>info</name><operator>.</operator><name>fii</name><operator>.</operator><name>FileId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st2</name><operator>.</operator><name>info</name><operator>.</operator><name>fii</name><operator>.</operator><name>FileId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILE_ID_128</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>Qfalse</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_w32_set_thread_description</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>set_thread_description_func</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>PCWSTR</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>set_thread_description_func</name></type> <name>set_thread_description</name> <init>=
<expr><operator>(</operator><name>set_thread_description_func</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>set_thread_description</name> <operator>==</operator> <operator>(</operator><name>set_thread_description_func</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>set_thread_description</name> <operator>=</operator> <operator>(</operator><name>set_thread_description_func</name><operator>)</operator>
<call><name>get_proc_address</name><argument_list>(<argument><expr><literal type="string">"kernel32"</literal></expr></argument>, <argument><expr><literal type="string">"SetThreadDescription"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>set_thread_description</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>set_thread_description</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_w32_set_thread_description_str</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>th</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>rb_w32_set_thread_description</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="string">L""</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>WCHAR</name> <operator>*</operator><operator>)</operator><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>rb_enc_get_index</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>ENCINDEX_UTF_16LE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_w32_set_thread_description</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rb_str_conv_enc</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>rb_enc_from_index</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_w32_set_thread_description</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator><specifier>const</specifier> <name>rb_f_notimplement_</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VALUE</name> <operator>*</operator></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>VALUE</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>rb_f_notimplement</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&lt;</operator> <literal type="number">120</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"missing/nextafter.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
