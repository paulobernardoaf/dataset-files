<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\win32\file.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINGW_HAS_SECURE_API</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlwapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32/file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INVALID_FILE_ATTRIBUTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_FILE_ATTRIBUTES</name></cpp:macro> <cpp:value>((DWORD)-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct><specifier>static</specifier> struct <name>code_page_table</name> <block>{
<decl_stmt><decl><type><name>USHORT</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>
}</block> <decl><name>rb_code_page</name></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIR_SEPARATOR_P</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c == L'\\' || c == L'/')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIR_UNC_P</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(IS_DIR_SEPARATOR_P(c[0]) &amp;&amp; IS_DIR_SEPARATOR_P(c[1]))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>IS_ABSOLUTE_PATH_P</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISALPHA</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">':'</literal> <operator>&amp;&amp;</operator> <call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>IS_DIR_UNC_P</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_CODE_PAGE</name></cpp:macro> <cpp:value>51932</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_BUFFER_SIZE</name></cpp:macro> <cpp:value>MAX_PATH * 2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>insecure_obj_p</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((level) &gt; 0 &amp;&amp; OBJ_TAINTED(obj))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>system_code_page</name></cpp:macro> <cpp:value>rb_w32_filecp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbstr_to_wstr</name></cpp:macro> <cpp:value>rb_w32_mbstr_to_wstr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wstr_to_mbstr</name></cpp:macro> <cpp:value>rb_w32_wstr_to_mbstr</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>replace_wchar</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>find</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>replace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>find</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>replace</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>remove_invalid_alternative_data</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wfullpath</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>prime</name><index>[]</index></name> <init>= <expr><literal type="string">L":$DATA"</literal></expr></init></decl>;</decl_stmt>
<enum>enum <block>{ <decl><name>prime_len</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>prime</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <name>prime_len</name> <operator>||</operator> <call><name>_wcsnicmp</name><argument_list>(<argument><expr><name>wfullpath</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>prime_len</name></expr></argument>, <argument><expr><name>prime</name></expr></argument>, <argument><expr><name>prime_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>wfullpath</name><index>[<expr><name>size</name> <operator>-</operator> <operator>(</operator><name>prime_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>prime_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wfullpath</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>wfullpath</name> <operator>+</operator> <name>size</name> <operator>-</operator> <operator>(</operator><name>prime_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pos</name> <operator>!=</operator> <name>wfullpath</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>==</operator> <name>L</name><literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>prime_len</name></expr>;</expr_stmt> 
<expr_stmt><expr><name><name>wfullpath</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>rb_enc_foreach_name</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>st_data_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>code_page_i</name><parameter_list>(<parameter><decl><type><name>st_data_t</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"CP"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>code_page</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>code_page</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>code_page_table</name></name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>(</operator>struct <name>code_page_table</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name><name>cp</name><operator>-&gt;</operator><name>table</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><name>count</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">31</literal><operator>)</operator> <operator>|</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>table</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ST_CONTINUE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>INVALID_CODE_PAGE</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>USHORT</name><operator>)</operator><name>code_page</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>UINT</name></type>
<name>code_page</name><parameter_list>(<parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>enc_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>system_code_page</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>enc_idx</name> <operator>=</operator> <call><name>rb_enc_to_index</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>enc_idx</name> <operator>==</operator> <call><name>rb_usascii_encindex</name><argument_list>()</argument_list></call> <operator>||</operator> <name>enc_idx</name> <operator>==</operator> <call><name>rb_ascii8bit_encindex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1252</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>enc_idx</name> <operator>==</operator> <call><name>rb_utf8_encindex</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CP_UTF8</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>enc_idx</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>enc_idx</name> <operator>&lt;</operator> <name><name>rb_code_page</name><operator>.</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>rb_code_page</name><operator>.</operator><name>table</name><index>[<expr><name>enc_idx</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>INVALID_CODE_PAGE</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fix_string_encoding</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>encoding</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_str_conv_enc((str), (encoding), rb_utf8_encoding())</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>replace_to_long_name</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wfullpath</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>find_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>find_handle</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>max_short_name_size</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>max_extension_size</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>path_len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>extension_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><operator>*</operator><name>wfullpath</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>pos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>wcspbrk</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="string">L"*?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>*</operator><name>wfullpath</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pos</name> <operator>!=</operator> <operator>*</operator><name>wfullpath</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extension_len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pos</name> <operator>==</operator> <name>L</name><literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extension_len</name> <operator>=</operator> <name>path_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>path_len</name> <operator>&gt;</operator> <name>max_short_name_size</name> <operator>||</operator> <name>extension_len</name> <operator>&gt;</operator> <name>max_extension_size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>path_len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>&gt;=</operator> <operator>*</operator><name>wfullpath</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>wfullpath</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>wfullpath</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <name>L</name><literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>*</operator><name>wfullpath</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wmemchr</name><argument_list>(<argument><expr><operator>*</operator><name>wfullpath</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>L</name><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <operator>*</operator><name>wfullpath</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>find_handle</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><operator>*</operator><name>wfullpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>find_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>find_handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>trail_pos</name> <init>= <expr><name>pos</name> <operator>-</operator> <operator>*</operator><name>wfullpath</name> <operator>+</operator> <call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>file_len</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name><name>find_data</name><operator>.</operator><name>cFileName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>oldsize</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>find_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>trail_pos</name> <operator>+</operator> <name>file_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><name>buffer_size</name></expr> ?</condition><then> <expr><name>buffer_size</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>oldsize</name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>ALLOC_N</name><argument_list>(<argument><expr><name>wchar_t</name></expr></argument>, <argument><expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>wcsncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>wfullpath</name></expr></argument>, <argument><expr><name>trail_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><name>wfullpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>wfullpath</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>wcsncpy</name><argument_list>(<argument><expr><operator>*</operator><name>wfullpath</name> <operator>+</operator> <name>trail_pos</name></expr></argument>, <argument><expr><name><name>find_data</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><name>file_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>user_length_in_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wuser</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wuser</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>append_wstr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WCHAR</name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>olen</name></decl>, <decl><type ref="prev"/><name>nlen</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>INVALID_CODE_PAGE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nlen</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ws</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>olen</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_modify_expand</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ws</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>olen</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>olen</name> <operator>+</operator> <name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>replaceflags</name> <init>= <expr><name>ECONV_UNDEF_REPLACE</name><operator>|</operator><name>ECONV_INVALID_REPLACE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>utf8str</name> <init>= <expr><call><name>wstr_to_mbstr</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>rb_econv_open</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><call><name>rb_enc_name</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>replaceflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>rb_econv_append</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>utf8str</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>replaceflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_econv_close</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>utf8str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_default_home_dir</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>rb_w32_home_dir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"couldn't find HOME environment -- expanding `~'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>append_wstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>rb_w32_filecp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_filesystem_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_file_expand_path_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abs_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>long_name</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>whome_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>wpath_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wdir_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wfullpath</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wpath</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wpath_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wdir</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wdir_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>whome</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buffer_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>path_cp</name></decl>, <decl><type ref="prev"/><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name> <init>= <expr><name>fname</name></expr></init></decl>, <decl><type ref="prev"/><name>dir</name> <init>= <expr><name>dname</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wfullpath_buffer</name><index>[<expr><name>PATH_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>path_drive</name> <init>= <expr><name>L</name><literal type="char">'\0'</literal></expr></init></decl>, <decl><type ref="prev"/><name>dir_drive</name> <init>= <expr><name>L</name><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignore_dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>path_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tainted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>tainted</name> <operator>=</operator> <call><name>OBJ_TAINTED</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path_encoding</name> <operator>=</operator> <call><name>rb_enc_get</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>path_encoding</name> <operator>=</operator> <call><name>rb_enc_check</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>path_cp</name> <operator>=</operator> <call><name>code_page</name><argument_list>(<argument><expr><name>path_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>path_cp</name> <operator>==</operator> <name>INVALID_CODE_PAGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>CP_UTF8</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>fix_string_encoding</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>path_len</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>int</name><operator>)</operator><name>path_len</name> <operator>!=</operator> <name>path_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"path (%ld bytes) is too long"</literal></expr></argument>,
<argument><expr><name>path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>wpath</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wpath_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wpath_pos</name> <operator>=</operator> <name>wpath</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>abs_mode</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wpath_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wpath_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'~'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>wpath_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wpath_pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tainted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>whome</name> <operator>=</operator> <call><name>rb_w32_home_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>whome</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"couldn't find HOME environment -- expanding `~'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>whome_len</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>whome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_ABSOLUTE_PATH_P</name><argument_list>(<argument><expr><name>whome</name></expr></argument>, <argument><expr><name>whome_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>whome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"non-absolute home"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>path_cp</name> <operator>==</operator> <name>INVALID_CODE_PAGE</name> <operator>||</operator> <call><name>rb_enc_str_asciionly_p</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>path_encoding</name> <operator>=</operator> <call><name>rb_filesystem_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>path_cp</name> <operator>=</operator> <call><name>system_code_page</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ignore_dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>wpath_pos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wpath_len</name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>wpath_len</name> <operator>&amp;&amp;</operator> <call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wpath_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wpath_pos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wpath_len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>wpath_len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>wpath_pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wpath_len</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wpath_pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ignore_dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>path_drive</name> <operator>=</operator> <name><name>wpath_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wpath_pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wpath_len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>abs_mode</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wpath_len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>wpath_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"can't find user "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>append_wstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>wpath_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>user_length_in_path</name><argument_list>(<argument><expr><name>wpath_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>wpath_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_cp</name></expr></argument>, <argument><expr><name>path_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wpath</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><call><name>rb_exc_new_str</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_dir</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>path_cp</name> <operator>==</operator> <name>INVALID_CODE_PAGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>fix_string_encoding</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>path_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>dir_len</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>int</name><operator>)</operator><name>dir_len</name> <operator>!=</operator> <name>dir_len</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wpath</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRangeError</name></expr></argument>, <argument><expr><literal type="string">"base directory (%ld bytes) is too long"</literal></expr></argument>,
<argument><expr><name>dir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>wdir</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wdir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wdir_pos</name> <operator>=</operator> <name>wdir</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>abs_mode</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wdir_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>wdir_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'~'</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>wdir_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wdir_pos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tainted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>whome</name> <operator>=</operator> <call><name>rb_w32_home_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>whome</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"couldn't find HOME environment -- expanding `~'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>whome_len</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>whome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_ABSOLUTE_PATH_P</name><argument_list>(<argument><expr><name>whome</name></expr></argument>, <argument><expr><name>whome_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>whome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"non-absolute home"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>wdir_pos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wdir_len</name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>wdir_len</name> <operator>&amp;&amp;</operator> <call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wdir_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wdir_pos</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>wdir_len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>wdir_len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>wdir</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dir_drive</name> <operator>=</operator> <name><name>wdir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wpath_len</name> <operator>&amp;&amp;</operator> <call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wpath_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wdir_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>wdir_len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>IS_DIR_UNC_P</name><argument_list>(<argument><expr><name>wdir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>wpath_len</name> <operator>&amp;&amp;</operator> <call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wpath_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>separators</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>wdir_len</name> <operator>&amp;&amp;</operator> <name>separators</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wdir</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>separators</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>separators</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wdir_len</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>abs_mode</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wdir_len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>wdir_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"can't find user "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>append_wstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>wdir_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>user_length_in_path</name><argument_list>(<argument><expr><name>wdir_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>wdir_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_cp</name></expr></argument>, <argument><expr><name>path_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wpath</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wdir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><call><name>rb_exc_new_str</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_dir</name> <operator>&amp;&amp;</operator> <name>path_drive</name> <operator>&amp;&amp;</operator> <name>dir_drive</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>towupper</name><argument_list>(<argument><expr><name>path_drive</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>towupper</name><argument_list>(<argument><expr><name>dir_drive</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ignore_dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wdir_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dir_drive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_dir</name> <operator>&amp;&amp;</operator> <name>wpath_len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>IS_DIR_UNC_P</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ignore_dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wdir_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>ignore_dir</name> <operator>&amp;&amp;</operator> <name>wpath_len</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wpath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><name>dir_drive</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>wdir_len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>IS_DIR_UNC_P</name><argument_list>(<argument><expr><name>wdir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ignore_dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>wdir_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buffer_len</name> <operator>=</operator> <name>wpath_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>wdir_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>whome_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>buffer_pos</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>wchar_t</name></expr></argument>, <argument><expr><operator>(</operator><name>buffer_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>whome_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wcsncpy</name><argument_list>(<argument><expr><name>buffer_pos</name></expr></argument>, <argument><expr><name>whome</name></expr></argument>, <argument><expr><name>whome_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_pos</name> <operator>+=</operator> <name>whome_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>whome_len</name> <operator>&amp;&amp;</operator> <call><name>wcsrchr</name><argument_list>(<argument><expr><literal type="string">L"\\/:"</literal></expr></argument>, <argument><expr><name><name>buffer_pos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>dir_drive</name> <operator>&amp;&amp;</operator> <name>path_drive</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>buffer_pos</name><operator>++</operator> <operator>=</operator> <name>path_drive</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>buffer_pos</name><operator>++</operator> <operator>=</operator> <name>L</name><literal type="char">':'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wdir_len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tainted</name> <operator>&amp;&amp;</operator> <call><name>OBJ_TAINTED</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tainted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wcsncpy</name><argument_list>(<argument><expr><name>buffer_pos</name></expr></argument>, <argument><expr><name>wdir_pos</name></expr></argument>, <argument><expr><name>wdir_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_pos</name> <operator>+=</operator> <name>wdir_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>wdir_len</name> <operator>&amp;&amp;</operator> <call><name>wcsrchr</name><argument_list>(<argument><expr><literal type="string">L"\\/:"</literal></expr></argument>, <argument><expr><name><name>buffer_pos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\\'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>wpath_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>wcsncpy</name><argument_list>(<argument><expr><name>buffer_pos</name></expr></argument>, <argument><expr><name>wpath_pos</name></expr></argument>, <argument><expr><name>wpath_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_pos</name> <operator>+=</operator> <name>wpath_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>wpath_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>buffer_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tainted</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_ABSOLUTE_PATH_P</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tainted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>GetFullPathNameW</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>PATH_BUFFER_SIZE</name></expr></argument>, <argument><expr><name>wfullpath_buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>PATH_BUFFER_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wfullpath</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>wchar_t</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>GetFullPathNameW</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>wfullpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>wfullpath</name> <operator>=</operator> <name>wfullpath_buffer</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>IS_DIR_SEPARATOR_P</name><argument_list>(<argument><expr><name><name>wfullpath</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>wfullpath</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>L</name><literal type="char">':'</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>IS_DIR_UNC_P</name><argument_list>(<argument><expr><name>wfullpath</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wfullpath</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>wfullpath</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>L</name><literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wfullpath</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>remove_invalid_alternative_data</name><argument_list>(<argument><expr><name>wfullpath</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>long_name</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name> <init>= <expr><ternary><condition><expr><name>wfullpath</name> <operator>==</operator> <name>wfullpath_buffer</name></expr> ?</condition><then> <expr><name>PATH_BUFFER_SIZE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>replace_to_long_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wfullpath</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>replace_wchar</name><argument_list>(<argument><expr><name>wfullpath</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>L</name><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>append_wstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>wfullpath</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>path_cp</name></expr></argument>, <argument><expr><name>path_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>tainted</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>OBJ_TAINT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wpath</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wdir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>whome</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>whome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wfullpath</name> <operator>!=</operator> <name>wfullpath_buffer</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>wfullpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>path_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_readlink</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>resultenc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>wtmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wpathbuf</name></decl>, <decl><type ref="prev"/><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_w32_reparse_buffer_t</name></type> <name>rbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rp</name> <init>= <expr><operator>&amp;</operator><name>rbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wpath</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>cp</name></decl>, <decl><type ref="prev"/><name>path_cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FilePathValue</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>rb_enc_get</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>path_cp</name> <operator>=</operator> <call><name>code_page</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>INVALID_CODE_PAGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>fix_string_encoding</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>CP_UTF8</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wpath</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>wpathbuf</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wpath</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rb_w32_read_reparse_point</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>ERROR_MORE_DATA</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>rb_w32_reparse_buffer_size</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rp</name> <operator>=</operator> <call><name>ALLOCV</name><argument_list>(<argument><expr><name>wtmp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rb_w32_read_reparse_point</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>wpathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>wtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rb_syserr_fail_path</name><argument_list>(<argument><expr><call><name>rb_w32_map_errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> 
<expr_stmt><expr><call><name>rb_syserr_fail_path</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <name>resultenc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>path_cp</name> <operator>=</operator> <call><name>code_page</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>lstrlenW</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>append_wstr</name><argument_list>(<argument><expr><call><name>rb_enc_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>path_cp</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>wtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_file_load_ok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>wpath</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wpath</name> <operator>=</operator> <call><name>mbstr_to_wstr</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wpath</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name> <operator>||</operator>
<operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>CreateFileW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>GENERIC_READ</name></expr></argument>,
<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rb_freopen</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>fname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>wname</name></decl>, <decl><type ref="prev"/><name><name>wmode</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>wtmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>wmode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>wmode</name></expr></argument>, <argument><expr><call><name>numberof</name><argument_list>(<argument><expr><name>wmode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSTRING_GETMEM</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rb_long2int</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wname</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>WCHAR</name></expr></argument>, <argument><expr><name>wtmp</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>wname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_MSVCRT_VERSION</name> <operator>&lt;</operator> <literal type="number">80</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE__WFREOPEN_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><call><name>_wfreopen</name><argument_list>(<argument><expr><name>wname</name></expr></argument>, <argument><expr><name>wmode</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>errno</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>newfp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>_wfreopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newfp</name></expr></argument>, <argument><expr><name>wname</name></expr></argument>, <argument><expr><name>wmode</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>wtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>Init_w32_codepage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rb_code_page</name><operator>.</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rb_enc_foreach_name</name><argument_list>(<argument><expr><name>code_page_i</name></expr></argument>, <argument><expr><operator>(</operator><name>st_data_t</name><operator>)</operator><operator>&amp;</operator><name>rb_code_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
