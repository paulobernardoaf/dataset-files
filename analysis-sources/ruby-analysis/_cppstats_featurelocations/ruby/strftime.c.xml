<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\strftime.c">
















































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GAWK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TM_IN_SYS_TIME</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GAWK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_TIME_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/vm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timev.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSV_EXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUNOS_EXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSIX2_DATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMS_EXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAILHEADER_EXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISO_DATE_EXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ISO_DATE_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>POSIX2_DATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSIX2_DATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POSIX2_DATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SYSV_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSV_EXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUNOS_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUNOS_EXT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POSIX2_DATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>adddecl</name><parameter_list>(<parameter><type><name>stuff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>stuff</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>adddecl</name><parameter_list>(<parameter><type><name>stuff</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strchr</name></cpp:undef> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>__STDC__</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>_WIN32</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>const</name></cpp:macro></cpp:define> 
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>weeknumber</name><parameter_list>()</parameter_list>;</function_decl>
<macro><name>adddecl</name><argument_list>(<argument>static int iso8601wknum();</argument>)</argument_list></macro>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>weeknumber_v</name><parameter_list>()</parameter_list>;</function_decl>
<macro><name>adddecl</name><argument_list>(<argument>static int iso8601wknum_v();</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>weeknumber</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>timeptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstweekday</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>adddecl</name><argument_list>(<argument>static int iso8601wknum(const struct tm *timeptr);</argument>)</argument_list></macro>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>weeknumber_v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstweekday</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>adddecl</name><argument_list>(<argument>static int iso8601wknum_v(const struct vtm *vtm);</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDC_HEADERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>malloc</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>realloc</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>getenv</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>strchr</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>range</name><parameter_list>(<parameter><type><name>low</name></type></parameter>, <parameter><type><name>item</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>max((low), min((item), (hi)))</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>min</name></cpp:undef> 



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>max</name></cpp:undef> 



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_STRING_LITERAL_CONCATENATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> No string literal concatenation</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), '+', 1, (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sub</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), '-', 1, (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mul</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), '*', 1, (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>quo</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), rb_intern("quo"), 1, (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>div</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), rb_intern("div"), 1, (y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_funcall((x), '%', 1, (y)))</cpp:value></cpp:define>



<enum>enum <block>{<decl><name>LEFT</name></decl>, <decl><name>CHCASE</name></decl>, <decl><name>LOWER</name></decl>, <decl><name>UPPER</name></decl>}</block>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_OF</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1U&lt;&lt;(n))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>resize_buffer</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ftime</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endp</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>s</name> <operator>-</operator> <operator>*</operator><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name> <init>= <expr><name>len</name> <operator>+</operator> <name>n</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nlen</name> <argument_list type="generic">&lt; <argument><expr><name>len</name> <operator>||</operator> <name>nlen</name></expr></argument> &gt;</argument_list></name> <name>maxsize</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>ftime</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_modify_expand</name><argument_list>(<argument><expr><name>ftime</name></expr></argument>, <argument><expr><name>nlen</name><operator>-</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>ftime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>endp</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>nlen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>s</name> <operator>+=</operator> <name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>buffer_size_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format_end</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>format_len</name></decl></parameter>,
<parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name> <init>= <expr><name>format_end</name><operator>-</operator><name>format_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>fmt</name> <init>= <expr><call><name>rb_enc_str_new</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>format_len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_syserr_fail_str</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>case_conv</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call><operator>|</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call></expr>:</case>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ISLOWER</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>TOUPPER</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>s</name><operator>++</operator></expr><operator>,</operator> <expr><operator>--</operator><name>i</name></expr>)</condition>;</do>
<break>break;</break>
<case>case <expr><call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call></expr>:</case>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ISUPPER</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>TOLOWER</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>s</name><operator>++</operator></expr><operator>,</operator> <expr><operator>--</operator><name>i</name></expr>)</condition>;</do>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>format_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_Integer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>rb_big2str</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_strftime_with_timespec</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ftime</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>format_len</name></decl></parameter>,
<parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name></type> <name>timev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gmt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>ftime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>ftime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endp</name> <init>= <expr><name>start</name> <operator>+</operator> <call><name>rb_str_capacity</name><argument_list>(<argument><expr><name>ftime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>format_end</name> <init>= <expr><name>format</name> <operator>+</operator> <name>format_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TBUFSIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>auto</specifier> <name>char</name></type> <name><name>tbuf</name><index>[<expr><name>TBUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>precision</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>colons</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>padding</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAILHEADER_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>VALUE</name></type> <name>zone</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>days_l</name><index>[]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Sunday"</literal></expr>, <expr><literal type="string">"Monday"</literal></expr>, <expr><literal type="string">"Tuesday"</literal></expr>, <expr><literal type="string">"Wednesday"</literal></expr>,
<expr><literal type="string">"Thursday"</literal></expr>, <expr><literal type="string">"Friday"</literal></expr>, <expr><literal type="string">"Saturday"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>months_l</name><index>[]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"January"</literal></expr>, <expr><literal type="string">"February"</literal></expr>, <expr><literal type="string">"March"</literal></expr>, <expr><literal type="string">"April"</literal></expr>,
<expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"June"</literal></expr>, <expr><literal type="string">"July"</literal></expr>, <expr><literal type="string">"August"</literal></expr>, <expr><literal type="string">"September"</literal></expr>,
<expr><literal type="string">"October"</literal></expr>, <expr><literal type="string">"November"</literal></expr>, <expr><literal type="string">"December"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ampm</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"AM"</literal></expr>, <expr><literal type="string">"PM"</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>format_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>vtm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<label><name>err</name>:</label>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enc</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>enc</name> <operator>==</operator> <call><name>rb_usascii_encoding</name><argument_list>()</argument_list></call> <operator>||</operator>
<name>enc</name> <operator>==</operator> <call><name>rb_ascii8bit_encoding</name><argument_list>()</argument_list></call> <operator>||</operator>
<name>enc</name> <operator>==</operator> <call><name>rb_locale_encoding</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>format</name> <operator>&lt;</operator> <name>format_end</name></expr>;</condition> <incr><expr><name>format</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_FOUND</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (precision &gt; 0) goto unknown; } while (0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEEDS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (s &gt;= endp || (n) &gt;= endp - s - 1) { s = resize_buffer(ftime, s, &amp;start, &amp;endp, (n), maxsize); buffer_size_check(s, format_end, format_len, enc); } } while (0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL_PADDING</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(flags &amp; BIT_OF(LEFT)) &amp;&amp; precision &gt; (i)) { NEEDS(precision); memset(s, padding ? padding : ' ', precision - (i)); s += precision - (i); } else { NEEDS(i); } } while (0);</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_PADDING</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>def_pad</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;"%*"fmt"\0""%0*"fmt[(padding == '0' || (!padding &amp;&amp; (def_pad) == '0')) ? rb_strlen_lit("%*"fmt)+1 : 0])</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_PRECISION</name><parameter_list>(<parameter><type><name>def_prec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flags &amp; BIT_OF(LEFT)) ? (1) : (precision &lt;= 0) ? (def_prec) : (precision))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name><parameter_list>(<parameter><type><name>def_pad</name></type></parameter>, <parameter><type><name>def_prec</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { precision = FMT_PRECISION(def_prec); len = s - start; NEEDS(precision); rb_str_set_len(ftime, len); rb_str_catf(ftime, FMT_PADDING(fmt, def_pad), precision, (val)); RSTRING_GETMEM(ftime, s, len); endp = (start = s) + rb_str_capacity(ftime); s += len; } while (0)</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRFTIME</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { len = s - start; rb_str_set_len(ftime, len); if (!rb_strftime_with_timespec(ftime, (fmt), rb_strlen_lit(fmt), enc, time, vtm, timev, ts, gmt, maxsize)) return 0; s = RSTRING_PTR(ftime); i = RSTRING_LEN(ftime) - len; endp = (start = s) + rb_str_capacity(ftime); s += len; if (i &gt; 0) case_conv(s, i, flags); if (precision &gt; i) {NEEDS(precision); memmove(s + precision - i, s, i);memset(s, padding ? padding : ' ', precision - i); s += precision; } else s += i; } while (0)</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMTV</name><parameter_list>(<parameter><type><name>def_pad</name></type></parameter>, <parameter><type><name>def_prec</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { VALUE tmp = (val); if (FIXNUM_P(tmp)) { FMT((def_pad), (def_prec), "l"fmt, FIX2LONG(tmp)); } else { const int base = ((fmt[0] == 'x') ? 16 : (fmt[0] == 'o') ? 8 : 10); precision = FMT_PRECISION(def_prec); if (!padding) padding = (def_pad); tmp = format_value(tmp, base); i = RSTRING_LEN(tmp); FILL_PADDING(i); rb_str_set_len(ftime, s-start); rb_str_append(ftime, tmp); RSTRING_GETMEM(ftime, s, len); endp = (start = s) + rb_str_capacity(ftime); s += len; } } while (0)</cpp:value></cpp:define>






















<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><name>format_end</name> <operator>-</operator> <name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tp</name> <operator>=</operator> <name>format_end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>tp</name> <operator>-</operator> <name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>tp</name> <operator>-</operator> <name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>tp</name> <operator>-</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>format_end</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>colons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>format</name> <operator>&gt;=</operator> <name>format_end</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>format</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<expr_stmt><expr><call><name>FILL_PADDING</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call><operator>|</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <name><name>days_l</name><index>[<expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call><operator>|</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>&gt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tp</name> <operator>=</operator> <name><name>days_l</name><index>[<expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYSV_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call><operator>|</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <name><name>months_l</name><index>[<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call><operator>|</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>tp</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tp</name> <operator>=</operator> <name><name>months_l</name><index>[<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%a %b %e %H:%M:%S %Y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'H'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>yday</name></name></expr></argument>, <argument><expr><literal type="number">366</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> 
<case>case <expr><literal type="char">'P'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>|</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call><operator>|</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>ampm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>ampm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ts</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>sec</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>~</operator><operator>(</operator><name>time_t</name><operator>)</operator><literal type="number">0</literal> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PRI_TIMET_PREFIX</name><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PRI_TIMET_PREFIX</name><literal type="string">"u"</literal></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sec</name> <init>= <expr><call><name>div</name><argument_list>(<argument><expr><name>timev</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FMTV</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name>weeknumber_v</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'w'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'W'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name>weeknumber_v</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'y'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>mod</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'Y'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>y</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><ternary><condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>y</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>FMTV</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAILHEADER_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'z'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>gmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>utc_offset</name></name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"round"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>-</operator><name>off</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<switch>switch <condition>(<expr><name>colons</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name>precision</name><operator>-</operator><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name>precision</name><operator>-</operator><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name>precision</name><operator>-</operator><literal type="number">7</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>%</operator> <literal type="number">3600</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name>precision</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>off</name> <operator>%</operator> <literal type="number">60</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name>precision</name><operator>-</operator><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <ternary><condition><expr><name>precision</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name>precision</name><operator>-</operator><literal type="number">7</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>format</name><operator>--</operator></expr>;</expr_stmt>
<goto>goto <name>unknown</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>padding</name> <operator>==</operator> <literal type="char">' '</literal></expr> ?</condition><then> <expr><literal type="string">"%+*ld"</literal></expr> </then><else>: <expr><literal type="string">"%+.*ld"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><name>precision</name> <operator>+</operator> <operator>(</operator><name>padding</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr></argument>, <argument><expr><name>sign</name> <operator>*</operator> <operator>(</operator><name>off</name> <operator>/</operator> <literal type="number">3600</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>off</name> <operator>&lt;</operator> <literal type="number">3600</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><ternary><condition><expr><name>padding</name> <operator>==</operator> <literal type="char">' '</literal></expr> ?</condition><then> <expr><name>s</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>s</name></expr></else></ternary><operator>)</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>off</name> <operator>%</operator> <literal type="number">3600</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>colons</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>off</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>colons</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>off</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name>off</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>colons</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>off</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>&lt;=</operator> <name>colons</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call><operator>|</operator><call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>LOWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>gmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <literal type="string">"UTC"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>zone</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>zone</name> <operator>=</operator> <call><name>rb_time_zone_abbreviation</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>zone</name></name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>enc</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TBUFSIZE</name> <operator>&amp;&amp;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_str_conv_enc_opts</name><argument_list>(<argument><expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_locale_encoding</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>ECONV_UNDEF_REPLACE</name><operator>|</operator><name>ECONV_INVALID_REPLACE</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TBUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYSV_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FILL_PADDING</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FILL_PADDING</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'D'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name>range</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'r'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%I:%M:%S %p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'R'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%H:%M"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'T'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUNOS_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'k'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VMS_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'v'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%e-%^b-%4Y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POSIX2_DATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<expr_stmt><expr><call><name>FMTV</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name>div</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>format</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"cCxXyY"</literal></expr></argument>, <argument><expr><name><name>format</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>format</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"deHkIlmMSuUVwWy"</literal></expr></argument>, <argument><expr><name><name>format</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'V'</literal></expr>:</case> 
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><call><name>iso8601wknum_v</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ISO_DATE_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>









<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>yv</name> <init>= <expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>iso8601wknum_v</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>w</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yv</name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name>yv</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>w</name> <operator>&gt;=</operator> <literal type="number">52</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>yv</name> <operator>=</operator> <call><name>sub</name><argument_list>(<argument><expr><name>yv</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'G'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>yv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>y</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>yv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><ternary><condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>y</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>FMTV</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>yv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>yv</name> <operator>=</operator> <call><name>mod</name><argument_list>(<argument><expr><name>yv</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>FIX2LONG</name><argument_list>(<argument><expr><name>yv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FMT</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ld"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 


<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<goto>goto <name>subsec</name>;</goto>

<case>case <expr><literal type="char">'N'</literal></expr>:</case>








<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<label><name>subsec</name>:</label>
<if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>NEEDS</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>subsec</name> <init>= <expr><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">9</literal> <operator>&lt;</operator> <name>precision</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"%09ld"</literal></expr></argument>, <argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><name>precision</name><operator>-</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>precision</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal><operator>-</operator><name>precision</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>subsec</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"%0*ld"</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>precision</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>subsec</name> <init>= <expr><call><name>mod</name><argument_list>(<argument><expr><name>timev</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ww</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ww</name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">9</literal> <operator>&lt;=</operator> <name>ww</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>subsec</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ww</name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>ww</name></expr>;</condition> <incr><expr><name>ww</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>subsec</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>subsec</name> <operator>=</operator> <call><name>div</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"%0*ld"</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>subsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>precision</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>subsec</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_str_format</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>,
<argument><expr><call><name>rb_fstring_lit</name><argument_list>(<argument><expr><literal type="string">"%0*d"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>strlcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>endp</name><operator>-</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>precision</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'F'</literal></expr>:</case> 
<expr_stmt><expr><call><name>STRFTIME</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><call><name>FLAG_FOUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <name>precision</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><call><name>FLAG_FOUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>UPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<expr_stmt><expr><call><name>FLAG_FOUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>BIT_OF</name><argument_list>(<argument><expr><name>CHCASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'_'</literal></expr>:</case>
<expr_stmt><expr><call><name>FLAG_FOUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">':'</literal></expr>:</case>
<for>for <control>(<init><expr><name>colons</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>colons</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>colons</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>format</name><operator>+</operator><name>colons</name> <operator>&gt;=</operator> <name>format_end</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>format</name><index>[<expr><name>colons</name></expr>]</index></name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>format</name><index>[<expr><name>colons</name></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>format</name> <operator>+=</operator> <name>colons</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>u</name> <init>= <expr><call><name>ruby_scan_digits</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>format_end</name><operator>-</operator><name>format</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ov</name> <operator>||</operator> <name>u</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>u</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> <operator>+=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block>

<default>default:</default>
<label><name>unknown</name>:</label>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>format</name> <operator>-</operator> <name>sp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>padding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>colons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FILL_PADDING</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>case_conv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>format</name> <operator>!=</operator> <name>format_end</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>ftime</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>ftime</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ftime</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>strftime_size_limit</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>format_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>limit</name> <init>= <expr><name>format_len</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <name>format_len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>limit</name> <operator>=</operator> <name>format_len</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>limit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_strftime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>format_len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>timev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><call><name>rb_enc_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_strftime_with_timespec</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>format_len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>, <argument><expr><name>vtm</name></expr></argument>, <argument><expr><name>timev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>gmt</name></expr></argument>,
<argument><expr><call><name>strftime_size_limit</name><argument_list>(<argument><expr><name>format_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_strftime_timespec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>format_len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,
<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><call><name>rb_enc_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>rb_strftime_with_timespec</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>format_len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>,
<argument><expr><name>time</name></expr></argument>, <argument><expr><name>vtm</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>gmt</name></expr></argument>,
<argument><expr><call><name>strftime_size_limit</name><argument_list>(<argument><expr><name>format_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
VALUE
rb_strftime_limit(const char *format, size_t format_len, rb_encoding *enc,
VALUE time, const struct vtm *vtm, struct timespec *ts,
int gmt, size_t maxsize)
{
VALUE result = rb_enc_str_new(0, 0, enc);
return rb_strftime_with_timespec(result, format, format_len, enc,
time, vtm, Qnil, ts, gmt, maxsize);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>isleap</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>year</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>year</name> <operator>%</operator> <literal type="number">100</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>year</name> <operator>%</operator> <literal type="number">400</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>vtm2tm_noyear</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><call><name>mod</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>mon</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>mday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>hour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_wday</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>wday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_yday</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>yday</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <name><name>vtm</name><operator>-&gt;</operator><name>isdst</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_GMTOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_gmtoff</name></name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name><name>vtm</name><operator>-&gt;</operator><name>utc_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TM_ZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_zone</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>vtm</name><operator>-&gt;</operator><name>zone</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POSIX2_DATE</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso8601wknum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>timeptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>














<decl_stmt><decl><type><name>int</name></type> <name>weeknum</name></decl>, <decl><type ref="prev"/><name>jan1day</name></decl>;</decl_stmt>


<expr_stmt><expr><name>weeknum</name> <operator>=</operator> <call><name>weeknumber</name><argument_list>(<argument><expr><name>timeptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>














<expr_stmt><expr><name>jan1day</name> <operator>=</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>-</operator> <operator>(</operator><name><name>timeptr</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>%</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>jan1day</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>jan1day</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>














<switch>switch <condition>(<expr><name>jan1day</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case> 
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case> 
<case>case <expr><literal type="number">3</literal></expr>:</case> 
<case>case <expr><literal type="number">4</literal></expr>:</case> 
<expr_stmt><expr><name>weeknum</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case> 
<case>case <expr><literal type="number">6</literal></expr>:</case> 
<case>case <expr><literal type="number">0</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name>weeknum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_BROKEN_XPG4</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>weeknum</name> <operator>=</operator> <literal type="number">53</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>dec31ly</name></decl>;</decl_stmt> 
<expr_stmt><expr><name>dec31ly</name> <operator>=</operator> <operator>*</operator><name>timeptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec31ly</name><operator>.</operator><name>tm_year</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec31ly</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec31ly</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec31ly</name><operator>.</operator><name>tm_wday</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>jan1day</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><name>jan1day</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dec31ly</name><operator>.</operator><name>tm_yday</name></name> <operator>=</operator> <literal type="number">364</literal> <operator>+</operator> <call><name>isleap</name><argument_list>(<argument><expr><name><name>dec31ly</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>weeknum</name> <operator>=</operator> <call><name>iso8601wknum</name><argument_list>(<argument><expr><operator>&amp;</operator> <name>dec31ly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>











<decl_stmt><decl><type><name>int</name></type> <name>wday</name></decl>, <decl><type ref="prev"/><name>mday</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wday</name> <operator>=</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mday</name> <operator>=</operator> <name><name>timeptr</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>wday</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>mday</name> <operator>&gt;=</operator> <literal type="number">29</literal> <operator>&amp;&amp;</operator> <name>mday</name> <operator>&lt;=</operator> <literal type="number">31</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>wday</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>mday</name> <operator>==</operator> <literal type="number">30</literal> <operator>||</operator> <name>mday</name> <operator>==</operator> <literal type="number">31</literal><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>wday</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>mday</name> <operator>==</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>weeknum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>weeknum</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>iso8601wknum_v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vtm2tm_noyear</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>iso8601wknum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>weeknumber</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>timeptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstweekday</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wday</name> <init>= <expr><name><name>timeptr</name><operator>-&gt;</operator><name>tm_wday</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>firstweekday</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wday</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
<expr_stmt><expr><name>wday</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>wday</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>timeptr</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>-</operator> <name>wday</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>weeknumber_v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vtm</name></name> <modifier>*</modifier></type><name>vtm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstweekday</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>vtm2tm_noyear</name><argument_list>(<argument><expr><name>vtm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>weeknumber</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><name>firstweekday</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>


Date: Wed, 24 Apr 91 20:54:08 MDT
From: Michal Jaegermann &lt;audfax!emory!vm.ucs.UAlberta.CA!NTOMCZAK&gt;
To: arnold@audiofax.com

Hi Arnold,
in a process of fixing of strftime() in libraries on Atari ST I grabbed
some pieces of code from your own strftime. When doing that it came
to mind that your weeknumber() function compiles a little bit nicer
in the following form:



{
return (timeptr-&gt;tm_yday - timeptr-&gt;tm_wday +
(firstweekday ? (timeptr-&gt;tm_wday ? 8 : 1) : 7)) / 7;
}
How nicer it depends on a compiler, of course, but always a tiny bit.

Cheers,
Michal
ntomczak@vm.ucs.ualberta.ca
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_STRFTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>




























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXTIME</name></cpp:macro> <cpp:value>132</cpp:value></cpp:define>





<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>array</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"(%%A) full weekday name, var length (Sunday..Saturday) %A"</literal></expr>,
<expr><literal type="string">"(%%B) full month name, var length (January..December) %B"</literal></expr>,
<expr><literal type="string">"(%%C) Century %C"</literal></expr>,
<expr><literal type="string">"(%%D) date (%%m/%%d/%%y) %D"</literal></expr>,
<expr><literal type="string">"(%%E) Locale extensions (ignored) %E"</literal></expr>,
<expr><literal type="string">"(%%H) hour (24-hour clock, 00..23) %H"</literal></expr>,
<expr><literal type="string">"(%%I) hour (12-hour clock, 01..12) %I"</literal></expr>,
<expr><literal type="string">"(%%M) minute (00..59) %M"</literal></expr>,
<expr><literal type="string">"(%%O) Locale extensions (ignored) %O"</literal></expr>,
<expr><literal type="string">"(%%R) time, 24-hour (%%H:%%M) %R"</literal></expr>,
<expr><literal type="string">"(%%S) second (00..60) %S"</literal></expr>,
<expr><literal type="string">"(%%T) time, 24-hour (%%H:%%M:%%S) %T"</literal></expr>,
<expr><literal type="string">"(%%U) week of year, Sunday as first day of week (00..53) %U"</literal></expr>,
<expr><literal type="string">"(%%V) week of year according to ISO 8601 %V"</literal></expr>,
<expr><literal type="string">"(%%W) week of year, Monday as first day of week (00..53) %W"</literal></expr>,
<expr><literal type="string">"(%%X) appropriate locale time representation (%H:%M:%S) %X"</literal></expr>,
<expr><literal type="string">"(%%Y) year with century (1970...) %Y"</literal></expr>,
<expr><literal type="string">"(%%Z) timezone (EDT), or blank if timezone not determinable %Z"</literal></expr>,
<expr><literal type="string">"(%%a) locale's abbreviated weekday name (Sun..Sat) %a"</literal></expr>,
<expr><literal type="string">"(%%b) locale's abbreviated month name (Jan..Dec) %b"</literal></expr>,
<expr><literal type="string">"(%%c) full date (Sat Nov 4 12:02:33 1989)%n%t%t%t %c"</literal></expr>,
<expr><literal type="string">"(%%d) day of the month (01..31) %d"</literal></expr>,
<expr><literal type="string">"(%%e) day of the month, blank-padded ( 1..31) %e"</literal></expr>,
<expr><literal type="string">"(%%h) should be same as (%%b) %h"</literal></expr>,
<expr><literal type="string">"(%%j) day of the year (001..366) %j"</literal></expr>,
<expr><literal type="string">"(%%k) hour, 24-hour clock, blank pad ( 0..23) %k"</literal></expr>,
<expr><literal type="string">"(%%l) hour, 12-hour clock, blank pad ( 1..12) %l"</literal></expr>,
<expr><literal type="string">"(%%m) month (01..12) %m"</literal></expr>,
<expr><literal type="string">"(%%p) locale's AM or PM based on 12-hour clock %p"</literal></expr>,
<expr><literal type="string">"(%%r) time, 12-hour (same as %%I:%%M:%%S %%p) %r"</literal></expr>,
<expr><literal type="string">"(%%u) ISO 8601: Weekday as decimal number [1 (Monday) - 7] %u"</literal></expr>,
<expr><literal type="string">"(%%v) VMS date (dd-bbb-YYYY) %v"</literal></expr>,
<expr><literal type="string">"(%%w) day of week (0..6, Sunday == 0) %w"</literal></expr>,
<expr><literal type="string">"(%%x) appropriate locale date representation %x"</literal></expr>,
<expr><literal type="string">"(%%y) last two digits of year (00..99) %y"</literal></expr>,
<expr><literal type="string">"(%%z) timezone offset east of GMT as HHMM (e.g. -0500) %z"</literal></expr>,
<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>



<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<function_decl><type><name>long</name></type> <name>time</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>string</name><index>[<expr><name>MAXTIME</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>clock</name></decl>;</decl_stmt>



<expr_stmt><expr><name>clock</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>next</name> <operator>=</operator> <name><name>array</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>MAXTIME</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
