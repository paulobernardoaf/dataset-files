<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\vm_dump.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ucontext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPROC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/vm_map.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_init.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vm_region_recurse</name></cpp:macro> <cpp:value>vm_region_recurse_64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LIST_HEAD</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"addr2line.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/variable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/vm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iseq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VMDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMDEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_POSBUF</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VM_CFP_CNT</name><parameter_list>(<parameter><type><name>ec</name></type></parameter>, <parameter><type><name>cfp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((rb_control_frame_t *)((ec)-&gt;vm_stack + (ec)-&gt;vm_stack_size) - (rb_control_frame_t *)(cfp))</cpp:value></cpp:define>



<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_method_type_name</name><parameter_list>(<parameter><decl><type><name>rb_method_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name>ruby_on_ci</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>control_frame_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>ep</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>ep</name></name> <operator>-</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ep_in_heap</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>posbuf</name><index>[<expr><name>MAX_POSBUF</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>magic</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iseq_name</name> <init>= <expr><literal type="string">"-"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>selfstr</name> <init>= <expr><literal type="string">"-"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>biseq_name</name> <init>= <expr><literal type="string">"-"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_callable_method_entry_t</name> <modifier>*</modifier></type><name>me</name> <init>= <expr><call><name>rb_vm_frame_method_entry</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ep</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ep</name></expr></argument> &gt;</argument_list></name> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>cfp</name><operator>-&gt;</operator><name>ep</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep_in_heap</name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VM_FRAME_MAGIC_TOP</name></expr>:</case>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="string">"TOP"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VM_FRAME_MAGIC_METHOD</name></expr>:</case>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="string">"METHOD"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VM_FRAME_MAGIC_CLASS</name></expr>:</case>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="string">"CLASS"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VM_FRAME_MAGIC_BLOCK</name></expr>:</case>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="string">"BLOCK"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VM_FRAME_MAGIC_CFUNC</name></expr>:</case>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="string">"CFUNC"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VM_FRAME_MAGIC_IFUNC</name></expr>:</case>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="string">"IFUNC"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VM_FRAME_MAGIC_EVAL</name></expr>:</case>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="string">"EVAL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VM_FRAME_MAGIC_RESCUE</name></expr>:</case>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="string">"RESCUE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="string">"------"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>magic</name> <operator>=</operator> <literal type="string">"(none)"</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_inspect</name><argument_list>(<argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>selfstr</name> <operator>=</operator> <call><name>StringValueCStr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>selfstr</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VM_IFUNC_P</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IMEMO_TYPE_P(ptr, imemo_ifunc)</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><call><name>RUBY_VM_IFUNC_P</name><argument_list>(<argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iseq_name</name> <operator>=</operator> <literal type="string">"&lt;ifunc&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_sym2str</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iseq_name</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>posbuf</name></expr></argument>, <argument><expr><name>MAX_POSBUF</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><name>iseq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>iseq</name> <operator>=</operator> <name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>cfp</name><operator>-&gt;</operator><name>pc</name></name> <operator>-</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>iseq_encoded</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iseq_name</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>location</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>rb_vm_get_sourceline</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>posbuf</name></expr></argument>, <argument><expr><name>MAX_POSBUF</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><call><name>rb_iseq_path</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>me</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iseq_name</name> <operator>=</operator> <call><name>rb_id2name</name><argument_list>(<argument><expr><name><name>me</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>original_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>posbuf</name></expr></argument>, <argument><expr><name>MAX_POSBUF</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><name>iseq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"c:%04"</literal><name>PRIdPTRDIFF</name><literal type="string">" "</literal></expr></argument>,
<argument><expr><operator>(</operator><operator>(</operator><name>rb_control_frame_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name> <operator>+</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack_size</name></name><operator>)</operator> <operator>-</operator> <name>cfp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"p:---- "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"p:%04"</literal><name>PRIdPTRDIFF</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"s:%04"</literal><name>PRIdPTRDIFF</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name> <operator>-</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ep_in_heap</name> <operator>==</operator> <literal type="char">' '</literal></expr> ?</condition><then> <expr><literal type="string">"e:%06"</literal><name>PRIdPTRDIFF</name><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">"E:%06"</literal><name>PRIxPTRDIFF</name><literal type="string">" "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ep</name> <operator>%</operator> <literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%-6s"</literal></expr></argument>, <argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>posbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>VM_FRAME_FINISHED_P</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" [FINISH]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"iseq: %-24s "</literal></expr></argument>, <argument><expr><name>iseq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"self: %-24s "</literal></expr></argument>, <argument><expr><name>selfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%-1s "</literal></expr></argument>, <argument><expr><name>biseq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ruby_on_ci</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">0x100</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>me</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IMEMO_TYPE_P</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><name>imemo_ment</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" me:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" called_id: %s, type: %s\n"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name><name>me</name><operator>-&gt;</operator><name>called_id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_method_type_name</name><argument_list>(<argument><expr><name><name>me</name><operator>-&gt;</operator><name>def</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" owner class: %s\n"</literal></expr></argument>, <argument><expr><call><name>rb_raw_obj_info</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>owner</name></name> <operator>!=</operator> <name><name>me</name><operator>-&gt;</operator><name>defined_class</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" defined_class: %s\n"</literal></expr></argument>, <argument><expr><call><name>rb_raw_obj_info</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><name><name>me</name><operator>-&gt;</operator><name>defined_class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" me is corrupted (%s)\n"</literal></expr></argument>, <argument><expr><call><name>rb_raw_obj_info</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>me</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" self: %s\n"</literal></expr></argument>, <argument><expr><call><name>rb_raw_obj_info</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><name><name>cfp</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iseq</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>local_table_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" lvars:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>local_table_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>ep</name></name> <operator>-</operator> <name><name>cfp</name><operator>-&gt;</operator><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>local_table_size</name></name> <operator>-</operator> <name>VM_ENV_DATA_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s: %s\n"</literal></expr></argument>,
<argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>local_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_raw_obj_info</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_vmdebug_stack_dump_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
VALUE *sp = cfp-&gt;sp;
const VALUE *ep = cfp-&gt;ep;
VALUE *p, *st, *t;

fprintf(stderr, "-- stack frame ------------\n");
for (p = st = ec-&gt;vm_stack; p &lt; sp; p++) {
fprintf(stderr, "%04ld (%p): %08"PRIxVALUE, (long)(p - st), p, *p);

t = (VALUE *)*p;
if (ec-&gt;vm_stack &lt;= t &amp;&amp; t &lt; sp) {
fprintf(stderr, " (= %ld)", (long)((VALUE *)GC_GUARDED_PTR_REF((VALUE)t) - ec-&gt;vm_stack));
}

if (p == ep)
fprintf(stderr, " &lt;- ep");

fprintf(stderr, "\n");
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"-- Control frame information "</literal>
<literal type="string">"-----------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cfp</name> <operator>&lt;</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name> <operator>+</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack_size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>control_frame_dump</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cfp</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_vmdebug_stack_dump_raw_current</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>GET_EC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_vmdebug_stack_dump_raw</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_vmdebug_env_dump_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_env_t</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"-- env --------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"--\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>env</name><operator>-&gt;</operator><name>env_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%04d: %08"</literal><name>PRIxVALUE</name><literal type="string">" (%p)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>env</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>env</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>env</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>ep</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" &lt;- ep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>rb_vm_env_prev_env</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"---------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_vmdebug_proc_dump_raw</name><parameter_list>(<parameter><decl><type><name>rb_proc_t</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_env_t</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>selfstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name> <init>= <expr><call><name>rb_inspect</name><argument_list>(<argument><expr><call><name>vm_block_self</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>selfstr</name> <operator>=</operator> <call><name>StringValueCStr</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"-- proc -------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"self: %s\n"</literal></expr></argument>, <argument><expr><name>selfstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>VM_ENV_ENVVAL_PTR</name><argument_list>(<argument><expr><call><name>vm_block_ep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_vmdebug_env_dump_raw</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>vm_block_ep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_vmdebug_stack_dump_th</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>target_th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_vmdebug_stack_dump_raw</name><argument_list>(<argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name><name>target_th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VMDEBUG</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type>
<name>vm_base_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>prev_cfp</name> <init>= <expr><call><name>RUBY_VM_PREVIOUS_CONTROL_FRAME</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><name><name>prev_cfp</name><operator>-&gt;</operator><name>sp</name></name> <operator>+</operator> <name><name>cfp</name><operator>-&gt;</operator><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>local_table_size</name></name> <operator>+</operator> <name>VM_ENV_DATA_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ISEQ_TYPE_METHOD</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>vm_stack_dump_each</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>local_table_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>ep</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VM_FRAME_RUBYFRAME_P</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>argc</name> <operator>=</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>param</name><operator>.</operator><name>lead_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>local_table_size</name> <operator>=</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>local_table_size</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VM_FRAME_MAGIC_METHOD</name><operator>||</operator>
<call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VM_FRAME_MAGIC_TOP</name> <operator>||</operator>
<call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VM_FRAME_MAGIC_BLOCK</name> <operator>||</operator>
<call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VM_FRAME_MAGIC_CLASS</name> <operator>||</operator>
<call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VM_FRAME_MAGIC_CFUNC</name> <operator>||</operator>
<call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VM_FRAME_MAGIC_IFUNC</name> <operator>||</operator>
<call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VM_FRAME_MAGIC_EVAL</name> <operator>||</operator>
<call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VM_FRAME_MAGIC_RESCUE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>ep</name> <operator>-</operator> <name>local_table_size</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>control_frame_dump</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rstr</name> <operator>=</operator> <call><name>rb_inspect</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" arg %2d: %8s (%p)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>rstr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>local_table_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rstr</name> <operator>=</operator> <call><name>rb_inspect</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" local %2d: %8s (%p)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>rstr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>vm_base_ptr</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>ptr</name> <operator>&lt;</operator> <name>sp</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>T_UNDEF</name></expr>:</case>
<expr_stmt><expr><name>rstr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"undef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>T_IMEMO</name></expr>:</case>
<expr_stmt><expr><name>rstr</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"imemo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>rstr</name> <operator>=</operator> <call><name>rb_inspect</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" stack %2d: %8s (%"</literal><name>PRIdPTRDIFF</name><literal type="string">")\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>rstr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>VM_FRAME_FINISHED_P</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name> <operator>+</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack_size</name></name> <operator>&gt;</operator> <operator>(</operator><name>VALUE</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>cfp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>vm_stack_dump_each</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>cfp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"unsupported frame type: %08lx"</literal></expr></argument>, <argument><expr><call><name>VM_FRAME_TYPE</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>rb_vmdebug_debug_print_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>ep</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>ep</name></name> <operator>-</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>cfpi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>VM_FRAME_RUBYFRAME_P</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>cfp</name><operator>-&gt;</operator><name>pc</name></name> <operator>-</operator> <name><name>cfp</name><operator>-&gt;</operator><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>iseq_encoded</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ep</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ep</name></expr></argument> &gt;</argument_list></name> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack_size</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cfpi</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rb_control_frame_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name> <operator>+</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack_size</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>cfp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" [PC] %04"</literal><name>PRIdPTRDIFF</name><literal type="string">", [SP] %04"</literal><name>PRIdPTRDIFF</name><literal type="string">", [EP] %04"</literal><name>PRIdPTRDIFF</name><literal type="string">", [CFP] %04"</literal><name>PRIdPTRDIFF</name><literal type="string">"\n"</literal></expr></argument>,
<argument><expr><name>pc</name></expr></argument>, <argument><expr><operator>(</operator><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name> <operator>-</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>cfpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_vmdebug_thread_dump_regs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>thval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>rb_vmdebug_debug_print_register</name><argument_list>(<argument><expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>thval</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_vmdebug_debug_print_pre</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>_pc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_iseq_t</name> <modifier>*</modifier></type><name>iseq</name> <init>= <expr><name><name>cfp</name><operator>-&gt;</operator><name>iseq</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iseq</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pc</name> <init>= <expr><name>_pc</name> <operator>-</operator> <name><name>iseq</name><operator>-&gt;</operator><name>body</name><operator>-&gt;</operator><name>iseq_encoded</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>VM_CFP_CNT</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%03ld] "</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name> <operator>-</operator> <name><name>ec</name><operator>-&gt;</operator><name>vm_stack</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>iseq_original</name> <init>= <expr><call><name>rb_iseq_original_iseq</name><argument_list>(<argument><expr><operator>(</operator><name>rb_iseq_t</name> <operator>*</operator><operator>)</operator><name>iseq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_iseq_disasm_insn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iseq_original</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>pc</name></expr></argument>, <argument><expr><name>iseq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VMDEBUG</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" (1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_vmdebug_debug_print_register</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rb_vmdebug_debug_print_post</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_execution_context_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name></decl></parameter>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_STACK_CACHING</name></expr></cpp:if>
, <parameter><decl><type><name>VALUE</name></type> <name>reg_a</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>reg_b</name></decl></parameter>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VMDEBUG</name> <operator>&gt;</operator> <literal type="number">9</literal></expr></cpp:if>
<expr_stmt><expr><call><name>SDR2</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VMDEBUG</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" (2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_vmdebug_debug_print_register</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VMDEBUG</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>

<expr_stmt><expr><call><name>vm_stack_dump_each</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_STACK_CACHING</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rstr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rstr</name> <operator>=</operator> <call><name>rb_inspect</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" sc reg A: %s\n"</literal></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>rstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rstr</name> <operator>=</operator> <call><name>rb_inspect</name><argument_list>(<argument><expr><name>reg_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" sc reg B: %s\n"</literal></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>rstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>printf</name>
<argument_list>(<argument><expr><literal type="string">"--------------------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>VALUE</name></type>
<name>rb_vmdebug_thread_dump_state</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><call><name>rb_thread_ptr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_control_frame_t</name> <modifier>*</modifier></type><name>cfp</name> <init>= <expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Thread state dump:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"pc : %p, sp : %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cfp</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cfp</name><operator>-&gt;</operator><name>sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"cfp: %p, ep : %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>cfp</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>cfp</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__APPLE__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__DARWIN_UNIX03</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCTX_SS_REG</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__ss.__##reg</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCTX_SS_REG</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ss.reg</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBUNWIND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>backtrace</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>backtrace</name></cpp:macro> <cpp:value>unw_backtrace</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBUNWIND_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNW_LOCAL_ONLY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libunwind.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>backtrace</name></cpp:undef>
<function><type><name>int</name></type>
<name>backtrace</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>trace</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unw_cursor_t</name></type> <name>cursor</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>unw_context_t</name></type> <name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unw_word_t</name></type> <name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unw_getcontext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_init_local</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>unw_step</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unw_get_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_IP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trace</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ip</name></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>unw_get_proc_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"_sigtramp"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"_sigtramp"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>darwin_sigtramp</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
</block_content>}</block></while>
<return>return <expr><name>n</name></expr>;</return>
<label><name>darwin_sigtramp</name>:</label>

<block>{<block_content>
<decl_stmt><decl><type><name>ucontext_t</name> <modifier>*</modifier></type><name>uctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>vec</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>unw_get_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_RBX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uctx</name> <operator>=</operator> <operator>(</operator><name>ucontext_t</name> <operator>*</operator><operator>)</operator><name>ip</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_RAX</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>rax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_RBX</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>rbx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_RCX</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>rcx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_RDX</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>rdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_RDI</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>rdi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_RSI</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>rsi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_RBP</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>rbp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_RSP</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>+</operator><operator>(</operator><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_R8</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>r8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_R9</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>r9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_R10</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>r10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_R11</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>r11</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_R12</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>r12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_R13</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>r13</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_R14</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>r14</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_X86_64_R15</name></expr></argument>, <argument><expr><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>r15</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>rip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



























<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mincore</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>ip</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>||</operator> <name><name>vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>ip</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"\x0f\x05"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>trace</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unw_word_t</name><operator>*</operator><operator>)</operator><call><name><name>uctx</name><operator>-&gt;</operator><name>uc_mcontext</name><operator>-&gt;</operator><name>MCTX_SS_REG</name></name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>trace</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ip</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unw_set_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_IP</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<while>while <condition>(<expr><call><name>unw_step</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>unw_get_reg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>, <argument><expr><name>UNW_REG_IP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trace</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ip</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BROKEN_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_BACKTRACE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_BACKTRACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_BACKTRACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BACKTRACE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;execinfo.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;imagehlp.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SYMOPT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMOPT_DEBUG</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX_SYM_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SYM_NAME</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>DWORD64</name></type> <name>Offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>Segment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ADDRESS_MODE</name></type> <name>Mode</name></decl>;</decl_stmt>
}</block></struct></type> <name>ADDRESS64</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>DWORD64</name></type> <name>Thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ThCallbackStack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>ThCallbackBStore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>NextCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>FramePointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name>KiCallUserMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name>KeUserCallbackDispatcher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name>SystemRangeStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name>KiUserExceptionDispatcher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name>StackBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name>StackLimit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name><name>Reserved</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>KDHELP64</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ADDRESS64</name></type> <name>AddrPC</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ADDRESS64</name></type> <name>AddrReturn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ADDRESS64</name></type> <name>AddrFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ADDRESS64</name></type> <name>AddrStack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ADDRESS64</name></type> <name>AddrBStore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>FuncTableEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name><name>Params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>Far</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>Virtual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name><name>Reserved</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>KDHELP64</name></type> <name>KdHelp</name></decl>;</decl_stmt>
}</block></struct></type> <name>STACKFRAME64</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ULONG</name></type> <name>SizeOfStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>TypeIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG64</name></type> <name><name>Reserved</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>Index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>Size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG64</name></type> <name>ModBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG64</name></type> <name>Value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG64</name></type> <name>Address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>Register</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>Scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>Tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>NameLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>MaxNameLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>Name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SYMBOL_INFO</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>SizeOfStruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>LineNumber</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>FileName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name>Address</name></decl>;</decl_stmt>
}</block></struct></type> <name>IMAGEHLP_LINE64</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>PREAD_PROCESS_MEMORY_ROUTINE64</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>PFUNCTION_TABLE_ACCESS_ROUTINE64</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>PGET_MODULE_BASE_ROUTINE64</name>;</typedef>
<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>PTRANSLATE_ADDRESS_ROUTINE64</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>dbghelp</name></decl>;</decl_stmt>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pSymInitialize</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pSymCleanup</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pStackWalk64</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>STACKFRAME64</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>PREAD_PROCESS_MEMORY_ROUTINE64</name></type></decl></parameter>, <parameter><decl><type><name>PFUNCTION_TABLE_ACCESS_ROUTINE64</name></type></decl></parameter>, <parameter><decl><type><name>PGET_MODULE_BASE_ROUTINE64</name></type></decl></parameter>, <parameter><decl><type><name>PTRANSLATE_ADDRESS_ROUTINE64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>DWORD64</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pSymGetModuleBase64</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>DWORD64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pSymFromAddr</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>DWORD64</name></type></decl></parameter>, <parameter><decl><type><name>DWORD64</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>SYMBOL_INFO</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pSymGetLineFromAddr64</name>)<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>DWORD64</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>IMAGEHLP_LINE64</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>HANDLE</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>pOpenThread</name>)<parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>, <parameter><decl><type><name>BOOL</name></type></decl></parameter>, <parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>DWORD</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>ph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>th</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbghelp</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><literal type="string">"dbghelp.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbghelp</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pSymInitialize</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>)</argument_list></call><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dbghelp</name></expr></argument>, <argument><expr><literal type="string">"SymInitialize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pSymCleanup</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></call><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dbghelp</name></expr></argument>, <argument><expr><literal type="string">"SymCleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pStackWalk64</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>STACKFRAME64</name> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>PREAD_PROCESS_MEMORY_ROUTINE64</name></expr></argument>, <argument><expr><name>PFUNCTION_TABLE_ACCESS_ROUTINE64</name></expr></argument>, <argument><expr><name>PGET_MODULE_BASE_ROUTINE64</name></expr></argument>, <argument><expr><name>PTRANSLATE_ADDRESS_ROUTINE64</name></expr></argument>)</argument_list></call><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dbghelp</name></expr></argument>, <argument><expr><literal type="string">"StackWalk64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pSymGetModuleBase64</name> <operator>=</operator> <operator>(</operator><call><call><name>DWORD64</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>DWORD64</name></expr></argument>)</argument_list></call><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dbghelp</name></expr></argument>, <argument><expr><literal type="string">"SymGetModuleBase64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pSymFromAddr</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>DWORD64</name></expr></argument>, <argument><expr><name>DWORD64</name> <operator>*</operator></expr></argument>, <argument><expr><name>SYMBOL_INFO</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dbghelp</name></expr></argument>, <argument><expr><literal type="string">"SymFromAddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pSymGetLineFromAddr64</name> <operator>=</operator> <operator>(</operator><call><call><name>BOOL</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>DWORD64</name></expr></argument>, <argument><expr><name>DWORD</name> <operator>*</operator></expr></argument>, <argument><expr><name>IMAGEHLP_LINE64</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dbghelp</name></expr></argument>, <argument><expr><literal type="string">"SymGetLineFromAddr64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pOpenThread</name> <operator>=</operator> <operator>(</operator><call><call><name>HANDLE</name> <argument_list>(<argument><expr><name>WINAPI</name> <operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>DWORD</name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><literal type="string">"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"OpenThread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pSymInitialize</name> <operator>&amp;&amp;</operator> <name>pSymCleanup</name> <operator>&amp;&amp;</operator> <name>pStackWalk64</name> <operator>&amp;&amp;</operator> <name>pSymGetModuleBase64</name> <operator>&amp;&amp;</operator>
<name>pSymFromAddr</name> <operator>&amp;&amp;</operator> <name>pSymGetLineFromAddr64</name> <operator>&amp;&amp;</operator> <name>pOpenThread</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SymSetOptions</name><argument_list>(<argument><expr><name>SYMOPT_UNDNAME</name> <operator>|</operator> <name>SYMOPT_DEFERRED_LOADS</name> <operator>|</operator> <name>SYMOPT_DEBUG</name> <operator>|</operator> <name>SYMOPT_LOAD_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ph</name> <operator>=</operator> <call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pSymInitialize</name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>th</name> <operator>=</operator> <call><name>pOpenThread</name><argument_list>(<argument><expr><name>THREAD_SUSPEND_RESUME</name><operator>|</operator><name>THREAD_GET_CONTEXT</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>th</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>SuspendThread</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CONTEXT</name></type> <name>context</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ContextFlags</name></name> <operator>=</operator> <name>CONTEXT_FULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>GetThreadContext</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>libpath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYMBOL_INFO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>MAX_SYM_NAME</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SYMBOL_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>SYMBOL_INFO</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STACKFRAME64</name></type> <name>frame</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>mac</name> <operator>=</operator> <name>IMAGE_FILE_MACHINE_AMD64</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>AddrModeFlat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>Rip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrFrame</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>AddrModeFlat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrFrame</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>Rbp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrStack</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>AddrModeFlat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrStack</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>Rsp</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
<expr_stmt><expr><name>mac</name> <operator>=</operator> <name>IMAGE_FILE_MACHINE_I386</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>AddrModeFlat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>Eip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrFrame</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>AddrModeFlat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrFrame</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>Ebp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrStack</name><operator>.</operator><name>Mode</name></name> <operator>=</operator> <name>AddrModeFlat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frame</name><operator>.</operator><name>AddrStack</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>Esp</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><call><name>pStackWalk64</name><argument_list>(<argument><expr><name>mac</name></expr></argument>, <argument><expr><name>ph</name></expr></argument>, <argument><expr><name>th</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DWORD64</name></type> <name>addr</name> <init>= <expr><name><name>frame</name><operator>.</operator><name>AddrPC</name><operator>.</operator><name>Offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IMAGEHLP_LINE64</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD64</name></type> <name>displacement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name><name>frame</name><operator>.</operator><name>AddrReturn</name><operator>.</operator><name>Offset</name></name> <operator>||</operator> <name>addr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>frame</name><operator>.</operator><name>AddrReturn</name><operator>.</operator><name>Offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>SizeOfStruct</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SYMBOL_INFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>MaxNameLen</name></name> <operator>=</operator> <name>MAX_SYM_NAME</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pSymFromAddr</name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>displacement</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>GetModuleFileName</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>pSymGetModuleBase64</name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>libpath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>libpath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>libpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%s+0x%I64x)"</literal></expr></argument>,
<argument><expr><name><name>info</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>, <argument><expr><name>displacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" [0x%p]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><operator>.</operator><name>SizeOfStruct</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pSymGetLineFromAddr64</name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s:%lu"</literal></expr></argument>, <argument><expr><name><name>line</name><operator>.</operator><name>FileName</name></name></expr></argument>, <argument><expr><name><name>line</name><operator>.</operator><name>LineNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ResumeThread</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>th</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pSymCleanup</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>dbghelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>rb_print_backtrace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BACKTRACE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NATIVE_TRACE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name><name>trace</name><index>[<expr><name>MAX_NATIVE_TRACE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>backtrace</name><argument_list>(<argument><expr><name>trace</name></expr></argument>, <argument><expr><name>MAX_NATIVE_TRACE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_ELF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MACH_O_LOADER_H</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sparc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_dump_backtrace_with_lines</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>syms</name> <init>= <expr><call><name>backtrace_symbols</name><argument_list>(<argument><expr><name>trace</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>syms</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>syms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>syms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tid</name> <init>= <expr><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>th</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_beginthread</name><argument_list>(<argument><expr><name>dump_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>th</name> <operator>!=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPROCSTAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"missing/procstat_vm.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__linux__</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__x86_64__</name> <operator>||</operator> <name>defined</name> <name>__i386__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PRINT_MACHINE_REGISTERS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__APPLE__</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__x86_64__</name> <operator>||</operator> <name>defined</name> <name>__i386__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PRINT_MACHINE_REGISTERS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PRINT_MACHINE_REGISTERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_machine_register</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reg_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" %3.3s: 0x%016"</literal> <name>PRIxSIZE</name></expr></argument>, <argument><expr><name>reg_name</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" %3.3s: 0x%08"</literal> <name>PRIxSIZE</name></expr></argument>, <argument><expr><name>reg_name</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>col_count</name> <operator>+</operator> <name>ret</name> <operator>&gt;</operator> <name>max_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>col_count</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>col_count</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump_machine_register</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(col_count = print_machine_register(mctx-&gt;gregs[REG_##reg], #reg, col_count, 80))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__APPLE__</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump_machine_register</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(col_count = print_machine_register(mctx-&gt;MCTX_SS_REG(reg), #reg, col_count, 80))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rb_dump_machine_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ucontext_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"-- Machine register context "</literal>
<literal type="string">"------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__linux__</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>mcontext_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mctx</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>uc_mcontext</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__x86_64__</name></expr></cpp:if>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>RIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>RBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>RSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>RAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>RBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>RCX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>RDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>RDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>RSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>R8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>R9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>R10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>R11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>R12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>R13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>R14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>R15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>EFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__i386__</name></expr></cpp:elif>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>GS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>FS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>DS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>EDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>ESI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>EBP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>TRAPNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>EIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>EFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>UESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__APPLE__</name></expr></cpp:elif>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>mcontext_t</name></type> <name>mctx</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>uc_mcontext</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__x86_64__</name></expr></cpp:if>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>rax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>rbx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>rcx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>rdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>rdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>rsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>rbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>r8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>r9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>r10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>r11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>r12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>r13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>r14</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>r15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>rip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>rflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__i386__</name></expr></cpp:elif>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>eax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>ebx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>ecx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>edi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>esi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>ebp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>esp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dump_machine_register</name><argument_list>(<argument><expr><name>gs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_dump_machine_register</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>void</name></type>
<name>rb_vm_bugreport</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_DEVEL</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"RUBY_ON_BUG"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">0x100</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %"</literal><name>PRI_PIDT_PREFIX</name><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>system</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Launching RUBY_ON_BUG command failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROC_MAPS_NAME</name></cpp:macro> <cpp:value>"/proc/self/maps"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROC_MAPS_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<enum>enum <block>{<decl><name>other_runtime_info</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<enum>enum <block>{<decl><name>other_runtime_info</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>}</block>;</enum>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>rb_vm_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vm</name> <init>= <expr><call><name>GET_VM</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SDR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_backtrace_print_as_bugreport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_dump_machine_register</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BACKTRACE</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"-- C level backtrace information "</literal>
<literal type="string">"-------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_print_backtrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>other_runtime_info</name> <operator>||</operator> <name>vm</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"-- Other runtime information "</literal>
<literal type="string">"-----------------------------------------------\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>vm</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_name_length</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIMITED_NAME_LENGTH</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((len = RSTRING_LEN(s)) &gt; max_name_length) ? max_name_length : (int)len)</cpp:value></cpp:define>


<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>vm</name><operator>-&gt;</operator><name>progname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"* Loaded script: %.*s\n"</literal></expr></argument>,
<argument><expr><call><name>LIMITED_NAME_LENGTH</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"* Loaded features:\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name><name>vm</name><operator>-&gt;</operator><name>loaded_features</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name><name>vm</name><operator>-&gt;</operator><name>loaded_features</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %4d %.*s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><call><name>LIMITED_NAME_LENGTH</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>T_CLASS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>T_MODULE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>type</name> <init>= <expr><ternary><condition><expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>T_CLASS</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
<expr><literal type="string">"class"</literal></expr> </then><else>: <expr><literal type="string">"module"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rb_search_class_path</name><argument_list>(<argument><expr><call><name>rb_class_real</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %4d %s:&lt;unnamed&gt;\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %4d %s:%.*s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><call><name>LIMITED_NAME_LENGTH</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name> <init>= <expr><call><name>rb_search_class_path</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %4d #&lt;%p:%p&gt;\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %4d #&lt;%.*s:%p&gt;\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><call><name>LIMITED_NAME_LENGTH</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROC_MAPS_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>PROC_MAPS_NAME</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"* Process memory map:\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><literal type="number">0x100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rn</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rn</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>rn</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPROCSTAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIB_KERN_PROC_PID_LEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><name>MIB_KERN_PROC_PID_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>kinfo_proc</name></name></type> <name>kp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>kinfo_proc</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_KERN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>KERN_PROC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>KERN_PROC_PID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><name>MIB_KERN_PROC_PID_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"sysctl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>procstat</name></name> <modifier>*</modifier></type><name>prstat</name> <init>= <expr><call><name>procstat_open_sysctl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"* Process memory map:\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>procstat_vm</name><argument_list>(<argument><expr><name>prstat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>procstat_close</name><argument_list>(<argument><expr><name>prstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vm_address_t</name></type> <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vm_size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vm_region_submap_info</name></name></type> <name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>count</name> <init>= <expr><name>VM_REGION_SUBMAP_INFO_COUNT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>natural_t</name></type> <name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"* Process memory map:\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>vm_region_recurse</name><argument_list>(<argument><expr><call><name>mach_task_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depth</name></expr></argument>,
<argument><expr><operator>(</operator><name>vm_region_recurse_info_t</name><operator>)</operator><operator>&amp;</operator><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>.</operator><name>is_submap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%lx-%lx %s%s%s"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>addr</name><operator>+</operator><name>size</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>map</name><operator>.</operator><name>protection</name></name> <operator>&amp;</operator> <name>VM_PROT_READ</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"r"</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>map</name><operator>.</operator><name>protection</name></name> <operator>&amp;</operator> <name>VM_PROT_WRITE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"w"</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>map</name><operator>.</operator><name>protection</name></name> <operator>&amp;</operator> <name>VM_PROT_EXECUTE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"x"</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBPROC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>proc_regionfilename</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NON_SCALAR_THREAD_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ruby_fill_thread_id_string</name><parameter_list>(<parameter><decl><type><name>rb_nativethread_id_t</name></type> <name>thid</name></decl></parameter>, <parameter><decl><type><name>rb_thread_id_string_t</name></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>rb_vmdebug_stack_dump_all_threads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rb_vm_t</name> <modifier>*</modifier></type><name>vm</name> <init>= <expr><call><name>GET_VM</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_thread_t</name> <modifier>*</modifier></type><name>th</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<macro><name>list_for_each</name><argument_list>(<argument>&amp;vm-&gt;living_threads</argument>, <argument>th</argument>, <argument>vmlt_node</argument>)</argument_list></macro> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NON_SCALAR_THREAD_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>rb_thread_id_string_t</name></type> <name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ruby_fill_thread_id_string</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"th: %p, native_id: %s\n"</literal></expr></argument>, <argument><expr><name>th</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"th: %p, native_id: %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>th</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>th</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_vmdebug_stack_dump_raw</name><argument_list>(<argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name></name></expr></argument>, <argument><expr><name><name>th</name><operator>-&gt;</operator><name>ec</name><operator>-&gt;</operator><name>cfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>
</unit>
