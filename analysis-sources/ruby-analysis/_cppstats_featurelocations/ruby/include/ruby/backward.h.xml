<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\include\ruby\backward.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_RUBY_BACKWARD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_RUBY_BACKWARD_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RClass</name></cpp:macro> <cpp:value>RClassDeprecated</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>DEPRECATED_TYPE</name><argument_list>(<argument>(<literal type="string">"RClass is internal use only"</literal>)</argument>,
<argument>struct RClass {
struct RBasic basic;
}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_DEPRECATED_FEATURE</name><parameter_list>(<parameter><type><name>ver</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NORETURN(ERRORFUNC(("deprecated since "#ver), DEPRECATED(void func(void))))</cpp:value></cpp:define>



<expr_stmt><expr><call><name>DECLARE_DEPRECATED_FEATURE</name><argument_list>(<argument><expr><literal type="number">2.2</literal></expr></argument>, <argument><expr><name>rb_disable_super</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_DEPRECATED_FEATURE</name><argument_list>(<argument><expr><literal type="number">2.2</literal></expr></argument>, <argument><expr><name>rb_enable_super</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DECLARE_DEPRECATED_FEATURE</name><argument_list>(<argument><expr><literal type="number">2.2</literal></expr></argument>, <argument><expr><name>rb_hash_iter_lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_DEPRECATED_FEATURE</name><argument_list>(<argument><expr><literal type="number">2.2</literal></expr></argument>, <argument><expr><name>rb_hash_ifnone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DECLARE_DEPRECATED_FEATURE</name><argument_list>(<argument><expr><literal type="number">2.2</literal></expr></argument>, <argument><expr><name>rb_str_associate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_DEPRECATED_FEATURE</name><argument_list>(<argument><expr><literal type="number">2.2</literal></expr></argument>, <argument><expr><name>rb_str_associated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>DEPRECATED</name><argument_list>(<argument>void rb_autoload(VALUE, ID, const char*)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><call><name>DECLARE_DEPRECATED_FEATURE</name><argument_list>(<argument><expr><literal type="number">2.2</literal></expr></argument>, <argument><expr><name>rb_clear_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_DEPRECATED_FEATURE</name><argument_list>(<argument><expr><literal type="number">2.2</literal></expr></argument>, <argument><expr><name>rb_frame_pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_DEPRECATED_INTERNAL_FEATURE</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NORETURN(ERRORFUNC(("deprecated internal function"), DEPRECATED(void func(void))))</cpp:value></cpp:define>



<expr_stmt><expr><call><name>NORETURN</name><argument_list>(<argument><expr><macro><name>ERRORFUNC</name><argument_list>(<argument>(<literal type="string">"internal function"</literal>)</argument>, <argument>void rb_frozen_class_p(VALUE)</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_DEPRECATED_INTERNAL_FEATURE</name><argument_list>(<argument><expr><name>rb_exec_end_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DECLARE_DEPRECATED_INTERNAL_FEATURE</name><argument_list>(<argument><expr><name>rb_compile_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_DEPRECATED_INTERNAL_FEATURE</name><argument_list>(<argument><expr><name>rb_compile_error_with_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_DEPRECATED_INTERNAL_FEATURE</name><argument_list>(<argument><expr><name>rb_compile_error_append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DECLARE_DEPRECATED_INTERNAL_FEATURE</name><argument_list>(<argument><expr><name>rb_gc_call_finalizer_at_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DECLARE_DEPRECATED_INTERNAL_FEATURE</name><argument_list>(<argument><expr><name>rb_trap_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DECLARE_DEPRECATED_INTERNAL_FEATURE</name><argument_list>(<argument><expr><name>rb_struct_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DECLARE_DEPRECATED_INTERNAL_FEATURE</name><argument_list>(<argument><expr><name>rb_clear_trace_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DECLARE_DEPRECATED_INTERNAL_FEATURE</name><argument_list>(<argument><expr><name>rb_generic_ivar_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NORETURN</name><argument_list>(<argument><expr><macro><name>ERRORFUNC</name><argument_list>(<argument>(<literal type="string">"internal function"</literal>)</argument>, <argument>VALUE rb_mod_const_missing(VALUE, VALUE)</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_SHOW_COPYRIGHT_TO_DIE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_SHOW_COPYRIGHT_TO_DIE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RUBY_SHOW_COPYRIGHT_TO_DIE</name></expr></cpp:if>

<macro><name>DEPRECATED</name><argument_list>(<argument>static inline int ruby_show_copyright_to_die(int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ruby_show_copyright_to_die</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>exitcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ruby_show_copyright</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>exitcode</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ruby_show_copyright</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(exit(ruby_show_copyright_to_die(EXIT_SUCCESS)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
