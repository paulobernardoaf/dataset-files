<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\include\ruby\st.h">





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_ST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_ST_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
} 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/defines.h"</cpp:file></cpp:include>

<macro><name>RUBY_SYMBOL_EXPORT_BEGIN</name></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>==</operator> <name>SIZEOF_VOIDP</name></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>st_data_t</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_LONG_LONG</name> <operator>==</operator> <name>SIZEOF_VOIDP</name></expr></cpp:elif>
<typedef>typedef <type><name>unsigned</name> <name>LONG_LONG</name></type> <name>st_data_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> ----&gt;&gt; st.c requires sizeof(void*) == sizeof(long) or sizeof(LONG_LONG) to be compiled. &lt;&lt;----</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_DATA_T_DEFINED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CHAR_BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_BIT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name><parameter_list>(<parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>args</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ANYARGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANYARGS</name></cpp:macro> <cpp:value>...</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANYARGS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>st_table</name></name></type> <name>st_table</name>;</typedef>

<typedef>typedef <type><name>st_data_t</name></type> <name>st_index_t</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ST_INDEX_VAL</name></cpp:macro> <cpp:value>(~(st_index_t) 0)</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> <name>st_compare_func</name><parameter_list>(<parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>st_index_t</name></type> <name>st_hash_func</name><parameter_list>(<parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name>char</name></type> <name><name>st_check_for_sizeof_st_index_t</name><index>[<expr><ternary><condition><expr><name>SIZEOF_VOIDP</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>st_index_t</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_ST_INDEX_T</name></cpp:macro> <cpp:value>SIZEOF_VOIDP</cpp:value></cpp:define>

<struct>struct <name>st_hash_type</name> <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compare</name>)<parameter_list>(<parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl> 
<function_decl><type><name>st_index_t</name></type> (<modifier>*</modifier><name>hash</name>)<parameter_list>(<parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl> 
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_INDEX_BITS</name></cpp:macro> <cpp:value>(SIZEOF_ST_INDEX_T * CHAR_BIT)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_TYPES_COMPATIBLE_P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_DATA_COMPATIBLE_P</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_choose_expr(__builtin_types_compatible_p(type, st_data_t), 1, 0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_DATA_COMPATIBLE_P</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>st_table_entry</name></name></type> <name>st_table_entry</name>;</typedef>

<struct_decl>struct <name>st_table_entry</name>;</struct_decl> 

<struct>struct <name>st_table</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>entry_power</name></decl>, <decl><type ref="prev"/><name>bin_power</name></decl>, <decl><type ref="prev"/><name>size_ind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rebuilds_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>st_hash_type</name></name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st_index_t</name></type> <name>num_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st_index_t</name> <modifier>*</modifier></type><name>bins</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>st_index_t</name></type> <name>entries_start</name></decl>, <decl><type ref="prev"/><name>entries_bound</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>st_table_entry</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_is_member</name><parameter_list>(<parameter><type><name>table</name></type></parameter>,<parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>st_lookup((table),(key),(st_data_t *)0)</cpp:value></cpp:define>

<enum>enum <name>st_retval</name> <block>{<decl><name>ST_CONTINUE</name></decl>, <decl><name>ST_STOP</name></decl>, <decl><name>ST_DELETE</name></decl>, <decl><name>ST_CHECK</name></decl>, <decl><name>ST_REPLACE</name></decl>}</block>;</enum>

<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_st_init_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>st_hash_type</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_table</name></cpp:macro> <cpp:value>rb_st_init_table</cpp:value></cpp:define>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_st_init_table_with_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>st_hash_type</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_index_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_table_with_size</name></cpp:macro> <cpp:value>rb_st_init_table_with_size</cpp:value></cpp:define>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_st_init_numtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_numtable</name></cpp:macro> <cpp:value>rb_st_init_numtable</cpp:value></cpp:define>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_st_init_numtable_with_size</name><parameter_list>(<parameter><decl><type><name>st_index_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_numtable_with_size</name></cpp:macro> <cpp:value>rb_st_init_numtable_with_size</cpp:value></cpp:define>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_st_init_strtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_strtable</name></cpp:macro> <cpp:value>rb_st_init_strtable</cpp:value></cpp:define>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_st_init_strtable_with_size</name><parameter_list>(<parameter><decl><type><name>st_index_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_strtable_with_size</name></cpp:macro> <cpp:value>rb_st_init_strtable_with_size</cpp:value></cpp:define>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_st_init_strcasetable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_strcasetable</name></cpp:macro> <cpp:value>rb_st_init_strcasetable</cpp:value></cpp:define>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_st_init_strcasetable_with_size</name><parameter_list>(<parameter><decl><type><name>st_index_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_init_strcasetable_with_size</name></cpp:macro> <cpp:value>rb_st_init_strcasetable_with_size</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>rb_st_delete</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_delete</name></cpp:macro> <cpp:value>rb_st_delete</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>rb_st_delete_safe</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_delete_safe</name></cpp:macro> <cpp:value>rb_st_delete_safe</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>rb_st_shift</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_shift</name></cpp:macro> <cpp:value>rb_st_shift</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>rb_st_insert</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_insert</name></cpp:macro> <cpp:value>rb_st_insert</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>rb_st_insert2</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><function_decl><type><name>st_data_t</name></type> (<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_insert2</name></cpp:macro> <cpp:value>rb_st_insert2</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>rb_st_lookup</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_lookup</name></cpp:macro> <cpp:value>rb_st_lookup</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>rb_st_get_key</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_get_key</name></cpp:macro> <cpp:value>rb_st_get_key</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>int</name></type> <name>st_update_callback_func</name><parameter_list>(<parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>existing</name></decl></parameter>)</parameter_list>;</function_decl></typedef>



<function_decl><type><name>int</name></type> <name>rb_st_update</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>st_update_callback_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_update</name></cpp:macro> <cpp:value>rb_st_update</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>int</name></type> <name>st_foreach_callback_func</name><parameter_list>(<parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>st_foreach_check_callback_func</name><parameter_list>(<parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>int</name></type> <name>rb_st_foreach_with_replace</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>st_foreach_check_callback_func</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>st_update_callback_func</name> <modifier>*</modifier></type><name>replace</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_foreach_with_replace</name></cpp:macro> <cpp:value>rb_st_foreach_with_replace</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>rb_st_foreach</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_foreach_callback_func</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_foreach</name></cpp:macro> <cpp:value>rb_st_foreach</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>rb_st_foreach_check</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_foreach_check_callback_func</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_foreach_check</name></cpp:macro> <cpp:value>rb_st_foreach_check</cpp:value></cpp:define>
<function_decl><type><name>st_index_t</name></type> <name>rb_st_keys</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>st_index_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_keys</name></cpp:macro> <cpp:value>rb_st_keys</cpp:value></cpp:define>
<function_decl><type><name>st_index_t</name></type> <name>rb_st_keys_check</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>st_index_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>never</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_keys_check</name></cpp:macro> <cpp:value>rb_st_keys_check</cpp:value></cpp:define>
<function_decl><type><name>st_index_t</name></type> <name>rb_st_values</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>st_index_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_values</name></cpp:macro> <cpp:value>rb_st_values</cpp:value></cpp:define>
<function_decl><type><name>st_index_t</name></type> <name>rb_st_values_check</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>st_index_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type> <name>never</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_values_check</name></cpp:macro> <cpp:value>rb_st_values_check</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>rb_st_add_direct</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_add_direct</name></cpp:macro> <cpp:value>rb_st_add_direct</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>rb_st_free_table</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_free_table</name></cpp:macro> <cpp:value>rb_st_free_table</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>rb_st_cleanup_safe</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>st_data_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_cleanup_safe</name></cpp:macro> <cpp:value>rb_st_cleanup_safe</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>rb_st_clear</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_clear</name></cpp:macro> <cpp:value>rb_st_clear</cpp:value></cpp:define>
<function_decl><type><name>st_table</name> <modifier>*</modifier></type><name>rb_st_copy</name><parameter_list>(<parameter><decl><type><name>st_table</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_copy</name></cpp:macro> <cpp:value>rb_st_copy</cpp:value></cpp:define>
<macro><name>CONSTFUNC</name><argument_list>(<argument>int rb_st_numcmp(st_data_t, st_data_t)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_numcmp</name></cpp:macro> <cpp:value>rb_st_numcmp</cpp:value></cpp:define>
<macro><name>CONSTFUNC</name><argument_list>(<argument>st_index_t rb_st_numhash(st_data_t)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_numhash</name></cpp:macro> <cpp:value>rb_st_numhash</cpp:value></cpp:define>
<macro><name>PUREFUNC</name><argument_list>(<argument>int rb_st_locale_insensitive_strcasecmp(const char *s1, const char *s2)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_locale_insensitive_strcasecmp</name></cpp:macro> <cpp:value>rb_st_locale_insensitive_strcasecmp</cpp:value></cpp:define>
<macro><name>PUREFUNC</name><argument_list>(<argument>int rb_st_locale_insensitive_strncasecmp(const char *s1, const char *s2, size_t n)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_locale_insensitive_strncasecmp</name></cpp:macro> <cpp:value>rb_st_locale_insensitive_strncasecmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_strcasecmp</name></cpp:macro> <cpp:value>rb_st_locale_insensitive_strcasecmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_strncasecmp</name></cpp:macro> <cpp:value>rb_st_locale_insensitive_strncasecmp</cpp:value></cpp:define>
<macro><name>PUREFUNC</name><argument_list>(<argument>size_t rb_st_memsize(const st_table *)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_memsize</name></cpp:macro> <cpp:value>rb_st_memsize</cpp:value></cpp:define>
<macro><name>PUREFUNC</name><argument_list>(<argument>st_index_t rb_st_hash(const void *ptr, size_t len, st_index_t h)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_hash</name></cpp:macro> <cpp:value>rb_st_hash</cpp:value></cpp:define>
<macro><name>CONSTFUNC</name><argument_list>(<argument>st_index_t rb_st_hash_uint32(st_index_t h, uint32_t i)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_hash_uint32</name></cpp:macro> <cpp:value>rb_st_hash_uint32</cpp:value></cpp:define>
<macro><name>CONSTFUNC</name><argument_list>(<argument>st_index_t rb_st_hash_uint(st_index_t h, st_index_t i)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_hash_uint</name></cpp:macro> <cpp:value>rb_st_hash_uint</cpp:value></cpp:define>
<macro><name>CONSTFUNC</name><argument_list>(<argument>st_index_t rb_st_hash_end(st_index_t h)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_hash_end</name></cpp:macro> <cpp:value>rb_st_hash_end</cpp:value></cpp:define>
<macro><name>CONSTFUNC</name><argument_list>(<argument>st_index_t rb_st_hash_start(st_index_t h)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_hash_start</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((st_index_t)(h))</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>rb_hash_bulk_insert_into_st_table</name><parameter_list>(<parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>RUBY_SYMBOL_EXPORT_END</name></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
{ 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
