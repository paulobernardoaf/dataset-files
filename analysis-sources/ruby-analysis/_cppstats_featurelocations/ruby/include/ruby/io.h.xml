<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats_featurelocations\ruby\include\ruby\io.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_IO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_IO_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
} 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STDIO_EXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio_ext.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reqevents</name></cpp:macro> <cpp:value>events</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rtnevents</name></cpp:macro> <cpp:value>revents</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>reqevents</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rtnevents</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>events</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>revents</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_WAITFD_IN</name></cpp:macro> <cpp:value>POLLIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_WAITFD_PRI</name></cpp:macro> <cpp:value>POLLPRI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_WAITFD_OUT</name></cpp:macro> <cpp:value>POLLOUT</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_WAITFD_IN</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_WAITFD_PRI</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_WAITFD_OUT</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name></type>

<name>PACKED_STRUCT_UNALIGNED</name><argument_list>(<argument><expr>struct <name>rb_io_buffer_t</name> <block>{
<expr><name>char</name> <operator>*</operator><name>ptr</name></expr>; 
<expr><name>int</name> <name>off</name></expr>;
<expr><name>int</name> <name>len</name></expr>;
<expr><name>int</name> <name>capa</name></expr>;
}</block></expr></argument>)</argument_list></decl>;</decl_stmt>
<typedef>typedef <type><name><name>struct</name> <name>rb_io_buffer_t</name></name></type> <name>rb_io_buffer_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>rb_io_t</name> <block>{
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stdio_file</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>rb_pid_t</name></type> <name>pid</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>VALUE</name></type> <name>pathv</name></decl>;</decl_stmt> 
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>finalize</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_io_t</name></name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<decl_stmt><decl><type><name>rb_io_buffer_t</name></type> <name>wbuf</name></decl>, <name>rbuf</name>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tied_io_for_writing</name></decl>;</decl_stmt>







<struct>struct <name>rb_io_enc_t</name> <block>{
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ecflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>ecopts</name></decl>;</decl_stmt>
}</block> <decl><name>encs</name></decl>;</struct>

<decl_stmt><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>readconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rb_io_buffer_t</name></type> <name>cbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>writeconv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>writeconv_asciicompat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>writeconv_initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>writeconv_pre_ecflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>writeconv_pre_ecopts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>write_lock</name></decl>;</decl_stmt>
}</block></struct></type> <name>rb_io_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>rb_io_enc_t</name></name></type> <name>rb_io_enc_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_RB_IO_T</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_READABLE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_WRITABLE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_READWRITE</name></cpp:macro> <cpp:value>(FMODE_READABLE|FMODE_WRITABLE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_BINMODE</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_SYNC</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_TTY</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_DUPLEX</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_APPEND</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_CREATE</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_EXCL</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_TRUNC</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_TEXTMODE</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMODE_SETENC_BY_BOM</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetOpenFile</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>fp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_io_check_closed((fp) = RFILE(rb_io_taint_check(obj))-&gt;fptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MakeOpenFile</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>fp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {(fp) = rb_io_make_open_file(obj);} while (0)</cpp:value></cpp:define>



<function_decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>rb_io_make_open_file</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>rb_io_stdio_file</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FILE</name> <modifier>*</modifier></type><name>rb_fdopen</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_io_modestr_fmode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modestr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_io_modestr_oflags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modestr</name></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>CONSTFUNC</name><argument_list>(<argument>int rb_io_oflags_fmode(int oflags)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>rb_io_check_writable</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_io_check_readable</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_io_check_char_readable</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_io_check_byte_readable</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_io_fptr_finalize</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_io_synchronized</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_io_check_initialized</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_io_check_closed</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_io_get_io</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_io_check_io</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_io_get_write_io</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_io_set_write_io</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_io_wait_readable</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_io_wait_writable</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_wait_for_single_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_io_set_nonblock</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_io_extract_encoding_option</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier><modifier>*</modifier></type><name>enc_p</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier><modifier>*</modifier></type><name>enc2_p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fmode_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rb_io_extract_modeenc</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>vmode_p</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>vperm_p</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>opthash</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>oflags_p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fmode_p</name></decl></parameter>, <parameter><decl><type><name>rb_io_enc_t</name> <modifier>*</modifier></type><name>convconfig_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>rb_io_bufwrite</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_io_mode_flags</name><parameter_list>(<parameter><type><name>modestr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[&lt;"rb_io_mode_flags() is obsolete; use rb_io_modestr_fmode()"&gt;]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_io_modenum_flags</name><parameter_list>(<parameter><type><name>oflags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[&lt;"rb_io_modenum_flags() is obsolete; use rb_io_oflags_fmode()"&gt;]</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_io_taint_check</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>
<macro><name>NORETURN</name><argument_list>(<argument>void rb_eof_error(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>rb_io_read_check</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rb_io_read_pending</name><parameter_list>(<parameter><decl><type><name>rb_io_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>stat</name>;</struct_decl>
<function_decl><type><name>VALUE</name></type> <name>rb_stat_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>RUBY_SYMBOL_EXPORT_END</name></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
{ 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></extern> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
</unit>
