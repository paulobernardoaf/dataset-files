<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\util.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__MINGW32__</name> <operator>||</operator> <name>defined</name> <name>__MINGW64__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINGW_HAS_SECURE_API</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"missing/file.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/sanitizers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/util.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ruby_hexdigits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hexdigit</name></cpp:macro> <cpp:value>ruby_hexdigits</cpp:value></cpp:define>

<function><type><name>unsigned</name> <name>long</name></type>

<name>ruby_scan_oct</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>retlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'7'</literal> <operator>&lt;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>|=</operator> <operator>*</operator><name>s</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>retlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt> 

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type>

<name>ruby_scan_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>retlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>hexdigit</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>tmp</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>retval</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>|=</operator> <operator>(</operator><name>tmp</name> <operator>-</operator> <name>hexdigit</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>retlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt> 

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>ruby_digit36_to_number_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,

<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,

<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>NO_SANITIZE</name><argument_list>(<argument><literal type="string">"unsigned-integer-overflow"</literal></argument>, <argument>extern unsigned long ruby_scan_digits(const char *str, ssize_t len, int base, size_t *retlen, int *overflow)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><name>unsigned</name> <name>long</name></type>

<name>ruby_scan_digits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>retlen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mul_overflow</name> <init>= <expr><operator>(</operator><operator>~</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><literal type="number">0</literal><operator>)</operator> <operator>/</operator> <name>base</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>overflow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>retlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>ruby_digit36_to_number_table</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>str</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>base</name> <operator>&lt;=</operator> <name>d</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>str</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mul_overflow</name> <operator>&lt;</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>overflow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>overflow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>--</operator><name>len</name></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>retlen</name> <operator>=</operator> <name>str</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type>

<name>ruby_strtoul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>overflow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subject_found</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <literal type="number">36</literal> <operator>&lt;</operator> <name>base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>subject_found</name> <operator>=</operator> <name>str</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>base</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><name>base</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><name>base</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><name>base</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ruby_scan_digits</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>subject_found</name> <operator>=</operator> <name>str</name><operator>+</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>endptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>subject_found</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<return>return <expr><name>ULONG_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>long</name><operator>)</operator><name>ret</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_ISDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISDIR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFMT) == S_IFDIR)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>cmpfunc_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_QSORT_S</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>RUBY_MSVCRT_VERSION</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qsort_r</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>nel</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>, <parameter><type><name>cmp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>qsort_s(base, nel, size, cmp, arg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cmp_bsd_qsort</name></cpp:macro> <cpp:value>cmp_ms_qsort</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_BSD_QSORT_R</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_BSD_QSORT_R</name></expr></cpp:if>

<struct>struct <name>bsd_qsort_r_args</name> <block>{

<decl_stmt><decl><type><name>cmpfunc_t</name> <modifier>*</modifier></type><name>cmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>cmp_bsd_qsort</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bsd_qsort_r_args</name></name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call>(<modifier>*</modifier><name><name>args</name><operator>-&gt;</operator><name>cmp</name></name>)<argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ruby_qsort</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>cmpfunc_t</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>bsd_qsort_r_args</name></name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>cmp</name></name> <operator>=</operator> <name>cmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>qsort_r</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>nel</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>cmp_bsd_qsort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_QSORT_S</name></expr></cpp:elif>

<function><type><name>void</name></type>

<name>ruby_qsort</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>cmpfunc_t</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nel</name> <operator>||</operator> <operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name> <operator>||</operator> <operator>!</operator><name>cmp</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nel</name> <operator>&gt;</operator> <name>RSIZE_MAX</name> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <name>RSIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>qsort_s</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>nel</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GNU_QSORT_R</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>HAVE_GNU_QSORT_R</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmtype</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmcount</name></cpp:macro> <cpp:value>(16 / SIZEOF_LONG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro> <cpp:value>((mmtype*)a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>((mmtype*)b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro> <cpp:value>((mmtype*)c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>((mmtype*)d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmstep</name></cpp:macro> <cpp:value>(sizeof(mmtype) * mmcount)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmprepare</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (((VALUE)(base) % sizeof(mmtype)) == 0 &amp;&amp; ((size) % sizeof(mmtype)) == 0) if ((size) &gt;= mmstep) mmkind = 1;else mmkind = 0;else mmkind = -1;high = ((size) / mmstep) * mmstep;low = ((size) % mmstep);} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmarg</name></cpp:macro> <cpp:value>mmkind, size, high, low</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmargdecl</name></cpp:macro> <cpp:value>int mmkind, size_t size, size_t high, size_t low</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmswap_</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>mmargdecl</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mmkind</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>mmtype</name></type> <name>s</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>mmcount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>mmkind</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>a</name> <operator>+</operator> <name>high</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>mmcount</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>mmcount</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>mmstep</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>+=</operator> <name>mmstep</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>t</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>low</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>mmcount</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>low</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mmtype</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>mmcount</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>low</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mmtype</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>a</name> <operator>+</operator> <name>size</name></expr></init></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<do>do <block>{<block_content><expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content>}</block> while <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>t</name></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmswap</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mmswap_((a),(b),mmarg)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmrot3_</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>mmargdecl</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mmkind</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>mmtype</name></type> <name>s</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>mmcount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>mmkind</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>a</name> <operator>+</operator> <name>high</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>mmcount</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>mmcount</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>mmstep</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>+=</operator> <name>mmstep</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>mmstep</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>t</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>low</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>mmcount</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>low</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mmtype</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>mmcount</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>low</name> <operator>==</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mmtype</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>C</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>a</name> <operator>+</operator> <name>size</name></expr></init></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<do>do <block>{<block_content><expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content>}</block> while <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>t</name></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmrot3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mmrot3_((a),(b),(c),mmarg)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{ <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>LL</name></decl>, <modifier>*</modifier><name>RR</name>;</decl_stmt> }</block></struct></type> <name>stack_node</name>;</typedef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH</name><parameter_list>(<parameter><type><name>ll</name></type></parameter>,<parameter><type><name>rr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { top-&gt;LL = (ll); top-&gt;RR = (rr); ++top; } while (0)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP</name><parameter_list>(<parameter><type><name>ll</name></type></parameter>,<parameter><type><name>rr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { --top; (ll) = top-&gt;LL; (rr) = top-&gt;RR; } while (0)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>med3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*cmp)((a),(b),d)&lt;0 ? ((*cmp)((b),(c),d)&lt;0 ? (b) : ((*cmp)((a),(c),d)&lt;0 ? (c) : (a))) : ((*cmp)((b),(c),d)&gt;0 ? (b) : ((*cmp)((a),(c),d)&lt;0 ? (a) : (c))))</cpp:value></cpp:define>

<function><type><name>void</name></type>

<name>ruby_qsort</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>cmpfunc_t</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>m</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>eq_l</name></decl>, <decl><type ref="prev"/><name>eq_r</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name>base</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>R</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>base</name> <operator>+</operator> <name>size</name><operator>*</operator><operator>(</operator><name>nel</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>chklim</name> <init>= <expr><literal type="number">63</literal></expr></init></decl>;</decl_stmt> 

<enum>enum <block>{<decl><name>size_bits</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name></expr></init></decl>}</block>;</enum>

<decl_stmt><decl><type><name>stack_node</name></type> <name><name>stack</name><index>[<expr><name>size_bits</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>stack_node</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name>stack</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mmkind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>high</name></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nel</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>mmprepare</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>start</name>;</goto>

<label><name>nxt</name>:</label>

<if_stmt><if>if <condition>(<expr><name>stack</name> <operator>==</operator> <name>top</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<label><name>start</name>:</label>

<if_stmt><if>if <condition>(<expr><name>L</name> <operator>+</operator> <name>size</name> <operator>==</operator> <name>R</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <goto>goto <name>nxt</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>L</name></expr>;</expr_stmt> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>/</operator> <name>size</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>l</name> <operator>+</operator> <name>size</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>m1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>m3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">200</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name><operator>*</operator><operator>(</operator><name>n</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name>l</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>p1</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>p3</name> <init>= <expr><name>p2</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>m1</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>m</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p3</name> <operator>=</operator> <name>p2</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m3</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name><operator>*</operator><operator>(</operator><name>n</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>m1</name> <operator>=</operator> <name>l</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m3</name> <operator>=</operator> <name>m</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>med3</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>chklim</name> <operator>&amp;&amp;</operator> <name>nel</name> <operator>&gt;=</operator> <name>chklim</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>chklim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name><operator>=</operator><name>l</name></expr>;</init> <condition><expr><name>p</name><operator>&lt;</operator><name>r</name></expr>;</condition> <incr><expr><name>p</name><operator>+=</operator><name>size</name></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>size</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<goto>goto <name>nxt</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>fail</name>:</label> <goto>goto <name>loopA</name>;</goto> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>loopA</name>;</goto></block_content>}</block></if></if_stmt> 

<expr_stmt><expr><call><name>mmrot3</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>loopA</name>;</goto> 

</block_content>}</block></if></if_stmt>

<goto>goto <name>loopB</name>;</goto> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>chklim</name> <operator>&amp;&amp;</operator> <name>nel</name> <operator>&gt;=</operator> <name>chklim</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>chklim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name><operator>=</operator><name>l</name></expr>;</init> <condition><expr><name>p</name><operator>&lt;</operator><name>r</name></expr>;</condition> <incr><expr><name>p</name><operator>+=</operator><name>size</name></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>size</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<while>while <condition>(<expr><name>l</name><operator>&lt;</operator><name>r</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>l</name><operator>+=</operator><name>size</name></expr>;</expr_stmt> <expr_stmt><expr><name>r</name><operator>-=</operator><name>size</name></expr>;</expr_stmt></block_content>}</block></while> 

<goto>goto <name>nxt</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>fail2</name>:</label> <expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>loopA</name>;</goto> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>loopB</name>;</goto></block_content>}</block></if></if_stmt> 

<expr_stmt><expr><call><name>mmrot3</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>loopA</name>;</goto> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>loopA</name>;</goto> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content><goto>goto <name>loopA</name>;</goto></block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>loopB</name>;</goto></block_content>}</block></if></if_stmt> 

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>+=</operator> <name>size</name><operator>)</operator> <operator>==</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>nxt</name>;</goto></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>L</name></expr>;</expr_stmt> <goto>goto <name>loopA</name>;</goto></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>L</name></expr>;</expr_stmt> <goto>goto <name>loopB</name>;</goto></block_content>}</block></if></if_stmt> 

</block_content>}</block></for>

<label><name>loopA</name>:</label> <expr_stmt><expr><name>eq_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>eq_r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>+=</operator> <name>size</name><operator>)</operator> <operator>==</operator> <name>r</name></expr>)</condition>

<block>{<block_content><expr_stmt><expr><name>l</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><name>l</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt> <goto>goto <name>fin</name>;</goto></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>eq_r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eq_l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <operator>(</operator><name>r</name> <operator>-=</operator> <name>size</name><operator>)</operator></expr>)</condition>

<block>{<block_content><expr_stmt><expr><name>l</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><name>l</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt> <goto>goto <name>fin</name>;</goto></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>m</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>m</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>eq_l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<label><name>loopB</name>:</label> <expr_stmt><expr><name>eq_l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>eq_r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <operator>(</operator><name>r</name> <operator>-=</operator> <name>size</name><operator>)</operator></expr>)</condition>

<block>{<block_content><expr_stmt><expr><name>r</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><name>r</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt> <goto>goto <name>fin</name>;</goto></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>eq_l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>eq_r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>+=</operator> <name>size</name><operator>)</operator> <operator>==</operator> <name>r</name></expr>)</condition>

<block>{<block_content><expr_stmt><expr><name>r</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <expr_stmt><expr><name>r</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt> <goto>goto <name>fin</name>;</goto></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>m</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>m</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call>(<modifier>*</modifier><name>cmp</name>)<argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content><expr_stmt><expr><name>eq_r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mmswap</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<label><name>fin</name>:</label>

<if_stmt><if>if <condition>(<expr><name>eq_l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<if_stmt><if>if <condition>(<expr><name>eq_r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<if_stmt><if>if <condition>(<expr><name>l</name><operator>-</operator><name>L</name> <operator>&lt;</operator> <name>R</name><operator>-</operator><name>r</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>R</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content>}</block></if> 

<else>else <block>{<block_content><expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>L</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content>}</block></else></if_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>R</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>eq_r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>L</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content> <goto>goto <name>nxt</name>;</goto></block_content></block></else></if_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>char</name> <modifier>*</modifier></type>

<name>ruby_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>ruby_getcwd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_GETCWD</name></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RUBY_UNTYPED_DATA_WARNING</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_UNTYPED_DATA_WARNING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>NO_GETCWD_MALLOC</name></expr></cpp:if>

<decl_stmt><decl><type><name>VALUE</name></type> <name>guard</name> <init>= <expr><call><name>Data_Wrap_Struct</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RUBY_DEFAULT_FREE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>getcwd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>guard</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_syserr_fail</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"getcwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>guard</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>VALUE</name></type> <name>guard</name> <init>= <expr><call><name>Data_Wrap_Struct</name><argument_list>(<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cwd</name> <init>= <expr><call><name>getcwd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>guard</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>cwd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cwd</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"getcwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ruby_strdup</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>guard</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_MAX</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><name>PATH_MAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getwd</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_syserr_fail</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"getwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ruby_each_words</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><name>str</name> <operator>=</operator> <name>end</name></expr></incr>)</control> <block>{<block_content>

<while>while <condition>(<expr><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>str</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strtod</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtod</name></cpp:macro> <cpp:value>ruby_strtod</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dtoa</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dtoa</name></cpp:macro> <cpp:value>ruby_dtoa</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>hdtoa</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hdtoa</name></cpp:macro> <cpp:value>ruby_hdtoa</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"missing/dtoa.c"</cpp:file></cpp:include>

</unit>
