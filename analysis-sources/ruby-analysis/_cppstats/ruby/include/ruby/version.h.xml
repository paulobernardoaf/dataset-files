<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\include\ruby\version.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_AUTHOR</name></cpp:macro> <cpp:value>"Yukihiro Matsumoto"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_BIRTH_YEAR</name></cpp:macro> <cpp:value>1993</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_BIRTH_MONTH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_BIRTH_DAY</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_API_VERSION_MAJOR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_API_VERSION_MINOR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_API_VERSION_TEENY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_API_VERSION_CODE</name></cpp:macro> <cpp:value>(RUBY_API_VERSION_MAJOR*10000+RUBY_API_VERSION_MINOR*100+RUBY_API_VERSION_TEENY)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_EXTERN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

} 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>RUBY_EXTERN</name> <specifier>const</specifier> <name>int</name></type> <name><name>ruby_api_version</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>char</name></type> <name><name>ruby_version</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>char</name></type> <name><name>ruby_release_date</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>char</name></type> <name><name>ruby_platform</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>int</name></type> <name>ruby_patchlevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>char</name></type> <name><name>ruby_description</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>char</name></type> <name><name>ruby_copyright</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>char</name></type> <name><name>ruby_engine</name><index>[]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>RUBY_SYMBOL_EXPORT_END</name></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{ 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
