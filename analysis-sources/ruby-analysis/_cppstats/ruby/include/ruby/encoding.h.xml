<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\include\ruby\encoding.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

} 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/oniguruma.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name><name>enum</name> <name>ruby_encoding_consts</name></name></type> <block>{<block_content>

<expr_stmt><expr><name>RUBY_ENCODING_INLINE_MAX</name> <operator>=</operator> <literal type="number">127</literal></expr><operator>,</operator>

<expr><name>RUBY_ENCODING_SHIFT</name> <operator>=</operator> <operator>(</operator><name>RUBY_FL_USHIFT</name><operator>+</operator><literal type="number">10</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_ENCODING_MASK</name> <operator>=</operator> <operator>(</operator><name>RUBY_ENCODING_INLINE_MAX</name><operator>&lt;&lt;</operator><name>RUBY_ENCODING_SHIFT</name>

<operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_ENCODING_MAXNAMELEN</name> <operator>=</operator> <literal type="number">42</literal></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_INLINE_MAX</name></cpp:macro> <cpp:value>RUBY_ENCODING_INLINE_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_SHIFT</name></cpp:macro> <cpp:value>RUBY_ENCODING_SHIFT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_MASK</name></cpp:macro> <cpp:value>RUBY_ENCODING_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENCODING_SET_INLINED</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {RBASIC(obj)-&gt;flags &amp;= ~RUBY_ENCODING_MASK;RBASIC(obj)-&gt;flags |= (VALUE)(i) &lt;&lt; RUBY_ENCODING_SHIFT;} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENCODING_SET</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_enc_set_index((obj), (i))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENCODING_GET_INLINED</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)((RBASIC(obj)-&gt;flags &amp; RUBY_ENCODING_MASK)&gt;&gt;RUBY_ENCODING_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENCODING_GET</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_ENCODING_GET_INLINED(obj) != RUBY_ENCODING_INLINE_MAX ? RB_ENCODING_GET_INLINED(obj) : rb_enc_get_index(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENCODING_IS_ASCII8BIT</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_ENCODING_GET_INLINED(obj) == 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_SET_INLINED</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENCODING_SET_INLINED(obj,i)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_SET</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENCODING_SET(obj,i)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_GET_INLINED</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENCODING_GET_INLINED(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_GET</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENCODING_GET(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_IS_ASCII8BIT</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENCODING_IS_ASCII8BIT(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_MAXNAMELEN</name></cpp:macro> <cpp:value>RUBY_ENCODING_MAXNAMELEN</cpp:value></cpp:define>

<enum>enum <name>ruby_coderange_type</name> <block>{

<decl><name>RUBY_ENC_CODERANGE_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>RUBY_ENC_CODERANGE_7BIT</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>RUBY_FL_USER8</name><operator>)</operator></expr></init></decl>,

<decl><name>RUBY_ENC_CODERANGE_VALID</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>RUBY_FL_USER9</name><operator>)</operator></expr></init></decl>,

<decl><name>RUBY_ENC_CODERANGE_BROKEN</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>RUBY_FL_USER8</name><operator>|</operator><name>RUBY_FL_USER9</name><operator>)</operator><operator>)</operator></expr></init></decl>,

<decl><name>RUBY_ENC_CODERANGE_MASK</name> <init>= <expr><operator>(</operator><name>RUBY_ENC_CODERANGE_7BIT</name><operator>|</operator>

<name>RUBY_ENC_CODERANGE_VALID</name><operator>|</operator>

<name>RUBY_ENC_CODERANGE_BROKEN</name><operator>)</operator></expr></init></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_enc_coderange_clean_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>cr</name> <operator>^</operator> <operator>(</operator><name>cr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>RUBY_ENC_CODERANGE_7BIT</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENC_CODERANGE_CLEAN_P</name><parameter_list>(<parameter><type><name>cr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_enc_coderange_clean_p(cr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENC_CODERANGE</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)RBASIC(obj)-&gt;flags &amp; RUBY_ENC_CODERANGE_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENC_CODERANGE_ASCIIONLY</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_ENC_CODERANGE(obj) == RUBY_ENC_CODERANGE_7BIT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENC_CODERANGE_SET</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>cr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RBASIC(obj)-&gt;flags = (RBASIC(obj)-&gt;flags &amp; ~RUBY_ENC_CODERANGE_MASK) | (cr))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENC_CODERANGE_CLEAR</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENC_CODERANGE_SET((obj),0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENC_CODERANGE_AND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) == RUBY_ENC_CODERANGE_7BIT ? (b) : (a) != RUBY_ENC_CODERANGE_VALID ? RUBY_ENC_CODERANGE_UNKNOWN : (b) == RUBY_ENC_CODERANGE_7BIT ? RUBY_ENC_CODERANGE_VALID : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ENCODING_CODERANGE_SET</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>encindex</name></type></parameter>, <parameter><type><name>cr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { VALUE rb_encoding_coderange_obj = (obj); RB_ENCODING_SET(rb_encoding_coderange_obj, (encindex)); RB_ENC_CODERANGE_SET(rb_encoding_coderange_obj, (cr)); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE_MASK</name></cpp:macro> <cpp:value>RUBY_ENC_CODERANGE_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE_UNKNOWN</name></cpp:macro> <cpp:value>RUBY_ENC_CODERANGE_UNKNOWN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE_7BIT</name></cpp:macro> <cpp:value>RUBY_ENC_CODERANGE_7BIT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE_VALID</name></cpp:macro> <cpp:value>RUBY_ENC_CODERANGE_VALID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE_BROKEN</name></cpp:macro> <cpp:value>RUBY_ENC_CODERANGE_BROKEN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE_CLEAN_P</name><parameter_list>(<parameter><type><name>cr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENC_CODERANGE_CLEAN_P(cr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENC_CODERANGE(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE_ASCIIONLY</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENC_CODERANGE_ASCIIONLY(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE_SET</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>cr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENC_CODERANGE_SET(obj,cr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE_CLEAR</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENC_CODERANGE_CLEAR(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_CODERANGE_AND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENC_CODERANGE_AND(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODING_CODERANGE_SET</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>encindex</name></type></parameter>, <parameter><type><name>cr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ENCODING_CODERANGE_SET(obj, encindex, cr)</cpp:value></cpp:define>

<typedef>typedef <type><specifier>const</specifier> <name>OnigEncodingType</name></type> <name>rb_encoding</name>;</typedef>

<function_decl><type><name>int</name></type> <name>rb_char_to_option_kcode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kcode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_replicate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_define_dummy_encoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>PUREFUNC</name><argument_list>(<argument>int rb_enc_dummy_p(rb_encoding *enc)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>PUREFUNC</name><argument_list>(<argument>int rb_enc_to_index(rb_encoding *enc)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>int</name></type> <name>rb_enc_get_index</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_enc_set_index</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encindex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_capable</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_find_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_alias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_to_encoding_index</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_to_encoding</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_find_encoding</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_enc_get</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_enc_compatible</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_enc_check</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_associate_index</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_associate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_enc_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_str_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_str_new_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_str_new_static</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_reg_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>PRINTF_ARGS</name><argument_list>(<argument>VALUE rb_enc_sprintf(rb_encoding *, const char*, ...)</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_vsprintf</name><parameter_list>(<parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> <name>rb_enc_strlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name><modifier>*</modifier></type> <name>rb_enc_nth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_obj_encoding</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_str_buf_cat</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_uint_chr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_external_str_new_with_enc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_str_export_to_enc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_str_conv_enc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_str_conv_enc_opts</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ecflags</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ecopts</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CONSTANT_P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_str_new</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_GNUC_EXTENSION_BLOCK( (__builtin_constant_p(str) &amp;&amp; __builtin_constant_p(len)) ? rb_enc_str_new_static((str), (len), (enc)) : rb_enc_str_new((str), (len), (enc)) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_str_new_cstr</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_GNUC_EXTENSION_BLOCK( (__builtin_constant_p(str)) ? rb_enc_str_new_static((str), (long)strlen(str), (enc)) : rb_enc_str_new_cstr((str), (enc)) )</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>PRINTF_ARGS</name><argument_list>(<argument><expr><macro><name>NORETURN</name><argument_list>(<argument>void rb_enc_raise(rb_encoding *, VALUE, const char*, ...)</argument>)</argument_list></macro></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_enc_from_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_enc_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_name</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(enc)-&gt;name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_mbminlen</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(enc)-&gt;min_enc_len</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_mbmaxlen</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(enc)-&gt;max_enc_len</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rb_enc_mbclen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_fast_mbclen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_precise_mbclen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBCLEN_CHARFOUND_P</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_MBCLEN_CHARFOUND_P(ret)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBCLEN_CHARFOUND_LEN</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_MBCLEN_CHARFOUND_LEN(ret)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBCLEN_INVALID_P</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_MBCLEN_INVALID_P(ret)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBCLEN_NEEDMORE_P</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_MBCLEN_NEEDMORE_P(ret)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBCLEN_NEEDMORE_LEN</name><parameter_list>(<parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_MBCLEN_NEEDMORE_LEN(ret)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rb_enc_ascget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>rb_enc_codepoint_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>rb_enc_codepoint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_codepoint</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_enc_codepoint_len((p),(e),0,(enc))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_mbc_to_codepoint</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_MBC_TO_CODE((enc),(UChar*)(p),(UChar*)(e))</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rb_enc_codelen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_code_to_mbclen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_code_to_mbclen</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_CODE_TO_MBCLEN((enc), (c));</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_mbcput</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_CODE_TO_MBC((enc),(c),(UChar*)(buf))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_prev_char</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char *)onigenc_get_prev_char_head((enc),(UChar*)(s),(UChar*)(p),(UChar*)(e)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_left_char_head</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char *)onigenc_get_left_adjust_char_head((enc),(UChar*)(s),(UChar*)(p),(UChar*)(e)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_right_char_head</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char *)onigenc_get_right_adjust_char_head((enc),(UChar*)(s),(UChar*)(p),(UChar*)(e)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_step_back</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((char *)onigenc_step_back((enc),(UChar*)(s),(UChar*)(p),(UChar*)(e),(int)(n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_is_newline</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>end</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_MBC_NEWLINE((enc),(UChar*)(p),(UChar*)(end))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_isctype</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>t</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_CODE_CTYPE((enc),(c),(t))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_isascii</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_CODE_ASCII(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_isalpha</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_CODE_ALPHA((enc),(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_islower</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_CODE_LOWER((enc),(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_isupper</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_CODE_UPPER((enc),(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_ispunct</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_CODE_PUNCT((enc),(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_isalnum</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_CODE_ALNUM((enc),(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_isprint</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_CODE_PRINT((enc),(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_isspace</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_CODE_SPACE((enc),(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_isdigit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ONIGENC_IS_CODE_DIGIT((enc),(c))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_enc_asciicompat_inline</name><parameter_list>(<parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_enc_mbminlen</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>rb_enc_dummy_p</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_asciicompat</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_enc_asciicompat_inline(enc)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rb_enc_casefold</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>CONSTFUNC</name><argument_list>(<argument>int rb_enc_toupper(int c, rb_encoding *enc)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>CONSTFUNC</name><argument_list>(<argument>int rb_enc_tolower(int c, rb_encoding *enc)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>ID</name></type> <name>rb_intern3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ID</name></type> <name>rb_interned_id_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_symname_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_symname2_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_str_coderange</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> <name>rb_str_coderange_scan_restartable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_enc_str_asciionly_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_enc_str_asciicompat_p</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_enc_asciicompat(rb_enc_get(str))</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_from_encoding</name><parameter_list>(<parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>PUREFUNC</name><argument_list>(<argument>int rb_enc_unicode_p(rb_encoding *enc)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_ascii8bit_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_utf8_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_usascii_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_locale_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_filesystem_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_default_external_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>rb_default_internal_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>rb_ascii8bit_encindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CONSTFUNC</name><argument_list>(<argument>int rb_ascii8bit_encindex(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>rb_utf8_encindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CONSTFUNC</name><argument_list>(<argument>int rb_utf8_encindex(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>rb_usascii_encindex</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>CONSTFUNC</name><argument_list>(<argument>int rb_usascii_encindex(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>rb_locale_encindex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_filesystem_encindex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_default_external</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_enc_default_internal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_enc_set_default_external</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>encoding</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_enc_set_default_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>encoding</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_locale_charmap</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> <name>rb_memsearch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>long</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>long</name></type></decl></parameter>,<parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>rb_enc_path_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>rb_enc_path_skip_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>rb_enc_path_last_separator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>rb_enc_path_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_encoding</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ruby_enc_find_basename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>baselen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>alllen</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ruby_enc_find_extname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ID</name></type> <name>rb_check_id_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_check_symbol_cstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cEncoding</name></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{

<decl><name>econv_invalid_byte_sequence</name></decl>,

<decl><name>econv_undefined_conversion</name></decl>,

<decl><name>econv_destination_buffer_full</name></decl>,

<decl><name>econv_source_buffer_empty</name></decl>,

<decl><name>econv_finished</name></decl>,

<decl><name>econv_after_output</name></decl>,

<decl><name>econv_incomplete_input</name></decl>

}</block></enum></type> <name>rb_econv_result_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>rb_econv_t</name></name></type> <name>rb_econv_t</name>;</typedef>

<function_decl><type><name>VALUE</name></type> <name>rb_str_encode</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ecflags</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ecopts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_econv_has_convpath_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>from_encoding</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>to_encoding</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_econv_prepare_options</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>opthash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ecopts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ecflags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_econv_prepare_opts</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>opthash</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ecopts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>rb_econv_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_encoding</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>destination_encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ecflags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>rb_econv_open_opts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_encoding</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>destination_encoding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ecflags</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ecopts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>rb_econv_result_t</name></type> <name>rb_econv_convert</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>source_buffer_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source_buffer_end</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>destination_buffer_ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>destination_buffer_end</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_econv_close</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_econv_set_replacement</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_econv_decorate_at_first</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decorator_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_econv_decorate_at_last</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decorator_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_econv_open_exc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>senc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>denc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ecflags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_econv_insert_output</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str_encoding</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_econv_encoding_to_insert_output</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_econv_check_error</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_econv_make_exception</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_econv_putbackable</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_econv_putback</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_econv_asciicompat_encoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_econv_str_convert</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_econv_substr_convert</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>byteoff</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>bytesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_econv_str_append</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_econv_substr_append</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>byteoff</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>bytesize</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_econv_append</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytesrc</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>bytesize</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_econv_binmode</name><parameter_list>(<parameter><decl><type><name>rb_econv_t</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>ruby_econv_flag_type</name> <block>{

<decl><name>RUBY_ECONV_ERROR_HANDLER_MASK</name> <init>= <expr><literal type="number">0x000000ff</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_INVALID_MASK</name> <init>= <expr><literal type="number">0x0000000f</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_INVALID_REPLACE</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_UNDEF_MASK</name> <init>= <expr><literal type="number">0x000000f0</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_UNDEF_REPLACE</name> <init>= <expr><literal type="number">0x00000020</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_UNDEF_HEX_CHARREF</name> <init>= <expr><literal type="number">0x00000030</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_DECORATOR_MASK</name> <init>= <expr><literal type="number">0x0000ff00</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_NEWLINE_DECORATOR_MASK</name> <init>= <expr><literal type="number">0x00003f00</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_NEWLINE_DECORATOR_READ_MASK</name> <init>= <expr><literal type="number">0x00000f00</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_NEWLINE_DECORATOR_WRITE_MASK</name> <init>= <expr><literal type="number">0x00003000</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_UNIVERSAL_NEWLINE_DECORATOR</name> <init>= <expr><literal type="number">0x00000100</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_CRLF_NEWLINE_DECORATOR</name> <init>= <expr><literal type="number">0x00001000</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_CR_NEWLINE_DECORATOR</name> <init>= <expr><literal type="number">0x00002000</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_XML_TEXT_DECORATOR</name> <init>= <expr><literal type="number">0x00004000</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_XML_ATTR_CONTENT_DECORATOR</name> <init>= <expr><literal type="number">0x00008000</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_STATEFUL_DECORATOR_MASK</name> <init>= <expr><literal type="number">0x00f00000</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_XML_ATTR_QUOTE_DECORATOR</name> <init>= <expr><literal type="number">0x00100000</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_DEFAULT_NEWLINE_DECORATOR</name> <init>=

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_TEST_CRLF_ENVIRONMENT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>RUBY_ECONV_CRLF_NEWLINE_DECORATOR</name></expr></init></decl>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

0,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_ERROR_HANDLER_MASK</name></cpp:macro> <cpp:value>RUBY_ECONV_ERROR_HANDLER_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_INVALID_MASK</name></cpp:macro> <cpp:value>RUBY_ECONV_INVALID_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_INVALID_REPLACE</name></cpp:macro> <cpp:value>RUBY_ECONV_INVALID_REPLACE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_UNDEF_MASK</name></cpp:macro> <cpp:value>RUBY_ECONV_UNDEF_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_UNDEF_REPLACE</name></cpp:macro> <cpp:value>RUBY_ECONV_UNDEF_REPLACE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_UNDEF_HEX_CHARREF</name></cpp:macro> <cpp:value>RUBY_ECONV_UNDEF_HEX_CHARREF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_DECORATOR_MASK</name></cpp:macro> <cpp:value>RUBY_ECONV_DECORATOR_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_NEWLINE_DECORATOR_MASK</name></cpp:macro> <cpp:value>RUBY_ECONV_NEWLINE_DECORATOR_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_NEWLINE_DECORATOR_READ_MASK</name></cpp:macro> <cpp:value>RUBY_ECONV_NEWLINE_DECORATOR_READ_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_NEWLINE_DECORATOR_WRITE_MASK</name></cpp:macro> <cpp:value>RUBY_ECONV_NEWLINE_DECORATOR_WRITE_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_UNIVERSAL_NEWLINE_DECORATOR</name></cpp:macro> <cpp:value>RUBY_ECONV_UNIVERSAL_NEWLINE_DECORATOR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_CRLF_NEWLINE_DECORATOR</name></cpp:macro> <cpp:value>RUBY_ECONV_CRLF_NEWLINE_DECORATOR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_CR_NEWLINE_DECORATOR</name></cpp:macro> <cpp:value>RUBY_ECONV_CR_NEWLINE_DECORATOR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_XML_TEXT_DECORATOR</name></cpp:macro> <cpp:value>RUBY_ECONV_XML_TEXT_DECORATOR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_XML_ATTR_CONTENT_DECORATOR</name></cpp:macro> <cpp:value>RUBY_ECONV_XML_ATTR_CONTENT_DECORATOR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_STATEFUL_DECORATOR_MASK</name></cpp:macro> <cpp:value>RUBY_ECONV_STATEFUL_DECORATOR_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_XML_ATTR_QUOTE_DECORATOR</name></cpp:macro> <cpp:value>RUBY_ECONV_XML_ATTR_QUOTE_DECORATOR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_DEFAULT_NEWLINE_DECORATOR</name></cpp:macro> <cpp:value>RUBY_ECONV_DEFAULT_NEWLINE_DECORATOR</cpp:value></cpp:define>

<decl><name>RUBY_ECONV_PARTIAL_INPUT</name> <init>= <expr><literal type="number">0x00010000</literal></expr></init></decl>,

<decl><name>RUBY_ECONV_AFTER_OUTPUT</name> <init>= <expr><literal type="number">0x00020000</literal></expr></init></decl>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_PARTIAL_INPUT</name></cpp:macro> <cpp:value>RUBY_ECONV_PARTIAL_INPUT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONV_AFTER_OUTPUT</name></cpp:macro> <cpp:value>RUBY_ECONV_AFTER_OUTPUT</cpp:value></cpp:define>

<decl><name>RUBY_ECONV_FLAGS_PLACEHOLDER</name></decl>}</block>;</enum>

<expr_stmt><expr><name>RUBY_SYMBOL_EXPORT_END</name></expr></expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{ 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></extern> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
