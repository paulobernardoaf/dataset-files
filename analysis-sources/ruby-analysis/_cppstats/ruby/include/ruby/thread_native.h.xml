<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\include\ruby\thread_native.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>HANDLE</name></type> <name>rb_nativethread_id_t</name>;</typedef>

<typedef>typedef <type><union>union <name>rb_thread_lock_union</name> <block>{

<decl_stmt><decl><type><name>HANDLE</name></type> <name>mutex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>crit</name></decl>;</decl_stmt>

}</block></union></type> <name>rb_nativethread_lock_t</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTHREAD_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>pthread_t</name></type> <name>rb_nativethread_id_t</name>;</typedef>

<typedef>typedef <type><name>pthread_mutex_t</name></type> <name>rb_nativethread_lock_t</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unsupported thread type"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<name>rb_nativethread_id_t</name></type> <name>rb_nativethread_self</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_nativethread_lock_initialize</name><parameter_list>(<parameter><decl><type><name>rb_nativethread_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_nativethread_lock_destroy</name><parameter_list>(<parameter><decl><type><name>rb_nativethread_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_nativethread_lock_lock</name><parameter_list>(<parameter><decl><type><name>rb_nativethread_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_nativethread_lock_unlock</name><parameter_list>(<parameter><decl><type><name>rb_nativethread_lock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<expr><name>RUBY_SYMBOL_EXPORT_END</name></expr>

</unit>
