<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\include\ruby\ruby.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

} 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_EXTCONF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> RUBY_EXTCONF_H</cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/assert.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MJIT_HEADER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RUBY_EXTERN</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EXTERN</name></cpp:macro> <cpp:value>extern __declspec(dllimport)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR_CONSTANT_P</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_BUILTIN___BUILTIN_TYPES_COMPATIBLE_P</name></cpp:undef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>GCC_VERSION_BEFORE</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">8</literal><operator>,</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:elif> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR_CONSTANT_P</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASSUME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNREACHABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSUME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_LIKELY(!!(x)) ? (void)0 : UNREACHABLE)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSUME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)(x))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNREACHABLE_RETURN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNREACHABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNREACHABLE_RETURN</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UNREACHABLE</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNREACHABLE_RETURN</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return (val)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UNREACHABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNREACHABLE</name></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_MACRO_SELECT</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TOKEN_PASTE(base, n)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INTRINSICS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrinsics.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>RUBY_SYMBOL_EXPORT_BEGIN</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>alloca</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alloca</name></cpp:macro> <cpp:value>__builtin_alloca</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALLOCA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>alloca</name></cpp:pragma>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>alloca</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>void</name> <modifier>*</modifier></type><name>alloca</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_UINTPTR_T</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr></cpp:if>

<typedef>typedef <type><name>uintptr_t</name></type> <name>VALUE</name>;</typedef>

<typedef>typedef <type><name>uintptr_t</name></type> <name>ID</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_VALUE</name></cpp:macro> <cpp:value>intptr_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_VALUE</name></cpp:macro> <cpp:value>SIZEOF_UINTPTR_T</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRI_VALUE_PREFIX</name></cpp:undef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>==</operator> <name>SIZEOF_VOIDP</name></expr></cpp:elif>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>VALUE</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>ID</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_VALUE</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_VALUE</name></cpp:macro> <cpp:value>SIZEOF_LONG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_VALUE_PREFIX</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_LONG_LONG</name> <operator>==</operator> <name>SIZEOF_VOIDP</name></expr></cpp:elif>

<typedef>typedef <type><name>unsigned</name> <name>LONG_LONG</name></type> <name>VALUE</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>LONG_LONG</name></type> <name>ID</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_VALUE</name></cpp:macro> <cpp:value>LONG_LONG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_LONG_VALUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZEOF_VALUE</name></cpp:macro> <cpp:value>SIZEOF_LONG_LONG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_VALUE_PREFIX</name></cpp:macro> <cpp:value>PRI_LL_PREFIX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:error>#<cpp:directive>error</cpp:directive> ----&gt;&gt; ruby requires sizeof(void*) == sizeof(long) or sizeof(LONG_LONG) to be compiled. &lt;&lt;----</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>char</name></type> <name><name>ruby_check_sizeof_int</name><index>[<expr><ternary><condition><expr><name>SIZEOF_INT</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>

<typedef>typedef <type><name>char</name></type> <name><name>ruby_check_sizeof_long</name><index>[<expr><ternary><condition><expr><name>SIZEOF_LONG</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>char</name></type> <name><name>ruby_check_sizeof_long_long</name><index>[<expr><ternary><condition><expr><name>SIZEOF_LONG_LONG</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LONG_LONG</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>char</name></type> <name><name>ruby_check_sizeof_voidp</name><index>[<expr><ternary><condition><expr><name>SIZEOF_VOIDP</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>]</index></name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRI_INT_PREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_INT_PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRI_LONG_PREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_LONG_PREFIX</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRI_SHORT_PREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_SHORT_PREFIX</name></cpp:macro> <cpp:value>"h"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRI_64_PREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_64_PREFIX</name></cpp:macro> <cpp:value>PRI_LONG_PREFIX</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_LONG_LONG</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_64_PREFIX</name></cpp:macro> <cpp:value>PRI_LL_PREFIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRIdPTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdPTR</name></cpp:macro> <cpp:value>PRI_PTR_PREFIX"d"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIiPTR</name></cpp:macro> <cpp:value>PRI_PTR_PREFIX"i"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIoPTR</name></cpp:macro> <cpp:value>PRI_PTR_PREFIX"o"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuPTR</name></cpp:macro> <cpp:value>PRI_PTR_PREFIX"u"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxPTR</name></cpp:macro> <cpp:value>PRI_PTR_PREFIX"x"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIXPTR</name></cpp:macro> <cpp:value>PRI_PTR_PREFIX"X"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_PRI_VALUE_MARK</name></cpp:macro> <cpp:value>"\v"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>PRIdPTR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>PRI_VALUE_PREFIX</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdVALUE</name></cpp:macro> <cpp:value>PRIdPTR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIoVALUE</name></cpp:macro> <cpp:value>PRIoPTR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuVALUE</name></cpp:macro> <cpp:value>PRIuPTR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxVALUE</name></cpp:macro> <cpp:value>PRIxPTR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIXVALUE</name></cpp:macro> <cpp:value>PRIXPTR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIsVALUE</name></cpp:macro> <cpp:value>PRIiPTR"" RUBY_PRI_VALUE_MARK</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdVALUE</name></cpp:macro> <cpp:value>PRI_VALUE_PREFIX"d"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIoVALUE</name></cpp:macro> <cpp:value>PRI_VALUE_PREFIX"o"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuVALUE</name></cpp:macro> <cpp:value>PRI_VALUE_PREFIX"u"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxVALUE</name></cpp:macro> <cpp:value>PRI_VALUE_PREFIX"x"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIXVALUE</name></cpp:macro> <cpp:value>PRI_VALUE_PREFIX"X"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIsVALUE</name></cpp:macro> <cpp:value>PRI_VALUE_PREFIX"i" RUBY_PRI_VALUE_MARK</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRI_VALUE_PREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_VALUE_PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRI_TIMET_PREFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_TIME_T</name> <operator>==</operator> <name>SIZEOF_INT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_TIMET_PREFIX</name></cpp:macro></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_TIME_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_TIMET_PREFIX</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_TIME_T</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_TIMET_PREFIX</name></cpp:macro> <cpp:value>PRI_LL_PREFIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>PRI_PTRDIFF_PREFIX</name></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_PTRDIFF_T</name> <operator>==</operator> <name>SIZEOF_INT</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_PTRDIFF_PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_PTRDIFF_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_PTRDIFF_PREFIX</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_PTRDIFF_T</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_PTRDIFF_PREFIX</name></cpp:macro> <cpp:value>PRI_LL_PREFIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdPTRDIFF</name></cpp:macro> <cpp:value>PRI_PTRDIFF_PREFIX"d"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIiPTRDIFF</name></cpp:macro> <cpp:value>PRI_PTRDIFF_PREFIX"i"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIoPTRDIFF</name></cpp:macro> <cpp:value>PRI_PTRDIFF_PREFIX"o"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuPTRDIFF</name></cpp:macro> <cpp:value>PRI_PTRDIFF_PREFIX"u"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxPTRDIFF</name></cpp:macro> <cpp:value>PRI_PTRDIFF_PREFIX"x"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIXPTRDIFF</name></cpp:macro> <cpp:value>PRI_PTRDIFF_PREFIX"X"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>PRI_SIZE_PREFIX</name></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_INT</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_SIZE_PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_SIZE_PREFIX</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI_SIZE_PREFIX</name></cpp:macro> <cpp:value>PRI_LL_PREFIX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIdSIZE</name></cpp:macro> <cpp:value>PRI_SIZE_PREFIX"d"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIiSIZE</name></cpp:macro> <cpp:value>PRI_SIZE_PREFIX"i"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIoSIZE</name></cpp:macro> <cpp:value>PRI_SIZE_PREFIX"o"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIuSIZE</name></cpp:macro> <cpp:value>PRI_SIZE_PREFIX"u"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxSIZE</name></cpp:macro> <cpp:value>PRI_SIZE_PREFIX"x"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIXSIZE</name></cpp:macro> <cpp:value>PRI_SIZE_PREFIX"X"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LONG_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_MAX</name></cpp:macro> <cpp:value>2147483647</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LONG_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_MIN</name></cpp:macro> <cpp:value>(-LONG_MAX-1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CHAR_BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_BIT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLONG_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LONG_LONG_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLONG_MAX</name></cpp:macro> <cpp:value>LONG_LONG_MAX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_I64_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLONG_MAX</name></cpp:macro> <cpp:value>_I64_MAX</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLONG_MAX</name></cpp:macro> <cpp:value>9223372036854775807LL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLONG_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LONG_LONG_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLONG_MIN</name></cpp:macro> <cpp:value>LONG_LONG_MIN</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_I64_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLONG_MIN</name></cpp:macro> <cpp:value>_I64_MIN</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLONG_MIN</name></cpp:macro> <cpp:value>(-LLONG_MAX-1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_FIXNUM_MAX</name></cpp:macro> <cpp:value>(LONG_MAX&gt;&gt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_FIXNUM_MIN</name></cpp:macro> <cpp:value>RSHIFT((long)LONG_MIN,1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXNUM_MAX</name></cpp:macro> <cpp:value>RUBY_FIXNUM_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXNUM_MIN</name></cpp:macro> <cpp:value>RUBY_FIXNUM_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_INT2FIX</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((VALUE)(i))&lt;&lt;1 | RUBY_FIXNUM_FLAG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT2FIX</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_INT2FIX(i)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_LONG2FIX</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_INT2FIX(i)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG2FIX</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_INT2FIX(i)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_fix_new</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_INT2FIX(v)</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_int2inum</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_int_new</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_int2inum(v)</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_uint2inum</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_uint_new</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_uint2inum(v)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>VALUE</name></type> <name>rb_ll2inum</name><parameter_list>(<parameter><decl><type><name>LONG_LONG</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_ll2inum(v)</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_ull2inum</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>LONG_LONG</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_ull2inum(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OFFT2NUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_OFF_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFT2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL2NUM(v)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_OFF_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFT2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LONG2NUM(v)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFT2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INT2NUM(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZET2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ULL2NUM(v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZET2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LL2NUM(v)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZET2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ULONG2NUM(v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZET2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LONG2NUM(v)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZET2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UINT2NUM(v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZET2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INT2NUM(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>ULLONG_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MIN</name></cpp:macro> <cpp:value>ULLONG_MIN</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>ULONG_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MIN</name></cpp:macro> <cpp:value>ULONG_MIN</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_INT</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>UINT_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MIN</name></cpp:macro> <cpp:value>UINT_MIN</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>USHRT_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MIN</name></cpp:macro> <cpp:value>USHRT_MIN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SSIZE_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_MAX</name></cpp:macro> <cpp:value>LLONG_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_MIN</name></cpp:macro> <cpp:value>LLONG_MIN</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_MAX</name></cpp:macro> <cpp:value>LONG_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_MIN</name></cpp:macro> <cpp:value>LONG_MIN</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_INT</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_MAX</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_MIN</name></cpp:macro> <cpp:value>INT_MIN</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_MAX</name></cpp:macro> <cpp:value>SHRT_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSIZE_MIN</name></cpp:macro> <cpp:value>SHRT_MIN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_VALUE</name></expr></cpp:if>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_out_of_int(SIGNED_VALUE num)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_long2int_inline</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>i</name> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_out_of_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_long2int</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_long2int_inline(n)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_long2int</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(n))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PIDT2NUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIDT2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LONG2NUM(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NUM2PIDT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2PIDT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NUM2LONG(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UIDT2NUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UIDT2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LONG2NUM(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NUM2UIDT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2UIDT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NUM2LONG(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GIDT2NUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIDT2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LONG2NUM(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NUM2GIDT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2GIDT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NUM2LONG(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NUM2MODET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2MODET</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NUM2INT(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MODET2NUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODET2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INT2NUM(v)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FIX2LONG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((long)RSHIFT((SIGNED_VALUE)(x),1))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type>

<name>rb_fix2long</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RB_FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FIX2ULONG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned long)RB_FIX2LONG(x))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type>

<name>rb_fix2ulong</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>RB_FIX2ULONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FIXNUM_P</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((int)(SIGNED_VALUE)(f))&amp;RUBY_FIXNUM_FLAG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_POSFIXABLE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f) &lt; RUBY_FIXNUM_MAX+1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NEGFIXABLE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f) &gt;= RUBY_FIXNUM_MIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FIXABLE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_POSFIXABLE(f) &amp;&amp; RB_NEGFIXABLE(f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX2LONG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FIX2LONG(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX2ULONG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FIX2ULONG(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXNUM_P</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FIXNUM_P(f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSFIXABLE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_POSFIXABLE(f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEGFIXABLE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NEGFIXABLE(f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXABLE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FIXABLE(f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_IMMEDIATE_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((VALUE)(x) &amp; RUBY_IMMEDIATE_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMMEDIATE_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_IMMEDIATE_P(x)</cpp:value></cpp:define>

<function_decl><type><name>ID</name></type> <name>rb_sym2id</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_id2sym</name><parameter_list>(<parameter><decl><type><name>ID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_STATIC_SYM_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((VALUE)(x)&amp;~((~(VALUE)0)&lt;&lt;RUBY_SPECIAL_SHIFT)) == RUBY_SYMBOL_FLAG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_DYNAMIC_SYM_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!RB_SPECIAL_CONST_P(x) &amp;&amp; RB_BUILTIN_TYPE(x) == (RUBY_T_SYMBOL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_SYMBOL_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_STATIC_SYM_P(x)||RB_DYNAMIC_SYM_P(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ID2SYM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_id2sym(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_SYM2ID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_sym2id(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC_SYM_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_STATIC_SYM_P(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_SYM_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_DYNAMIC_SYM_P(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOL_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_SYMBOL_P(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID2SYM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ID2SYM(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYM2ID</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_SYM2ID(x)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_FLONUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_VALUE</name> <operator>&gt;=</operator> <name>SIZEOF_DOUBLE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FLONUM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FLONUM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLONUM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FLONUM_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((int)(SIGNED_VALUE)(x))&amp;RUBY_FLONUM_MASK) == RUBY_FLONUM_FLAG)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FLONUM_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLONUM_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FLONUM_P(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_SYMBOL_AS_METHOD_NAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<enum>enum <name>ruby_special_consts</name> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLONUM</name></expr></cpp:if>

<decl><name>RUBY_Qfalse</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>, 

<decl><name>RUBY_Qtrue</name> <init>= <expr><literal type="number">0x14</literal></expr></init></decl>, 

<decl><name>RUBY_Qnil</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>, 

<decl><name>RUBY_Qundef</name> <init>= <expr><literal type="number">0x34</literal></expr></init></decl>, 

<decl><name>RUBY_IMMEDIATE_MASK</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,

<decl><name>RUBY_FIXNUM_FLAG</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 

<decl><name>RUBY_FLONUM_MASK</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>RUBY_FLONUM_FLAG</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 

<decl><name>RUBY_SYMBOL_FLAG</name> <init>= <expr><literal type="number">0x0c</literal></expr></init></decl>, 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl><name>RUBY_Qfalse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>RUBY_Qtrue</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>RUBY_Qnil</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, 

<decl><name>RUBY_Qundef</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>, 

<decl><name>RUBY_IMMEDIATE_MASK</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>RUBY_FIXNUM_FLAG</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 

<decl><name>RUBY_FLONUM_MASK</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>, 

<decl><name>RUBY_FLONUM_FLAG</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>RUBY_SYMBOL_FLAG</name> <init>= <expr><literal type="number">0x0e</literal></expr></init></decl>, 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><name>RUBY_SPECIAL_SHIFT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_Qfalse</name></cpp:macro> <cpp:value>((VALUE)RUBY_Qfalse)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_Qtrue</name></cpp:macro> <cpp:value>((VALUE)RUBY_Qtrue)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_Qnil</name></cpp:macro> <cpp:value>((VALUE)RUBY_Qnil)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_Qundef</name></cpp:macro> <cpp:value>((VALUE)RUBY_Qundef)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Qfalse</name></cpp:macro> <cpp:value>RUBY_Qfalse</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Qtrue</name></cpp:macro> <cpp:value>RUBY_Qtrue</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Qnil</name></cpp:macro> <cpp:value>RUBY_Qnil</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Qundef</name></cpp:macro> <cpp:value>RUBY_Qundef</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMMEDIATE_MASK</name></cpp:macro> <cpp:value>RUBY_IMMEDIATE_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXNUM_FLAG</name></cpp:macro> <cpp:value>RUBY_FIXNUM_FLAG</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLONUM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLONUM_MASK</name></cpp:macro> <cpp:value>RUBY_FLONUM_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLONUM_FLAG</name></cpp:macro> <cpp:value>RUBY_FLONUM_FLAG</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOL_FLAG</name></cpp:macro> <cpp:value>RUBY_SYMBOL_FLAG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_TEST</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>!(((VALUE)(v) &amp; (VALUE)~RUBY_Qnil) == 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NIL_P</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>!((VALUE)(v) != RUBY_Qnil)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTEST</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_TEST(v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIL_P</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NIL_P(v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_OF</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_class_of((VALUE)(v))</cpp:value></cpp:define>

<enum>enum <name>ruby_value_type</name> <block>{

<decl><name>RUBY_T_NONE</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>RUBY_T_OBJECT</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>RUBY_T_CLASS</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>RUBY_T_MODULE</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>RUBY_T_FLOAT</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,

<decl><name>RUBY_T_STRING</name> <init>= <expr><literal type="number">0x05</literal></expr></init></decl>,

<decl><name>RUBY_T_REGEXP</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>,

<decl><name>RUBY_T_ARRAY</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,

<decl><name>RUBY_T_HASH</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,

<decl><name>RUBY_T_STRUCT</name> <init>= <expr><literal type="number">0x09</literal></expr></init></decl>,

<decl><name>RUBY_T_BIGNUM</name> <init>= <expr><literal type="number">0x0a</literal></expr></init></decl>,

<decl><name>RUBY_T_FILE</name> <init>= <expr><literal type="number">0x0b</literal></expr></init></decl>,

<decl><name>RUBY_T_DATA</name> <init>= <expr><literal type="number">0x0c</literal></expr></init></decl>,

<decl><name>RUBY_T_MATCH</name> <init>= <expr><literal type="number">0x0d</literal></expr></init></decl>,

<decl><name>RUBY_T_COMPLEX</name> <init>= <expr><literal type="number">0x0e</literal></expr></init></decl>,

<decl><name>RUBY_T_RATIONAL</name> <init>= <expr><literal type="number">0x0f</literal></expr></init></decl>,

<decl><name>RUBY_T_NIL</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>,

<decl><name>RUBY_T_TRUE</name> <init>= <expr><literal type="number">0x12</literal></expr></init></decl>,

<decl><name>RUBY_T_FALSE</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl>,

<decl><name>RUBY_T_SYMBOL</name> <init>= <expr><literal type="number">0x14</literal></expr></init></decl>,

<decl><name>RUBY_T_FIXNUM</name> <init>= <expr><literal type="number">0x15</literal></expr></init></decl>,

<decl><name>RUBY_T_UNDEF</name> <init>= <expr><literal type="number">0x16</literal></expr></init></decl>,

<decl><name>RUBY_T_IMEMO</name> <init>= <expr><literal type="number">0x1a</literal></expr></init></decl>, 

<decl><name>RUBY_T_NODE</name> <init>= <expr><literal type="number">0x1b</literal></expr></init></decl>,

<decl><name>RUBY_T_ICLASS</name> <init>= <expr><literal type="number">0x1c</literal></expr></init></decl>,

<decl><name>RUBY_T_ZOMBIE</name> <init>= <expr><literal type="number">0x1d</literal></expr></init></decl>,

<decl><name>RUBY_T_MOVED</name> <init>= <expr><literal type="number">0x1e</literal></expr></init></decl>,

<decl><name>RUBY_T_MASK</name> <init>= <expr><literal type="number">0x1f</literal></expr></init></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_NONE</name></cpp:macro> <cpp:value>RUBY_T_NONE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_NIL</name></cpp:macro> <cpp:value>RUBY_T_NIL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_OBJECT</name></cpp:macro> <cpp:value>RUBY_T_OBJECT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_CLASS</name></cpp:macro> <cpp:value>RUBY_T_CLASS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ICLASS</name></cpp:macro> <cpp:value>RUBY_T_ICLASS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MODULE</name></cpp:macro> <cpp:value>RUBY_T_MODULE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_FLOAT</name></cpp:macro> <cpp:value>RUBY_T_FLOAT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_STRING</name></cpp:macro> <cpp:value>RUBY_T_STRING</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_REGEXP</name></cpp:macro> <cpp:value>RUBY_T_REGEXP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ARRAY</name></cpp:macro> <cpp:value>RUBY_T_ARRAY</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_HASH</name></cpp:macro> <cpp:value>RUBY_T_HASH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_STRUCT</name></cpp:macro> <cpp:value>RUBY_T_STRUCT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_BIGNUM</name></cpp:macro> <cpp:value>RUBY_T_BIGNUM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_FILE</name></cpp:macro> <cpp:value>RUBY_T_FILE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_FIXNUM</name></cpp:macro> <cpp:value>RUBY_T_FIXNUM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_TRUE</name></cpp:macro> <cpp:value>RUBY_T_TRUE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_FALSE</name></cpp:macro> <cpp:value>RUBY_T_FALSE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_DATA</name></cpp:macro> <cpp:value>RUBY_T_DATA</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MATCH</name></cpp:macro> <cpp:value>RUBY_T_MATCH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_SYMBOL</name></cpp:macro> <cpp:value>RUBY_T_SYMBOL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_RATIONAL</name></cpp:macro> <cpp:value>RUBY_T_RATIONAL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_COMPLEX</name></cpp:macro> <cpp:value>RUBY_T_COMPLEX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_IMEMO</name></cpp:macro> <cpp:value>RUBY_T_IMEMO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_UNDEF</name></cpp:macro> <cpp:value>RUBY_T_UNDEF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_NODE</name></cpp:macro> <cpp:value>RUBY_T_NODE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_ZOMBIE</name></cpp:macro> <cpp:value>RUBY_T_ZOMBIE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MOVED</name></cpp:macro> <cpp:value>RUBY_T_MOVED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MASK</name></cpp:macro> <cpp:value>RUBY_T_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_BUILTIN_TYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(((struct RBasic*)(x))-&gt;flags &amp; RUBY_T_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN_TYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_BUILTIN_TYPE(x)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_type((VALUE)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FLOAT_TYPE_P</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_FLONUM_P(obj) || (!RB_SPECIAL_CONST_P(obj) &amp;&amp; RB_BUILTIN_TYPE(obj) == RUBY_T_FLOAT))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_TYPE_P</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((type) == RUBY_T_FIXNUM) ? RB_FIXNUM_P(obj) : ((type) == RUBY_T_TRUE) ? ((obj) == RUBY_Qtrue) : ((type) == RUBY_T_FALSE) ? ((obj) == RUBY_Qfalse) : ((type) == RUBY_T_NIL) ? ((obj) == RUBY_Qnil) : ((type) == RUBY_T_UNDEF) ? ((obj) == RUBY_Qundef) : ((type) == RUBY_T_SYMBOL) ? RB_SYMBOL_P(obj) : ((type) == RUBY_T_FLOAT) ? RB_FLOAT_TYPE_P(obj) : (!RB_SPECIAL_CONST_P(obj) &amp;&amp; RB_BUILTIN_TYPE(obj) == (type)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_GC_GUARD</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*__extension__ ({ volatile VALUE *rb_gc_guarded_ptr = &amp;(v); __asm__("" : : "m"(rb_gc_guarded_ptr)); rb_gc_guarded_ptr; }))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_MSC_VER</name></expr></cpp:elif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>optimize</name><name>(</name><cpp:literal>""</cpp:literal><name>,</name> <name>off</name><name>)</name></cpp:pragma>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>rb_gc_guarded_ptr</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><name>ptr</name></expr>;</return></block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>optimize</name><name>(</name><cpp:literal>""</cpp:literal><name>,</name> <name>on</name><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_GC_GUARD</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*rb_gc_guarded_ptr(&amp;(v)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>rb_gc_guarded_ptr_val</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_RB_GC_GUARDED_PTR_VAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_GC_GUARD</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*rb_gc_guarded_ptr_val(&amp;(v),(v)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_UNUSED_VAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x __attribute__ ((unused))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_UNUSED_VAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>rb_check_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check_Type</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_check_type((VALUE)(v),(t))</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_str_to_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_string_value</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>rb_string_value_ptr</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>rb_string_value_cstr</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>StringValue</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_string_value(&amp;(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>StringValuePtr</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_string_value_ptr(&amp;(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>StringValueCStr</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_string_value_cstr(&amp;(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SafeStringValue</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>StringValue(v)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GCC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>rb_check_safe_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(error<parameter_list>(</parameter_list>"rb_check_safe_str() and Check_SafeStr() are obsolete; use StringValue() instead"</function_decl>)</block_content></block></extern>))<empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check_SafeStr</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_check_safe_str((VALUE)(v))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_check_safe_str</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[&lt;"rb_check_safe_str() is obsolete; use StringValue() instead"&gt;]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check_SafeStr</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[&lt;"Check_SafeStr() is obsolete; use StringValue() instead"&gt;]</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>VALUE</name></type> <name>rb_str_export</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ExportStringValue</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {StringValue(v);(v) = rb_str_export(v);} while (0)</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_str_export_locale</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_get_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FilePathValue</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_GC_GUARD(v) = rb_get_path(v))</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_get_path_no_checksafe</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FilePathStringValue</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) = rb_get_path(v))</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_errinfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_set_errinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> <name>rb_num2long</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>rb_num2ulong</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type>

<name>rb_num2long_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RB_FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>rb_num2long</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2LONG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_num2long_inline(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2LONG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NUM2LONG(x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type>

<name>rb_num2ulong_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RB_FIX2ULONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>rb_num2ulong</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2ULONG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_num2ulong_inline(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2ULONG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NUM2ULONG(x)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>

<function_decl><type><name>long</name></type> <name>rb_num2int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>long</name></type> <name>rb_fix2int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FIX2INT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)rb_fix2int((VALUE)(x)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_num2int_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_fix2int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>rb_num2int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2INT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_num2int_inline(x)</cpp:value></cpp:define>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>rb_num2uint</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2UINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int)rb_num2uint(x))</cpp:value></cpp:define>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>rb_fix2uint</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FIX2UINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int)rb_fix2uint(x))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2INT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)RB_NUM2LONG(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2UINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int)RB_NUM2ULONG(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FIX2INT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)RB_FIX2LONG(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FIX2UINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int)RB_FIX2ULONG(x))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2INT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NUM2INT(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2UINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NUM2UINT(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX2INT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FIX2INT(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX2UINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FIX2UINT(x)</cpp:value></cpp:define>

<function_decl><type><name>short</name></type> <name>rb_num2short</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>short</name></type> <name>rb_num2ushort</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>short</name></type> <name>rb_fix2short</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>short</name></type> <name>rb_fix2ushort</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FIX2SHORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_fix2short((VALUE)(x)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX2SHORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FIX2SHORT(x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>short</name></type>

<name>rb_num2short_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_fix2short</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>rb_num2short</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2SHORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_num2short_inline(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2USHORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_num2ushort(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2SHORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NUM2SHORT(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2USHORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NUM2USHORT(x)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>LONG_LONG</name></type> <name>rb_num2ll</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>LONG_LONG</name></type> <name>rb_num2ull</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>LONG_LONG</name></type>

<name>rb_num2ll_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FIXNUM_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RB_FIX2LONG</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>rb_num2ll</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2LL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_num2ll_inline(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2ULL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_num2ull(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2LL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NUM2LL(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2ULL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NUM2ULL(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NUM2OFFT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SIZEOF_OFF_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2OFFT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((off_t)NUM2LL(x))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2OFFT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NUM2LONG(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SIZEOF_SIZE_T</name> <operator>&gt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2SIZET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)NUM2ULL(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2SSIZET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ssize_t)NUM2LL(x))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2SIZET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NUM2ULONG(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2SSIZET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NUM2LONG(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>double</name></type> <name>rb_num2dbl</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2DBL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_num2dbl((VALUE)(x))</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_uint2big</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_int2big</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_newobj</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_newobj_of</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_obj_setup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NEWOBJ</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type *(obj) = (type*)rb_newobj()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NEWOBJ_OF</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>klass</name></type></parameter>,<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type *(obj) = (type*)rb_newobj_of(klass, flags)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEWOBJ</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NEWOBJ(obj,type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEWOBJ_OF</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>klass</name></type></parameter>,<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NEWOBJ_OF(obj,type,klass,flags)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJSETUP</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_setup(obj, c, t)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONESETUP</name><parameter_list>(<parameter><type><name>clone</name></type></parameter>,<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_clone_setup(clone,obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUPSETUP</name><parameter_list>(<parameter><type><name>dup</name></type></parameter>,<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_dup_setup(dup,obj)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_RGENGC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_RGENGC</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_RGENGC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_RINCGC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_RINCGC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_ARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_ARRAY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_HASH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_STRUCT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_STRUCT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_STRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_STRING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_OBJECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_OBJECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_REGEXP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_REGEXP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_CLASS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_CLASS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_FLOAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_COMPLEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_COMPLEX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_RATIONAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_RATIONAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_BIGNUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_BIGNUM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_WB_PROTECTED_NODE_CREF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_WB_PROTECTED_NODE_CREF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__extension__</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>enum</name> <name>ruby_fl_type</name></name></type> <block>{<block_content>

<expr_stmt><expr><name>RUBY_FL_WB_PROTECTED</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_FL_PROMOTED0</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_FL_PROMOTED1</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_FL_PROMOTED</name> <operator>=</operator> <name>RUBY_FL_PROMOTED0</name><operator>|</operator><name>RUBY_FL_PROMOTED1</name></expr><operator>,</operator>

<expr><name>RUBY_FL_FINALIZE</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_FL_TAINT</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_FL_UNTRUSTED</name> <operator>=</operator> <name>RUBY_FL_TAINT</name></expr><operator>,</operator>

<expr><name>RUBY_FL_SEEN_OBJ_ID</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">9</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_FL_EXIVAR</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_FL_FREEZE</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">11</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_FL_USHIFT</name> <operator>=</operator> <literal type="number">12</literal></expr><operator>,</operator>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_FL_USER_N</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RUBY_FL_USER##n = (1&lt;&lt;(RUBY_FL_USHIFT+n))</cpp:value></cpp:define>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>ENUM_OVER_INT</name> <operator>||</operator> <name>SIZEOF_INT</name><operator>*</operator><name>CHAR_BIT</name><operator>&gt;</operator><literal type="number">12</literal><operator>+</operator><literal type="number">19</literal><operator>+</operator><literal type="number">1</literal></expr></cpp:if>

<expr><call><name>RUBY_FL_USER_N</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_FL_USER19</name></cpp:macro> <cpp:value>(((VALUE)1)&lt;&lt;(RUBY_FL_USHIFT+19))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>RUBY_ELTS_SHARED</name> <operator>=</operator> <name>RUBY_FL_USER2</name></expr><operator>,</operator>

<expr><name>RUBY_FL_DUPPED</name> <operator>=</operator> <operator>(</operator><name>RUBY_T_MASK</name><operator>|</operator><name>RUBY_FL_EXIVAR</name><operator>|</operator><name>RUBY_FL_TAINT</name><operator>)</operator></expr><operator>,</operator>

<expr><name>RUBY_FL_SINGLETON</name> <operator>=</operator> <name>RUBY_FL_USER0</name></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <macro><name>RUBY_ALIGNAS</name><argument_list>(<argument>SIZEOF_VALUE</argument>)</argument_list></macro> <name>RBasic</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>klass</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>VALUE</name></type> <name>rb_obj_hide</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_obj_reveal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR_CONSTANT_P</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_WB_UNPROTECT_FOR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__( __builtin_choose_expr( RGENGC_WB_PROTECTED_##type, OBJ_WB_UNPROTECT((VALUE)(obj)), ((VALUE)(obj))))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_WB_UNPROTECT_FOR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RGENGC_WB_PROTECTED_##type ? OBJ_WB_UNPROTECT((VALUE)(obj)) : ((VALUE)(obj)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBASIC_CLASS</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RBASIC(obj)-&gt;klass)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RVALUE_EMBED_LEN_MAX</name></cpp:macro> <cpp:value>RVALUE_EMBED_LEN_MAX</cpp:value></cpp:define>

<enum>enum <name>ruby_rvalue_flags</name> <block>{

<decl><name>RVALUE_EMBED_LEN_MAX</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROBJECT_EMBED_LEN_MAX</name></cpp:macro> <cpp:value>ROBJECT_EMBED_LEN_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROBJECT_EMBED</name></cpp:macro> <cpp:value>ROBJECT_EMBED</cpp:value></cpp:define>

<enum>enum <name>ruby_robject_flags</name> <block>{

<decl><name>ROBJECT_EMBED_LEN_MAX</name> <init>= <expr><name>RVALUE_EMBED_LEN_MAX</name></expr></init></decl>,

<decl><name>ROBJECT_EMBED</name> <init>= <expr><name>RUBY_FL_USER1</name></expr></init></decl>,

<decl><name>ROBJECT_ENUM_END</name></decl>

}</block>;</enum>

<struct>struct <name>RObject</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>numiv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ivptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>iv_index_tbl</name></decl>;</decl_stmt> 

}</block> <decl><name>heap</name></decl>;</struct>

<decl_stmt><decl><type><name>VALUE</name></type> <name><name>ary</name><index>[<expr><name>ROBJECT_EMBED_LEN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>as</name></decl>;</union>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROBJECT_NUMIV</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RBASIC(o)-&gt;flags &amp; ROBJECT_EMBED) ? ROBJECT_EMBED_LEN_MAX : ROBJECT(o)-&gt;as.heap.numiv)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROBJECT_IVPTR</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RBASIC(o)-&gt;flags &amp; ROBJECT_EMBED) ? ROBJECT(o)-&gt;as.ary : ROBJECT(o)-&gt;as.heap.ivptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROBJECT_IV_INDEX_TBL</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((RBASIC(o)-&gt;flags &amp; ROBJECT_EMBED) ? RCLASS_IV_INDEX_TBL(rb_obj_class(o)) : ROBJECT(o)-&gt;as.heap.iv_index_tbl)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCLASS_SUPER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_class_get_superclass(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMODULE_IV_TBL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RCLASS_IV_TBL(m)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMODULE_CONST_TBL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RCLASS_CONST_TBL(m)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMODULE_M_TBL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RCLASS_M_TBL(m)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMODULE_SUPER</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RCLASS_SUPER(m)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMODULE_IS_OVERLAID</name></cpp:macro> <cpp:value>RMODULE_IS_OVERLAID</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMODULE_IS_REFINEMENT</name></cpp:macro> <cpp:value>RMODULE_IS_REFINEMENT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMODULE_INCLUDED_INTO_REFINEMENT</name></cpp:macro> <cpp:value>RMODULE_INCLUDED_INTO_REFINEMENT</cpp:value></cpp:define>

<enum>enum <name>ruby_rmodule_flags</name> <block>{

<decl><name>RMODULE_IS_OVERLAID</name> <init>= <expr><name>RUBY_FL_USER2</name></expr></init></decl>,

<decl><name>RMODULE_IS_REFINEMENT</name> <init>= <expr><name>RUBY_FL_USER3</name></expr></init></decl>,

<decl><name>RMODULE_INCLUDED_INTO_REFINEMENT</name> <init>= <expr><name>RUBY_FL_USER4</name></expr></init></decl>,

<decl><name>RMODULE_ENUM_END</name></decl>

}</block>;</enum>

<macro><name>PUREFUNC</name><argument_list>(<argument>double rb_float_value(VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>VALUE</name></type> <name>rb_float_new</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_float_new_in_heap</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFLOAT_VALUE</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_float_value(v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL2NUM</name><parameter_list>(<parameter><type><name>dbl</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_float_new(dbl)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_ELTS_SHARED</name></cpp:macro> <cpp:value>RUBY_ELTS_SHARED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELTS_SHARED</name></cpp:macro> <cpp:value>RUBY_ELTS_SHARED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_NOEMBED</name></cpp:macro> <cpp:value>RSTRING_NOEMBED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_EMBED_LEN_MASK</name></cpp:macro> <cpp:value>RSTRING_EMBED_LEN_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_EMBED_LEN_SHIFT</name></cpp:macro> <cpp:value>RSTRING_EMBED_LEN_SHIFT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_EMBED_LEN_MAX</name></cpp:macro> <cpp:value>RSTRING_EMBED_LEN_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_FSTR</name></cpp:macro> <cpp:value>RSTRING_FSTR</cpp:value></cpp:define>

<enum>enum <name>ruby_rstring_flags</name> <block>{

<decl><name>RSTRING_NOEMBED</name> <init>= <expr><name>RUBY_FL_USER1</name></expr></init></decl>,

<decl><name>RSTRING_EMBED_LEN_MASK</name> <init>= <expr><operator>(</operator><name>RUBY_FL_USER2</name><operator>|</operator><name>RUBY_FL_USER3</name><operator>|</operator><name>RUBY_FL_USER4</name><operator>|</operator>

<name>RUBY_FL_USER5</name><operator>|</operator><name>RUBY_FL_USER6</name><operator>)</operator></expr></init></decl>,

<decl><name>RSTRING_EMBED_LEN_SHIFT</name> <init>= <expr><operator>(</operator><name>RUBY_FL_USHIFT</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>,

<decl><name>RSTRING_EMBED_LEN_MAX</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>RVALUE_EMBED_LEN_MAX</name><operator>)</operator><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,

<decl><name>RSTRING_FSTR</name> <init>= <expr><name>RUBY_FL_USER17</name></expr></init></decl>,

<decl><name>RSTRING_ENUM_END</name></decl>

}</block>;</enum>

<struct>struct <name>RString</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>long</name></type> <name>capa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>shared</name></decl>;</decl_stmt>

}</block> <decl><name>aux</name></decl>;</union>

}</block> <decl><name>heap</name></decl>;</struct>

<decl_stmt><decl><type><name>char</name></type> <name><name>ary</name><index>[<expr><name>RSTRING_EMBED_LEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>as</name></decl>;</union>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_EMBED_LEN</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(long)((RBASIC(str)-&gt;flags &gt;&gt; RSTRING_EMBED_LEN_SHIFT) &amp; (RSTRING_EMBED_LEN_MASK &gt;&gt; RSTRING_EMBED_LEN_SHIFT))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_LEN</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(RBASIC(str)-&gt;flags &amp; RSTRING_NOEMBED) ? RSTRING_EMBED_LEN(str) : RSTRING(str)-&gt;as.heap.len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_PTR</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(RBASIC(str)-&gt;flags &amp; RSTRING_NOEMBED) ? RSTRING(str)-&gt;as.ary : RSTRING(str)-&gt;as.heap.ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_END</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(RBASIC(str)-&gt;flags &amp; RSTRING_NOEMBED) ? (RSTRING(str)-&gt;as.ary + RSTRING_EMBED_LEN(str)) : (RSTRING(str)-&gt;as.heap.ptr + RSTRING(str)-&gt;as.heap.len))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_LENINT</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_long2int(RSTRING_LEN(str))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_GETMEM</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>ptrvar</name></type></parameter>, <parameter><type><name>lenvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(RBASIC(str)-&gt;flags &amp; RSTRING_NOEMBED) ? ((ptrvar) = RSTRING(str)-&gt;as.ary, (lenvar) = RSTRING_EMBED_LEN(str)) : ((ptrvar) = RSTRING(str)-&gt;as.heap.ptr, (lenvar) = RSTRING(str)-&gt;as.heap.len))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_TRANSIENT_HEAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_TRANSIENT_HEAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>ruby_rarray_flags</name> <block>{

<decl><name>RARRAY_EMBED_LEN_MAX</name> <init>= <expr><name>RVALUE_EMBED_LEN_MAX</name></expr></init></decl>,

<decl><name>RARRAY_EMBED_FLAG</name> <init>= <expr><name>RUBY_FL_USER1</name></expr></init></decl>,

<decl><name>RARRAY_EMBED_LEN_MASK</name> <init>= <expr><operator>(</operator><name>RUBY_FL_USER4</name><operator>|</operator><name>RUBY_FL_USER3</name><operator>)</operator></expr></init></decl>,

<decl><name>RARRAY_EMBED_LEN_SHIFT</name> <init>= <expr><operator>(</operator><name>RUBY_FL_USHIFT</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr></init></decl>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>

<decl><name>RARRAY_TRANSIENT_FLAG</name> <init>= <expr><name>RUBY_FL_USER13</name></expr></init></decl>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_TRANSIENT_FLAG</name></cpp:macro> <cpp:value>RARRAY_TRANSIENT_FLAG</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_TRANSIENT_FLAG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl><name>RARRAY_ENUM_END</name></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_EMBED_FLAG</name></cpp:macro> <cpp:value>(VALUE)RARRAY_EMBED_FLAG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_EMBED_LEN_MASK</name></cpp:macro> <cpp:value>(VALUE)RARRAY_EMBED_LEN_MASK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_EMBED_LEN_MAX</name></cpp:macro> <cpp:value>RARRAY_EMBED_LEN_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_EMBED_LEN_SHIFT</name></cpp:macro> <cpp:value>RARRAY_EMBED_LEN_SHIFT</cpp:value></cpp:define>

<struct>struct <name>RArray</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>long</name></type> <name>capa</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>__cplusplus</name> <operator>&gt;</operator> <literal type="number">199711L</literal><operator>)</operator></expr></cpp:if> 

<decl_stmt><decl><type><specifier>const</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>VALUE</name></type> <name>shared_root</name></decl>;</decl_stmt>

}</block> <decl><name>aux</name></decl>;</union>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

}</block> <decl><name>heap</name></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name><name>ary</name><index>[<expr><name>RARRAY_EMBED_LEN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>as</name></decl>;</union>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_EMBED_LEN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(long)((RBASIC(a)-&gt;flags &gt;&gt; RARRAY_EMBED_LEN_SHIFT) &amp; (RARRAY_EMBED_LEN_MASK &gt;&gt; RARRAY_EMBED_LEN_SHIFT))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_LEN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_array_len(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_LENINT</name><parameter_list>(<parameter><type><name>ary</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_long2int(RARRAY_LEN(ary))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_CONST_PTR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_array_const_ptr(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_CONST_PTR_TRANSIENT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_array_const_ptr_transient(a)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_TRANSIENT_P</name><parameter_list>(<parameter><type><name>ary</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FL_TEST_RAW((ary), RARRAY_TRANSIENT_FLAG)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_TRANSIENT_P</name><parameter_list>(<parameter><type><name>ary</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_PTR_USE_START_TRANSIENT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_array_ptr_use_start(a, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_PTR_USE_END_TRANSIENT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_array_ptr_use_end(a, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_PTR_USE_TRANSIENT</name><parameter_list>(<parameter><type><name>ary</name></type></parameter>, <parameter><type><name>ptr_name</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const VALUE _ary = (ary); VALUE *ptr_name = (VALUE *)RARRAY_PTR_USE_START_TRANSIENT(_ary); expr; RARRAY_PTR_USE_END_TRANSIENT(_ary); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_PTR_USE_START</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_array_ptr_use_start(a, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_PTR_USE_END</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_array_ptr_use_end(a, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_PTR_USE</name><parameter_list>(<parameter><type><name>ary</name></type></parameter>, <parameter><type><name>ptr_name</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const VALUE _ary = (ary); VALUE *ptr_name = (VALUE *)RARRAY_PTR_USE_START(_ary); expr; RARRAY_PTR_USE_END(_ary); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_AREF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RARRAY_CONST_PTR_TRANSIENT(a)[i])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_ASET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const VALUE _ary = (a); const VALUE _v = (v); VALUE *ptr = (VALUE *)RARRAY_PTR_USE_START_TRANSIENT(_ary); RB_OBJ_WRITE(_ary, &amp;ptr[i], _v); RARRAY_PTR_USE_END_TRANSIENT(_ary); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_PTR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((VALUE *)RARRAY_CONST_PTR(RB_OBJ_WB_UNPROTECT_FOR(ARRAY, a)))</cpp:value></cpp:define>

<struct>struct <name>RRegexp</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>re_pattern_buffer</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VALUE</name></type> <name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>usecnt</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREGEXP_PTR</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RREGEXP(r)-&gt;ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREGEXP_SRC</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RREGEXP(r)-&gt;src)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREGEXP_SRC_PTR</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RSTRING_PTR(RREGEXP(r)-&gt;src)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREGEXP_SRC_LEN</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RSTRING_LEN(RREGEXP(r)-&gt;src)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREGEXP_SRC_END</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RSTRING_END(RREGEXP(r)-&gt;src)</cpp:value></cpp:define>

<function_decl><type><name>size_t</name></type> <name>rb_hash_size_num</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_TBL</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_tbl(h, __FILE__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_ITER_LEV</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_iter_lev(h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_IFNONE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_ifnone(h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_SIZE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_size_num(h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_EMPTY_P</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RHASH_SIZE(h) == 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_SET_IFNONE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>ifnone</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_hash_set_ifnone((VALUE)h, ifnone)</cpp:value></cpp:define>

<struct>struct <name>RFile</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_io_t</name></name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>RData</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dmark</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dfree</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>rb_data_type_struct</name></name></type> <name>rb_data_type_t</name>;</typedef>

<struct>struct <name>rb_data_type_struct</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wrap_struct_name</name></decl>;</decl_stmt>

<struct>struct <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dmark</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dfree</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>dsize</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dcompact</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>reserved</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block> <decl><name>function</name></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>flags</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TYPE_RB_DATA_TYPE_T</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_RB_DATA_TYPE_T_FUNCTION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_RB_DATA_TYPE_T_PARENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<struct>struct <name>RTypedData</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>RBasic</name></name></type> <name>basic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>typed_flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_PTR</name><parameter_list>(<parameter><type><name>dta</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RDATA(dta)-&gt;data)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTYPEDDATA_P</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RTYPEDDATA(v)-&gt;typed_flag == 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTYPEDDATA_TYPE</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RTYPEDDATA(v)-&gt;type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTYPEDDATA_DATA</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RTYPEDDATA(v)-&gt;data)</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>RUBY_DATA_FUNC</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_UNTYPED_DATA_WARNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>RUBY_EXPORT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_UNTYPED_DATA_WARNING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_UNTYPED_DATA_WARNING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>VALUE</name></type> <name>rb_data_object_wrap</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>RUBY_DATA_FUNC</name></type></decl></parameter>,<parameter><decl><type><name>RUBY_DATA_FUNC</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_data_object_zalloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>size_t</name></type></decl></parameter>,<parameter><decl><type><name>RUBY_DATA_FUNC</name></type></decl></parameter>,<parameter><decl><type><name>RUBY_DATA_FUNC</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_data_typed_object_wrap</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>datap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_data_typed_object_zalloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_typeddata_inherited_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_typeddata_is_kind_of</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>rb_check_typeddata</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check_TypedStruct</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_check_typeddata((VALUE)(v),(t))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_DEFAULT_FREE</name></cpp:macro> <cpp:value>((RUBY_DATA_FUNC)-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_NEVER_FREE</name></cpp:macro> <cpp:value>((RUBY_DATA_FUNC)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_TYPED_DEFAULT_FREE</name></cpp:macro> <cpp:value>RUBY_DEFAULT_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_TYPED_NEVER_FREE</name></cpp:macro> <cpp:value>RUBY_NEVER_FREE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_TYPED_FREE_IMMEDIATELY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_TYPED_WB_PROTECTED</name></cpp:macro> <cpp:value>RUBY_FL_WB_PROTECTED</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_TYPED_PROMOTED1</name></cpp:macro> <cpp:value>RUBY_FL_PROMOTED1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Data_Wrap_Struct</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>,<parameter><type><name>mark</name></type></parameter>,<parameter><type><name>free</name></type></parameter>,<parameter><type><name>sval</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>rb_data_object_wrap((klass),(sval),(RUBY_DATA_FUNC)(mark),(RUBY_DATA_FUNC)(free))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Data_Make_Struct0</name><parameter_list>(<parameter><type><name>result</name></type></parameter>, <parameter><type><name>klass</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>mark</name></type></parameter>, <parameter><type><name>free</name></type></parameter>, <parameter><type><name>sval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VALUE result = rb_data_object_zalloc((klass), (size), (RUBY_DATA_FUNC)(mark), (RUBY_DATA_FUNC)(free)); (void)((sval) = (type *)DATA_PTR(result));</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Data_Make_Struct</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>mark</name></type></parameter>,<parameter><type><name>free</name></type></parameter>,<parameter><type><name>sval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_GNUC_EXTENSION_BLOCK(Data_Make_Struct0(data_struct_obj, klass, type, sizeof(type), mark, free, sval); data_struct_obj )</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Data_Make_Struct</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>mark</name></type></parameter>,<parameter><type><name>free</name></type></parameter>,<parameter><type><name>sval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_data_object_make((klass),(RUBY_DATA_FUNC)(mark),(RUBY_DATA_FUNC)(free),(void **)&amp;(sval),sizeof(type)) )</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TypedData_Wrap_Struct</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>,<parameter><type><name>data_type</name></type></parameter>,<parameter><type><name>sval</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>rb_data_typed_object_wrap((klass),(sval),(data_type))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TypedData_Make_Struct0</name><parameter_list>(<parameter><type><name>result</name></type></parameter>, <parameter><type><name>klass</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>data_type</name></type></parameter>, <parameter><type><name>sval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VALUE result = rb_data_typed_object_zalloc(klass, size, data_type); (void)((sval) = (type *)DATA_PTR(result));</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TypedData_Make_Struct</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>data_type</name></type></parameter>, <parameter><type><name>sval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_GNUC_EXTENSION_BLOCK(TypedData_Make_Struct0(data_struct_obj, klass, type, sizeof(type), data_type, sval); data_struct_obj )</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TypedData_Make_Struct</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>data_type</name></type></parameter>, <parameter><type><name>sval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_data_typed_object_make((klass),(data_type),(void **)&amp;(sval),sizeof(type)) )</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Data_Get_Struct</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>sval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sval) = (type*)rb_data_object_get(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TypedData_Get_Struct</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>data_type</name></type></parameter>,<parameter><type><name>sval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sval) = (type*)rb_check_typeddata((obj), (data_type)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRUCT_LEN</name><parameter_list>(<parameter><type><name>st</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NUM2LONG(rb_struct_size(st))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRUCT_PTR</name><parameter_list>(<parameter><type><name>st</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_struct_ptr(st)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRUCT_SET</name><parameter_list>(<parameter><type><name>st</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_struct_aset(st, INT2NUM(idx), (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRUCT_GET</name><parameter_list>(<parameter><type><name>st</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_struct_aref(st, INT2NUM(idx))</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rb_big_sign</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBIGNUM_SIGN</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_big_sign(b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBIGNUM_POSITIVE_P</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RBIGNUM_SIGN(b)!=0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBIGNUM_NEGATIVE_P</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RBIGNUM_SIGN(b)==0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_CAST</name><parameter_list>(<parameter><type><name>st</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(struct st*)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMOVED</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RMoved)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RBASIC</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RBasic)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROBJECT</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RObject)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCLASS</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RClass)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMODULE</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RCLASS(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RString)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREGEXP</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RRegexp)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RArray)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDATA</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RData)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTYPEDDATA</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RTypedData)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFILE</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(R_CAST(RFile)(obj))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_SINGLETON</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_SINGLETON)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_WB_PROTECTED</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_WB_PROTECTED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_PROMOTED0</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_PROMOTED0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_PROMOTED1</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_PROMOTED1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_FINALIZE</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_FINALIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_TAINT</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_TAINT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_UNTRUSTED</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_UNTRUSTED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_SEEN_OBJ_ID</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_SEEN_OBJ_ID)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_EXIVAR</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_EXIVAR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_FREEZE</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_FREEZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USHIFT</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER0</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER1</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER2</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER3</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER4</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER5</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER6</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER7</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER8</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER9</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER10</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER11</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER12</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER13</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER14</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER15</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER16</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER17</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER18</name></cpp:macro> <cpp:value>((VALUE)RUBY_FL_USER18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_USER19</name></cpp:macro> <cpp:value>((VALUE)(unsigned int)RUBY_FL_USER19)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_SPECIAL_CONST_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_IMMEDIATE_P(x) || !RB_TEST(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIAL_CONST_P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_SPECIAL_CONST_P(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_ABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!RB_SPECIAL_CONST_P(x) &amp;&amp; RB_BUILTIN_TYPE(x) != RUBY_T_NODE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_TEST_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RBASIC(x)-&gt;flags&amp;(f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_TEST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_FL_ABLE(x)?RB_FL_TEST_RAW((x),(f)):0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_ANY_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_TEST_RAW((x),(f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_ANY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_TEST((x),(f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_ALL_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_FL_TEST_RAW((x),(f)) == (f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_FL_TEST((x),(f)) == (f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_SET_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(RBASIC(x)-&gt;flags |= (f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_SET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_FL_ABLE(x) ? RB_FL_SET_RAW(x, f) : (void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_UNSET_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(RBASIC(x)-&gt;flags &amp;= ~(VALUE)(f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_UNSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_FL_ABLE(x) ? RB_FL_UNSET_RAW(x, f) : (void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_REVERSE_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(RBASIC(x)-&gt;flags ^= (f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_FL_REVERSE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_FL_ABLE(x) ? RB_FL_REVERSE_RAW(x, f) : (void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_TAINTABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_FL_ABLE(x) &amp;&amp; RB_BUILTIN_TYPE(x) != RUBY_T_BIGNUM &amp;&amp; RB_BUILTIN_TYPE(x) != RUBY_T_FLOAT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_TAINTED_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_TEST_RAW(x, RUBY_FL_TAINT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_TAINTED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!!RB_FL_TEST((x), RUBY_FL_TAINT))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_TAINT_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_SET_RAW(x, RUBY_FL_TAINT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_TAINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_OBJ_TAINTABLE(x) ? RB_OBJ_TAINT_RAW(x) : (void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_UNTRUSTED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_TAINTED(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_UNTRUST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_TAINT(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_INFECT_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_SET_RAW(x, RB_OBJ_TAINTED_RAW(s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_INFECT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (RB_OBJ_TAINTABLE(x) &amp;&amp; RB_FL_ABLE(s)) ? RB_OBJ_INFECT_RAW(x, s) : (void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_FROZEN_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RBASIC(x)-&gt;flags&amp;RUBY_FL_FREEZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_FROZEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!RB_FL_ABLE(x) || RB_OBJ_FROZEN_RAW(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_FREEZE_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(RBASIC(x)-&gt;flags |= RUBY_FL_FREEZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_FREEZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_freeze_inline((VALUE)x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_ABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_ABLE(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_TEST_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_TEST_RAW(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_TEST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_TEST(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_ANY_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_ANY_RAW(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_ANY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_ANY(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_ALL_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_ALL_RAW(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_ALL(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_SET_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_SET_RAW(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_SET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_SET(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_UNSET_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_UNSET_RAW(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_UNSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_UNSET(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_REVERSE_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_REVERSE_RAW(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL_REVERSE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_REVERSE(x,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_TAINTABLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_TAINTABLE(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_TAINTED_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_TAINTED_RAW(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_TAINTED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_TAINTED(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_TAINT_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_TAINT_RAW(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_TAINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_TAINT(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_UNTRUSTED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_UNTRUSTED(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_UNTRUST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_UNTRUST(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_INFECT_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_INFECT_RAW(x,s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_INFECT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_INFECT(x,s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_FROZEN_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_FROZEN_RAW(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_FROZEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_FROZEN(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_FREEZE_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_FREEZE_RAW(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_FREEZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_FREEZE(x)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>rb_freeze_singleton_class</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>rb_obj_freeze_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FL_ABLE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RB_OBJ_FREEZE_RAW</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RBASIC_CLASS</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>RBASIC</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>RUBY_FL_SINGLETON</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_freeze_singleton_class</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GCC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_UNTYPED_DATA_FUNC</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>func __attribute__((warning("untyped Data is unsafe; use TypedData instead")))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_UNTYPED_DATA_FUNC</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEPRECATED(func)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NO_INLINE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR_CONSTANT_P</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>RUBY_UNTYPED_DATA_FUNC</name><argument_list>(<argument>static inline VALUE rb_data_object_wrap_warning(VALUE,void*,RUBY_DATA_FUNC,RUBY_DATA_FUNC)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RUBY_UNTYPED_DATA_FUNC</name><argument_list>(<argument><expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <operator>*</operator><call><name>rb_data_object_get_warning</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_data_object_wrap_warning</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>RUBY_DATA_FUNC</name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><name>RUBY_DATA_FUNC</name></type> <name>free</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_data_object_wrap</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR_CONSTANT_P</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_data_object_wrap_warning</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>mark</name></type></parameter>, <parameter><type><name>free</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__( __builtin_choose_expr( __builtin_constant_p(klass) &amp;&amp; !(klass), rb_data_object_wrap(klass, ptr, mark, free), rb_data_object_wrap_warning(klass, ptr, mark, free)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>rb_data_object_get</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>RUBY_T_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator>struct <name>RData</name> <operator>*</operator><operator>)</operator><name>obj</name><operator>)</operator><operator>-&gt;</operator><name>data</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NO_INLINE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>rb_data_object_get_warning</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_data_object_get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_data_object_make</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>RUBY_DATA_FUNC</name></type> <name>mark_func</name></decl></parameter>, <parameter><decl><type><name>RUBY_DATA_FUNC</name></type> <name>free_func</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>datap</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Data_Make_Struct0</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>mark_func</name></expr></argument>, <argument><expr><name>free_func</name></expr></argument>, <argument><expr><operator>*</operator><name>datap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_data_typed_object_make</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>datap</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>TypedData_Make_Struct0</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>*</operator><name>datap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>rb_data_object_alloc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>DEPRECATED_BY</name><argument_list>(<argument>rb_data_object_wrap</argument>, <argument>static inline VALUE rb_data_object_alloc(VALUE,void*,RUBY_DATA_FUNC,RUBY_DATA_FUNC)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_data_object_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>RUBY_DATA_FUNC</name></type> <name>dmark</name></decl></parameter>, <parameter><decl><type><name>RUBY_DATA_FUNC</name></type> <name>dfree</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_data_object_wrap</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dmark</name></expr></argument>, <argument><expr><name>dfree</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>rb_data_typed_object_alloc</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>DEPRECATED_BY</name><argument_list>(<argument>rb_data_typed_object_wrap</argument>, <argument>static inline VALUE rb_data_typed_object_alloc(VALUE,void*,const rb_data_type_t*)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_data_typed_object_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>datap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rb_data_type_t</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_data_typed_object_wrap</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>datap</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NO_INLINE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_data_object_wrap_0</name></cpp:macro> <cpp:value>rb_data_object_wrap</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_data_object_wrap_1</name></cpp:macro> <cpp:value>rb_data_object_wrap_warning</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_data_object_wrap</name></cpp:macro> <cpp:value>RUBY_MACRO_SELECT(rb_data_object_wrap_, RUBY_UNTYPED_DATA_WARNING)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_data_object_get_0</name></cpp:macro> <cpp:value>rb_data_object_get</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_data_object_get_1</name></cpp:macro> <cpp:value>rb_data_object_get_warning</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_data_object_get</name></cpp:macro> <cpp:value>RUBY_MACRO_SELECT(rb_data_object_get_, RUBY_UNTYPED_DATA_WARNING)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_data_object_make_0</name></cpp:macro> <cpp:value>rb_data_object_make</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_data_object_make_1</name></cpp:macro> <cpp:value>rb_data_object_make_warning</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_data_object_make</name></cpp:macro> <cpp:value>RUBY_MACRO_SELECT(rb_data_object_make_, RUBY_UNTYPED_DATA_WARNING)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_PROMOTED_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_FL_ALL_RAW(x, RUBY_FL_PROMOTED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_PROMOTED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_SPECIAL_CONST_P(x) ? 0 : RB_OBJ_PROMOTED_RAW(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_WB_UNPROTECT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_wb_unprotect(x, __FILE__, __LINE__)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>rb_gc_writebarrier</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_gc_writebarrier_unprotect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_PROMOTED_RAW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_PROMOTED_RAW(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_PROMOTED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_PROMOTED(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJ_WB_UNPROTECT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_OBJ_WB_UNPROTECT(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_WRITE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>slot</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_write((VALUE)(a), (VALUE *)(slot), (VALUE)(b), __FILE__, __LINE__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_WRITTEN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>oldv</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_written((VALUE)(a), (VALUE)(oldv), (VALUE)(b), __FILE__, __LINE__)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_RGENGC_LOGGING_WB_UNPROTECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_RGENGC_LOGGING_WB_UNPROTECT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_RGENGC_LOGGING_WB_UNPROTECT</name></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>rb_gc_unprotect_logging</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>objptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGENGC_LOGGING_WB_UNPROTECT</name></cpp:macro> <cpp:value>rb_gc_unprotect_logging</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_obj_wb_unprotect</name><argument_list>(<argument><expr><name>VALUE</name> <name>x</name></expr></argument>, <argument><expr><call><name>RB_UNUSED_VAR</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>RB_UNUSED_VAR</name><argument_list>(<argument>int line</argument>)</argument_list></macro></expr></argument>)</argument_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_LOGGING_WB_UNPROTECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RGENGC_LOGGING_WB_UNPROTECT</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>x</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_gc_writebarrier_unprotect</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_obj_written</name><argument_list>(<argument><expr><name>VALUE</name> <name>a</name></expr></argument>, <argument><expr><macro><name>RB_UNUSED_VAR</name><argument_list>(<argument>VALUE oldv</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>VALUE</name> <name>b</name></expr></argument>, <argument><expr><call><name>RB_UNUSED_VAR</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>RB_UNUSED_VAR</name><argument_list>(<argument>int line</argument>)</argument_list></macro></expr></argument>)</argument_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_LOGGING_OBJ_WRITTEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RGENGC_LOGGING_OBJ_WRITTEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>oldv</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_SPECIAL_CONST_P</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_gc_writebarrier</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_obj_write</name><argument_list>(<argument><expr><name>VALUE</name> <name>a</name></expr></argument>, <argument><expr><name>VALUE</name> <operator>*</operator><name>slot</name></expr></argument>, <argument><expr><name>VALUE</name> <name>b</name></expr></argument>, <argument><expr><call><name>RB_UNUSED_VAR</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>RB_UNUSED_VAR</name><argument_list>(<argument>int line</argument>)</argument_list></macro></expr></argument>)</argument_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RGENGC_LOGGING_WRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>RGENGC_LOGGING_WRITE</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>slot</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_obj_written</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>RUBY_Qundef</name></expr></argument> , <argument><expr><name>b</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTEGER_UNIFICATION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_INTEGER_TYPE_P</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_integer_type_p(obj)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__GNUC__</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GCC_VERSION_SINCE</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_integer_type_p</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__ ({ const VALUE integer_type_obj = (obj); (RB_FIXNUM_P(integer_type_obj) || (!RB_SPECIAL_CONST_P(integer_type_obj) &amp;&amp; RB_BUILTIN_TYPE(integer_type_obj) == RUBY_T_BIGNUM)); })</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_integer_type_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>RB_FIXNUM_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>RB_SPECIAL_CONST_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>RB_BUILTIN_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RUBY_T_BIGNUM</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INT</name> <operator>&lt;</operator> <name>SIZEOF_LONG</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_INT2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_INT2FIX((int)(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_UINT2NUM</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_LONG2FIX((unsigned int)(v))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_int2num_inline</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FIXABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>rb_int2big</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_INT2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_int2num_inline(x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_uint2num_inline</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_POSFIXABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RB_LONG2FIX</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>rb_uint2big</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_UINT2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_uint2num_inline(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_INT2NUM(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_UINT2NUM(x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_long2num_inline</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FIXABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RB_LONG2FIX</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>rb_int2big</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_LONG2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_long2num_inline(x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_ulong2num_inline</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_POSFIXABLE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RB_LONG2FIX</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>rb_uint2big</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ULONG2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_ulong2num_inline(x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name></type>

<name>rb_num2char_inline</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>RUBY_T_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><call><name>NUM2INT</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NUM2CHR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_num2char_inline(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_CHR2FIX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_INT2FIX((long)((x)&amp;0xff))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_LONG2NUM(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONG2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ULONG2NUM(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USHORT2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_INT2FIX(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2CHR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_NUM2CHR(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHR2FIX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_CHR2FIX(x)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG</name> <operator>&lt;</operator> <name>SIZEOF_VALUE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ST2FIX</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_LONG2FIX((long)((h) &gt; 0 ? (h) &amp; (unsigned long)-1 &gt;&gt; 2 : (h) | ~((unsigned long)-1 &gt;&gt; 2)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ST2FIX</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_LONG2FIX((long)(h))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST2FIX</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ST2FIX(h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ALLOC_N</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type*)ruby_xmalloc2((size_t)(n),sizeof(type)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ALLOC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type*)ruby_xmalloc(sizeof(type)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ZALLOC_N</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type*)ruby_xcalloc((size_t)(n),sizeof(type)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ZALLOC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RB_ZALLOC_N(type,1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_REALLOC_N</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((var)=(type*)ruby_xrealloc2((char*)(var),(size_t)(n),sizeof(type)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_N</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ALLOC_N(type,n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ALLOC(type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZALLOC_N</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ZALLOC_N(type,n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZALLOC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ZALLOC(type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REALLOC_N</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_REALLOC_N(var,type,n)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>GCC_VERSION_BEFORE</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">9</literal><operator>,</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_BUILTIN___BUILTIN_ALLOCA_WITH_ALIGN</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_ALLOCA_WITH_ALIGN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>RUBY_ALIGNOF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOCA_N</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(type*)__builtin_alloca_with_align((sizeof(type)*(n)), RUBY_ALIGNOF(type) * CHAR_BIT)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOCA_N</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type*)alloca(sizeof(type)*(n)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>rb_alloc_tmp_buffer</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> RUBY_ATTR_ALLOC_SIZE<parameter_list>(<parameter/></parameter_list>(2</function_decl>))<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>rb_alloc_tmp_buffer_with_count</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list> RUBY_ATTR_ALLOC_SIZE<parameter_list>(<parameter/></parameter_list>(2<operator>,</operator>3</function_decl>))<empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>rb_free_tmp_buffer</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>NORETURN</name><argument_list>(<argument>void ruby_malloc_size_overflow(size_t, size_t)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name> <operator>&amp;&amp;</operator> <name>SIZEOF_SIZE_T</name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSIZE_T</name></cpp:macro> <cpp:value>unsigned LONG_LONG</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INT128_T</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSIZE_T</name></cpp:macro> <cpp:value>uint128_t</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_mul_size_overflow</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DSIZE_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__extension__</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>DSIZE_T</name></type> <name>c2</name> <init>= <expr><operator>(</operator><name>DSIZE_T</name><operator>)</operator><name>a</name> <operator>*</operator> <operator>(</operator><name>DSIZE_T</name><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>c2</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <name>max</name> <operator>/</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>rb_alloc_tmp_buffer2</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>count</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>elsize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_UNLIKELY</name><argument_list>(<argument><expr><name>cnt</name> <operator>&gt;</operator> <name>LONG_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ruby_malloc_size_overflow</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>elsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><name>LONG_MAX</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_UNLIKELY</name><argument_list>(<argument><expr><call><name>rb_mul_size_overflow</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>elsize</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ruby_malloc_size_overflow</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>elsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>rb_alloc_tmp_buffer_with_count</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>cnt</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>C_ALLOCA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ALLOCV</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_alloc_tmp_buffer(&amp;(v), (n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ALLOCV_N</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_alloc_tmp_buffer2(&amp;(v), (n), sizeof(type))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_ALLOCV_LIMIT</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ALLOCV</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &lt; RUBY_ALLOCV_LIMIT ? ((v) = 0, alloca(n)) : rb_alloc_tmp_buffer(&amp;(v), (n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ALLOCV_N</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type*)(((size_t)(n) &lt; RUBY_ALLOCV_LIMIT / sizeof(type)) ? ((v) = 0, alloca((size_t)(n) * sizeof(type))) : rb_alloc_tmp_buffer2(&amp;(v), (long)(n), sizeof(type))))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_ALLOCV_END</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_free_tmp_buffer(&amp;(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOCV</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ALLOCV(v, n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOCV_N</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ALLOCV_N(type, v, n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOCV_END</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RB_ALLOCV_END(v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMZERO</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((p), 0, sizeof(type)*(size_t)(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMCPY</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>,<parameter><type><name>p2</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy((p1), (p2), sizeof(type)*(size_t)(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMMOVE</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>,<parameter><type><name>p2</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memmove((p1), (p2), sizeof(type)*(size_t)(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMCMP</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>,<parameter><type><name>p2</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcmp((p1), (p2), sizeof(type)*(size_t)(n))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type>

<name>ruby_nonempty_memcpy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>n</name></expr> ?</condition><then> <expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>dest</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memcpy</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>,<parameter><type><name>p2</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_nonempty_memcpy(p1, p2, n)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>rb_obj_infect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>victim</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>carrier</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>int</name></type> <name>ruby_glob_func</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>void</name></type> <name>rb_glob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ruby_glob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>ruby_glob_func</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ruby_brace_glob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>ruby_glob_func</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_define_class</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_define_module</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_define_class_under</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_define_module_under</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_include_module</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_extend_object</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_prepend_module</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>VALUE</name></type> <name>rb_gvar_getter_t</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>rb_gvar_setter_t</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>rb_gvar_marker_t</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>rb_gvar_getter_t</name></type> <name>rb_gvar_undef_getter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_gvar_setter_t</name></type> <name>rb_gvar_undef_setter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_gvar_marker_t</name></type> <name>rb_gvar_undef_marker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_gvar_getter_t</name></type> <name>rb_gvar_val_getter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_gvar_setter_t</name></type> <name>rb_gvar_val_setter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_gvar_marker_t</name></type> <name>rb_gvar_val_marker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_gvar_getter_t</name></type> <name>rb_gvar_var_getter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_gvar_setter_t</name></type> <name>rb_gvar_var_setter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_gvar_marker_t</name></type> <name>rb_gvar_var_marker</name></decl>;</decl_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>rb_gvar_setter_t rb_gvar_readonly_setter</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>rb_define_variable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_define_virtual_variable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_gvar_getter_t</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_gvar_setter_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_define_hooked_variable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_gvar_getter_t</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_gvar_setter_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_define_readonly_variable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_define_const</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_define_global_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_define_method</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>ANYARGS</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_define_module_function</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>ANYARGS</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_define_global_function</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>ANYARGS</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_undef_method</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_define_alias</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_define_attr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_global_variable</name><parameter_list>(<parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_gc_register_mark_object</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_gc_register_address</name><parameter_list>(<parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_gc_unregister_address</name><parameter_list>(<parameter><decl><type><name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ID</name></type> <name>rb_intern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ID</name></type> <name>rb_intern2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ID</name></type> <name>rb_intern_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_id2name</name><parameter_list>(<parameter><decl><type><name>ID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ID</name></type> <name>rb_check_id</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ID</name></type> <name>rb_to_id</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_id2str</name><parameter_list>(<parameter><decl><type><name>ID</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_sym2str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_to_symbol</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_check_symbol</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>namep</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_CONST_ID_CACHE</name><parameter_list>(<parameter><type><name>result</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ static ID rb_intern_id_cache; if (!rb_intern_id_cache) rb_intern_id_cache = rb_intern2((str), (long)strlen(str)); result rb_intern_id_cache; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_CONST_ID</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do RUBY_CONST_ID_CACHE((var) =, (str)) while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_ID_CACHE</name><parameter_list>(<parameter><type><name>result</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RUBY_CONST_ID_CACHE(result, str)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_ID</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RUBY_CONST_ID(var, str)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CONSTANT_P</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STMT_AND_DECL_IN_EXPR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_intern</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_constant_p(str) ? __extension__ (RUBY_CONST_ID_CACHE((ID), (str))) : rb_intern(str))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_intern_const</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_constant_p(str) ? __extension__ (rb_intern2((str), (long)strlen(str))) : (rb_intern)(str))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_varargs_argc_check_runtime</name><parameter_list>(<parameter><type><name>argc</name></type></parameter>, <parameter><type><name>vargc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((argc) &lt;= (vargc)) ? (argc) : (rb_fatal("argc(%d) exceeds actual arguments(%d)", argc, vargc), 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_varargs_argc_valid_p</name><parameter_list>(<parameter><type><name>argc</name></type></parameter>, <parameter><type><name>vargc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((argc) == 0 ? (vargc) &lt;= 1 : (argc) == (vargc))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR_CONSTANT_P</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ATTRIBUTE_ERRORFUNC</name></expr></cpp:if>

<macro><name>ERRORFUNC</name><argument_list>(<argument>(<literal type="string">" argument length doesn't match"</literal>)</argument>, <argument>int rb_varargs_bad_length(int,int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_varargs_bad_length</name><parameter_list>(<parameter><type><name>argc</name></type></parameter>, <parameter><type><name>vargc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((argc)/rb_varargs_argc_valid_p(argc, vargc))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_varargs_argc_check</name><parameter_list>(<parameter><type><name>argc</name></type></parameter>, <parameter><type><name>vargc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_choose_expr(__builtin_constant_p(argc), (rb_varargs_argc_valid_p(argc, vargc) ? (argc) : rb_varargs_bad_length(argc, vargc)), rb_varargs_argc_check_runtime(argc, vargc))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_varargs_argc_check</name><parameter_list>(<parameter><type><name>argc</name></type></parameter>, <parameter><type><name>vargc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_varargs_argc_check_runtime(argc, vargc)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_intern_const</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_intern2((str), (long)strlen(str))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_class2name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rb_obj_classname</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_eval_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_eval_string_protect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_eval_string_wrap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_funcall</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_funcallv</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_funcallv_kw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_funcallv_public</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_funcallv_public_kw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_funcall2</name></cpp:macro> <cpp:value>rb_funcallv</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_funcall3</name></cpp:macro> <cpp:value>rb_funcallv_public</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_funcall_passing_block</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_funcall_passing_block_kw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_funcall_with_block</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_funcall_with_block_kw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>ID</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_scan_args</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_SCAN_ARGS_PASS_CALLED_KEYWORDS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_SCAN_ARGS_KEYWORDS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_SCAN_ARGS_LAST_HASH_KEYWORDS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rb_scan_args_kw</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_call_super</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_call_super_kw</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_current_receiver</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_get_kwargs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>keyword_hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ID</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>required</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optional</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_extract_keywords</name><parameter_list>(<parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>orighash</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_RB_SCAN_ARGS_OPTIONAL_HASH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function_decl><type><name>VALUE</name></type> <name>rb_gv_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_gv_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iv_get</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iv_set</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_equal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name> <modifier>*</modifier></type><name>rb_ruby_verbose_ptr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name> <modifier>*</modifier></type><name>rb_ruby_debug_ptr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ruby_verbose</name></cpp:macro> <cpp:value>(*rb_ruby_verbose_ptr())</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ruby_debug</name></cpp:macro> <cpp:value>(*rb_ruby_debug_ptr())</cpp:value></cpp:define>

<enum>enum <name>rb_io_wait_readwrite</name> <block>{<decl><name>RB_IO_WAIT_READABLE</name></decl>, <decl><name>RB_IO_WAIT_WRITABLE</name></decl>}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_IO_WAIT_READABLE</name></cpp:macro> <cpp:value>RB_IO_WAIT_READABLE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_IO_WAIT_WRITABLE</name></cpp:macro> <cpp:value>RB_IO_WAIT_WRITABLE</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PRINTF_ARGS</name><argument_list>(<argument><expr><macro><name>NORETURN</name><argument_list>(<argument>void rb_raise(VALUE, const char*, ...)</argument>)</argument_list></macro></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PRINTF_ARGS</name><argument_list>(<argument><expr><macro><name>NORETURN</name><argument_list>(<argument>void rb_fatal(const char*, ...)</argument>)</argument_list></macro></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>COLDFUNC</name></type> <name>PRINTF_ARGS</name><argument_list>(<argument><expr><macro><name>NORETURN</name><argument_list>(<argument>void rb_bug(const char*, ...)</argument>)</argument_list></macro></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_bug_errno(const char*, int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_sys_fail(const char*)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_sys_fail_str(VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_mod_sys_fail(VALUE, const char*)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_mod_sys_fail_str(VALUE, VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_readwrite_sys_fail(enum rb_io_wait_readwrite, const char*)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_iter_break(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_iter_break_value(VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_exit(int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_notimplement(void)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>VALUE</name></type> <name>rb_syserr_new</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_syserr_new_str</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_syserr_fail(int, const char*)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_syserr_fail_str(int, VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_mod_syserr_fail(VALUE, int, const char*)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_mod_syserr_fail_str(VALUE, int, VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_readwrite_syserr_fail(enum rb_io_wait_readwrite, int, const char*)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void rb_warning(const char*, ...)</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void rb_compile_warning(const char *, int, const char*, ...)</argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void rb_sys_warning(const char*, ...)</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>COLDFUNC</name></type> <name>PRINTF_ARGS</name><argument_list>(<argument><expr><name>void</name> <call><name>rb_warn</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<macro><name>PRINTF_ARGS</name><argument_list>(<argument>void rb_compile_warn(const char *, int, const char*, ...)</argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_BLOCK_CALL_FUNC_STRICT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_BLOCK_CALL_FUNC_TAKES_BLOCKARG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><parameter_list>(<parameter><type><name>yielded_arg</name></type></parameter>, <parameter><type><name>callback_arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VALUE yielded_arg, VALUE callback_arg, int argc, const VALUE *argv, VALUE blockarg</cpp:value></cpp:define>

<typedef>typedef <type><name>VALUE</name></type> <name>rb_block_call_func</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>yielded_arg</name></expr></argument>, <argument><expr><name>callback_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>;</typedef>

<typedef>typedef <type><name>rb_block_call_func</name> <modifier>*</modifier></type><name>rb_block_call_func_t</name>;</typedef>

<function_decl><type><name>VALUE</name></type> <name>rb_each</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_yield</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_yield_values</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_yield_values2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_yield_values_kw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kw_splat</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_yield_splat</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_yield_splat_kw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_yield_block</name><argument_list>(<argument><expr><call><name>RB_BLOCK_CALL_FUNC_ARGLIST</name><argument_list>(<argument><expr><name>yielded_arg</name></expr></argument>, <argument><expr><name>callback_arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_NO_KEYWORDS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_PASS_KEYWORDS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_PASS_CALLED_KEYWORDS</name></cpp:macro> <cpp:value>rb_keyword_given_p()</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rb_keyword_given_p</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_block_given_p</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rb_need_block</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_iterate</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>rb_block_call_func_t</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_block_call</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>ID</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_block_call_func_t</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_block_call_kw</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>ID</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_block_call_func_t</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_rescue</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_rescue2</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_vrescue2</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_ensure</name><parameter_list>(<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><function_decl><type><name>VALUE</name></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_catch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>rb_block_call_func_t</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>rb_catch_obj</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>,<parameter><decl><type><name>rb_block_call_func_t</name></type></decl></parameter>,<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_throw(const char*,VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>NORETURN</name><argument_list>(<argument>void rb_throw_obj(VALUE,VALUE)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>VALUE</name></type> <name>rb_require</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_mKernel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_mComparable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_mEnumerable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_mErrno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_mFileTest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_mGC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_mMath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_mProcess</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_mWaitReadable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_mWaitWritable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cBasicObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cObject</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cArray</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cBinding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cClass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cCont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cDir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cEncoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cEnumerator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cFalseClass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cComplex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cFloat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cHash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cIO</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cInteger</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cMatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cMethod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cModule</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cNameErrorMesg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cNilClass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cNumeric</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cProc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cRandom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cRange</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cRational</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cRegexp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cStat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cStruct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cSymbol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cThread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cTrueClass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_cUnboundMethod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eException</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eStandardError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eSystemExit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eInterrupt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eSignal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eFatal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eArgError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eEOFError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eIndexError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eStopIteration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eKeyError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eRangeError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eIOError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eRuntimeError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eFrozenError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eSecurityError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eSystemCallError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eThreadError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eTypeError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eZeroDivError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eNotImpError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eNoMemError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eNoMethodError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eFloatDomainError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eLocalJumpError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eSysStackError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eRegexpError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eEncodingError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eEncCompatError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eNoMatchingPatternError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eScriptError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eNameError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eSyntaxError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eLoadError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_eMathDomainError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <name>VALUE</name></type> <name>rb_stdin</name></decl>, <decl><type ref="prev"/><name>rb_stdout</name></decl>, <decl><type ref="prev"/><name>rb_stderr</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name></type>

<name>rb_class_of</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_IMMEDIATE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FIXNUM_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>rb_cInteger</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLONUM_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>rb_cFloat</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>RUBY_Qtrue</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>rb_cTrueClass</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_STATIC_SYM_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>rb_cSymbol</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>RB_TEST</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>RUBY_Qnil</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>rb_cNilClass</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>RUBY_Qfalse</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>rb_cFalseClass</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>klass</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_IMMEDIATE_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_FIXNUM_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RUBY_T_FIXNUM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FLONUM_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RUBY_T_FLOAT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>RUBY_Qtrue</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RUBY_T_TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_STATIC_SYM_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RUBY_T_SYMBOL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>RUBY_Qundef</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RUBY_T_UNDEF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>RB_TEST</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>RUBY_Qnil</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RUBY_T_NIL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>RUBY_Qfalse</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RUBY_T_FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>RB_BUILTIN_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_type_p</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__ (__builtin_constant_p(type) ? RB_TYPE_P((obj), (type)) : rb_type(obj) == (type))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_type_p</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rb_type(obj) == (type))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_special_const_p</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__ ({ VALUE special_const_obj = (obj); (int)(RB_SPECIAL_CONST_P(special_const_obj) ? RUBY_Qtrue : RUBY_Qfalse); })</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_special_const_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_SPECIAL_CONST_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>RUBY_Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>RUBY_Qfalse</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/intern.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>rb_clone_setup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>clone</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_obj_setup</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><call><name>rb_singleton_class_clone</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>RBASIC</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>FL_PROMOTED0</name><operator>|</operator><name>FL_PROMOTED1</name><operator>|</operator><name>FL_FINALIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_singleton_class_attached</name><argument_list>(<argument><expr><call><name>RBASIC_CLASS</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FL_TEST</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>RUBY_FL_EXIVAR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_copy_generic_ivar</name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>rb_dup_setup</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>dup</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_obj_setup</name><argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RB_FL_TEST_RAW</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>RUBY_FL_DUPPED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_FL_TEST</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>RUBY_FL_EXIVAR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_copy_generic_ivar</name><argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type>

<name>rb_array_len</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>RBASIC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>RARRAY_EMBED_FLAG</name><operator>)</operator></expr> ?</condition><then>

<expr><call><name>RARRAY_EMBED_LEN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>RARRAY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>len</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__fcc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__fcc_version</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FCC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FCC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_CONST_VALUE_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((const VALUE *)(x))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_CONST_VALUE_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type>

<name>rb_array_const_ptr_transient</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>FIX_CONST_VALUE_PTR</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><call><name>RBASIC</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>RARRAY_EMBED_FLAG</name><operator>)</operator></expr> ?</condition><then>

<expr><call><name>RARRAY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>ary</name></name></expr> </then><else>: <expr><call><name>RARRAY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>as</name><operator>.</operator><name>heap</name><operator>.</operator><name>ptr</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>VALUE</name> <modifier>*</modifier></type>

<name>rb_array_const_ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>

<decl_stmt><decl><type><name>void</name></type> <name>rb_ary_detransient</name><argument_list>(<argument><expr><name>VALUE</name> <name>a</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_TRANSIENT_P</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_detransient</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>rb_array_const_ptr_transient</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VALUE</name> <modifier>*</modifier></type>

<name>rb_array_ptr_use_start</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_transient</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>rb_ary_ptr_use_start</name><argument_list>(<argument><expr><name>VALUE</name> <name>ary</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_TRANSIENT_HEAP</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allow_transient</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_TRANSIENT_P</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name></type> <name>rb_ary_detransient</name><argument_list>(<argument><expr><name>VALUE</name> <name>a</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_ary_detransient</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>allow_transient</name></expr>;</expr_stmt>

<return>return <expr><call><name>rb_ary_ptr_use_start</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>rb_array_ptr_use_end</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_transient</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name></type> <name>rb_ary_ptr_use_end</name><argument_list>(<argument><expr><name>VALUE</name> <name>a</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_ary_ptr_use_end</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>allow_transient</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXTLIB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_DLN_A_OUT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dln_libs_to_be_linked</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>EXTLIB</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_VM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_NATIVETHREAD</name></cpp:macro></cpp:define>

<function_decl><type><name>int</name></type> <name>ruby_native_thread_p</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_NONE</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_LINE</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_CLASS</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_END</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_CALL</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_RETURN</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_C_CALL</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_C_RETURN</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_RAISE</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_ALL</name></cpp:macro> <cpp:value>0x00ff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_B_CALL</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_B_RETURN</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_THREAD_BEGIN</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_THREAD_END</name></cpp:macro> <cpp:value>0x0800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_FIBER_SWITCH</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_SCRIPT_COMPILED</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_TRACEPOINT_ALL</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_RESERVED_FOR_INTERNAL_USE</name></cpp:macro> <cpp:value>0x030000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_EVENT_SWITCH</name></cpp:macro> <cpp:value>0x040000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_EVENT_SWITCH</name></cpp:macro> <cpp:value>0x040000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_EVENT_NEWOBJ</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_EVENT_FREEOBJ</name></cpp:macro> <cpp:value>0x200000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_EVENT_GC_START</name></cpp:macro> <cpp:value>0x400000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_EVENT_GC_END_MARK</name></cpp:macro> <cpp:value>0x800000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_EVENT_GC_END_SWEEP</name></cpp:macro> <cpp:value>0x1000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_EVENT_GC_ENTER</name></cpp:macro> <cpp:value>0x2000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_EVENT_GC_EXIT</name></cpp:macro> <cpp:value>0x4000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_EVENT_OBJSPACE_MASK</name></cpp:macro> <cpp:value>0x7f00000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INTERNAL_EVENT_MASK</name></cpp:macro> <cpp:value>0xffff0000</cpp:value></cpp:define>

<typedef>typedef <type><name>uint32_t</name></type> <name>rb_event_flag_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>rb_event_hook_func_t</name>)<parameter_list>(<parameter><decl><type><name>rb_event_flag_t</name></type> <name>evflag</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ID</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_EVENT_HOOKS_HAVE_CALLBACK_DATA</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>rb_add_event_hook</name><parameter_list>(<parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rb_remove_event_hook</name><parameter_list>(<parameter><decl><type><name>rb_event_hook_func_t</name></type> <name>func</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_isascii</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><literal type="char">'\0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'\x7f'</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_isupper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_islower</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_isalpha</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><call><name>rb_isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>rb_islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_isdigit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_isalnum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><call><name>rb_isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>rb_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_isxdigit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><call><name>rb_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_isblank</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_isspace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>(</operator><literal type="char">'\t'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_iscntrl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><operator>(</operator><literal type="char">'\0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\x7f'</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_isprint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><literal type="char">' '</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'\x7e'</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_ispunct</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><operator>!</operator><call><name>rb_isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_isgraph</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><literal type="char">'!'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'\x7e'</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_tolower</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>rb_isupper</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>c</name><operator>|</operator><literal type="number">0x20</literal><operator>)</operator></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rb_toupper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>rb_islower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>c</name><operator>&amp;</operator><literal type="number">0x5f</literal><operator>)</operator></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ISPRINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISASCII</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_isascii(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPRINT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_isprint(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISGRAPH</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_isgraph(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSPACE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_isspace(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISUPPER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_isupper(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISLOWER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_islower(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISALNUM</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_isalnum(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISALPHA</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_isalpha(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_isdigit(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISXDIGIT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_isxdigit(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISBLANK</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_isblank(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISCNTRL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_iscntrl(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPUNCT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_ispunct(c)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOUPPER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_toupper(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOLOWER</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_tolower(c)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>st_locale_insensitive_strcasecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>st_locale_insensitive_strncasecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRCASECMP</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(st_locale_insensitive_strcasecmp((s1), (s2)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRNCASECMP</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(st_locale_insensitive_strncasecmp((s1), (s2), (n)))</cpp:value></cpp:define>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>ruby_strtoul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRTOUL</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>endptr</name></type></parameter>, <parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ruby_strtoul((str), (endptr), (base)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>InitVM</name><parameter_list>(<parameter><type><name>ext</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{void InitVM_##ext(void);InitVM_##ext();}</cpp:value></cpp:define>

<macro><name>PRINTF_ARGS</name><argument_list>(<argument>int ruby_snprintf(char *str, size_t n, char const *fmt, ...)</argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>int</name></type> <name>ruby_vsnprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_keyword_p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>kw_flag</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>last</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>kw_flag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RB_SCAN_ARGS_PASS_CALLED_KEYWORDS</name></expr>:</case>

<return>return <expr><call><name>rb_keyword_given_p</name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>RB_SCAN_ARGS_KEYWORDS</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>RB_SCAN_ARGS_LAST_HASH_KEYWORDS</name></expr>:</case>

<return>return <expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>T_HASH</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR_CONSTANT_P</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_ARGS_MACRO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OPTIMIZE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args</name><parameter_list>(<parameter><type><name>argc</name></type></parameter>,<parameter><type><name>argvp</name></type></parameter>,<parameter><type><name>fmt</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_choose_expr(__builtin_constant_p(fmt), rb_scan_args0(argc,argvp,fmt,(sizeof((VALUE*[]){__VA_ARGS__})/sizeof(VALUE*)), ((VALUE*[]){__VA_ARGS__})), rb_scan_args(argc,argvp,fmt,##__VA_ARGS__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_kw</name><parameter_list>(<parameter><type><name>kw_flag</name></type></parameter>,<parameter><type><name>argc</name></type></parameter>,<parameter><type><name>argvp</name></type></parameter>,<parameter><type><name>fmt</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_choose_expr(__builtin_constant_p(fmt), rb_scan_args_kw0(kw_flag,argc,argvp,fmt, (sizeof((VALUE*[]){__VA_ARGS__})/sizeof(VALUE*)), ((VALUE*[]){__VA_ARGS__})), rb_scan_args_kw(kw_flag,argc,argvp,fmt,##__VA_ARGS__))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ATTRIBUTE_ERRORFUNC</name></expr></cpp:if>

<macro><name>ERRORFUNC</name><argument_list>(<argument>(<literal type="string">"bad scan arg format"</literal>)</argument>, <argument>void rb_scan_args_bad_format(const char*)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>ERRORFUNC</name><argument_list>(<argument>(<literal type="string">"variable argument length doesn't match"</literal>)</argument>, <argument>void rb_scan_args_length_mismatch(const char*,int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_bad_format</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_length_mismatch</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>varc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_isdigit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char)((c)-'0')&lt;10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_count_end</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>ofs</name></type></parameter>, <parameter><type><name>vari</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fmt)[ofs] ? -1 : (vari))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_count_block</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>ofs</name></type></parameter>, <parameter><type><name>vari</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fmt)[ofs]!='&amp;' ? rb_scan_args_count_end(fmt, ofs, vari) : rb_scan_args_count_end(fmt, (ofs)+1, (vari)+1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_count_hash</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>ofs</name></type></parameter>, <parameter><type><name>vari</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fmt)[ofs]!=':' ? rb_scan_args_count_block(fmt, ofs, vari) : rb_scan_args_count_block(fmt, (ofs)+1, (vari)+1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_count_trail</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>ofs</name></type></parameter>, <parameter><type><name>vari</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!rb_scan_args_isdigit((fmt)[ofs]) ? rb_scan_args_count_hash(fmt, ofs, vari) : rb_scan_args_count_hash(fmt, (ofs)+1, (vari)+((fmt)[ofs]-'0')))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_count_var</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>ofs</name></type></parameter>, <parameter><type><name>vari</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((fmt)[ofs]!='*' ? rb_scan_args_count_trail(fmt, ofs, vari) : rb_scan_args_count_trail(fmt, (ofs)+1, (vari)+1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_count_opt</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>ofs</name></type></parameter>, <parameter><type><name>vari</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!rb_scan_args_isdigit((fmt)[ofs]) ? rb_scan_args_count_var(fmt, ofs, vari) : rb_scan_args_count_var(fmt, (ofs)+1, (vari)+(fmt)[ofs]-'0'))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_count_lead</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>ofs</name></type></parameter>, <parameter><type><name>vari</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!rb_scan_args_isdigit((fmt)[ofs]) ? rb_scan_args_count_var(fmt, ofs, vari) : rb_scan_args_count_opt(fmt, (ofs)+1, (vari)+(fmt)[ofs]-'0'))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_count</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_scan_args_count_lead(fmt, 0, 0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_attribute</name><argument_list>(<argument><expr><name>diagnose_if</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_verify</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>varc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_verify</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>varc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(char[1-2*(rb_scan_args_count(fmt)&lt;0)])!=1 ? rb_scan_args_bad_format(fmt) : sizeof(char[1-2*(rb_scan_args_count(fmt)!=(varc))])!=1 ? rb_scan_args_length_mismatch(fmt, varc) : (void)0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_lead_p(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_lead_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_scan_args_isdigit</name><argument_list>(<argument><expr><name><name>fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_n_lead(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_n_lead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>rb_scan_args_lead_p</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_opt_p(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_opt_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>rb_scan_args_lead_p</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rb_scan_args_isdigit</name><argument_list>(<argument><expr><name><name>fmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_n_opt(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_n_opt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>rb_scan_args_opt_p</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>fmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_var_idx(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_var_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><operator>!</operator><call><name>rb_scan_args_lead_p</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>!</operator><call><name>rb_scan_args_isdigit</name><argument_list>(<argument><expr><name><name>fmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_f_var(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_f_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>fmt</name><index>[<expr><call><name>rb_scan_args_var_idx</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="char">'*'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_trail_idx(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_trail_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><call><name>rb_scan_args_var_idx</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>idx</name><operator>+</operator><operator>(</operator><name><name>fmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>==</operator><literal type="char">'*'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_n_trail(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_n_trail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><call><name>rb_scan_args_trail_idx</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>rb_scan_args_isdigit</name><argument_list>(<argument><expr><name><name>fmt</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>fmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_hash_idx(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_hash_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><call><name>rb_scan_args_trail_idx</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>idx</name><operator>+</operator><call><name>rb_scan_args_isdigit</name><argument_list>(<argument><expr><name><name>fmt</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_f_hash(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_f_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>fmt</name><index>[<expr><call><name>rb_scan_args_hash_idx</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="char">':'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_block_idx(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_block_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><call><name>rb_scan_args_hash_idx</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>idx</name><operator>+</operator><operator>(</operator><name><name>fmt</name><index>[<expr><name>idx</name></expr>]</index></name><operator>==</operator><literal type="char">':'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int rb_scan_args_f_block(const char *fmt)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_f_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>fmt</name><index>[<expr><call><name>rb_scan_args_block_idx</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="char">'&amp;'</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

ALWAYS_INLINE(static int rb_scan_args_end_idx(const char *fmt));

static inline int

rb_scan_args_end_idx(const char *fmt)

{

const int idx = rb_scan_args_block_idx(fmt);

return idx+(fmt[idx]=='&amp;');

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args0</name><parameter_list>(<parameter><type><name>argc</name></type></parameter>, <parameter><type><name>argv</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>varc</name></type></parameter>, <parameter><type><name>vars</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_scan_args_set(RB_SCAN_ARGS_PASS_CALLED_KEYWORDS, argc, argv, rb_scan_args_n_lead(fmt), rb_scan_args_n_opt(fmt), rb_scan_args_n_trail(fmt), rb_scan_args_f_var(fmt), rb_scan_args_f_hash(fmt), rb_scan_args_f_block(fmt), (rb_scan_args_verify(fmt, varc), vars), (char *)fmt, varc)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_scan_args_kw0</name><parameter_list>(<parameter><type><name>kw_flag</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>, <parameter><type><name>argv</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>varc</name></type></parameter>, <parameter><type><name>vars</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_scan_args_set(kw_flag, argc, argv, rb_scan_args_n_lead(fmt), rb_scan_args_n_opt(fmt), rb_scan_args_n_trail(fmt), rb_scan_args_f_var(fmt), rb_scan_args_f_hash(fmt), rb_scan_args_f_block(fmt), (rb_scan_args_verify(fmt, varc), vars), (char *)fmt, varc)</cpp:value></cpp:define>

<macro><name>ALWAYS_INLINE</name><argument_list>(<argument>static int

rb_scan_args_set(int kw_flag, int argc, const VALUE *argv,

int n_lead, int n_opt, int n_trail,

int f_var, int f_hash, int f_block,

VALUE *vars[], const char *fmt, int varc)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>int</name></type>

<name>rb_scan_args_set</name><argument_list>(<argument><expr><name>int</name> <name>kw_flag</name></expr></argument>, <argument><expr><name>int</name> <name>argc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VALUE</name> <operator>*</operator><name>argv</name></expr></argument>,

<argument><expr><name>int</name> <name>n_lead</name></expr></argument>, <argument><expr><name>int</name> <name>n_opt</name></expr></argument>, <argument><expr><name>int</name> <name>n_trail</name></expr></argument>,

<argument><expr><name>int</name> <name>f_var</name></expr></argument>, <argument><expr><name>int</name> <name>f_hash</name></expr></argument>, <argument><expr><name>int</name> <name>f_block</name></expr></argument>,

<argument><expr><name>VALUE</name> <operator>*</operator><name><name>vars</name><index>[]</index></name></expr></argument>, <argument><expr><call><name>RB_UNUSED_VAR</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>RB_UNUSED_VAR</name><argument_list>(<argument>int varc</argument>)</argument_list></macro></expr></argument>)</argument_list>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_attribute</name><argument_list>(<argument><expr><name>diagnose_if</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>diagnose_if</name><argument_list>(<argument><expr><call><name>rb_scan_args_count</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="string">"bad scan arg format"</literal></expr></argument>,<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>

<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>diagnose_if</name><argument_list>(<argument><expr><call><name>rb_scan_args_count</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call><operator>!=</operator><name>varc</name></expr></argument>,<argument><expr><literal type="string">"variable argument length doesn't match"</literal></expr></argument>,<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>argi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vari</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>var</name></decl>, <decl><type ref="prev"/><name>hash</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n_mand</name> <init>= <expr><name>n_lead</name> <operator>+</operator> <name>n_trail</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f_hash</name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>last</name> <init>= <expr><name><name>argv</name><index>[<expr><name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args_keyword_p</name><argument_list>(<argument><expr><name>kw_flag</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>rb_hash_dup</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <name>n_mand</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>argc_error</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n_lead</name></expr>;</init> <condition><expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>vars</name><index>[<expr><name>vari</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argi</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argi</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n_opt</name></expr>;</init> <condition><expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>vars</name><index>[<expr><name>vari</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argi</name> <operator>&lt;</operator> <name>argc</name> <operator>-</operator> <name>n_trail</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argi</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argi</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>f_var</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n_var</name> <init>= <expr><name>argc</name> <operator>-</operator> <name>argi</name> <operator>-</operator> <name>n_trail</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>vars</name><index>[<expr><name>vari</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>n_var</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <call><name>rb_ary_new4</name><argument_list>(<argument><expr><name>n_var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>argi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argi</name> <operator>+=</operator> <name>n_var</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n_trail</name></expr>;</init> <condition><expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>vars</name><index>[<expr><name>vari</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>argi</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argi</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>f_hash</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>vars</name><index>[<expr><name>vari</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>f_block</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>vars</name><index>[<expr><name>vari</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <call><name>rb_block_proc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argi</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>

<label><name>argc_error</name>:</label>

<expr_stmt><expr><call><name>rb_error_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>n_mand</name></expr></argument>, <argument><expr><ternary><condition><expr><name>f_var</name></expr> ?</condition><then> <expr><name>UNLIMITED_ARGUMENTS</name></expr> </then><else>: <expr><name>n_mand</name> <operator>+</operator> <name>n_opt</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>argc</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VA_ARGS_MACRO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OPTIMIZE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_yield_values</name><parameter_list>(<parameter><type><name>argc</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ const int rb_yield_values_argc = (argc); const VALUE rb_yield_values_args[] = {__VA_ARGS__}; const int rb_yield_values_nargs = (int)(sizeof(rb_yield_values_args) / sizeof(VALUE)); rb_yield_values2( rb_varargs_argc_check(rb_yield_values_argc, rb_yield_values_nargs), rb_yield_values_nargs ? rb_yield_values_args : NULL); })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_funcall</name><parameter_list>(<parameter><type><name>recv</name></type></parameter>, <parameter><type><name>mid</name></type></parameter>, <parameter><type><name>argc</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ const int rb_funcall_argc = (argc); const VALUE rb_funcall_args[] = {__VA_ARGS__}; const int rb_funcall_nargs = (int)(sizeof(rb_funcall_args) / sizeof(VALUE)); rb_funcallv(recv, mid, rb_varargs_argc_check(rb_funcall_argc, rb_funcall_nargs), rb_funcall_nargs ? rb_funcall_args : NULL); })</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_DONT_SUBST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/subst.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>ruby_sysinit</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name><modifier>*</modifier></type> <name>ruby_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ruby_executable_node</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ruby_run_node</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_show_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_show_copyright</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_INIT_STACK</name></cpp:macro> <cpp:value>VALUE variable_in_this_stack_frame; ruby_init_stack(&amp;variable_in_this_stack_frame);</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>ruby_init_stack</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ruby_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ruby_cleanup</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_finalize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>NORETURN</name><argument_list>(<argument>void ruby_stop(int)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>ruby_set_stack_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ruby_stack_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>ruby_stack_length</name><parameter_list>(<parameter><decl><type><name>VALUE</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ruby_exec_node</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_script</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_set_script_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_prog_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_set_argv</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>ruby_process_options</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_init_loadpath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_incpush</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ruby_sig_finalize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>RUBY_EXPORT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>RUBY_NO_OLD_COMPATIBILITY</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/backward.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>RUBY_SYMBOL_EXPORT_END</name></type>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"backward/cxxanyargs.hpp"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_TYPES_COMPATIBLE_P</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_f_notimplement_p</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_types_compatible_p(__typeof__(f),__typeof__(rb_f_notimplement))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_f_notimplement_p</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BUILTIN___BUILTIN_CHOOSE_EXPR_CONSTANT_P</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_if_constexpr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_choose_expr(__builtin_choose_expr(__builtin_constant_p(x),(x),0),(t),(f))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_attribute</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_attribute</name><argument_list>(<argument><expr><name>transparent_union</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_attribute</name><argument_list>(<argument><expr><name>unused</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_attribute</name><argument_list>(<argument><expr><name>weakref</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_attribute</name><argument_list>(<argument><expr><name>nonnull</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_METHOD_DEFINITION_DECL</name><parameter_list>(<parameter><type><name>def</name></type></parameter>, <parameter><type><name>nonnull</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##m3(__VA_ARGS__, VALUE(*)(ANYARGS), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##m2(__VA_ARGS__, VALUE(*)(VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##m1(__VA_ARGS__, VALUE(*)(int, union { VALUE *x; const VALUE *y; } __attribute__((__transparent_union__)), VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##0(__VA_ARGS__, VALUE(*)(VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##1(__VA_ARGS__, VALUE(*)(VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##2(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##3(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##4(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##5(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##6(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##7(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##8(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##9(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##10(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##11(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##12(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##13(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##14(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int); __attribute__((__unused__, __weakref__(#def), __nonnull__ nonnull)) static void def ##15(__VA_ARGS__, VALUE(*)(VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE, VALUE), int);</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RB_METHOD_DEFINITION_DECL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<name>RB_METHOD_DEFINITION_DECL</name><argument_list>(<argument><expr><name>rb_define_method_id</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>VALUE</name> <name>klass</name></expr></argument>, <argument><expr><name>ID</name> <name>name</name></expr></argument>)</argument_list>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype15</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==15,rb_define_method_id15,rb_define_method_idm3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype14</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==14,rb_define_method_id14,rb_define_method_id_choose_prototype15(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype13</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==13,rb_define_method_id13,rb_define_method_id_choose_prototype14(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype12</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==12,rb_define_method_id12,rb_define_method_id_choose_prototype13(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype11</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==11,rb_define_method_id11,rb_define_method_id_choose_prototype12(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype10</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==10,rb_define_method_id10,rb_define_method_id_choose_prototype11(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype9</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 9,rb_define_method_id9, rb_define_method_id_choose_prototype10(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype8</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 8,rb_define_method_id8, rb_define_method_id_choose_prototype9(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype7</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 7,rb_define_method_id7, rb_define_method_id_choose_prototype8(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype6</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 6,rb_define_method_id6, rb_define_method_id_choose_prototype7(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype5</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 5,rb_define_method_id5, rb_define_method_id_choose_prototype6(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 4,rb_define_method_id4, rb_define_method_id_choose_prototype5(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 3,rb_define_method_id3, rb_define_method_id_choose_prototype4(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 2,rb_define_method_id2, rb_define_method_id_choose_prototype3(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 1,rb_define_method_id1, rb_define_method_id_choose_prototype2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototype0</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 0,rb_define_method_id0, rb_define_method_id_choose_prototype1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototypem1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-1,rb_define_method_idm1,rb_define_method_id_choose_prototype0(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototypem2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-2,rb_define_method_idm2,rb_define_method_id_choose_prototypem1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id_choose_prototypem3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr(rb_f_notimplement_p(f),rb_define_method_idm3,rb_define_method_id_choose_prototypem2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_id</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>, <parameter><type><name>mid</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>arity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_id_choose_prototypem3((arity),(func))((klass),(mid),(func),(arity));</cpp:value></cpp:define>

<name>RB_METHOD_DEFINITION_DECL</name><argument_list>(<argument><expr><name>rb_define_protected_method</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal><operator>,</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>VALUE</name> <name>klass</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype15</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==15,rb_define_protected_method15,rb_define_protected_methodm3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype14</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==14,rb_define_protected_method14,rb_define_protected_method_choose_prototype15(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype13</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==13,rb_define_protected_method13,rb_define_protected_method_choose_prototype14(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype12</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==12,rb_define_protected_method12,rb_define_protected_method_choose_prototype13(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype11</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==11,rb_define_protected_method11,rb_define_protected_method_choose_prototype12(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype10</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==10,rb_define_protected_method10,rb_define_protected_method_choose_prototype11(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype9</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 9,rb_define_protected_method9, rb_define_protected_method_choose_prototype10(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype8</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 8,rb_define_protected_method8, rb_define_protected_method_choose_prototype9(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype7</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 7,rb_define_protected_method7, rb_define_protected_method_choose_prototype8(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype6</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 6,rb_define_protected_method6, rb_define_protected_method_choose_prototype7(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype5</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 5,rb_define_protected_method5, rb_define_protected_method_choose_prototype6(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 4,rb_define_protected_method4, rb_define_protected_method_choose_prototype5(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 3,rb_define_protected_method3, rb_define_protected_method_choose_prototype4(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 2,rb_define_protected_method2, rb_define_protected_method_choose_prototype3(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 1,rb_define_protected_method1, rb_define_protected_method_choose_prototype2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototype0</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 0,rb_define_protected_method0, rb_define_protected_method_choose_prototype1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototypem1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-1,rb_define_protected_methodm1,rb_define_protected_method_choose_prototype0(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototypem2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-2,rb_define_protected_methodm2,rb_define_protected_method_choose_prototypem1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method_choose_prototypem3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr(rb_f_notimplement_p(f),rb_define_protected_methodm3,rb_define_protected_method_choose_prototypem2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_protected_method</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>, <parameter><type><name>mid</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>arity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_protected_method_choose_prototypem3((arity),(func))((klass),(mid),(func),(arity));</cpp:value></cpp:define>

<name>RB_METHOD_DEFINITION_DECL</name><argument_list>(<argument><expr><name>rb_define_private_method</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal><operator>,</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>VALUE</name> <name>klass</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype15</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==15,rb_define_private_method15,rb_define_private_methodm3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype14</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==14,rb_define_private_method14,rb_define_private_method_choose_prototype15(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype13</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==13,rb_define_private_method13,rb_define_private_method_choose_prototype14(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype12</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==12,rb_define_private_method12,rb_define_private_method_choose_prototype13(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype11</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==11,rb_define_private_method11,rb_define_private_method_choose_prototype12(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype10</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==10,rb_define_private_method10,rb_define_private_method_choose_prototype11(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype9</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 9,rb_define_private_method9, rb_define_private_method_choose_prototype10(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype8</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 8,rb_define_private_method8, rb_define_private_method_choose_prototype9(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype7</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 7,rb_define_private_method7, rb_define_private_method_choose_prototype8(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype6</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 6,rb_define_private_method6, rb_define_private_method_choose_prototype7(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype5</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 5,rb_define_private_method5, rb_define_private_method_choose_prototype6(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 4,rb_define_private_method4, rb_define_private_method_choose_prototype5(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 3,rb_define_private_method3, rb_define_private_method_choose_prototype4(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 2,rb_define_private_method2, rb_define_private_method_choose_prototype3(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 1,rb_define_private_method1, rb_define_private_method_choose_prototype2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototype0</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 0,rb_define_private_method0, rb_define_private_method_choose_prototype1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototypem1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-1,rb_define_private_methodm1,rb_define_private_method_choose_prototype0(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototypem2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-2,rb_define_private_methodm2,rb_define_private_method_choose_prototypem1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method_choose_prototypem3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr(rb_f_notimplement_p(f),rb_define_private_methodm3,rb_define_private_method_choose_prototypem2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_private_method</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>, <parameter><type><name>mid</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>arity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_private_method_choose_prototypem3((arity),(func))((klass),(mid),(func),(arity));</cpp:value></cpp:define>

<name>RB_METHOD_DEFINITION_DECL</name><argument_list>(<argument><expr><name>rb_define_singleton_method</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal><operator>,</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>VALUE</name> <name>klass</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype15</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==15,rb_define_singleton_method15,rb_define_singleton_methodm3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype14</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==14,rb_define_singleton_method14,rb_define_singleton_method_choose_prototype15(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype13</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==13,rb_define_singleton_method13,rb_define_singleton_method_choose_prototype14(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype12</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==12,rb_define_singleton_method12,rb_define_singleton_method_choose_prototype13(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype11</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==11,rb_define_singleton_method11,rb_define_singleton_method_choose_prototype12(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype10</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==10,rb_define_singleton_method10,rb_define_singleton_method_choose_prototype11(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype9</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 9,rb_define_singleton_method9, rb_define_singleton_method_choose_prototype10(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype8</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 8,rb_define_singleton_method8, rb_define_singleton_method_choose_prototype9(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype7</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 7,rb_define_singleton_method7, rb_define_singleton_method_choose_prototype8(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype6</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 6,rb_define_singleton_method6, rb_define_singleton_method_choose_prototype7(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype5</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 5,rb_define_singleton_method5, rb_define_singleton_method_choose_prototype6(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 4,rb_define_singleton_method4, rb_define_singleton_method_choose_prototype5(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 3,rb_define_singleton_method3, rb_define_singleton_method_choose_prototype4(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 2,rb_define_singleton_method2, rb_define_singleton_method_choose_prototype3(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 1,rb_define_singleton_method1, rb_define_singleton_method_choose_prototype2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototype0</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 0,rb_define_singleton_method0, rb_define_singleton_method_choose_prototype1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototypem1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-1,rb_define_singleton_methodm1,rb_define_singleton_method_choose_prototype0(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototypem2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-2,rb_define_singleton_methodm2,rb_define_singleton_method_choose_prototypem1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method_choose_prototypem3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr(rb_f_notimplement_p(f),rb_define_singleton_methodm3,rb_define_singleton_method_choose_prototypem2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_singleton_method</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>, <parameter><type><name>mid</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>arity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_singleton_method_choose_prototypem3((arity),(func))((klass),(mid),(func),(arity));</cpp:value></cpp:define>

<name>RB_METHOD_DEFINITION_DECL</name><argument_list>(<argument><expr><name>rb_define_method</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal><operator>,</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>VALUE</name> <name>klass</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype15</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==15,rb_define_method15,rb_define_methodm3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype14</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==14,rb_define_method14,rb_define_method_choose_prototype15(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype13</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==13,rb_define_method13,rb_define_method_choose_prototype14(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype12</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==12,rb_define_method12,rb_define_method_choose_prototype13(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype11</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==11,rb_define_method11,rb_define_method_choose_prototype12(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype10</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==10,rb_define_method10,rb_define_method_choose_prototype11(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype9</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 9,rb_define_method9, rb_define_method_choose_prototype10(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype8</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 8,rb_define_method8, rb_define_method_choose_prototype9(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype7</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 7,rb_define_method7, rb_define_method_choose_prototype8(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype6</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 6,rb_define_method6, rb_define_method_choose_prototype7(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype5</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 5,rb_define_method5, rb_define_method_choose_prototype6(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 4,rb_define_method4, rb_define_method_choose_prototype5(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 3,rb_define_method3, rb_define_method_choose_prototype4(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 2,rb_define_method2, rb_define_method_choose_prototype3(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 1,rb_define_method1, rb_define_method_choose_prototype2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototype0</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 0,rb_define_method0, rb_define_method_choose_prototype1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototypem1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-1,rb_define_methodm1,rb_define_method_choose_prototype0(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototypem2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-2,rb_define_methodm2,rb_define_method_choose_prototypem1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method_choose_prototypem3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr(rb_f_notimplement_p(f),rb_define_methodm3,rb_define_method_choose_prototypem2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_method</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>, <parameter><type><name>mid</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>arity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_choose_prototypem3((arity),(func))((klass),(mid),(func),(arity));</cpp:value></cpp:define>

<name>RB_METHOD_DEFINITION_DECL</name><argument_list>(<argument><expr><name>rb_define_module_function</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal><operator>,</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>VALUE</name> <name>klass</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype15</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==15,rb_define_module_function15,rb_define_module_functionm3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype14</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==14,rb_define_module_function14,rb_define_module_function_choose_prototype15(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype13</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==13,rb_define_module_function13,rb_define_module_function_choose_prototype14(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype12</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==12,rb_define_module_function12,rb_define_module_function_choose_prototype13(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype11</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==11,rb_define_module_function11,rb_define_module_function_choose_prototype12(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype10</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==10,rb_define_module_function10,rb_define_module_function_choose_prototype11(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype9</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 9,rb_define_module_function9, rb_define_module_function_choose_prototype10(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype8</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 8,rb_define_module_function8, rb_define_module_function_choose_prototype9(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype7</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 7,rb_define_module_function7, rb_define_module_function_choose_prototype8(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype6</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 6,rb_define_module_function6, rb_define_module_function_choose_prototype7(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype5</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 5,rb_define_module_function5, rb_define_module_function_choose_prototype6(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 4,rb_define_module_function4, rb_define_module_function_choose_prototype5(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 3,rb_define_module_function3, rb_define_module_function_choose_prototype4(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 2,rb_define_module_function2, rb_define_module_function_choose_prototype3(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 1,rb_define_module_function1, rb_define_module_function_choose_prototype2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototype0</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 0,rb_define_module_function0, rb_define_module_function_choose_prototype1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototypem1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-1,rb_define_module_functionm1,rb_define_module_function_choose_prototype0(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototypem2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-2,rb_define_module_functionm2,rb_define_module_function_choose_prototypem1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function_choose_prototypem3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr(rb_f_notimplement_p(f),rb_define_module_functionm3,rb_define_module_function_choose_prototypem2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_module_function</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>, <parameter><type><name>mid</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>arity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_module_function_choose_prototypem3((arity),(func))((klass),(mid),(func),(arity));</cpp:value></cpp:define>

<name>RB_METHOD_DEFINITION_DECL</name><argument_list>(<argument><expr><name>rb_define_global_function</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>,</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>)</argument_list></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype15</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==15,rb_define_global_function15,rb_define_global_functionm3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype14</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==14,rb_define_global_function14,rb_define_global_function_choose_prototype15(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype13</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==13,rb_define_global_function13,rb_define_global_function_choose_prototype14(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype12</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==12,rb_define_global_function12,rb_define_global_function_choose_prototype13(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype11</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==11,rb_define_global_function11,rb_define_global_function_choose_prototype12(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype10</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==10,rb_define_global_function10,rb_define_global_function_choose_prototype11(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype9</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 9,rb_define_global_function9, rb_define_global_function_choose_prototype10(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype8</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 8,rb_define_global_function8, rb_define_global_function_choose_prototype9(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype7</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 7,rb_define_global_function7, rb_define_global_function_choose_prototype8(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype6</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 6,rb_define_global_function6, rb_define_global_function_choose_prototype7(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype5</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 5,rb_define_global_function5, rb_define_global_function_choose_prototype6(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 4,rb_define_global_function4, rb_define_global_function_choose_prototype5(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 3,rb_define_global_function3, rb_define_global_function_choose_prototype4(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 2,rb_define_global_function2, rb_define_global_function_choose_prototype3(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 1,rb_define_global_function1, rb_define_global_function_choose_prototype2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototype0</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)== 0,rb_define_global_function0, rb_define_global_function_choose_prototype1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototypem1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-1,rb_define_global_functionm1,rb_define_global_function_choose_prototype0(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototypem2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr((n)==-2,rb_define_global_functionm2,rb_define_global_function_choose_prototypem1(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function_choose_prototypem3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_method_if_constexpr(rb_f_notimplement_p(f),rb_define_global_functionm3,rb_define_global_function_choose_prototypem2(n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb_define_global_function</name><parameter_list>(<parameter><type><name>mid</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>arity</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_define_global_function_choose_prototypem3((arity),(func))((mid),(func),(arity));</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_DEVEL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>RUBY_DEVEL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>RB_METHOD_DEFINITION_DECL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_METHOD_FUNC</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(func)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUBY_METHOD_FUNC</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((VALUE (*)(ANYARGS))(func))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

{ 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

} 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
