<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ccan\check_type\check_type.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TYPEOF</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_type</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((typeof(expr) *)0 != (type *)0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_types_match</name><parameter_list>(<parameter><type><name>expr1</name></type></parameter>, <parameter><type><name>expr2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((typeof(expr1) *)0 != (typeof(expr2) *)0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ccan/build_assert/build_assert.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_type</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BUILD_ASSERT_OR_ZERO(sizeof(expr) == sizeof(type))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_types_match</name><parameter_list>(<parameter><type><name>expr1</name></type></parameter>, <parameter><type><name>expr2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BUILD_ASSERT_OR_ZERO(sizeof(expr1) == sizeof(expr2))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
