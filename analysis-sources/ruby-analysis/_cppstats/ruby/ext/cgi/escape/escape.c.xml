<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\cgi\escape\escape.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>

<function_decl><type><name>RUBY_EXTERN</name> <name>unsigned</name> <name>long</name></type> <name>ruby_scan_digits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>retlen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>char</name></type> <name><name>ruby_hexdigits</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RUBY_EXTERN</name> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>ruby_digit36_to_number_table</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lower_hexdigits</name></cpp:macro> <cpp:value>(ruby_hexdigits+0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>upper_hexdigits</name></cpp:macro> <cpp:value>(ruby_hexdigits+16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>char_to_number</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_digit36_to_number_table[(unsigned char)(c)]</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_cCGI</name></decl>, <decl><type ref="prev"/><name>rb_mUtil</name></decl>, <decl><type ref="prev"/><name>rb_mEscape</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_accept_charset</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTML_ESCAPE_MAX_LEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>HTML_ESCAPE_MAX_LEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>html_escape_table</name><index>[<expr><name>UCHAR_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTML_ESCAPE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[c] = {rb_strlen_lit(str), str}</cpp:value></cpp:define>

<expr><call><name>HTML_ESCAPE</name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="string">"&amp;#39;"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTML_ESCAPE</name><argument_list>(<argument><expr><literal type="char">'&amp;'</literal></expr></argument>, <argument><expr><literal type="string">"&amp;amp;"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTML_ESCAPE</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="string">"&amp;quot;"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTML_ESCAPE</name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><literal type="string">"&amp;lt;"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HTML_ESCAPE</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><literal type="string">"&amp;gt;"</literal></expr></argument>)</argument_list></call></expr>,

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HTML_ESCAPE</name></cpp:undef>

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>preserve_original_state</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>orig</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_enc_associate</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>optimized_escape_html</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>vbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>ALLOCV_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>HTML_ESCAPE_MAX_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cstr</name> <init>= <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>cstr</name> <operator>+</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cstr</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>cstr</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name> <init>= <expr><name><name>html_escape_table</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>html_escape_table</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>VALUE</name></type> <name>escaped</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>dest</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dest</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preserve_original_state</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>escaped</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>escaped</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>optimized_unescape_html</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<enum>enum <block>{<decl><name>UNICODE_MAX</name> <init>= <expr><literal type="number">0x10ffff</literal></expr></init></decl>}</block>;</enum>

<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>rb_enc_get</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>charlimit</name> <init>= <expr><operator>(</operator><ternary><condition><expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>rb_enc_name</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>UNICODE_MAX</name></expr> </then><else>:

<expr><ternary><condition><expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>rb_enc_name</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ISO-8859-1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">256</literal></expr> </then><else>:

<expr><literal type="number">128</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>beg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>, <decl><type ref="prev"/><name>plen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overflow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>dest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cstr</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>beg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(len - i &gt;= (int)rb_strlen_lit(s) &amp;&amp; memcmp(&amp;cstr[i], s, rb_strlen_lit(s)) == 0 &amp;&amp; (i += rb_strlen_lit(s) - 1, 1))</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MATCH</name><argument_list>(<argument><expr><literal type="string">"pos;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>MATCH</name><argument_list>(<argument><expr><literal type="string">"mp;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&amp;'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MATCH</name><argument_list>(<argument><expr><literal type="string">"uot;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MATCH</name><argument_list>(<argument><expr><literal type="string">"t;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MATCH</name><argument_list>(<argument><expr><literal type="string">"t;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'&lt;'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'#'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>-</operator> <operator>++</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>ruby_scan_digits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>clen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>len</name> <operator>-</operator> <operator>++</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>ISXDIGIT</name><argument_list>(<argument><expr><name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>ruby_scan_digits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>clen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>overflow</name> <operator>||</operator> <name>cc</name> <operator>&gt;=</operator> <name>charlimit</name> <operator>||</operator> <name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>rb_str_buf_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>cstr</name> <operator>+</operator> <name>beg</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>charlimit</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>rb_enc_mbcput</name><argument_list>(<argument><expr><operator>(</operator><name>OnigCodePoint</name><operator>)</operator><name>cc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

<default>default:</default>

<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>rb_str_buf_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>cstr</name> <operator>+</operator> <name>beg</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>cstr</name> <operator>+</operator> <name>beg</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preserve_original_state</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dest</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type>

<name>url_unreserved_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'g'</literal></expr>:</case> <case>case <expr><literal type="char">'h'</literal></expr>:</case> <case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><literal type="char">'j'</literal></expr>:</case>

<case>case <expr><literal type="char">'k'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'m'</literal></expr>:</case> <case>case <expr><literal type="char">'n'</literal></expr>:</case> <case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><literal type="char">'p'</literal></expr>:</case> <case>case <expr><literal type="char">'q'</literal></expr>:</case> <case>case <expr><literal type="char">'r'</literal></expr>:</case> <case>case <expr><literal type="char">'s'</literal></expr>:</case> <case>case <expr><literal type="char">'t'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> <case>case <expr><literal type="char">'v'</literal></expr>:</case> <case>case <expr><literal type="char">'w'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case> <case>case <expr><literal type="char">'y'</literal></expr>:</case> <case>case <expr><literal type="char">'z'</literal></expr>:</case>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="char">'F'</literal></expr>:</case> <case>case <expr><literal type="char">'G'</literal></expr>:</case> <case>case <expr><literal type="char">'H'</literal></expr>:</case> <case>case <expr><literal type="char">'I'</literal></expr>:</case> <case>case <expr><literal type="char">'J'</literal></expr>:</case>

<case>case <expr><literal type="char">'K'</literal></expr>:</case> <case>case <expr><literal type="char">'L'</literal></expr>:</case> <case>case <expr><literal type="char">'M'</literal></expr>:</case> <case>case <expr><literal type="char">'N'</literal></expr>:</case> <case>case <expr><literal type="char">'O'</literal></expr>:</case> <case>case <expr><literal type="char">'P'</literal></expr>:</case> <case>case <expr><literal type="char">'Q'</literal></expr>:</case> <case>case <expr><literal type="char">'R'</literal></expr>:</case> <case>case <expr><literal type="char">'S'</literal></expr>:</case> <case>case <expr><literal type="char">'T'</literal></expr>:</case>

<case>case <expr><literal type="char">'U'</literal></expr>:</case> <case>case <expr><literal type="char">'V'</literal></expr>:</case> <case>case <expr><literal type="char">'W'</literal></expr>:</case> <case>case <expr><literal type="char">'X'</literal></expr>:</case> <case>case <expr><literal type="char">'Y'</literal></expr>:</case> <case>case <expr><literal type="char">'Z'</literal></expr>:</case>

<case>case <expr><literal type="char">'-'</literal></expr>:</case> <case>case <expr><literal type="char">'.'</literal></expr>:</case> <case>case <expr><literal type="char">'_'</literal></expr>:</case> <case>case <expr><literal type="char">'~'</literal></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>optimized_escape</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>beg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>dest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">'%'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cstr</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>url_unreserved_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>rb_str_buf_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>cstr</name> <operator>+</operator> <name>beg</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat_cstr</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>upper_hexdigits</name><index>[<expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>upper_hexdigits</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>cstr</name> <operator>+</operator> <name>beg</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preserve_original_state</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dest</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>optimized_unescape</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>encoding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>beg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>dest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><call><name>rb_to_encoding</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cr</name></decl>, <decl><type ref="prev"/><name>origenc</name></decl>, <decl><type ref="prev"/><name>encidx</name> <init>= <expr><call><name>rb_enc_to_index</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cstr</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name> <init>= <expr><name><name>cstr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISXDIGIT</name><argument_list>(<argument><expr><name><name>cstr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISXDIGIT</name><argument_list>(<argument><expr><name><name>cstr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>char_to_number</name><argument_list>(<argument><expr><name><name>cstr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>

<operator>|</operator> <call><name>char_to_number</name><argument_list>(<argument><expr><name><name>cstr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>rb_str_buf_new</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>cstr</name> <operator>+</operator> <name>beg</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>beg</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>cstr</name> <operator>+</operator> <name>beg</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>preserve_original_state</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <name>ENC_CODERANGE_UNKNOWN</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>ENC_CODERANGE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>origenc</name> <operator>=</operator> <call><name>rb_enc_get_index</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>origenc</name> <operator>!=</operator> <name>encidx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_enc_associate_index</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>encidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENC_CODERANGE_CLEAN_P</name><argument_list>(<argument><expr><call><name>rb_enc_str_coderange</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_enc_associate_index</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>origenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cr</name> <operator>!=</operator> <name>ENC_CODERANGE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ENC_CODERANGE_SET</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dest</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>cgiesc_escape_html</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_enc_str_asciicompat_p</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>optimized_escape_html</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>rb_call_super</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>cgiesc_unescape_html</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_enc_str_asciicompat_p</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>optimized_unescape_html</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>rb_call_super</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>cgiesc_escape</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_enc_str_asciicompat_p</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>optimized_escape</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>rb_call_super</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>accept_charset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_cvar_get</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id_accept_charset</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>cgiesc_unescape</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><operator>(</operator><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>, <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_enc_str_asciicompat_p</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>enc</name> <init>= <expr><call><name>accept_charset</name><argument_list>(<argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>optimized_unescape</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>rb_call_super</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_escape</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>id_accept_charset</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"@@accept_charset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitVM</name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>InitVM_escape</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>rb_cCGI</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"CGI"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_mEscape</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>rb_cCGI</name></expr></argument>, <argument><expr><literal type="string">"Escape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_mUtil</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>rb_cCGI</name></expr></argument>, <argument><expr><literal type="string">"Util"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEscape</name></expr></argument>, <argument><expr><literal type="string">"escapeHTML"</literal></expr></argument>, <argument><expr><name>cgiesc_escape_html</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEscape</name></expr></argument>, <argument><expr><literal type="string">"unescapeHTML"</literal></expr></argument>, <argument><expr><name>cgiesc_unescape_html</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEscape</name></expr></argument>, <argument><expr><literal type="string">"escape"</literal></expr></argument>, <argument><expr><name>cgiesc_escape</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_mEscape</name></expr></argument>, <argument><expr><literal type="string">"unescape"</literal></expr></argument>, <argument><expr><name>cgiesc_unescape</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_prepend_module</name><argument_list>(<argument><expr><name>rb_mUtil</name></expr></argument>, <argument><expr><name>rb_mEscape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_extend_object</name><argument_list>(<argument><expr><name>rb_cCGI</name></expr></argument>, <argument><expr><name>rb_mEscape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
