<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\psych\yaml\reader.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yaml_private.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_set_reader_error</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_update_raw_buffer</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_determine_encoding</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_parser_update_buffer</name><argument_list>(<argument>yaml_parser_t *parser</argument>, <argument>size_t length</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_set_reader_error</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_READER_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem</name></name> <operator>=</operator> <name>problem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem_value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOM_UTF8</name></cpp:macro> <cpp:value>"\xef\xbb\xbf"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOM_UTF16LE</name></cpp:macro> <cpp:value>"\xff\xfe"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOM_UTF16BE</name></cpp:macro> <cpp:value>"\xfe\xff"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_determine_encoding</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>eof</name></name>

<operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_update_raw_buffer</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>&gt;=</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name></expr></argument>, <argument><expr><name>BOM_UTF16LE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>YAML_UTF16LE_ENCODING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>&gt;=</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name></expr></argument>, <argument><expr><name>BOM_UTF16BE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>YAML_UTF16BE_ENCODING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>&gt;=</operator> <literal type="number">3</literal>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name></expr></argument>, <argument><expr><name>BOM_UTF8</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>YAML_UTF8_ENCODING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>YAML_UTF8_ENCODING</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_update_raw_buffer</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name>

<operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>start</name></name> <operator>&lt;</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name>

<operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>&lt;</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>-=</operator>

<name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>parser</name><operator>-&gt;</operator><name>read_handler</name></name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>read_handler_data</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size_read</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"input error"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>+=</operator> <name>size_read</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_read</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_parser_update_buffer</name><argument_list>(<argument>yaml_parser_t *parser</argument>, <argument>size_t length</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>read_handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>unread</name></name> <operator>&gt;=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_determine_encoding</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name> <operator>&lt;</operator> <name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name>

<operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name> <operator>&lt;</operator> <name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>unread</name></name> <operator>&lt;</operator> <name>length</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_update_raw_buffer</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>!=</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>value2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incomplete</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>raw_unread</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>last</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>YAML_UTF8_ENCODING</name></expr>:</case>

<expr_stmt><expr><name>octet</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"invalid leading UTF-8 octet"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>octet</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>raw_unread</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"incomplete UTF-8 octet sequence"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>incomplete</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr> ?</condition><then> <expr><name>octet</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>octet</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"invalid trailing UTF-8 octet"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>octet</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>width</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>width</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&gt;=</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>width</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&gt;=</operator> <literal type="number">0x800</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>width</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"invalid length of a UTF-8 sequence"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">0xD800</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">0xDFFF</literal><operator>)</operator> <operator>||</operator> <name>value</name> <operator>&gt;</operator> <literal type="number">0x10FFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"invalid Unicode character"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>YAML_UTF16LE_ENCODING</name></expr>:</case>

<case>case <expr><name>YAML_UTF16BE_ENCODING</name></expr>:</case>

<expr_stmt><expr><name>low</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>YAML_UTF16LE_ENCODING</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name> <operator>==</operator> <name>YAML_UTF16LE_ENCODING</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>raw_unread</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"incomplete UTF-16 character"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>incomplete</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name><index>[<expr><name>low</name></expr>]</index></name>

<operator>+</operator> <operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name><index>[<expr><name>high</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xFC00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xDC00</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"unexpected low surrogate area"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xFC00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xD800</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>raw_unread</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"incomplete UTF-16 surrogate pair"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>incomplete</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value2</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name><index>[<expr><name>low</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name><index>[<expr><name>high</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value2</name> <operator>&amp;</operator> <literal type="number">0xFC00</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xDC00</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"expected low surrogate area"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0x10000</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>value2</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>incomplete</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>value</name> <operator>==</operator> <literal type="number">0x09</literal> <operator>||</operator> <name>value</name> <operator>==</operator> <literal type="number">0x0A</literal> <operator>||</operator> <name>value</name> <operator>==</operator> <literal type="number">0x0D</literal>

<operator>||</operator> <operator>(</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">0x7E</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>value</name> <operator>==</operator> <literal type="number">0x85</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">0xA0</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">0xD7FF</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">0xE000</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">0xFFFD</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">0x10FFFF</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"control characters are not allowed"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>raw_buffer</name><operator>.</operator><name>pointer</name></name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0x7FF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0xC0</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0xE0</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0xF0</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>unread</name></name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>last</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>unread</name></name> <operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name>MAX_FILE_SIZE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_reader_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"input is too long"</literal></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

</unit>
