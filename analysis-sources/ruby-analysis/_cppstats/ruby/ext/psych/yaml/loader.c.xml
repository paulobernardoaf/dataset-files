<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\psych\yaml\loader.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yaml_private.h"</cpp:file></cpp:include>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_parser_load</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>, <argument><expr><name>yaml_document_t</name> <operator>*</operator><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_set_composer_error</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>problem_mark</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_set_composer_error_context</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>context_mark</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>problem_mark</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_register_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>

<name>yaml_parser_delete_aliases</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_document</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_node</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_alias</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_sequence</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_mapping</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_parser_load</name><argument_list>(<argument>yaml_parser_t *parser</argument>, <argument>yaml_document_t *document</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_document_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>yaml_node_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>stream_start_produced</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>YAML_STREAM_START_EVENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stream_end_produced</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>YAML_STREAM_END_EVENT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>, <argument><expr><name>yaml_alias_data_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name></name> <operator>=</operator> <name>document</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_load_document</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>yaml_parser_delete_aliases</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>yaml_parser_delete_aliases</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_document_delete</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_set_composer_error</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>problem_mark</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_COMPOSER_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem</name></name> <operator>=</operator> <name>problem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem_mark</name></name> <operator>=</operator> <name>problem_mark</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_set_composer_error_context</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>context_mark</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>problem_mark</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_COMPOSER_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>context_mark</name></name> <operator>=</operator> <name>context_mark</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem</name></name> <operator>=</operator> <name>problem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem_mark</name></name> <operator>=</operator> <name>problem_mark</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>yaml_parser_delete_aliases</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>STACK_EMPTY</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>STACK_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_document</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_DOCUMENT_START_EVENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>version_directive</name></name>

<operator>=</operator> <name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>version_directive</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>start</name></name>

<operator>=</operator> <name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>tag_directives</name><operator>.</operator><name>end</name></name>

<operator>=</operator> <name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>tag_directives</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>start_implicit</name></name>

<operator>=</operator> <name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>document_start</name><operator>.</operator><name>implicit</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>start_mark</name></name> <operator>=</operator> <name><name>first_event</name><operator>-&gt;</operator><name>start_mark</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_load_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>YAML_DOCUMENT_END_EVENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>end_implicit</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>document_end</name><operator>.</operator><name>implicit</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>end_mark</name></name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>end_mark</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_node</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>first_event</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>YAML_ALIAS_EVENT</name></expr>:</case>

<return>return <expr><call><name>yaml_parser_load_alias</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>first_event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_SCALAR_EVENT</name></expr>:</case>

<return>return <expr><call><name>yaml_parser_load_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>first_event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_SEQUENCE_START_EVENT</name></expr>:</case>

<return>return <expr><call><name>yaml_parser_load_sequence</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>first_event</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>YAML_MAPPING_START_EVENT</name></expr>:</case>

<return>return <expr><call><name>yaml_parser_load_mapping</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>first_event</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_register_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_alias_data_t</name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_alias_data_t</name> <modifier>*</modifier></type><name>alias_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>anchor</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>anchor</name></name> <operator>=</operator> <name>anchor</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>mark</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start_mark</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>alias_data</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>aliases</name><operator>.</operator><name>start</name></name></expr>;</init>

<condition><expr><name>alias_data</name> <operator>!=</operator> <name><name>parser</name><operator>-&gt;</operator><name>aliases</name><operator>.</operator><name>top</name></name></expr>;</condition> <incr><expr><name>alias_data</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>alias_data</name><operator>-&gt;</operator><name>anchor</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>anchor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>yaml_parser_set_composer_error_context</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"found duplicate anchor; first occurrence"</literal></expr></argument>,

<argument><expr><name><name>alias_data</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>, <argument><expr><literal type="string">"second occurrence"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>mark</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>aliases</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_alias</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name> <init>= <expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>alias</name><operator>.</operator><name>anchor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_alias_data_t</name> <modifier>*</modifier></type><name>alias_data</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>alias_data</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>aliases</name><operator>.</operator><name>start</name></name></expr>;</init>

<condition><expr><name>alias_data</name> <operator>!=</operator> <name><name>parser</name><operator>-&gt;</operator><name>aliases</name><operator>.</operator><name>top</name></name></expr>;</condition> <incr><expr><name>alias_data</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>alias_data</name><operator>-&gt;</operator><name>anchor</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>anchor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>alias_data</name><operator>-&gt;</operator><name>index</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>yaml_parser_set_composer_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"found undefined alias"</literal></expr></argument>,

<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>tag</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_LIMIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>INT_MAX</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><name>YAML_DEFAULT_SCALAR_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SCALAR_NODE_INIT</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>value</name></name></expr></argument>,

<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>style</name></name></expr></argument>,

<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>end_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_register_anchor</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,

<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>index</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_sequence</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_node_item_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_item_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_item_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>items</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>item_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>tag</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_LIMIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>INT_MAX</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><name>YAML_DEFAULT_SEQUENCE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>yaml_node_item_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SEQUENCE_NODE_INIT</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>items</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>items</name><operator>.</operator><name>end</name></name></expr></argument>,

<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>style</name></name></expr></argument>,

<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>end_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_register_anchor</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,

<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>YAML_SEQUENCE_END_EVENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_LIMIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>sequence</name><operator>.</operator><name>items</name></name></expr></argument>,

<argument><expr><name>INT_MAX</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item_index</name> <operator>=</operator> <call><name>yaml_parser_load_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item_index</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>sequence</name><operator>.</operator><name>items</name></name></expr></argument>,

<argument><expr><name>item_index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end_mark</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>end_mark</name></name></expr>;</expr_stmt>

<return>return <expr><name>index</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_start</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_load_mapping</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>first_event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_t</name></type> <name>node</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_node_pair_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_pair_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_pair_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>pairs</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_pair_t</name></type> <name>pair</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>tag</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_LIMIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>INT_MAX</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tag</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>yaml_strdup</name><argument_list>(<argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><name>YAML_DEFAULT_MAPPING_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>yaml_node_pair_t</name><operator>*</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MAPPING_NODE_INIT</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>pairs</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>pairs</name><operator>.</operator><name>end</name></name></expr></argument>,

<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>style</name></name></expr></argument>,

<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>start_mark</name></name></expr></argument>, <argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>end_mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>top</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_register_anchor</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,

<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>YAML_MAPPING_END_EVENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STACK_LIMIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>mapping</name><operator>.</operator><name>pairs</name></name></expr></argument>,

<argument><expr><name>INT_MAX</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pair</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>yaml_parser_load_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pair</name><operator>.</operator><name>key</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pair</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>yaml_parser_load_node</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pair</name><operator>.</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><operator>.</operator><name>mapping</name><operator>.</operator><name>pairs</name></name></expr></argument>,

<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>document</name><operator>-&gt;</operator><name>nodes</name><operator>.</operator><name>start</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end_mark</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>end_mark</name></name></expr>;</expr_stmt>

<return>return <expr><name>index</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name><name>first_event</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>mapping_start</name><operator>.</operator><name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
