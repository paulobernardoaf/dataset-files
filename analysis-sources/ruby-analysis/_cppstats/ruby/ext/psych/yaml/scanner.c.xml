<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\psych\yaml\scanner.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yaml_private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE</name><parameter_list>(<parameter><type><name>parser</name></type></parameter>,<parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(parser-&gt;unread &gt;= (length) ? 1 : yaml_parser_update_buffer(parser, (length)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP</name><parameter_list>(<parameter><type><name>parser</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(parser-&gt;mark.index ++, parser-&gt;mark.column ++, parser-&gt;unread --, parser-&gt;buffer.pointer += WIDTH(parser-&gt;buffer))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_LINE</name><parameter_list>(<parameter><type><name>parser</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(IS_CRLF(parser-&gt;buffer) ? (parser-&gt;mark.index += 2, parser-&gt;mark.column = 0, parser-&gt;mark.line ++, parser-&gt;unread -= 2, parser-&gt;buffer.pointer += 2) : IS_BREAK(parser-&gt;buffer) ? (parser-&gt;mark.index ++, parser-&gt;mark.column = 0, parser-&gt;mark.line ++, parser-&gt;unread --, parser-&gt;buffer.pointer += WIDTH(parser-&gt;buffer)) : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name><parameter_list>(<parameter><type><name>parser</name></type></parameter>,<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(STRING_EXTEND(parser,string) ? (COPY(string,parser-&gt;buffer), parser-&gt;mark.index ++, parser-&gt;mark.column ++, parser-&gt;unread --, 1) : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_LINE</name><parameter_list>(<parameter><type><name>parser</name></type></parameter>,<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(STRING_EXTEND(parser,string) ? (((CHECK_AT(parser-&gt;buffer,'\r',0) &amp;&amp; CHECK_AT(parser-&gt;buffer,'\n',1)) ? (*((string).pointer++) = (yaml_char_t) '\n', parser-&gt;buffer.pointer += 2, parser-&gt;mark.index += 2, parser-&gt;mark.column = 0, parser-&gt;mark.line ++, parser-&gt;unread -= 2) : (CHECK_AT(parser-&gt;buffer,'\r',0) || CHECK_AT(parser-&gt;buffer,'\n',0)) ? (*((string).pointer++) = (yaml_char_t) '\n', parser-&gt;buffer.pointer ++, parser-&gt;mark.index ++, parser-&gt;mark.column = 0, parser-&gt;mark.line ++, parser-&gt;unread --) : (CHECK_AT(parser-&gt;buffer,'\xC2',0) &amp;&amp; CHECK_AT(parser-&gt;buffer,'\x85',1)) ? (*((string).pointer++) = (yaml_char_t) '\n', parser-&gt;buffer.pointer += 2, parser-&gt;mark.index ++, parser-&gt;mark.column = 0, parser-&gt;mark.line ++, parser-&gt;unread --) : (CHECK_AT(parser-&gt;buffer,'\xE2',0) &amp;&amp; CHECK_AT(parser-&gt;buffer,'\x80',1) &amp;&amp; (CHECK_AT(parser-&gt;buffer,'\xA8',2) || CHECK_AT(parser-&gt;buffer,'\xA9',2))) ? (*((string).pointer++) = *(parser-&gt;buffer.pointer++), *((string).pointer++) = *(parser-&gt;buffer.pointer++), *((string).pointer++) = *(parser-&gt;buffer.pointer++), parser-&gt;mark.index ++, parser-&gt;mark.column = 0, parser-&gt;mark.line ++, parser-&gt;unread --) : 0), 1) : 0)</cpp:value></cpp:define>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_parser_scan</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>, <argument><expr><name>yaml_token_t</name> <operator>*</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_set_scanner_error</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>context_mark</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_parser_fetch_more_tokens</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_next_token</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_stale_simple_keys</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_save_simple_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_remove_simple_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_increase_flow_level</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_decrease_flow_level</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_roll_indent</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>column</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>mark</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_unroll_indent</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>column</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_stream_start</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_stream_end</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_directive</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_document_indicator</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_flow_collection_start</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_flow_collection_end</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_flow_entry</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_block_entry</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_tag</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_block_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_flow_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>single</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_plain_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_to_next_token</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_directive</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_directive_name</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_version_directive_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>major</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_version_directive_number</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>number</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_tag_directive_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>mark</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>,

<parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_tag</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_tag_handle</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>directive</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_tag_uri</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>directive</name></decl></parameter>,

<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_uri_escapes</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>directive</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_string_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_block_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>literal</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_block_scalar_breaks</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>indent</name></decl></parameter>, <parameter><decl><type><name>yaml_string_t</name> <modifier>*</modifier></type><name>breaks</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name> <modifier>*</modifier></type><name>end_mark</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_flow_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>single</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_plain_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_parser_scan</name><argument_list>(<argument>yaml_parser_t *parser</argument>, <argument>yaml_token_t *token</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_token_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>stream_end_produced</name></name> <operator>||</operator> <name><name>parser</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>token_available</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_fetch_more_tokens</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>token</name> <operator>=</operator> <call><name>DEQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>token_available</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens_parsed</name></name> <operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>YAML_STREAM_END_TOKEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stream_end_produced</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_set_scanner_error</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>context_mark</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_SCANNER_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>context_mark</name></name> <operator>=</operator> <name>context_mark</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem</name></name> <operator>=</operator> <name>problem</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>problem_mark</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_parser_fetch_more_tokens</name><argument_list>(<argument>yaml_parser_t *parser</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>need_more_tokens</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>need_more_tokens</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>head</name></name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>tail</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>need_more_tokens</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_simple_key_t</name> <modifier>*</modifier></type><name>simple_key</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_stale_simple_keys</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>simple_key</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name><operator>.</operator><name>start</name></name></expr>;</init>

<condition><expr><name>simple_key</name> <operator>!=</operator> <name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name><operator>.</operator><name>top</name></name></expr>;</condition> <incr><expr><name>simple_key</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>simple_key</name><operator>-&gt;</operator><name>possible</name></name>

<operator>&amp;&amp;</operator> <name><name>simple_key</name><operator>-&gt;</operator><name>token_number</name></name> <operator>==</operator> <name><name>parser</name><operator>-&gt;</operator><name>tokens_parsed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>need_more_tokens</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_more_tokens</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_fetch_next_token</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>token_available</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_next_token</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>stream_start_produced</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_stream_start</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_to_next_token</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_stale_simple_keys</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_unroll_indent</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_Z</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_stream_end</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_directive</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_document_indicator</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name>YAML_DOCUMENT_START_TOKEN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_document_indicator</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name>YAML_DOCUMENT_END_TOKEN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_flow_collection_start</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name>YAML_FLOW_SEQUENCE_START_TOKEN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_flow_collection_start</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name>YAML_FLOW_MAPPING_START_TOKEN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_flow_collection_end</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name>YAML_FLOW_SEQUENCE_END_TOKEN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_flow_collection_end</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name>YAML_FLOW_MAPPING_END_TOKEN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_flow_entry</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_block_entry</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>||</operator> <call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>||</operator> <call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_anchor</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>YAML_ALIAS_TOKEN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_anchor</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>YAML_ANCHOR_TOKEN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_tag</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_block_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_block_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_flow_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_flow_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>IS_BLANKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_BLANK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>yaml_parser_fetch_plain_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"while scanning for the next token"</literal></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>,

<argument><expr><literal type="string">"found character that cannot start any token"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_stale_simple_keys</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_simple_key_t</name> <modifier>*</modifier></type><name>simple_key</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>simple_key</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name><operator>.</operator><name>start</name></name></expr>;</init>

<condition><expr><name>simple_key</name> <operator>!=</operator> <name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name><operator>.</operator><name>top</name></name></expr>;</condition> <incr><expr><name>simple_key</name> <operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>simple_key</name><operator>-&gt;</operator><name>possible</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>simple_key</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>line</name></name> <operator>&lt;</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>line</name></name>

<operator>||</operator> <name><name>simple_key</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>index</name></name><operator>+</operator><literal type="number">1024</literal> <operator>&lt;</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>index</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>simple_key</name><operator>-&gt;</operator><name>required</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"while scanning a simple key"</literal></expr></argument>, <argument><expr><name><name>simple_key</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>,

<argument><expr><literal type="string">"could not find expected ':'"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>simple_key</name><operator>-&gt;</operator><name>possible</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_save_simple_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>required</name> <init>= <expr><operator>(</operator><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name>

<operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>indent</name></name> <operator>==</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_simple_key_t</name></type> <name>simple_key</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>simple_key</name><operator>.</operator><name>possible</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>simple_key</name><operator>.</operator><name>required</name></name> <operator>=</operator> <name>required</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>simple_key</name><operator>.</operator><name>token_number</name></name> <operator>=</operator>

<name><name>parser</name><operator>-&gt;</operator><name>tokens_parsed</name></name> <operator>+</operator> <operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>tail</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>tokens</name><operator>.</operator><name>head</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>simple_key</name><operator>.</operator><name>mark</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_remove_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name><operator>.</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>simple_key</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_remove_simple_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_simple_key_t</name> <modifier>*</modifier></type><name>simple_key</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name><operator>.</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>simple_key</name><operator>-&gt;</operator><name>possible</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>simple_key</name><operator>-&gt;</operator><name>required</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><literal type="string">"while scanning a simple key"</literal></expr></argument>, <argument><expr><name><name>simple_key</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>,

<argument><expr><literal type="string">"could not find expected ':'"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>simple_key</name><operator>-&gt;</operator><name>possible</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_increase_flow_level</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_simple_key_t</name></type> <name>empty_simple_key</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name></name></expr></argument>, <argument><expr><name>empty_simple_key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_MEMORY_ERROR</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_decrease_flow_level</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_roll_indent</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>column</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>mark</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>indent</name></name> <operator>&lt;</operator> <name>column</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>indent</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>column</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_MEMORY_ERROR</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>column</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>, <argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>number</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QUEUE_INSERT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>number</name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>tokens_parsed</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_unroll_indent</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>column</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>indent</name></name> <operator>&gt;</operator> <name>column</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>YAML_BLOCK_END_TOKEN</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <call><name>POP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>indents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_stream_start</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_simple_key_t</name></type> <name>simple_key</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>indent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PUSH</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name></name></expr></argument>, <argument><expr><name>simple_key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>stream_start_produced</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STREAM_START_TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>,

<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_stream_end</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>line</name></name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_unroll_indent</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_remove_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STREAM_END_TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_directive</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_unroll_indent</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_remove_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_directive</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_token_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_document_indicator</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_unroll_indent</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_remove_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_flow_collection_start</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_save_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_increase_flow_level</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_flow_collection_end</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_remove_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_decrease_flow_level</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_flow_entry</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_remove_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>YAML_FLOW_ENTRY_TOKEN</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_block_entry</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>,

<argument><expr><literal type="string">"block sequence entries are not allowed in this context"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_roll_indent</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>YAML_BLOCK_SEQUENCE_START_TOKEN</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_remove_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>YAML_BLOCK_ENTRY_TOKEN</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_key</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>,

<argument><expr><literal type="string">"mapping keys are not allowed in this context"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_roll_indent</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>YAML_BLOCK_MAPPING_START_TOKEN</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_remove_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>YAML_KEY_TOKEN</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_simple_key_t</name> <modifier>*</modifier></type><name>simple_key</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>simple_keys</name><operator>.</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>simple_key</name><operator>-&gt;</operator><name>possible</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>YAML_KEY_TOKEN</name></expr></argument>, <argument><expr><name><name>simple_key</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>, <argument><expr><name><name>simple_key</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>QUEUE_INSERT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>,

<argument><expr><name><name>simple_key</name><operator>-&gt;</operator><name>token_number</name></name> <operator>-</operator> <name><name>parser</name><operator>-&gt;</operator><name>tokens_parsed</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_roll_indent</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>simple_key</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name></expr></argument>,

<argument><expr><name><name>simple_key</name><operator>-&gt;</operator><name>token_number</name></name></expr></argument>,

<argument><expr><name>YAML_BLOCK_MAPPING_START_TOKEN</name></expr></argument>, <argument><expr><name><name>simple_key</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>simple_key</name><operator>-&gt;</operator><name>possible</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>,

<argument><expr><literal type="string">"mapping values are not allowed in this context"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_roll_indent</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>YAML_BLOCK_MAPPING_START_TOKEN</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TOKEN_INIT</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>YAML_VALUE_TOKEN</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_save_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_anchor</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_token_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_tag</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_save_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_tag</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_token_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_block_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>literal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_remove_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_block_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><name>literal</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_token_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_flow_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>single</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_save_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_flow_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><name>single</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_token_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_fetch_plain_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_token_t</name></type> <name>token</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_save_simple_key</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_plain_scalar</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENQUEUE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_token_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_to_next_token</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IS_BOM</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>||</operator> <operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>IS_BREAKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_BREAK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SKIP_LINE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>yaml_parser_scan_directive</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_directive_name</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"YAML"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_version_directive_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VERSION_DIRECTIVE_TOKEN_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>token</name></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"TAG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_tag_directive_value</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAG_DIRECTIVE_TOKEN_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>token</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a directive"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found unknown directive name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>IS_BREAKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_BREAKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a directive"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected comment or line break"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_BREAK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SKIP_LINE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_directive_name</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_ALPHA</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>string</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>string</name><operator>.</operator><name>pointer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a directive"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"could not find expected directive name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_BLANKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a directive"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found unexpected non-alphabetical character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_version_directive_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>major</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_version_directive_number</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>major</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a %YAML directive"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected digit or '.' character"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_version_directive_number</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NUMBER_LENGTH</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_version_directive_number</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>number</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_DIGIT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>length</name> <operator>&gt;</operator> <name>MAX_NUMBER_LENGTH</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a %YAML directive"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found extremely long version number"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>value</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <call><name>AS_DIGIT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a %YAML directive"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected version number"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>number</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_tag_directive_value</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>handle_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>prefix_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_tag_handle</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle_value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a %TAG directive"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected whitespace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_tag_uri</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix_value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_BLANKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a %TAG directive"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected whitespace or line break"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <name>handle_value</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>prefix</name> <operator>=</operator> <name>prefix_value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>handle_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>prefix_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_anchor</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>,

<parameter><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_ALPHA</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>length</name> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>IS_BLANKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'`'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>YAML_ANCHOR_TOKEN</name></expr> ?</condition><then>

<expr><literal type="string">"while scanning an anchor"</literal></expr> </then><else>: <expr><literal type="string">"while scanning an alias"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>,

<argument><expr><literal type="string">"did not find expected alphabetic or numeric character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>YAML_ANCHOR_TOKEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ANCHOR_TOKEN_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>token</name></expr></argument>, <argument><expr><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ALIAS_TOKEN_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>token</name></expr></argument>, <argument><expr><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_tag</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>suffix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>, <decl><type ref="prev"/><name>end_mark</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>YAML_MALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_tag_uri</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suffix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a tag"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find the expected '&gt;'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_tag_handle</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <name><name>handle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>handle</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>handle</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_tag_uri</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suffix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_tag_uri</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suffix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>YAML_MALLOC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>handle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>suffix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>handle</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <name>suffix</name></expr>;</expr_stmt>

<expr_stmt><expr><name>suffix</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_BLANKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a tag"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected whitespace or line break"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAG_TOKEN_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>token</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_free</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_tag_handle</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>directive</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><ternary><condition><expr><name>directive</name></expr> ?</condition><then>

<expr><literal type="string">"while scanning a tag directive"</literal></expr> </then><else>: <expr><literal type="string">"while scanning a tag"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected '!'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_ALPHA</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>directive</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <name><name>string</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while parsing a tag directive"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected '!'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_tag_uri</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>directive</name></decl></parameter>,

<parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_char_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>uri</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><ternary><condition><expr><name>head</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>head</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>string</name><operator>.</operator><name>start</name></name><operator>)</operator> <operator>&lt;=</operator> <name>length</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_string_extend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>string</name><operator>.</operator><name>pointer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>string</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>YAML_MEMORY_ERROR</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name>head</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>+=</operator> <name>length</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_ALPHA</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'~'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_EXTEND</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_uri_escapes</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><name>directive</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>length</name> <operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>length</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_EXTEND</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><ternary><condition><expr><name>directive</name></expr> ?</condition><then>

<expr><literal type="string">"while parsing a %TAG directive"</literal></expr> </then><else>: <expr><literal type="string">"while parsing a tag"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected tag URI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>uri</name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_uri_escapes</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>directive</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_string_t</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>IS_HEX_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>IS_HEX_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><ternary><condition><expr><name>directive</name></expr> ?</condition><then>

<expr><literal type="string">"while parsing a %TAG directive"</literal></expr> </then><else>: <expr><literal type="string">"while parsing a tag"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find URI escaped octet"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>octet</name> <operator>=</operator> <operator>(</operator><call><name>AS_HEX_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>AS_HEX_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>width</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>width</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><ternary><condition><expr><name>directive</name></expr> ?</condition><then>

<expr><literal type="string">"while parsing a %TAG directive"</literal></expr> </then><else>: <expr><literal type="string">"while parsing a tag"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found an incorrect leading UTF-8 octet"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>octet</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><ternary><condition><expr><name>directive</name></expr> ?</condition><then>

<expr><literal type="string">"while parsing a %TAG directive"</literal></expr> </then><else>: <expr><literal type="string">"while parsing a tag"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found an incorrect trailing UTF-8 octet"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>-&gt;</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>octet</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>width</name></expr>)</condition>;</do>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_block_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>literal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>leading_break</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>trailing_breaks</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chomping</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>increment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leading_blank</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trailing_blank</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>chomping</name> <operator>=</operator> <ternary><condition><expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_DIGIT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a block scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found an indentation indicator equal to 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>increment</name> <operator>=</operator> <call><name>AS_DIGIT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>IS_DIGIT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a block scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found an indentation indicator equal to 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>increment</name> <operator>=</operator> <call><name>AS_DIGIT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chomping</name> <operator>=</operator> <ternary><condition><expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>IS_BREAKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_BREAKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a block scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected comment or line break"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_BREAK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SKIP_LINE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>increment</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <ternary><condition><expr><name><name>parser</name><operator>-&gt;</operator><name>indent</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>parser</name><operator>-&gt;</operator><name>indent</name></name><operator>+</operator><name>increment</name></expr> </then><else>: <expr><name>increment</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_block_scalar_breaks</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>indent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trailing_breaks</name></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_mark</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>==</operator> <name>indent</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_Z</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>trailing_blank</name> <operator>=</operator> <call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>literal</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>leading_break</name><operator>.</operator><name>start</name></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>leading_blank</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>trailing_blank</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>trailing_breaks</name><operator>.</operator><name>start</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_EXTEND</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name> <operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>leading_blank</name> <operator>=</operator> <call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>IS_BREAKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ_LINE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_scan_block_scalar_breaks</name><argument_list>(<argument><expr><name>parser</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>indent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trailing_breaks</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_mark</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>chomping</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chomping</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SCALAR_TOKEN_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>token</name></expr></argument>, <argument><expr><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>-</operator><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>literal</name></expr> ?</condition><then> <expr><name>YAML_LITERAL_SCALAR_STYLE</name></expr> </then><else>: <expr><name>YAML_FOLDED_SCALAR_STYLE</name></expr></else></ternary></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_block_scalar_breaks</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>indent</name></decl></parameter>, <parameter><decl><type><name>yaml_string_t</name> <modifier>*</modifier></type><name>breaks</name></decl></parameter>,

<parameter><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl></parameter>, <parameter><decl><type><name>yaml_mark_t</name> <modifier>*</modifier></type><name>end_mark</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_indent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>!</operator><operator>*</operator><name>indent</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>&lt;</operator> <operator>*</operator><name>indent</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>&gt;</operator> <name>max_indent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_indent</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>*</operator><name>indent</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>&lt;</operator> <operator>*</operator><name>indent</name><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>IS_TAB</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a block scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found a tab character where an indentation space is expected"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_BREAK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ_LINE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><operator>*</operator><name>breaks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>indent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>indent</name> <operator>=</operator> <name>max_indent</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>indent</name> <operator>&lt;</operator> <name><name>parser</name><operator>-&gt;</operator><name>indent</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>indent</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>indent</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>indent</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>indent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_flow_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>single</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>leading_break</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>trailing_breaks</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>whitespaces</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leading_blanks</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a quoted scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found unexpected document indicator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_Z</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a quoted scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found unexpected end of stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>leading_blanks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>IS_BLANKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>single</name> <operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_EXTEND</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>single</name></expr> ?</condition><then> <expr><literal type="char">'\''</literal></expr> </then><else>: <expr><literal type="char">'"'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>single</name> <operator>&amp;&amp;</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>IS_BREAK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP_LINE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>leading_blanks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>single</name> <operator>&amp;&amp;</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>code_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_EXTEND</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>pointer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'0'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x07'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x08'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x09'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x0A'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x0B'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x0C'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x0D'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x1B'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x20'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'/'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'N'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\xC2'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x85'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'_'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\xC2'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\xA0'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\xE2'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x80'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\xA8'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'P'</literal></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\xE2'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\x80'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\xA9'</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><name>code_length</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><name>code_length</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'U'</literal></expr>:</case>

<expr_stmt><expr><name>code_length</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while parsing a quoted scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found unknown escape character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code_length</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>code_length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>code_length</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_HEX_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while parsing a quoted scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"did not find expected hexdecimal number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>AS_HEX_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&gt;=</operator> <literal type="number">0xD800</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;=</operator> <literal type="number">0xDFFF</literal><operator>)</operator> <operator>||</operator> <name>value</name> <operator>&gt;</operator> <literal type="number">0x10FFFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while parsing a quoted scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found invalid Unicode character escape code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0x7FF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0xC0</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0xE0</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0xF0</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x80</literal> <operator>+</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>code_length</name></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>single</name></expr> ?</condition><then> <expr><literal type="char">'\''</literal></expr> </then><else>: <expr><literal type="char">'"'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_BREAK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>leading_blanks</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>leading_blanks</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ_LINE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>leading_blanks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ_LINE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>leading_blanks</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>leading_break</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trailing_breaks</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_EXTEND</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SCALAR_TOKEN_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>token</name></expr></argument>, <argument><expr><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>-</operator><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>single</name></expr> ?</condition><then> <expr><name>YAML_SINGLE_QUOTED_SCALAR_STYLE</name></expr> </then><else>: <expr><name>YAML_DOUBLE_QUOTED_SCALAR_STYLE</name></expr></else></ternary></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>yaml_parser_scan_plain_scalar</name><parameter_list>(<parameter><decl><type><name>yaml_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>end_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>string</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>leading_break</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>trailing_breaks</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_string_t</name></type> <name>whitespaces</name> <init>= <expr><name>NULL_STRING</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leading_blanks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indent</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>indent</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_INIT</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>, <argument><expr><name>INITIAL_STRING_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_mark</name> <operator>=</operator> <name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>CHECK_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>IS_BLANKZ</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name>

<operator>&amp;&amp;</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a plain scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found unexpected ':'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IS_BLANKZ_AT</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>CHECK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>leading_blanks</name> <operator>||</operator> <name><name>whitespaces</name><operator>.</operator><name>start</name></name> <operator>!=</operator> <name><name>whitespaces</name><operator>.</operator><name>pointer</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>leading_blanks</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>leading_break</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>trailing_breaks</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STRING_EXTEND</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>leading_blanks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JOIN</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end_mark</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>mark</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_BREAK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_BREAK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_BLANK</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>leading_blanks</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>&lt;</operator> <name>indent</name>

<operator>&amp;&amp;</operator> <call><name>IS_TAB</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>yaml_parser_set_scanner_error</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="string">"while scanning a plain scalar"</literal></expr></argument>,

<argument><expr><name>start_mark</name></expr></argument>, <argument><expr><literal type="string">"found a tab character that violate indentation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>leading_blanks</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>leading_blanks</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ_LINE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>leading_blanks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>READ_LINE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CACHE</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parser</name><operator>-&gt;</operator><name>flow_level</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>parser</name><operator>-&gt;</operator><name>mark</name><operator>.</operator><name>column</name></name> <operator>&lt;</operator> <name>indent</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>SCALAR_TOKEN_INIT</name><argument_list>(<argument><expr><operator>*</operator><name>token</name></expr></argument>, <argument><expr><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>string</name><operator>.</operator><name>pointer</name></name><operator>-</operator><name><name>string</name><operator>.</operator><name>start</name></name></expr></argument>,

<argument><expr><name>YAML_PLAIN_SCALAR_STYLE</name></expr></argument>, <argument><expr><name>start_mark</name></expr></argument>, <argument><expr><name>end_mark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>leading_blanks</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>simple_key_allowed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>leading_break</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>trailing_breaks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_DEL</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>whitespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
