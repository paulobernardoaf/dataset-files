<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\psych\yaml\yaml.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YAML_DECLARE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_DECLARE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>YAML_DECLARE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_DECLARE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_DECLARE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_DECLARE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_get_version_string</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_get_version</name><argument_list>(<argument><expr><name>int</name> <operator>*</operator><name>major</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>minor</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>yaml_char_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>yaml_version_directive_s</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_version_directive_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>yaml_tag_directive_s</name> <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_tag_directive_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>yaml_encoding_e</name> <block>{

<decl><name>YAML_ANY_ENCODING</name></decl>,

<decl><name>YAML_UTF8_ENCODING</name></decl>,

<decl><name>YAML_UTF16LE_ENCODING</name></decl>,

<decl><name>YAML_UTF16BE_ENCODING</name></decl>

}</block></enum></type> <name>yaml_encoding_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>yaml_break_e</name> <block>{

<decl><name>YAML_ANY_BREAK</name></decl>,

<decl><name>YAML_CR_BREAK</name></decl>,

<decl><name>YAML_LN_BREAK</name></decl>,

<decl><name>YAML_CRLN_BREAK</name></decl>

}</block></enum></type> <name>yaml_break_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>yaml_error_type_e</name> <block>{

<decl><name>YAML_NO_ERROR</name></decl>,

<decl><name>YAML_MEMORY_ERROR</name></decl>,

<decl><name>YAML_READER_ERROR</name></decl>,

<decl><name>YAML_SCANNER_ERROR</name></decl>,

<decl><name>YAML_PARSER_ERROR</name></decl>,

<decl><name>YAML_COMPOSER_ERROR</name></decl>,

<decl><name>YAML_WRITER_ERROR</name></decl>,

<decl><name>YAML_EMITTER_ERROR</name></decl>

}</block></enum></type> <name>yaml_error_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>yaml_mark_s</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>column</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_mark_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>yaml_scalar_style_e</name> <block>{

<decl><name>YAML_ANY_SCALAR_STYLE</name></decl>,

<decl><name>YAML_PLAIN_SCALAR_STYLE</name></decl>,

<decl><name>YAML_SINGLE_QUOTED_SCALAR_STYLE</name></decl>,

<decl><name>YAML_DOUBLE_QUOTED_SCALAR_STYLE</name></decl>,

<decl><name>YAML_LITERAL_SCALAR_STYLE</name></decl>,

<decl><name>YAML_FOLDED_SCALAR_STYLE</name></decl>

}</block></enum></type> <name>yaml_scalar_style_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>yaml_sequence_style_e</name> <block>{

<decl><name>YAML_ANY_SEQUENCE_STYLE</name></decl>,

<decl><name>YAML_BLOCK_SEQUENCE_STYLE</name></decl>,

<decl><name>YAML_FLOW_SEQUENCE_STYLE</name></decl>

}</block></enum></type> <name>yaml_sequence_style_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>yaml_mapping_style_e</name> <block>{

<decl><name>YAML_ANY_MAPPING_STYLE</name></decl>,

<decl><name>YAML_BLOCK_MAPPING_STYLE</name></decl>,

<decl><name>YAML_FLOW_MAPPING_STYLE</name></decl>

}</block></enum></type> <name>yaml_mapping_style_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>yaml_token_type_e</name> <block>{

<decl><name>YAML_NO_TOKEN</name></decl>,

<decl><name>YAML_STREAM_START_TOKEN</name></decl>,

<decl><name>YAML_STREAM_END_TOKEN</name></decl>,

<decl><name>YAML_VERSION_DIRECTIVE_TOKEN</name></decl>,

<decl><name>YAML_TAG_DIRECTIVE_TOKEN</name></decl>,

<decl><name>YAML_DOCUMENT_START_TOKEN</name></decl>,

<decl><name>YAML_DOCUMENT_END_TOKEN</name></decl>,

<decl><name>YAML_BLOCK_SEQUENCE_START_TOKEN</name></decl>,

<decl><name>YAML_BLOCK_MAPPING_START_TOKEN</name></decl>,

<decl><name>YAML_BLOCK_END_TOKEN</name></decl>,

<decl><name>YAML_FLOW_SEQUENCE_START_TOKEN</name></decl>,

<decl><name>YAML_FLOW_SEQUENCE_END_TOKEN</name></decl>,

<decl><name>YAML_FLOW_MAPPING_START_TOKEN</name></decl>,

<decl><name>YAML_FLOW_MAPPING_END_TOKEN</name></decl>,

<decl><name>YAML_BLOCK_ENTRY_TOKEN</name></decl>,

<decl><name>YAML_FLOW_ENTRY_TOKEN</name></decl>,

<decl><name>YAML_KEY_TOKEN</name></decl>,

<decl><name>YAML_VALUE_TOKEN</name></decl>,

<decl><name>YAML_ALIAS_TOKEN</name></decl>,

<decl><name>YAML_ANCHOR_TOKEN</name></decl>,

<decl><name>YAML_TAG_TOKEN</name></decl>,

<decl><name>YAML_SCALAR_TOKEN</name></decl>

}</block></enum></type> <name>yaml_token_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>yaml_token_s</name> <block>{

<decl_stmt><decl><type><name>yaml_token_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_encoding_t</name></type> <name>encoding</name></decl>;</decl_stmt>

}</block> <decl><name>stream_start</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

}</block> <decl><name>alias</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

}</block> <decl><name>anchor</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>suffix</name></decl>;</decl_stmt>

}</block> <decl><name>tag</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_scalar_style_t</name></type> <name>style</name></decl>;</decl_stmt>

}</block> <decl><name>scalar</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>

}</block> <decl><name>version_directive</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

}</block> <decl><name>tag_directive</name></decl>;</struct>

}</block> <decl><name>data</name></decl>;</union>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>end_mark</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_token_t</name>;</typedef>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_token_delete</name><argument_list>(<argument><expr><name>yaml_token_t</name> <operator>*</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><enum>enum <name>yaml_event_type_e</name> <block>{

<decl><name>YAML_NO_EVENT</name></decl>,

<decl><name>YAML_STREAM_START_EVENT</name></decl>,

<decl><name>YAML_STREAM_END_EVENT</name></decl>,

<decl><name>YAML_DOCUMENT_START_EVENT</name></decl>,

<decl><name>YAML_DOCUMENT_END_EVENT</name></decl>,

<decl><name>YAML_ALIAS_EVENT</name></decl>,

<decl><name>YAML_SCALAR_EVENT</name></decl>,

<decl><name>YAML_SEQUENCE_START_EVENT</name></decl>,

<decl><name>YAML_SEQUENCE_END_EVENT</name></decl>,

<decl><name>YAML_MAPPING_START_EVENT</name></decl>,

<decl><name>YAML_MAPPING_END_EVENT</name></decl>

}</block></enum></type> <name>yaml_event_type_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>yaml_event_s</name> <block>{

<decl_stmt><decl><type><name>yaml_event_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_encoding_t</name></type> <name>encoding</name></decl>;</decl_stmt>

}</block> <decl><name>stream_start</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_version_directive_t</name> <modifier>*</modifier></type><name>version_directive</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

}</block> <decl><name>tag_directives</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>implicit</name></decl>;</decl_stmt>

}</block> <decl><name>document_start</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>implicit</name></decl>;</decl_stmt>

}</block> <decl><name>document_end</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name></decl>;</decl_stmt>

}</block> <decl><name>alias</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plain_implicit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quoted_implicit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_scalar_style_t</name></type> <name>style</name></decl>;</decl_stmt>

}</block> <decl><name>scalar</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>implicit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_sequence_style_t</name></type> <name>style</name></decl>;</decl_stmt>

}</block> <decl><name>sequence_start</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>implicit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mapping_style_t</name></type> <name>style</name></decl>;</decl_stmt>

}</block> <decl><name>mapping_start</name></decl>;</struct>

}</block> <decl><name>data</name></decl>;</union>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>end_mark</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_event_t</name>;</typedef>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_stream_start_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>,

<argument>yaml_encoding_t encoding</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_stream_end_event_initialize</name><argument_list>(<argument><expr><name>yaml_event_t</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_document_start_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>,

<argument>yaml_version_directive_t *version_directive</argument>,

<argument>yaml_tag_directive_t *tag_directives_start</argument>,

<argument>yaml_tag_directive_t *tag_directives_end</argument>,

<argument>int implicit</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_document_end_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>, <argument>int implicit</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_alias_event_initialize</name><argument_list>(<argument><expr><name>yaml_event_t</name> <operator>*</operator><name>event</name></expr></argument>, <argument><expr><name>yaml_char_t</name> <operator>*</operator><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_scalar_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>,

<argument>yaml_char_t *anchor</argument>, <argument>yaml_char_t *tag</argument>,

<argument>yaml_char_t *value</argument>, <argument>int length</argument>,

<argument>int plain_implicit</argument>, <argument>int quoted_implicit</argument>,

<argument>yaml_scalar_style_t style</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_sequence_start_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>,

<argument>yaml_char_t *anchor</argument>, <argument>yaml_char_t *tag</argument>, <argument>int implicit</argument>,

<argument>yaml_sequence_style_t style</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_sequence_end_event_initialize</name><argument_list>(<argument><expr><name>yaml_event_t</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_mapping_start_event_initialize</name><argument_list>(<argument>yaml_event_t *event</argument>,

<argument>yaml_char_t *anchor</argument>, <argument>yaml_char_t *tag</argument>, <argument>int implicit</argument>,

<argument>yaml_mapping_style_t style</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_mapping_end_event_initialize</name><argument_list>(<argument><expr><name>yaml_event_t</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_event_delete</name><argument_list>(<argument><expr><name>yaml_event_t</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_NULL_TAG</name></cpp:macro> <cpp:value>"tag:yaml.org,2002:null"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_BOOL_TAG</name></cpp:macro> <cpp:value>"tag:yaml.org,2002:bool"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_STR_TAG</name></cpp:macro> <cpp:value>"tag:yaml.org,2002:str"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_INT_TAG</name></cpp:macro> <cpp:value>"tag:yaml.org,2002:int"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_FLOAT_TAG</name></cpp:macro> <cpp:value>"tag:yaml.org,2002:float"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_TIMESTAMP_TAG</name></cpp:macro> <cpp:value>"tag:yaml.org,2002:timestamp"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_SEQ_TAG</name></cpp:macro> <cpp:value>"tag:yaml.org,2002:seq"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_MAP_TAG</name></cpp:macro> <cpp:value>"tag:yaml.org,2002:map"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_DEFAULT_SCALAR_TAG</name></cpp:macro> <cpp:value>YAML_STR_TAG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_DEFAULT_SEQUENCE_TAG</name></cpp:macro> <cpp:value>YAML_SEQ_TAG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YAML_DEFAULT_MAPPING_TAG</name></cpp:macro> <cpp:value>YAML_MAP_TAG</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>yaml_node_type_e</name> <block>{

<decl><name>YAML_NO_NODE</name></decl>,

<decl><name>YAML_SCALAR_NODE</name></decl>,

<decl><name>YAML_SEQUENCE_NODE</name></decl>,

<decl><name>YAML_MAPPING_NODE</name></decl>

}</block></enum></type> <name>yaml_node_type_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>yaml_node_s</name></name></type> <name>yaml_node_t</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>yaml_node_item_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>yaml_node_pair_s</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_node_pair_t</name>;</typedef>

<struct>struct <name>yaml_node_s</name> <block>{

<decl_stmt><decl><type><name>yaml_node_type_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_scalar_style_t</name></type> <name>style</name></decl>;</decl_stmt>

}</block> <decl><name>scalar</name></decl>;</struct>

<struct>struct <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_node_item_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_item_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_item_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>items</name></decl>;</struct>

<decl_stmt><decl><type><name>yaml_sequence_style_t</name></type> <name>style</name></decl>;</decl_stmt>

}</block> <decl><name>sequence</name></decl>;</struct>

<struct>struct <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_node_pair_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_pair_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_pair_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>pairs</name></decl>;</struct>

<decl_stmt><decl><type><name>yaml_mapping_style_t</name></type> <name>style</name></decl>;</decl_stmt>

}</block> <decl><name>mapping</name></decl>;</struct>

}</block> <decl><name>data</name></decl>;</union>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>end_mark</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>yaml_document_s</name> <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_node_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_node_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>nodes</name></decl>;</struct>

<decl_stmt><decl><type><name>yaml_version_directive_t</name> <modifier>*</modifier></type><name>version_directive</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

}</block> <decl><name>tag_directives</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>start_implicit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_implicit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>start_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>end_mark</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_document_t</name>;</typedef>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_document_initialize</name><argument_list>(<argument>yaml_document_t *document</argument>,

<argument>yaml_version_directive_t *version_directive</argument>,

<argument>yaml_tag_directive_t *tag_directives_start</argument>,

<argument>yaml_tag_directive_t *tag_directives_end</argument>,

<argument>int start_implicit</argument>, <argument>int end_implicit</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_document_delete</name><argument_list>(<argument><expr><name>yaml_document_t</name> <operator>*</operator><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>yaml_node_t *</argument>)</argument_list></macro>

<macro><name>yaml_document_get_node</name><argument_list>(<argument>yaml_document_t *document</argument>, <argument>int index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>yaml_node_t *</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_document_get_root_node</name><argument_list>(<argument><expr><name>yaml_document_t</name> <operator>*</operator><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_document_add_scalar</name><argument_list>(<argument>yaml_document_t *document</argument>,

<argument>yaml_char_t *tag</argument>, <argument>yaml_char_t *value</argument>, <argument>int length</argument>,

<argument>yaml_scalar_style_t style</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_document_add_sequence</name><argument_list>(<argument>yaml_document_t *document</argument>,

<argument>yaml_char_t *tag</argument>, <argument>yaml_sequence_style_t style</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_document_add_mapping</name><argument_list>(<argument>yaml_document_t *document</argument>,

<argument>yaml_char_t *tag</argument>, <argument>yaml_mapping_style_t style</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_document_append_sequence_item</name><argument_list>(<argument>yaml_document_t *document</argument>,

<argument>int sequence</argument>, <argument>int item</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<macro><name>yaml_document_append_mapping_pair</name><argument_list>(<argument>yaml_document_t *document</argument>,

<argument>int mapping</argument>, <argument>int key</argument>, <argument>int value</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> <name>yaml_read_handler_t</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size_read</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>yaml_simple_key_s</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>possible</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>required</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>token_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_simple_key_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>yaml_parser_state_e</name> <block>{

<decl><name>YAML_PARSE_STREAM_START_STATE</name></decl>,

<decl><name>YAML_PARSE_IMPLICIT_DOCUMENT_START_STATE</name></decl>,

<decl><name>YAML_PARSE_DOCUMENT_START_STATE</name></decl>,

<decl><name>YAML_PARSE_DOCUMENT_CONTENT_STATE</name></decl>,

<decl><name>YAML_PARSE_DOCUMENT_END_STATE</name></decl>,

<decl><name>YAML_PARSE_BLOCK_NODE_STATE</name></decl>,

<decl><name>YAML_PARSE_BLOCK_NODE_OR_INDENTLESS_SEQUENCE_STATE</name></decl>,

<decl><name>YAML_PARSE_FLOW_NODE_STATE</name></decl>,

<decl><name>YAML_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE</name></decl>,

<decl><name>YAML_PARSE_BLOCK_SEQUENCE_ENTRY_STATE</name></decl>,

<decl><name>YAML_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE</name></decl>,

<decl><name>YAML_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE</name></decl>,

<decl><name>YAML_PARSE_BLOCK_MAPPING_KEY_STATE</name></decl>,

<decl><name>YAML_PARSE_BLOCK_MAPPING_VALUE_STATE</name></decl>,

<decl><name>YAML_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE</name></decl>,

<decl><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_STATE</name></decl>,

<decl><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE</name></decl>,

<decl><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE</name></decl>,

<decl><name>YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE</name></decl>,

<decl><name>YAML_PARSE_FLOW_MAPPING_FIRST_KEY_STATE</name></decl>,

<decl><name>YAML_PARSE_FLOW_MAPPING_KEY_STATE</name></decl>,

<decl><name>YAML_PARSE_FLOW_MAPPING_VALUE_STATE</name></decl>,

<decl><name>YAML_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE</name></decl>,

<decl><name>YAML_PARSE_END_STATE</name></decl>

}</block></enum></type> <name>yaml_parser_state_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>yaml_alias_data_s</name> <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_alias_data_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>yaml_parser_s</name> <block>{

<decl_stmt><decl><type><name>yaml_error_type_t</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>problem_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>problem_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>problem_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>context_mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_read_handler_t</name> <modifier>*</modifier></type><name>read_handler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>read_handler_data</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

}</block> <decl><name>string</name></decl>;</struct>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

}</block> <decl><name>input</name></decl>;</union>

<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

}</block> <decl><name>buffer</name></decl>;</struct>

<decl_stmt><decl><type><name>size_t</name></type> <name>unread</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

}</block> <decl><name>raw_buffer</name></decl>;</struct>

<decl_stmt><decl><type><name>yaml_encoding_t</name></type> <name>encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name></type> <name>mark</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_start_produced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_end_produced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flow_level</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_token_t</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

}</block> <decl><name>tokens</name></decl>;</struct>

<decl_stmt><decl><type><name>size_t</name></type> <name>tokens_parsed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>token_available</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>indents</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>simple_key_allowed</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_simple_key_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_simple_key_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_simple_key_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>simple_keys</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_parser_state_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_parser_state_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_parser_state_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>states</name></decl>;</struct>

<decl_stmt><decl><type><name>yaml_parser_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_mark_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_mark_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>marks</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>tag_directives</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_alias_data_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_alias_data_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_alias_data_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>aliases</name></decl>;</struct>

<decl_stmt><decl><type><name>yaml_document_t</name> <modifier>*</modifier></type><name>document</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_parser_t</name>;</typedef>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_parser_initialize</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_parser_delete</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<macro><name>yaml_parser_set_input_string</name><argument_list>(<argument>yaml_parser_t *parser</argument>,

<argument>const unsigned char *input</argument>, <argument>size_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_parser_set_input_file</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_parser_set_input</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>,

<argument><expr><name>yaml_read_handler_t</name> <operator>*</operator><name>handler</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<macro><name>yaml_parser_set_encoding</name><argument_list>(<argument>yaml_parser_t *parser</argument>, <argument>yaml_encoding_t encoding</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_parser_scan</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>, <argument><expr><name>yaml_token_t</name> <operator>*</operator><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>, <argument><expr><name>yaml_event_t</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_parser_load</name><argument_list>(<argument><expr><name>yaml_parser_t</name> <operator>*</operator><name>parser</name></expr></argument>, <argument><expr><name>yaml_document_t</name> <operator>*</operator><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <function_decl><type><name>int</name></type> <name>yaml_write_handler_t</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><enum>enum <name>yaml_emitter_state_e</name> <block>{

<decl><name>YAML_EMIT_STREAM_START_STATE</name></decl>,

<decl><name>YAML_EMIT_FIRST_DOCUMENT_START_STATE</name></decl>,

<decl><name>YAML_EMIT_DOCUMENT_START_STATE</name></decl>,

<decl><name>YAML_EMIT_DOCUMENT_CONTENT_STATE</name></decl>,

<decl><name>YAML_EMIT_DOCUMENT_END_STATE</name></decl>,

<decl><name>YAML_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE</name></decl>,

<decl><name>YAML_EMIT_FLOW_SEQUENCE_ITEM_STATE</name></decl>,

<decl><name>YAML_EMIT_FLOW_MAPPING_FIRST_KEY_STATE</name></decl>,

<decl><name>YAML_EMIT_FLOW_MAPPING_KEY_STATE</name></decl>,

<decl><name>YAML_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE</name></decl>,

<decl><name>YAML_EMIT_FLOW_MAPPING_VALUE_STATE</name></decl>,

<decl><name>YAML_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE</name></decl>,

<decl><name>YAML_EMIT_BLOCK_SEQUENCE_ITEM_STATE</name></decl>,

<decl><name>YAML_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE</name></decl>,

<decl><name>YAML_EMIT_BLOCK_MAPPING_KEY_STATE</name></decl>,

<decl><name>YAML_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE</name></decl>,

<decl><name>YAML_EMIT_BLOCK_MAPPING_VALUE_STATE</name></decl>,

<decl><name>YAML_EMIT_END_STATE</name></decl>

}</block></enum></type> <name>yaml_emitter_state_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>yaml_emitter_s</name> <block>{

<decl_stmt><decl><type><name>yaml_error_type_t</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>problem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_write_handler_t</name> <modifier>*</modifier></type><name>write_handler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>write_handler_data</name></decl>;</decl_stmt>

<union>union <block>{

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size_written</name></decl>;</decl_stmt>

}</block> <decl><name>string</name></decl>;</struct>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

}</block> <decl><name>output</name></decl>;</union>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

}</block> <decl><name>buffer</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

}</block> <decl><name>raw_buffer</name></decl>;</struct>

<decl_stmt><decl><type><name>yaml_encoding_t</name></type> <name>encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canonical</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>best_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unicode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_break_t</name></type> <name>line_break</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_emitter_state_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_emitter_state_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_emitter_state_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>states</name></decl>;</struct>

<decl_stmt><decl><type><name>yaml_emitter_state_t</name></type> <name>state</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

}</block> <decl><name>events</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>indents</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>

}</block> <decl><name>tag_directives</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flow_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>root_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sequence_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mapping_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>simple_key_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>whitespace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indention</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>open_ended</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>anchor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>anchor_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alias</name></decl>;</decl_stmt>

}</block> <decl><name>anchor_data</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>handle_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>suffix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>suffix_length</name></decl>;</decl_stmt>

}</block> <decl><name>tag_data</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>yaml_char_t</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>multiline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flow_plain_allowed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_plain_allowed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>single_quoted_allowed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_allowed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_scalar_style_t</name></type> <name>style</name></decl>;</decl_stmt>

}</block> <decl><name>scalar_data</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>opened</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>closed</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>references</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>anchor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>serialized</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>anchors</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>last_anchor_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_document_t</name> <modifier>*</modifier></type><name>document</name></decl>;</decl_stmt>

}</block></struct></type> <name>yaml_emitter_t</name>;</typedef>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_emitter_initialize</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_emitter_delete</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<macro><name>yaml_emitter_set_output_string</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>,

<argument>unsigned char *output</argument>, <argument>size_t size</argument>, <argument>size_t *size_written</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_emitter_set_output_file</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>, <argument><expr><name>FILE</name> <operator>*</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_emitter_set_output</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>,

<argument><expr><name>yaml_write_handler_t</name> <operator>*</operator><name>handler</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<macro><name>yaml_emitter_set_encoding</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>yaml_encoding_t encoding</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<macro><name>yaml_emitter_set_canonical</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>int canonical</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<macro><name>yaml_emitter_set_indent</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>int indent</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<macro><name>yaml_emitter_set_width</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>int width</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<macro><name>yaml_emitter_set_unicode</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>int unicode</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro>

<macro><name>yaml_emitter_set_break</name><argument_list>(<argument>yaml_emitter_t *emitter</argument>, <argument>yaml_break_t line_break</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_emitter_emit</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>, <argument><expr><name>yaml_event_t</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_emitter_open</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_emitter_close</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_emitter_dump</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>, <argument><expr><name>yaml_document_t</name> <operator>*</operator><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>YAML_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>yaml_emitter_flush</name><argument_list>(<argument><expr><name>yaml_emitter_t</name> <operator>*</operator><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
