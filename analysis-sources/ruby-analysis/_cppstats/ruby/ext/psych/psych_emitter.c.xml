<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\psych\psych_emitter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psych.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RARRAY_CONST_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_CONST_PTR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(const VALUE *)RARRAY_PTR(s)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RARRAY_AREF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_AREF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RARRAY_CONST_PTR(a)[i]</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cPsychEmitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_io</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_write</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_line_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_indentation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_canonical</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit</name><parameter_list>(<parameter><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl></parameter>, <parameter><decl><type><name>yaml_event_t</name> <modifier>*</modifier></type> <name>event</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>yaml_emitter_emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>problem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>self</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>ctx</name></expr></init></decl>, <decl><type ref="prev"/><name>io</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_io</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name> <init>= <expr><call><name>rb_enc_str_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>wrote</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id_write</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>NUM2INT</name><argument_list>(<argument><expr><name>wrote</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<expr_stmt><expr><name>emitter</name> <operator>=</operator> <operator>(</operator><name>yaml_emitter_t</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_emitter_delete</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static size_t memsize(const void *ptr)

{

const yaml_emitter_t *emitter = ptr;

return 0;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>psych_emitter_type</name> <init>= <expr><block>{

<expr><literal type="string">"Psych/emitter"</literal></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>dealloc</name></expr>, <expr><literal type="number">0</literal></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yaml_emitter_initialize</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_emitter_set_unicode</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_emitter_set_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name></decl>, <decl><type ref="prev"/><name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>line_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>indent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>canonical</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line_width</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>id_line_width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>indent</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>id_indentation</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>canonical</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>id_canonical</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_emitter_set_width</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>line_width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_emitter_set_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_emitter_set_canonical</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><ternary><condition><expr><name>Qtrue</name> <operator>==</operator> <name>canonical</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_io</name></expr></argument>, <argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_emitter_set_output</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>start_stream</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>encoding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_stream_start_event_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><operator>(</operator><name>yaml_encoding_t</name><operator>)</operator><call><name>NUM2INT</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>end_stream</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_stream_end_event_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>start_document</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>imp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type> <name>head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_tag_directive_t</name> <modifier>*</modifier></type> <name>tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_version_directive_t</name></type> <name>version_directive</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>major</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>minor</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>version_directive</name><operator>.</operator><name>major</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>major</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>version_directive</name><operator>.</operator><name>minor</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type> <name>encoding</name> <init>= <expr><call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>yaml_tag_directive_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tuple</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"tag tuple must be of length 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tail</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yaml_document_start_event_initialize</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>version_directive</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>head</name></expr></argument>,

<argument><expr><name>tail</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>imp</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>head</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>end_document</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>imp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_document_end_event_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>, <argument><expr><ternary><condition><expr><name>imp</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>scalar</name><parameter_list>(

<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>anchor</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>plain</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>quoted</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>style</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>encoding</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>anchor</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yaml_scalar_event_initialize</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_char_t</name><operator>*</operator><operator>)</operator><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>plain</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>quoted</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_scalar_style_t</name><operator>)</operator><call><name>NUM2INT</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>start_sequence</name><parameter_list>(

<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>anchor</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>implicit</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>style</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type> <name>encoding</name> <init>= <expr><call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>anchor</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_sequence_start_event_initialize</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><ternary><condition><expr><name>implicit</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_sequence_style_t</name><operator>)</operator><call><name>NUM2INT</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>end_sequence</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_sequence_end_event_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>start_mapping</name><parameter_list>(

<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>anchor</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>implicit</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>style</name></decl></parameter>

)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_encoding</name> <modifier>*</modifier></type><name>encoding</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>anchor</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yaml_mapping_start_event_initialize</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><ternary><condition><expr><name>implicit</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_mapping_style_t</name><operator>)</operator><call><name>NUM2INT</name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>end_mapping</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_mapping_end_event_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>alias</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>anchor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>anchor</name> <operator>=</operator> <call><name>rb_str_export_to_enc</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><call><name>rb_utf8_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yaml_alias_event_initialize</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>,

<argument><expr><operator>(</operator><name>yaml_char_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>set_canonical</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_emitter_set_canonical</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><ternary><condition><expr><name>Qtrue</name> <operator>==</operator> <name>style</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>style</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>canonical</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>emitter</name><operator>-&gt;</operator><name>canonical</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>Qfalse</name></expr> </then><else>: <expr><name>Qtrue</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>set_indentation</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_emitter_set_indent</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>level</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>indentation</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>best_indent</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>line_width</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>emitter</name><operator>-&gt;</operator><name>best_width</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>set_line_width</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>yaml_emitter_t</name> <modifier>*</modifier></type> <name>emitter</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>yaml_emitter_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psych_emitter_type</name></expr></argument>, <argument><expr><name>emitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yaml_emitter_set_width</name><argument_list>(<argument><expr><name>emitter</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>width</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_psych_emitter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>

<decl_stmt><decl><type><name>VALUE</name></type> <name>psych</name> <init>= <expr><call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"Psych"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>handler</name> <init>= <expr><call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>psych</name></expr></argument>, <argument><expr><literal type="string">"Handler"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cPsychEmitter</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>psych</name></expr></argument>, <argument><expr><literal type="string">"Emitter"</literal></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><name>allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"start_stream"</literal></expr></argument>, <argument><expr><name>start_stream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"end_stream"</literal></expr></argument>, <argument><expr><name>end_stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"start_document"</literal></expr></argument>, <argument><expr><name>start_document</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"end_document"</literal></expr></argument>, <argument><expr><name>end_document</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"scalar"</literal></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"start_sequence"</literal></expr></argument>, <argument><expr><name>start_sequence</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"end_sequence"</literal></expr></argument>, <argument><expr><name>end_sequence</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"start_mapping"</literal></expr></argument>, <argument><expr><name>start_mapping</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"end_mapping"</literal></expr></argument>, <argument><expr><name>end_mapping</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"alias"</literal></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"canonical"</literal></expr></argument>, <argument><expr><name>canonical</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"canonical="</literal></expr></argument>, <argument><expr><name>set_canonical</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"indentation"</literal></expr></argument>, <argument><expr><name>indentation</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"indentation="</literal></expr></argument>, <argument><expr><name>set_indentation</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"line_width"</literal></expr></argument>, <argument><expr><name>line_width</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPsychEmitter</name></expr></argument>, <argument><expr><literal type="string">"line_width="</literal></expr></argument>, <argument><expr><name>set_line_width</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_io</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"io"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_write</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_line_width</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"line_width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_indentation</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"indentation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_canonical</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"canonical"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
