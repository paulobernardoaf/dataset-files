<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\socket\ifaddr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubysocket.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETIFADDRS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>LONG_LONG</name></type> <name>ifa_flags_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxIFAFLAGS</name></cpp:macro> <cpp:value>PRI_LL_PREFIX"x"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFAFLAGS2NUM</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ULL2NUM(flags)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ifa_flags_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIxIFAFLAGS</name></cpp:macro> <cpp:value>"x"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFAFLAGS2NUM</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UINT2NUM(flags)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_cSockIfaddr</name></decl>;</decl_stmt>

<typedef>typedef <type><name><name>struct</name> <name>rb_ifaddr_tag</name></name></type> <name>rb_ifaddr_t</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>rb_ifaddr_root_tag</name></name></type> <name>rb_ifaddr_root_t</name>;</typedef>

<struct>struct <name>rb_ifaddr_tag</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>ord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifaddr</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>rb_ifaddr_root_tag</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>refcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numifaddrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_ifaddr_t</name></type> <name><name>ary</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>rb_ifaddr_root_t</name> <modifier>*</modifier></type>

<name>get_root</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_ifaddr_t</name> <modifier>*</modifier></type><name>ifaddr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>rb_ifaddr_root_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ifaddr</name><index>[<expr><operator>-</operator><name><name>ifaddr</name><operator>-&gt;</operator><name>ord</name></name></expr>]</index></name> <operator>-</operator>

<call><name>offsetof</name><argument_list>(<argument><expr><name>rb_ifaddr_root_t</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ifaddr_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_ifaddr_t</name> <modifier>*</modifier></type><name>ifaddr</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_ifaddr_root_t</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>get_root</name><argument_list>(<argument><expr><name>ifaddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>refcount</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>ary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ifaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>ifaddr_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>rb_ifaddr_root_t</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_ifaddr_t</name> <modifier>*</modifier></type><name>ifaddr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ifaddr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifaddr</name><operator>-&gt;</operator><name>ord</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rb_ifaddr_root_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ifaddrs</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ifaddr_type</name> <init>= <expr><block>{

<expr><literal type="string">"socket/ifaddr"</literal></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>ifaddr_free</name></expr>, <expr><name>ifaddr_memsize</name></expr>,}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_ifaddr_t</name> <modifier>*</modifier></type>

<name>check_ifaddr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_check_typeddata</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifaddr_type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_ifaddr_t</name> <modifier>*</modifier></type>

<name>get_ifaddr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_ifaddr_t</name> <modifier>*</modifier></type><name>rifaddr</name> <init>= <expr><call><name>check_ifaddr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rifaddr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"uninitialized ifaddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rifaddr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type>

<name>get_ifaddrs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_ifaddr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ifaddr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rsock_getifaddrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>numifaddrs</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifaddrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_ifaddr_root_t</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"getifaddrs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ifaddrs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>numifaddrs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ifa</name> <operator>=</operator> <name>ifaddrs</name></expr>;</init> <condition><expr><name>ifa</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ifa</name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>numifaddrs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifaddr_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>rb_ifaddr_root_t</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>numifaddrs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rb_ifaddr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>numifaddrs</name></name> <operator>=</operator> <name>numifaddrs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ifa</name> <operator>=</operator> <name>ifaddrs</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numifaddrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>ary</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ord</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>ary</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ifaddr</name> <operator>=</operator> <name>ifa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ifa</name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>ary</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>numifaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numifaddrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifaddr_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>ary</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ifaddr_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><call><name>get_ifaddrs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IF_NAMETOINDEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ifaddr_ifindex</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><call><name>get_ifaddrs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ifindex</name> <init>= <expr><call><name>if_nametoindex</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ifindex</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid interface name: %s"</literal></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>UINT2NUM</name><argument_list>(<argument><expr><name>ifindex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifaddr_ifindex</name></cpp:macro> <cpp:value>rb_f_notimplement</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ifaddr_flags</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><call><name>get_ifaddrs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>IFAFLAGS2NUM</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ifaddr_addr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><call><name>get_ifaddrs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rsock_sockaddr_obj</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>, <argument><expr><call><name>rsock_sockaddr_len</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ifaddr_netmask</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><call><name>get_ifaddrs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_netmask</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rsock_sockaddr_obj</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_netmask</name></name></expr></argument>, <argument><expr><call><name>rsock_sockaddr_len</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_netmask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ifaddr_broadaddr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><call><name>get_ifaddrs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name> <operator>&amp;</operator> <name>IFF_BROADCAST</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_broadaddr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rsock_sockaddr_obj</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_broadaddr</name></name></expr></argument>, <argument><expr><call><name>rsock_sockaddr_len</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_broadaddr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ifaddr_dstaddr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><call><name>get_ifaddrs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name> <operator>&amp;</operator> <name>IFF_POINTOPOINT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_dstaddr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rsock_sockaddr_obj</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_dstaddr</name></name></expr></argument>, <argument><expr><call><name>rsock_sockaddr_len</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_dstaddr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_IF_DATA_IFI_VHID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ifaddr_vhid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><call><name>get_ifaddrs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><call><name>INT2FIX</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>if_data</name><operator>*</operator><operator>)</operator><name><name>ifa</name><operator>-&gt;</operator><name>ifa_data</name></name><operator>)</operator><operator>-&gt;</operator><name>ifi_vhid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ifaddr_inspect_flags</name><parameter_list>(<parameter><decl><type><name>ifa_flags_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSPECT_BIT</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (flags &amp; (bit)) { rb_str_catf(result, "%s" name, sep); flags &amp;= ~(ifa_flags_t)(bit); sep = ","; }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_UP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_UP</argument>, <argument><literal type="string">"UP"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_BROADCAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_BROADCAST</argument>, <argument><literal type="string">"BROADCAST"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_DEBUG</argument>, <argument><literal type="string">"DEBUG"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_LOOPBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_LOOPBACK</argument>, <argument><literal type="string">"LOOPBACK"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_POINTOPOINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_POINTOPOINT</argument>, <argument><literal type="string">"POINTOPOINT"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_RUNNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_RUNNING</argument>, <argument><literal type="string">"RUNNING"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_NOARP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_NOARP</argument>, <argument><literal type="string">"NOARP"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_PROMISC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_PROMISC</argument>, <argument><literal type="string">"PROMISC"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_NOTRAILERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_NOTRAILERS</argument>, <argument><literal type="string">"NOTRAILERS"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_ALLMULTI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_ALLMULTI</argument>, <argument><literal type="string">"ALLMULTI"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_SIMPLEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_SIMPLEX</argument>, <argument><literal type="string">"SIMPLEX"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_MASTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_MASTER</argument>, <argument><literal type="string">"MASTER"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_SLAVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_SLAVE</argument>, <argument><literal type="string">"SLAVE"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_MULTICAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_MULTICAST</argument>, <argument><literal type="string">"MULTICAST"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_PORTSEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_PORTSEL</argument>, <argument><literal type="string">"PORTSEL"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_AUTOMEDIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_AUTOMEDIA</argument>, <argument><literal type="string">"AUTOMEDIA"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_DYNAMIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_DYNAMIC</argument>, <argument><literal type="string">"DYNAMIC"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_LOWER_UP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_LOWER_UP</argument>, <argument><literal type="string">"LOWER_UP"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_DORMANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_DORMANT</argument>, <argument><literal type="string">"DORMANT"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IFF_ECHO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>INSPECT_BIT</name><argument_list>(<argument>IFF_ECHO</argument>, <argument><literal type="string">"ECHO"</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INSPECT_BIT</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s%#"</literal><name>PRIxIFAFLAGS</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ifaddr_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>ifa</name> <init>= <expr><call><name>get_ifaddrs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">"#&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>rb_class_name</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ifaddr_inspect_flags</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rsock_inspect_sockaddr</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>,

<argument><expr><call><name>rsock_sockaddr_len</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_netmask</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">" netmask="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rsock_inspect_sockaddr</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_netmask</name></name></expr></argument>,

<argument><expr><call><name>rsock_sockaddr_len</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_netmask</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name> <operator>&amp;</operator> <name>IFF_BROADCAST</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_broadaddr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">" broadcast="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rsock_inspect_sockaddr</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_broadaddr</name></name></expr></argument>,

<argument><expr><call><name>rsock_sockaddr_len</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_broadaddr</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name> <operator>&amp;</operator> <name>IFF_POINTOPOINT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_dstaddr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">" dstaddr="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rsock_inspect_sockaddr</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_dstaddr</name></name></expr></argument>,

<argument><expr><call><name>rsock_sockaddr_len</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_dstaddr</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETIFADDRS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>socket_s_getifaddrs</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rsock_getifaddrs</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>socket_s_getifaddrs</name></cpp:macro> <cpp:value>rb_f_notimplement</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>rsock_init_sockifaddr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETIFADDRS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rb_cSockIfaddr</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>rb_cSocket</name></expr></argument>, <argument><expr><literal type="string">"Ifaddr"</literal></expr></argument>, <argument><expr><name>rb_cData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>ifaddr_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>ifaddr_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><literal type="string">"ifindex"</literal></expr></argument>, <argument><expr><name>ifaddr_ifindex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><name>ifaddr_flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><name>ifaddr_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><literal type="string">"netmask"</literal></expr></argument>, <argument><expr><name>ifaddr_netmask</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><literal type="string">"broadaddr"</literal></expr></argument>, <argument><expr><name>ifaddr_broadaddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><literal type="string">"dstaddr"</literal></expr></argument>, <argument><expr><name>ifaddr_dstaddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_IF_DATA_IFI_VHID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cSockIfaddr</name></expr></argument>, <argument><expr><literal type="string">"vhid"</literal></expr></argument>, <argument><expr><name>ifaddr_vhid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cSocket</name></expr></argument>, <argument><expr><literal type="string">"getifaddrs"</literal></expr></argument>, <argument><expr><name>socket_s_getifaddrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
