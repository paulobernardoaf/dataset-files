<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\socket\addrinfo.h"><cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_ADDRFAMILY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_AGAIN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_BADFLAGS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_FAIL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_FAMILY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_MEMORY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_NODATA</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_NONAME</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_SERVICE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_SOCKTYPE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_SYSTEM</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_BADHINTS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_PROTOCOL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EAI_MAX</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_PASSIVE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_CANONNAME</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_NUMERICHOST</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_NUMERICSERV</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_ALL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_ADDRCONFIG</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_V4MAPPED</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_DEFAULT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NI_NOFQDN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NI_NUMERICHOST</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NI_NAMEREQD</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NI_NUMERICSERV</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NI_DGRAM</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PROTOTYPES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__P</name><parameter_list>(<parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>args</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__P</name><parameter_list>(<parameter><type><name>args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_ADDRFAMILY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_AGAIN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_BADFLAGS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_FAIL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_FAMILY</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_MEMORY</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_NODATA</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_NONAME</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_SERVICE</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_SOCKTYPE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_SYSTEM</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_BADHINTS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_PROTOCOL</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAI_MAX</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_PASSIVE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_CANONNAME</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_NUMERICHOST</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_NUMERICSERV</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HAIKU__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AI_MASK</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_MASK</name></cpp:macro> <cpp:value>(AI_PASSIVE | AI_CANONNAME | AI_NUMERICHOST | AI_NUMERICSERV)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_ALL</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_V4MAPPED_CFG</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_ADDRCONFIG</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_V4MAPPED</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI_DEFAULT</name></cpp:macro> <cpp:value>(AI_V4MAPPED_CFG | AI_ADDRCONFIG)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NI_MAXHOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_MAXHOST</name></cpp:macro> <cpp:value>1025</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_MAXSERV</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_NOFQDN</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_NUMERICHOST</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_NAMEREQD</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_NUMERICSERV</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NI_DGRAM</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_ADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>addrinfo</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>ai_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ai_family</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ai_socktype</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ai_protocol</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>ai_addrlen</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ai_canonname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>ai_addr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai_next</name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getaddrinfo</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getaddrinfo</name></cpp:macro> <cpp:value>getaddrinfo__compat</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETNAMEINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getnameinfo</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getnameinfo</name></cpp:macro> <cpp:value>getnameinfo__compat</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FREEHOSTENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>freehostent</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>freehostent</name></cpp:macro> <cpp:value>freehostent__compat</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FREEADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>freeaddrinfo</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>freeaddrinfo</name></cpp:macro> <cpp:value>freeaddrinfo__compat</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>getaddrinfo</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator>

<specifier>const</specifier> <name>char</name> <operator>*</operator><name>hostname</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>servname</name><operator>,</operator>

<specifier>const</specifier> struct <name>addrinfo</name> <operator>*</operator><name>hints</name><operator>,</operator>

struct <name>addrinfo</name> <operator>*</operator><operator>*</operator><name>res</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>getnameinfo</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator>

<specifier>const</specifier> struct <name>sockaddr</name> <operator>*</operator><name>sa</name><operator>,</operator>

<name>socklen_t</name> <name>salen</name><operator>,</operator>

<name>char</name> <operator>*</operator><name>host</name><operator>,</operator>

<name>socklen_t</name> <name>hostlen</name><operator>,</operator>

<name>char</name> <operator>*</operator><name>serv</name><operator>,</operator>

<name>socklen_t</name> <name>servlen</name><operator>,</operator>

<name>int</name> <name>flags</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>freehostent</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator>struct <name>hostent</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>freeaddrinfo</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator>struct <name>addrinfo</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GAI_STRERROR_CONST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<specifier>const</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>char</name> <modifier>*</modifier><name>gai_strerror</name></type> <name>__P</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>offsetof</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>offsetof</name><parameter_list>(<parameter><type><name>p_type</name></type></parameter>,<parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)&amp;(((p_type *)0)-&gt;field))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
