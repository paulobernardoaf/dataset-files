<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\socket\raddrinfo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rubysocket.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>LOOKUP_ORDER_HACK_INET</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LOOKUP_ORDER_HACK_INET6</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKUP_ORDERS</name></cpp:macro> <cpp:value>(sizeof(lookup_order_table) / sizeof(lookup_order_table[0]))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>lookup_order_table</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOOKUP_ORDER_HACK_INET</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>PF_INET</name></expr>, <expr><name>PF_INET6</name></expr>, <expr><name>PF_UNSPEC</name></expr>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LOOKUP_ORDER_HACK_INET6</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr><name>PF_INET6</name></expr>, <expr><name>PF_INET</name></expr>, <expr><name>PF_UNSPEC</name></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ruby_getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>tmp_hints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>af</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>PF_UNSPEC</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LOOKUP_ORDERS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>af</name> <operator>=</operator> <name><name>lookup_order_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_hints</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr>struct <name>addrinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>af</name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tmp_hints</name><operator>.</operator><name>ai_family</name></name> <operator>==</operator> <name>PF_UNSPEC</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getaddrinfo</name><parameter_list>(<parameter><type><name>node</name></type></parameter>,<parameter><type><name>serv</name></type></parameter>,<parameter><type><name>hints</name></type></parameter>,<parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_getaddrinfo((node),(serv),(hints),(res))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ruby_getaddrinfo__aix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>servname</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <operator>*</operator><name>res</name></expr>;</init> <condition><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ai_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ai_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>ai_family</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ai_addr</name><operator>-&gt;</operator><name>sa_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ai_addr</name><operator>-&gt;</operator><name>sa_len</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getaddrinfo</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getaddrinfo</name><parameter_list>(<parameter><type><name>node</name></type></parameter>,<parameter><type><name>serv</name></type></parameter>,<parameter><type><name>hints</name></type></parameter>,<parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_getaddrinfo__aix((node),(serv),(hints),(res))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ruby_getnameinfo__aix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>salen</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hostlen</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>serv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>servlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sa6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_int32_t</name> <modifier>*</modifier></type><name>a6</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sa6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a6</name> <operator>=</operator> <name><name>sa6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>u6_addr</name><operator>.</operator><name>u6_addr32</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a6</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a6</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a6</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>, <argument><expr><name>hostlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name>servlen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>sa6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>getnameinfo</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>hostlen</name></expr></argument>, <argument><expr><name>serv</name></expr></argument>, <argument><expr><name>servlen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getnameinfo</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getnameinfo</name><parameter_list>(<parameter><type><name>sa</name></type></parameter>, <parameter><type><name>salen</name></type></parameter>, <parameter><type><name>host</name></type></parameter>, <parameter><type><name>hostlen</name></type></parameter>, <parameter><type><name>serv</name></type></parameter>, <parameter><type><name>servlen</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_getnameinfo__aix((sa), (salen), (host), (hostlen), (serv), (servlen), (flags))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>str_is_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ruby_getaddrinfo__darwin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp_servname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>tmp_hints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_servname</name> <operator>=</operator> <name>servname</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_hints</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr>struct <name>addrinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nodename</name> <operator>&amp;&amp;</operator> <name>servname</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>str_is_number</name><argument_list>(<argument><expr><name>tmp_servname</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>servname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp_servname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>tmp_hints</name><operator>.</operator><name>ai_flags</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tmp_hints</name><operator>.</operator><name>ai_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>AI_NUMERICSERV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>tmp_servname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>*</operator><name>res</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>r</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>r</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <name>SOCK_DGRAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <name>SOCK_STREAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getaddrinfo</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getaddrinfo</name><parameter_list>(<parameter><type><name>node</name></type></parameter>,<parameter><type><name>serv</name></type></parameter>,<parameter><type><name>hints</name></type></parameter>,<parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ruby_getaddrinfo__darwin((node),(serv),(hints),(res))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INET_PTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>parse_numeric_port</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>portp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>u</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>portp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strspn</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><literal type="string">"0123456789"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>STRTOUL</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x10000</literal> <operator>&lt;=</operator> <name>u</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>portp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>u</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GETADDRINFO_EMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>getaddrinfo_arg</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>nogvl_getaddrinfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>getaddrinfo_arg</name></name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>hints</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EAI_SYSTEM</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>EAI_NONAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO_A</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>gai_suspend_arg</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>gaicb</name></name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>timeout</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>nogvl_gai_suspend</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gai_suspend_arg</name></name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gaicb</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>wait_reqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wait_reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>req</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gai_suspend</name><argument_list>(<argument><expr><name>wait_reqs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>numeric_getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INET_PTON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__MINGW64__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inet_pton</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_w32_inet_pton(f,s,d)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <call><name>parse_numeric_port</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>socktype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>protocol</name></decl>;</decl_stmt>

}</block> <decl><name><name>list</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>SOCK_STREAM</name></expr>, <expr><name>IPPROTO_TCP</name></expr> }</block></expr>,

<expr><block>{ <expr><name>SOCK_DGRAM</name></expr>, <expr><name>IPPROTO_UDP</name></expr> }</block></expr>,

<expr><block>{ <expr><name>SOCK_RAW</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hint_family</name> <init>= <expr><ternary><condition><expr><name>hints</name></expr> ?</condition><then> <expr><name><name>hints</name><operator>-&gt;</operator><name>ai_family</name></name></expr> </then><else>: <expr><name>PF_UNSPEC</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hint_socktype</name> <init>= <expr><ternary><condition><expr><name>hints</name></expr> ?</condition><then> <expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hint_protocol</name> <init>= <expr><ternary><condition><expr><name>hints</name></expr> ?</condition><then> <expr><name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ipv4addr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>ipv6addr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hint_family</name> <operator>==</operator> <name>PF_UNSPEC</name> <operator>||</operator> <name>hint_family</name> <operator>==</operator> <name>PF_INET6</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strspn</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"0123456789abcdefABCDEF.:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>ipv6addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hint_socktype</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>hint_socktype</name> <operator>==</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>socktype</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>hint_protocol</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>protocol</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>hint_protocol</name> <operator>==</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>protocol</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai0</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INIT_SOCKADDR_IN6</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>ipv6addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ipv6addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>socktype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <ternary><condition><expr><name>hint_protocol</name></expr> ?</condition><then> <expr><name>hint_protocol</name></expr> </then><else>: <expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>protocol</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>sa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>ai0</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if <condition>(<expr><operator>(</operator><name>hint_family</name> <operator>==</operator> <name>PF_UNSPEC</name> <operator>||</operator> <name>hint_family</name> <operator>==</operator> <name>PF_INET</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>strspn</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"0123456789."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>ipv4addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hint_socktype</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>hint_socktype</name> <operator>==</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>socktype</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>hint_protocol</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>protocol</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>hint_protocol</name> <operator>==</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>protocol</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai0</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INIT_SOCKADDR_IN</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>ipv4addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ipv4addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sa</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>socktype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <ternary><condition><expr><name>hint_protocol</name></expr> ?</condition><then> <expr><name>hint_protocol</name></expr> </then><else>: <expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>protocol</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>sa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai0</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>ai0</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ai</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>EAI_FAIL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>rb_getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allocated_by_malloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>numeric_getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>allocated_by_malloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GETADDRINFO_EMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>getaddrinfo_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MEMZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr>struct <name>getaddrinfo_arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>service</name></name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>hints</name></name> <operator>=</operator> <name>hints</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>res</name></name> <operator>=</operator> <operator>&amp;</operator><name>ai</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>rb_thread_call_without_gvl</name><argument_list>(<argument><expr><name>nogvl_getaddrinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>RUBY_UBF_IO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator>struct <name>rb_addrinfo</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rb_addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator><operator>-&gt;</operator><name>allocated_by_malloc</name></name> <operator>=</operator> <name>allocated_by_malloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator><operator>-&gt;</operator><name>ai</name></name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO_A</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>

<name>rb_getaddrinfo_a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allocated_by_malloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>numeric_getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>allocated_by_malloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>gai_suspend_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gaicb</name></name> <modifier>*</modifier></type><name><name>reqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gaicb</name></name></type> <name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>ar_name</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>ar_service</name></name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>ar_request</name></name> <operator>=</operator> <name>hints</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>req</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getaddrinfo_a</name><argument_list>(<argument><expr><name>GAI_NOWAIT</name></expr></argument>, <argument><expr><name>reqs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>req</name></name> <operator>=</operator> <operator>&amp;</operator><name>req</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>rb_thread_call_without_gvl</name><argument_list>(<argument><expr><name>nogvl_gai_suspend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>RUBY_UBF_IO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EAI_SYSTEM</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>EAI_AGAIN</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gai_error</name><argument_list>(<argument><expr><name><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ar_result</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator>struct <name>rb_addrinfo</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rb_addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator><operator>-&gt;</operator><name>allocated_by_malloc</name></name> <operator>=</operator> <name>allocated_by_malloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>res</name><operator>)</operator><operator>-&gt;</operator><name>ai</name></name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>rb_freeaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ai</name><operator>-&gt;</operator><name>allocated_by_malloc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ai2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ai1</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ai1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ai2</name> <operator>=</operator> <name><name>ai1</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ai1</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ai1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ai1</name> <operator>=</operator> <name>ai2</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GETADDRINFO_EMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>getnameinfo_arg</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>salen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>hostlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>servlen</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>nogvl_getnameinfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>getnameinfo_arg</name></name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>getnameinfo</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>sa</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>salen</name></name></expr></argument>,

<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name><name>ptr</name><operator>-&gt;</operator><name>hostlen</name></name></expr></argument>,

<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>serv</name></name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name><name>ptr</name><operator>-&gt;</operator><name>servlen</name></name></expr></argument>,

<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>rb_getnameinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>salen</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hostlen</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>serv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>servlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GETADDRINFO_EMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>getnameinfo</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>salen</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>hostlen</name></expr></argument>, <argument><expr><name>serv</name></expr></argument>, <argument><expr><name>servlen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>getnameinfo_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>sa</name></name> <operator>=</operator> <name>sa</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>salen</name></name> <operator>=</operator> <name>salen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>hostlen</name></name> <operator>=</operator> <name>hostlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>serv</name></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>servlen</name></name> <operator>=</operator> <name>servlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>rb_thread_call_without_gvl</name><argument_list>(<argument><expr><name>nogvl_getnameinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name>RUBY_UBF_IO</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>make_ipaddr0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>rb_getnameinfo</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rsock_raise_socket_error</name><argument_list>(<argument><expr><literal type="string">"getnameinfo"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_make_ipaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>addrlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>make_ipaddr0</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrlen</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>make_inetaddr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INIT_SOCKADDR_IN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sin</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_ipaddr0</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>str_is_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>STRTOUL</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ep</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str_equal</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ptr)[0] == name[0] &amp;&amp; rb_strlen_lit(name) == (len) &amp;&amp; memcmp(ptr, name, len) == 0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>

<name>host_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hbuflen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>rb_cInteger</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><call><name>NUM2UINT</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>make_inetaddr</name><argument_list>(<argument><expr><call><name>htonl</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><name>hbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags_ptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flags_ptr</name> <operator>|=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hbuf</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RSTRING_GETMEM</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <call><name>str_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"&lt;any&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>make_inetaddr</name><argument_list>(<argument><expr><name>INADDR_ANY</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><name>hbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags_ptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flags_ptr</name> <operator>|=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>str_equal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"&lt;broadcast&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>make_inetaddr</name><argument_list>(<argument><expr><name>INADDR_BROADCAST</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><name>hbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags_ptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flags_ptr</name> <operator>|=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>hbuflen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"hostname too long (%"</literal><name>PRIuSIZE</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hbuf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hbuf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>hbuf</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>

<name>port_str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pbuflen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>pbuflen</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags_ptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>flags_ptr</name> <operator>|=</operator> <name>AI_NUMERICSERV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>pbuf</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RSTRING_GETMEM</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>serv</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>pbuflen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"service name too long (%"</literal><name>PRIuSIZE</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>serv</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pbuf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>pbuf</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>rb_addrinfo</name></name><modifier>*</modifier></type>

<name>rsock_getaddrinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socktype_hack</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name><modifier>*</modifier></type> <name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>portp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pbuf</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>additional_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hostp</name> <operator>=</operator> <call><name>host_str</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>additional_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>portp</name> <operator>=</operator> <call><name>port_str</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>additional_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>socktype_hack</name> <operator>&amp;&amp;</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>str_is_number</name><argument_list>(<argument><expr><name>portp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>|=</operator> <name>additional_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>rb_getaddrinfo</name><argument_list>(<argument><expr><name>hostp</name></expr></argument>, <argument><expr><name>portp</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hostp</name> <operator>&amp;&amp;</operator> <name><name>hostp</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostp</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"newline at the end of hostname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rsock_raise_socket_error</name><argument_list>(<argument><expr><literal type="string">"getaddrinfo"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO_A</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>rb_addrinfo</name></name><modifier>*</modifier></type>

<name>rsock_getaddrinfo_a</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socktype_hack</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name><modifier>*</modifier></type> <name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>portp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pbuf</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>additional_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hostp</name> <operator>=</operator> <call><name>host_str</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>additional_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>portp</name> <operator>=</operator> <call><name>port_str</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>additional_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>socktype_hack</name> <operator>&amp;&amp;</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>str_is_number</name><argument_list>(<argument><expr><name>portp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_DGRAM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>|=</operator> <name>additional_flags</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>rb_getaddrinfo</name><argument_list>(<argument><expr><name>hostp</name></expr></argument>, <argument><expr><name>portp</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>_timeout</name> <init>= <expr><call><name>rb_time_timespec_interval</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>rb_getaddrinfo_a</name><argument_list>(<argument><expr><name>hostp</name></expr></argument>, <argument><expr><name>portp</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hostp</name> <operator>&amp;&amp;</operator> <name><name>hostp</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostp</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"newline at the end of hostname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rsock_raise_socket_error</name><argument_list>(<argument><expr><literal type="string">"getaddrinfo_a"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>

<name>rsock_fd_family</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>sa</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>sa_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>size_t</name><operator>)</operator><name>sa_len</name> <operator>&lt;</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr</name></expr></argument>, <argument><expr><name>sa_family</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AF_UNSPEC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>sa</name><operator>.</operator><name>sa_family</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>rb_addrinfo</name></name><modifier>*</modifier></type>

<name>rsock_addrinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MEMZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr>struct <name>addrinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>socktype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<return>return <expr><call><name>rsock_getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_ipaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sockaddr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>sockaddrlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>norevlookup</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>family</name></decl>, <decl><type ref="prev"/><name>port</name></decl>, <decl><type ref="prev"/><name>addr1</name></decl>, <decl><type ref="prev"/><name>addr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rsock_intern_family</name><argument_list>(<argument><expr><name><name>sockaddr</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>family</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><call><name>rb_id2str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><literal type="string">"unknown:%d"</literal></expr></argument>, <argument><expr><name><name>sockaddr</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>family</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>addr1</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>norevlookup</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>rb_getnameinfo</name><argument_list>(<argument><expr><name>sockaddr</name></expr></argument>, <argument><expr><name>sockaddrlen</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr1</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>rb_getnameinfo</name><argument_list>(<argument><expr><name>sockaddr</name></expr></argument>, <argument><expr><name>sockaddrlen</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rsock_raise_socket_error</name><argument_list>(<argument><expr><literal type="string">"getnameinfo"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr2</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addr1</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>addr1</name> <operator>=</operator> <name>addr2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>addr1</name></expr></argument>, <argument><expr><name>addr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>long</name></type>

<name>unixsocket_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>su</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>socklen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>su</name><operator>-&gt;</operator><name>sun_path</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>su</name> <operator>+</operator> <name>socklen</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>e</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>e</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>e</name> <operator>-</operator> <name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_unixpath_str</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sockaddr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><call><name>unixsocket_len</name><argument_list>(<argument><expr><name>sockaddr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>sockaddr</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_unixaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>sockaddr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"AF_UNIX"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>rsock_unixpath_str</name><argument_list>(<argument><expr><name>sockaddr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>socklen_t</name></type>

<name>rsock_unix_sockaddr_len</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sa_family_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>SOCKLEN_MAX</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"Linux abstract socket too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>RSTRING_SOCKLEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>hostent_arg</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>host</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name><modifier>*</modifier></type> <name>addr</name></decl>;</decl_stmt>

<function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>ipaddr</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>make_hostent_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hostent_arg</name></name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>host</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>host</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name><modifier>*</modifier></type> <name>addr</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>ai</name></name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>ipaddr</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>ipaddr</name></name></expr></init>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>, <decl><type ref="prev"/><name>names</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>hostp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hostp</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>hostp</name> <operator>=</operator> <call><name>host_str</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>hostp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>ai_canonname</name></name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>NI_MAXHOST</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>h</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>names</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_aliases</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>pch</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h_aliases</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pch</name></expr>;</condition> <incr><expr><name>pch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><operator>*</operator><name>pch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>names</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ai</name> <operator>=</operator> <name>addr</name></expr>;</init> <condition><expr><name>ai</name></expr>;</condition> <incr><expr><name>ai</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call>(<modifier>*</modifier><name>ipaddr</name>)<argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ary</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_freeaddrinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator>struct <name>rb_addrinfo</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_freeaddrinfo</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_make_hostent</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><function_decl><type><name>VALUE</name></type> (<modifier>*</modifier><name>ipaddr</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hostent_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>ipaddr</name></name> <operator>=</operator> <name>ipaddr</name></expr>;</expr_stmt>

<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>make_hostent_internal</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>arg</name></expr></argument>,

<argument><expr><name>rsock_freeaddrinfo</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>inspectname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>canonname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pfamily</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>socktype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>sockaddr_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>union_sockaddr</name></type> <name>addr</name></decl>;</decl_stmt>

}</block></struct></type> <name>rb_addrinfo_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>addrinfo_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>inspectname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_gc_mark</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addrinfo_free</name></cpp:macro> <cpp:value>RUBY_TYPED_DEFAULT_FREE</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>addrinfo_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>rb_addrinfo_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>addrinfo_type</name> <init>= <expr><block>{

<expr><literal type="string">"socket/addrinfo"</literal></expr>,

<expr><block>{<expr><name>addrinfo_mark</name></expr>, <expr><name>addrinfo_free</name></expr>, <expr><name>addrinfo_memsize</name></expr>,}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ADDRINFO</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_typeddata_is_kind_of((obj), &amp;addrinfo_type)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>rb_addrinfo_t</name> <modifier>*</modifier></type>

<name>check_addrinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_check_typeddata</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo_type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_addrinfo_t</name> <modifier>*</modifier></type>

<name>get_addrinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>check_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rai</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"uninitialized socket address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rai</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rb_addrinfo_t</name> <modifier>*</modifier></type>

<name>alloc_addrinfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>ZALLOC</name><argument_list>(<argument><expr><name>rb_addrinfo_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rai</name><operator>-&gt;</operator><name>inspectname</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rai</name><operator>-&gt;</operator><name>canonname</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<return>return <expr><name>rai</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_addrinfo</name><parameter_list>(<parameter><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pfamily</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>canonname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>inspectname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"sockaddr string too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>rai</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>sa</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rai</name><operator>-&gt;</operator><name>sockaddr_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rai</name><operator>-&gt;</operator><name>pfamily</name></name> <operator>=</operator> <name>pfamily</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name> <operator>=</operator> <name>socktype</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>protocol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rai</name><operator>-&gt;</operator><name>canonname</name></name> <operator>=</operator> <name>canonname</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rai</name><operator>-&gt;</operator><name>inspectname</name></name> <operator>=</operator> <name>inspectname</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_addrinfo_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>canonname</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>inspectname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>addrinfo_s_allocate</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>rai</name> <operator>=</operator> <call><name>alloc_addrinfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_addrinfo</name><argument_list>(<argument><expr><name>rai</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier></type>

<name>call_getaddrinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>service</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>socktype_hack</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MEMZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr>struct <name>addrinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>PF_UNSPEC</name></expr> </then><else>: <expr><call><name>rsock_family_arg</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>socktype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <call><name>rsock_socktype_arg</name><argument_list>(<argument><expr><name>socktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO_A</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>rsock_getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>socktype_hack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>rsock_getaddrinfo_a</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>socktype_hack</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>rsock_getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><name>socktype_hack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"host not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>make_inspectname</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_addrinfo_getaddrinfo</name><parameter_list>(<parameter><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>service</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>inspectnode</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>inspectservice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>call_getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>canonname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>inspectname</name> <init>= <expr><ternary><condition><expr><call><name>rb_str_equal</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>inspectnode</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qnil</name></expr> </then><else>: <expr><call><name>make_inspectname</name><argument_list>(<argument><expr><name>inspectnode</name></expr></argument>, <argument><expr><name>inspectservice</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>canonname</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>canonname</name> <operator>=</operator> <call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>canonname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_addrinfo</name><argument_list>(<argument><expr><name>rai</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>,

<argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>socktype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>make_inspectname</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>inspectname</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pbuf</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_getnameinfo</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NI_NUMERICHOST</name><operator>|</operator><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>hbuf</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>service</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>service</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inspectname</name> <operator>=</operator> <call><name>rb_str_dup</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inspectname</name> <operator>=</operator> <call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>inspectname</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>T_FIXNUM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FIX2INT</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inspectname</name> <operator>=</operator> <call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">":%d"</literal></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>inspectname</name></expr></argument>, <argument><expr><literal type="string">":%d"</literal></expr></argument>, <argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>inspectname</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_firstonly_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>canonname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>inspectname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>call_getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>inspectname</name> <operator>=</operator> <call><name>make_inspectname</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>canonname</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>canonname</name> <operator>=</operator> <call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>canonname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rsock_addrinfo_new</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>,

<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,

<argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>,

<argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_list_new</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>socktype</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>inspectname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>call_getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>inspectname</name> <operator>=</operator> <call><name>make_inspectname</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai</name></name></expr>;</init> <condition><expr><name>r</name></expr>;</condition> <incr><expr><name>r</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>canonname</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>canonname</name> <operator>=</operator> <call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>canonname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>rsock_addrinfo_new</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>,

<argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>rb_freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>init_unix_addrinfo</name><parameter_list>(<parameter><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>socktype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>un</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,

<argument><expr><literal type="string">"too long unix socket path (%"</literal><name>PRIuSIZE</name><literal type="string">" bytes given but %"</literal><name>PRIuSIZE</name><literal type="string">" bytes max)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>INIT_SOCKADDR_UN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>un</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rsock_unix_sockaddr_len</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_addrinfo</name><argument_list>(<argument><expr><name>rai</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>un</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>PF_UNIX</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>

<name>rai_unixsocket_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>unixsocket_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>un</name></name></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>sockaddr_len</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>sockaddr_arg</name></decl>, <decl><type ref="prev"/><name>sockaddr_ary</name></decl>, <decl><type ref="prev"/><name>pfamily</name></decl>, <decl><type ref="prev"/><name>socktype</name></decl>, <decl><type ref="prev"/><name>protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pfamily</name></decl>, <decl><type ref="prev"/><name>i_socktype</name></decl>, <decl><type ref="prev"/><name>i_protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sockaddr_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>sockaddr_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>canonname</name> <init>= <expr><name>Qnil</name></expr></init></decl>, <decl><type ref="prev"/><name>inspectname</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"already initialized socket address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>rai</name> <operator>=</operator> <call><name>alloc_addrinfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"13"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sockaddr_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfamily</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socktype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pfamily</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>pfamily</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>PF_UNSPEC</name></expr> </then><else>: <expr><call><name>rsock_family_arg</name><argument_list>(<argument><expr><name>pfamily</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>i_socktype</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>socktype</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>rsock_socktype_arg</name><argument_list>(<argument><expr><name>socktype</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>i_protocol</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>sockaddr_ary</name> <operator>=</operator> <call><name>rb_check_array_type</name><argument_list>(<argument><expr><name>sockaddr_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>sockaddr_ary</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>afamily</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>sockaddr_ary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>af</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>afamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rsock_family_to_int</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>afamily</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>afamily</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>af</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"unknown address family: %s"</literal></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>afamily</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>af</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AF_INET</name></expr>:</case> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>service</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>sockaddr_ary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>nodename</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>sockaddr_ary</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>numericnode</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>sockaddr_ary</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>numericnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>AI_NUMERICSERV</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>init_addrinfo_getaddrinfo</name><argument_list>(<argument><expr><name>rai</name></expr></argument>, <argument><expr><name>numericnode</name></expr></argument>, <argument><expr><name>service</name></expr></argument>,

<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><ternary><condition><expr><name>i_pfamily</name></expr> ?</condition><then> <expr><name>i_pfamily</name></expr> </then><else>: <expr><name>af</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>i_socktype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>i_protocol</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>nodename</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_UNIX</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name> <init>= <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>sockaddr_ary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_unix_addrinfo</name><argument_list>(<argument><expr><name>rai</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"unexpected address family"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>sockaddr_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sockaddr_ptr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>sockaddr_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sockaddr_len</name> <operator>=</operator> <call><name>RSTRING_SOCKLEN</name><argument_list>(<argument><expr><name>sockaddr_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_addrinfo</name><argument_list>(<argument><expr><name>rai</name></expr></argument>, <argument><expr><name>sockaddr_ptr</name></expr></argument>, <argument><expr><name>sockaddr_len</name></expr></argument>,

<argument><expr><name>i_pfamily</name></expr></argument>, <argument><expr><name>i_socktype</name></expr></argument>, <argument><expr><name>i_protocol</name></expr></argument>,

<argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_afamily</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>&lt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>AF_UNSPEC</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ai_get_afamily</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_afamily</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>sockaddr_len</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>inspect_sockaddr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>addrinfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>union_sockaddr</name> <modifier>*</modifier></type><name>sockaddr</name> <init>= <expr><operator>&amp;</operator><name><name>rai</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>socklen</name> <init>= <expr><name><name>rai</name><operator>-&gt;</operator><name>sockaddr_len</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>rsock_inspect_sockaddr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>sockaddr</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_inspect_sockaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sockaddr_arg</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>socklen</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>union_sockaddr</name> <modifier>*</modifier></type><name>sockaddr</name> <init>= <expr><operator>(</operator><name>union_sockaddr</name> <operator>*</operator><operator>)</operator><name>sockaddr_arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>socklen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"empty-sockaddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><name>socklen</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sockaddr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa_family</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sockaddr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa_family</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>sockaddr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"too-short-sockaddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>sockaddr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa_family</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AF_UNSPEC</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"UNSPEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AF_INET</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><name><name>sockaddr</name><operator>-&gt;</operator><name>in</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>addr</name><operator>+</operator><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>socklen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>addr</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>socklen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">".?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>addr</name><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>socklen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">".?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>addr</name><operator>+</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>socklen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">".?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sin_port</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>addr</name><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&lt;</operator> <name>socklen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">":%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">":?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <name>socklen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" (%d bytes for %d bytes sockaddr_in)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>socklen</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>socklen</name> <operator>&lt;</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"too-short-AF_INET6-sockaddr %d bytes"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>socklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><name><name>sockaddr</name><operator>-&gt;</operator><name>in6</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockaddr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>,

<argument><expr><name>hbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NI_NUMERICHOST</name><operator>|</operator><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rsock_raise_socket_error</name><argument_list>(<argument><expr><literal type="string">"getnameinfo"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"[%s]:%d"</literal></expr></argument>, <argument><expr><name>hbuf</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>socklen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"(sockaddr %d bytes too long)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>socklen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_UNIX</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>&amp;</operator><name><name>sockaddr</name><operator>-&gt;</operator><name>un</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>unixsocket_len</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>socklen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>sun_path</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"too-short-AF_UNIX-sockaddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"empty-path-AF_UNIX-sockaddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>printable_only</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>e</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>printable_only</name> <operator>=</operator> <name>printable_only</name> <operator>&amp;&amp;</operator> <call><name>ISPRINT</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>printable_only</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"UNIX "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"UNIX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">":%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_PACKET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>AF_PACKET</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_ll</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">"["</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CATSEP</name></cpp:macro> <cpp:value>do { rb_str_cat2(ret, sep); sep = " "; } while (0);</cpp:value></cpp:define>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_ll</name> <operator>*</operator><operator>)</operator><name>sockaddr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"PACKET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_protocol</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_protocol</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>socklen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CATSEP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"protocol=%d"</literal></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_protocol</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_ifindex</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_ifindex</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>socklen</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>CATSEP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>if_indextoname</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_ifindex</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"ifindex=%d"</literal></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_ifindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_hatype</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_hatype</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>socklen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CATSEP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"hatype=%d"</literal></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_hatype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_pkttype</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_pkttype</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>socklen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CATSEP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sll_pkttype</name></name> <operator>==</operator> <name>PACKET_HOST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"HOST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sll_pkttype</name></name> <operator>==</operator> <name>PACKET_BROADCAST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"BROADCAST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sll_pkttype</name></name> <operator>==</operator> <name>PACKET_MULTICAST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"MULTICAST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sll_pkttype</name></name> <operator>==</operator> <name>PACKET_OTHERHOST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"OTHERHOST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sll_pkttype</name></name> <operator>==</operator> <name>PACKET_OUTGOING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"OUTGOING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"pkttype=%d"</literal></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_pkttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>socklen</name> <operator>!=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_addr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>addr</name><operator>-&gt;</operator><name>sll_halen</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CATSEP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_halen</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_halen</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>socklen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"halen=%d"</literal></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_halen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_addr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>socklen</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>CATSEP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"hwaddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>sll_halen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>socklen</name> <operator>&lt;</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_addr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>socklen</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"="</literal></expr> </then><else>: <expr><literal type="string">":"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_addr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>socklen</name> <operator>&lt;</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_halen</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sll_halen</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>, <argument><expr><name>sll_addr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>addr</name><operator>-&gt;</operator><name>sll_halen</name></name><operator>)</operator> <operator>!=</operator> <name>socklen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CATSEP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"(%d bytes for %d bytes sockaddr_ll)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>socklen</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CATSEP</name></cpp:undef>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_LINK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_STRUCT_SOCKADDR_DL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>AF_LINK</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>&amp;</operator><name><name>sockaddr</name><operator>-&gt;</operator><name>dl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ap</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>alen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">"["</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CATSEP</name></cpp:macro> <cpp:value>do { rb_str_cat2(ret, sep); sep = " "; } while (0);</cpp:value></cpp:define>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"LINK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>addr</name><operator>)</operator> <operator>+</operator> <name>socklen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>, <argument><expr><name>sdl_data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>socklen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>np</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>sdl_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nlen</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>sdl_nlen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>-</operator> <name>np</name> <operator>&lt;</operator> <name>nlen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>endp</name> <operator>-</operator> <name>np</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>sdl_nlen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>, <argument><expr><name>sdl_data</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name> <operator>&lt;</operator> <name>socklen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ap</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>sdl_data</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>alen</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>-</operator> <name>ap</name> <operator>&lt;</operator> <name>alen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>alen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>endp</name> <operator>-</operator> <name>ap</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>CATSEP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ap</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;</operator> <name>alen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CATSEP</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>alen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"%s%02x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">":"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>socklen</name> <operator>&lt;</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>, <argument><expr><name>sdl_nlen</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sdl_nlen</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator>

<name>socklen</name> <operator>&lt;</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>, <argument><expr><name>sdl_alen</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator>

<name>socklen</name> <operator>&lt;</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>, <argument><expr><name>sdl_slen</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sdl_slen</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator>

<name>socklen</name> <operator>&lt;</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>, <argument><expr><name>sdl_data</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>addr</name><operator>-&gt;</operator><name>sdl_nlen</name></name> <operator>+</operator> <name><name>addr</name><operator>-&gt;</operator><name>sdl_alen</name></name> <operator>+</operator> <name><name>addr</name><operator>-&gt;</operator><name>sdl_slen</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>CATSEP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"(%d bytes for %d bytes sockaddr_dl)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>socklen</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CATSEP</name></cpp:undef>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>rsock_intern_family</name><argument_list>(<argument><expr><name><name>sockaddr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"unknown address family %d"</literal></expr></argument>, <argument><expr><name><name>sockaddr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"%s address format unknown"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>internet_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"#&lt;%s: "</literal></expr></argument>, <argument><expr><call><name>rb_obj_classname</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>inspect_sockaddr</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rai</name><operator>-&gt;</operator><name>pfamily</name></name> <operator>&amp;&amp;</operator> <call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>rai</name><operator>-&gt;</operator><name>pfamily</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>rsock_intern_protocol_family</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>pfamily</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" PF_\?\?\?(%d)"</literal></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>pfamily</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>internet_p</name> <operator>=</operator> <name><name>rai</name><operator>-&gt;</operator><name>pfamily</name></name> <operator>==</operator> <name>PF_INET</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>internet_p</name> <operator>=</operator> <name>internet_p</name> <operator>||</operator> <name><name>rai</name><operator>-&gt;</operator><name>pfamily</name></name> <operator>==</operator> <name>PF_INET6</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>internet_p</name> <operator>&amp;&amp;</operator> <name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name> <operator>==</operator> <name>SOCK_STREAM</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>IPPROTO_TCP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" TCP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>internet_p</name> <operator>&amp;&amp;</operator> <name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name> <operator>==</operator> <name>SOCK_DGRAM</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>IPPROTO_UDP</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" UDP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>rsock_intern_socktype</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" SOCK_\?\?\?(%d)"</literal></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>internet_p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>rsock_intern_ipproto</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>unknown_protocol</name>;</goto></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<label><name>unknown_protocol</name>:</label>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" UNKNOWN_PROTOCOL(%d)"</literal></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>canonname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name> <init>= <expr><name><name>rai</name><operator>-&gt;</operator><name>canonname</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>inspectname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name> <init>= <expr><name><name>rai</name><operator>-&gt;</operator><name>inspectname</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_str_catf</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_buf_cat2</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_addrinfo_inspect_sockaddr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>inspect_sockaddr</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_mdump</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>sockaddr</name></decl>, <decl><type ref="prev"/><name>afamily</name></decl>, <decl><type ref="prev"/><name>pfamily</name></decl>, <decl><type ref="prev"/><name>socktype</name></decl>, <decl><type ref="prev"/><name>protocol</name></decl>, <decl><type ref="prev"/><name>canonname</name></decl>, <decl><type ref="prev"/><name>inspectname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>afamily_int</name> <init>= <expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rsock_intern_protocol_family</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>pfamily</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"unknown protocol family: %d"</literal></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>pfamily</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pfamily</name> <operator>=</operator> <call><name>rb_id2str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>socktype</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rsock_intern_socktype</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"unknown socktype: %d"</literal></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>socktype</name> <operator>=</operator> <call><name>rb_id2str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>IS_IP_FAMILY</name><argument_list>(<argument><expr><name>afamily_int</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rsock_intern_ipproto</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"unknown IP protocol: %d"</literal></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name>rb_id2str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"unknown protocol: %d"</literal></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>canonname</name> <operator>=</operator> <name><name>rai</name><operator>-&gt;</operator><name>canonname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>inspectname</name> <operator>=</operator> <name><name>rai</name><operator>-&gt;</operator><name>inspectname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>rsock_intern_family</name><argument_list>(<argument><expr><name>afamily_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"unknown address family: %d"</literal></expr></argument>, <argument><expr><name>afamily_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>afamily</name> <operator>=</operator> <call><name>rb_id2str</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>afamily_int</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_UNIX</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name>sockaddr</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><call><name>rai_unixsocket_len</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pbuf</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>sockaddr_len</name></name></expr></argument>,

<argument><expr><name>hbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NI_NUMERICHOST</name><operator>|</operator><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rsock_raise_socket_error</name><argument_list>(<argument><expr><literal type="string">"getnameinfo"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sockaddr</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<return>return <expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>afamily</name></expr></argument>, <argument><expr><name>sockaddr</name></expr></argument>, <argument><expr><name>pfamily</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_mload</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>canonname</name></decl>, <decl><type ref="prev"/><name>inspectname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>afamily</name></decl>, <decl><type ref="prev"/><name>pfamily</name></decl>, <decl><type ref="prev"/><name>socktype</name></decl>, <decl><type ref="prev"/><name>protocol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>union_sockaddr</name></type> <name>ss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"already initialized socket address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_convert_type</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"Array"</literal></expr></argument>, <argument><expr><literal type="string">"to_ary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rsock_family_to_int</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>afamily</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"unexpected address family"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rsock_family_to_int</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pfamily</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"unexpected protocol family"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>socktype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rsock_socktype_to_int</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>socktype</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"unexpected socktype"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>protocol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_IP_FAMILY</name><argument_list>(<argument><expr><name>afamily</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rsock_ipproto_to_int</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>protocol</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"unexpected protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"unexpected protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>canonname</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>canonname</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inspectname</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inspectname</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>afamily</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_UNIX</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>uaddr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INIT_SOCKADDR_UN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uaddr</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>,

<argument><expr><literal type="string">"too long AF_UNIX path (%"</literal><name>PRIuSIZE</name><literal type="string">" bytes given but %"</literal><name>PRIuSIZE</name><literal type="string">" bytes max)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uaddr</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uaddr</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uaddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uaddr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>pair</name> <init>= <expr><call><name>rb_convert_type</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"Array"</literal></expr></argument>, <argument><expr><literal type="string">"to_ary"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>AI_NUMERICHOST</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>AI_NUMERICSERV</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>call_getaddrinfo</name><argument_list>(<argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>pfamily</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>socktype</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>rai</name> <operator>=</operator> <call><name>alloc_addrinfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_addrinfo</name><argument_list>(<argument><expr><name>rai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ss</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>pfamily</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>,

<argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>inspectname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_afamily</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_pfamily</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>pfamily</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_socktype</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_protocol</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_to_sockaddr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>rai</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>sockaddr_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_canonname</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>rai</name><operator>-&gt;</operator><name>canonname</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ip_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>IS_IP_FAMILY</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv4_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AF_INET6</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>Qfalse</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_unix_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><ternary><condition><expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AF_UNIX</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>Qfalse</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_getnameinfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>vflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>vflags</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>vflags</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name> <operator>==</operator> <name>SOCK_DGRAM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>NI_DGRAM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>sockaddr_len</name></name></expr></argument>,

<argument><expr><name>hbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rsock_raise_socket_error</name><argument_list>(<argument><expr><literal type="string">"getnameinfo"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>hbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ip_unpack</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>vflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>portstr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_IP_FAMILY</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"need IPv4 or IPv6 address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vflags</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name>NI_NUMERICHOST</name><operator>|</operator><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>addrinfo_getnameinfo</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vflags</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>portstr</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ip_address</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>vflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_IP_FAMILY</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"need IPv4 or IPv6 address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vflags</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name>NI_NUMERICHOST</name><operator>|</operator><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>addrinfo_getnameinfo</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vflags</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ip_port</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_IP_FAMILY</name><argument_list>(<argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<label><name>bad_family</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"need IPv4 or IPv6 address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"need IPv4 address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>family</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AF_INET</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>rai</name><operator>-&gt;</operator><name>sockaddr_len</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"unexpected sockaddr size for IPv4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>rai</name><operator>-&gt;</operator><name>sockaddr_len</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"unexpected sockaddr size for IPv6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<goto>goto <name>bad_family</name>;</goto>

</block_content>}</block></switch>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>extract_in_addr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>addrp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>family</name> <operator>!=</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>addrp</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv4_private_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_in_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0a000000</literal> <operator>||</operator> 

<operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xfff00000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xac100000</literal> <operator>||</operator> 

<operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0a80000</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv4_loopback_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_in_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7f000000</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv4_multicast_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_in_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe0000000</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type>

<name>extract_in6_addr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>family</name> <operator>!=</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_unspecified_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_loopback_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_LOOPBACK</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_multicast_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_MULTICAST</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_linklocal_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_sitelocal_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_SITELOCAL</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_unique_local_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_UNIQUE_LOCAL</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_v4mapped_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_V4MAPPED</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_v4compat_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_V4COMPAT</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_mc_nodelocal_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_MC_NODELOCAL</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_mc_linklocal_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_MC_LINKLOCAL</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_mc_sitelocal_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_MC_SITELOCAL</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_mc_orglocal_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_MC_ORGLOCAL</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_mc_global_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>extract_in6_addr</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_MC_GLOBAL</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_ipv6_to_ipv4</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>family</name> <operator>!=</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_V4MAPPED</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IN6_IS_ADDR_V4COMPAT</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sin4</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INIT_SOCKADDR_IN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sin4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sin4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sin4</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>addr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sin4</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sin4</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rsock_addrinfo_new</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sin4</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sin4</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name></expr></argument>,

<argument><expr><name><name>rai</name><operator>-&gt;</operator><name>canonname</name></name></expr></argument>, <argument><expr><name><name>rai</name><operator>-&gt;</operator><name>inspectname</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_unix_path</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name> <init>= <expr><call><name>get_addrinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><call><name>ai_get_afamily</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>family</name> <operator>!=</operator> <name>AF_UNIX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"need AF_UNIX address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>&amp;</operator><name><name>rai</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>un</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>rai_unixsocket_len</name><argument_list>(<argument><expr><name>rai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>, <argument><expr><literal type="string">"too short AF_UNIX address: %"</literal><name>PRIuSIZE</name><literal type="string">" bytes given for minimum %"</literal><name>PRIuSIZE</name><literal type="string">" bytes."</literal></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>rai</name><operator>-&gt;</operator><name>sockaddr_len</name></name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eSocket</name></expr></argument>,

<argument><expr><literal type="string">"too long AF_UNIX path (%"</literal><name>PRIuSIZE</name><literal type="string">" bytes given but %"</literal><name>PRIuSIZE</name><literal type="string">" bytes max)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_timeout</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_s_getaddrinfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>node</name></decl>, <decl><type ref="prev"/><name>service</name></decl>, <decl><type ref="prev"/><name>family</name></decl>, <decl><type ref="prev"/><name>socktype</name></decl>, <decl><type ref="prev"/><name>protocol</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>opts</name></decl>, <decl><type ref="prev"/><name>timeout</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"24:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socktype</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>protocol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_get_kwargs</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id_timeout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <name>Qundef</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>addrinfo_list_new</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_s_ip</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>addrinfo_firstonly_new</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>,

<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>PF_UNSPEC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rai</name> <operator>=</operator> <call><name>get_addrinfo</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rai</name><operator>-&gt;</operator><name>socktype</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rai</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_s_tcp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>addrinfo_firstonly_new</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,

<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>PF_UNSPEC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>SOCK_STREAM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_s_udp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>port</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>addrinfo_firstonly_new</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,

<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>PF_UNSPEC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>SOCK_DGRAM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>addrinfo_s_unix</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>path</name></decl>, <decl><type ref="prev"/><name>vsocktype</name></decl>, <decl><type ref="prev"/><name>addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>socktype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_addrinfo_t</name> <modifier>*</modifier></type><name>rai</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vsocktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>vsocktype</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>socktype</name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>socktype</name> <operator>=</operator> <call><name>rsock_socktype_arg</name><argument_list>(<argument><expr><name>vsocktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>addrinfo_s_allocate</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>rai</name> <operator>=</operator> <call><name>alloc_addrinfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_unix_addrinfo</name><argument_list>(<argument><expr><name>rai</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>addr</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>VALUE</name></type>

<name>rsock_sockaddr_string_value</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name> <init>= <expr><operator>*</operator><name>v</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_ADDRINFO</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <call><name>addrinfo_to_sockaddr</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_sockaddr_string_value_with_addrinfo</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>rai_ret</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name> <init>= <expr><operator>*</operator><name>v</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>rai_ret</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_ADDRINFO</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <call><name>addrinfo_to_sockaddr</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rai_ret</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>

<name>rsock_sockaddr_string_value_ptr</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>VALUE</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rsock_sockaddr_string_value</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_check_sockaddr_string_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_ADDRINFO</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>addrinfo_to_sockaddr</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_check_string_type</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_fd_socket_addrinfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>family</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>socktype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>socklen_t</name></type> <name>optlen</name> <init>= <expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>socktype</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>family</name> <operator>=</operator> <call><name>get_afamily</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_TYPE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>socktype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"getsockopt(SO_TYPE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rsock_addrinfo_new</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><name>socktype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rsock_io_socket_addrinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>io</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>T_FIXNUM</name></expr>:</case>

<return>return <expr><call><name>rsock_fd_socket_addrinfo</name><argument_list>(<argument><expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>

<return>return <expr><call><name>rsock_fd_socket_addrinfo</name><argument_list>(<argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>T_FILE</name></expr>:</case>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rsock_fd_socket_addrinfo</name><argument_list>(<argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"neither IO nor file descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>rsock_init_addrinfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>id_timeout</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_cAddrinfo</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"Addrinfo"</literal></expr></argument>, <argument><expr><name>rb_cData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><name>addrinfo_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>addrinfo_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>addrinfo_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"inspect_sockaddr"</literal></expr></argument>, <argument><expr><name>rsock_addrinfo_inspect_sockaddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"getaddrinfo"</literal></expr></argument>, <argument><expr><name>addrinfo_s_getaddrinfo</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ip"</literal></expr></argument>, <argument><expr><name>addrinfo_s_ip</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"tcp"</literal></expr></argument>, <argument><expr><name>addrinfo_s_tcp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"udp"</literal></expr></argument>, <argument><expr><name>addrinfo_s_udp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>addrinfo_s_unix</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"afamily"</literal></expr></argument>, <argument><expr><name>addrinfo_afamily</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"pfamily"</literal></expr></argument>, <argument><expr><name>addrinfo_pfamily</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"socktype"</literal></expr></argument>, <argument><expr><name>addrinfo_socktype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"protocol"</literal></expr></argument>, <argument><expr><name>addrinfo_protocol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"canonname"</literal></expr></argument>, <argument><expr><name>addrinfo_canonname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv4?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv4_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"unix?"</literal></expr></argument>, <argument><expr><name>addrinfo_unix_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ip?"</literal></expr></argument>, <argument><expr><name>addrinfo_ip_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ip_unpack"</literal></expr></argument>, <argument><expr><name>addrinfo_ip_unpack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ip_address"</literal></expr></argument>, <argument><expr><name>addrinfo_ip_address</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ip_port"</literal></expr></argument>, <argument><expr><name>addrinfo_ip_port</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv4_private?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv4_private_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv4_loopback?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv4_loopback_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv4_multicast?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv4_multicast_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_unspecified?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_unspecified_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_loopback?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_loopback_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_multicast?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_multicast_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_linklocal?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_linklocal_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_sitelocal?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_sitelocal_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_unique_local?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_unique_local_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_v4mapped?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_v4mapped_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_v4compat?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_v4compat_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_mc_nodelocal?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_mc_nodelocal_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_mc_linklocal?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_mc_linklocal_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_mc_sitelocal?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_mc_sitelocal_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_mc_orglocal?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_mc_orglocal_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_mc_global?"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_mc_global_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"ipv6_to_ipv4"</literal></expr></argument>, <argument><expr><name>addrinfo_ipv6_to_ipv4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_UN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"unix_path"</literal></expr></argument>, <argument><expr><name>addrinfo_unix_path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"to_sockaddr"</literal></expr></argument>, <argument><expr><name>addrinfo_to_sockaddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><name>addrinfo_to_sockaddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"getnameinfo"</literal></expr></argument>, <argument><expr><name>addrinfo_getnameinfo</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"marshal_dump"</literal></expr></argument>, <argument><expr><name>addrinfo_mdump</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cAddrinfo</name></expr></argument>, <argument><expr><literal type="string">"marshal_load"</literal></expr></argument>, <argument><expr><name>addrinfo_mload</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
