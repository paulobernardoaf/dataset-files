<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\objspace\objspace_dump.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/string.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"objspace.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/io.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vm_core.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>sym_output</name></decl>, <decl><type ref="prev"/><name>sym_stdout</name></decl>, <decl><type ref="prev"/><name>sym_string</name></decl>, <decl><type ref="prev"/><name>sym_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>sym_full</name></decl>;</decl_stmt>

<struct>struct <name>dump_config</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root_category</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cur_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cur_obj_klass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>cur_obj_references</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>roots</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>full_heap</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

<macro><name>PRINTF_ARGS</name><argument_list>(<argument>static void dump_append(struct dump_config *, const char *, ...)</argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dump_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>vl</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vl</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_str_vcatf</name><argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dump_append_string_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>value</name> <operator>=</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>value</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\\%c"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\\u0000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\b'</literal></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\f'</literal></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\\f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0x1f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\\u%04d"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dump_append_symbol_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"{\"type\":\"SYMBOL\", \"value\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_append_string_value</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><call><name>rb_sym2str</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>obj_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>BUILTIN_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case T_##type: return #type</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>ICLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>MODULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>REGEXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>STRUCT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>BIGNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>FIXNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>MATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>SYMBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>RATIONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>COMPLEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>IMEMO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>UNDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>NODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CASE_TYPE</name><argument_list>(<argument><expr><name>ZOMBIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CASE_TYPE</name></cpp:undef>

</block_content>}</block></switch>

<return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dump_append_special_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>Qtrue</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>FLONUM_P</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"%#g"</literal></expr></argument>, <argument><expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append_symbol_value</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>reachable_object_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name> <init>= <expr><operator>(</operator>struct <name>dump_config</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj_klass</name></name> <operator>==</operator> <name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj_references</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"references\":[\"%#"</literal><name>PRIxVALUE</name><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"%#"</literal><name>PRIxVALUE</name><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj_references</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dump_append_string_content</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"bytesize\":%ld"</literal></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>STR_EMBED_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>STR_SHARED_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>rb_str_capacity</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"capacity\":%"</literal><name>PRIuSIZE</name></expr></argument>, <argument><expr><call><name>rb_str_capacity</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_ascii_string</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"value\":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_append_string_value</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>

<name>imemo_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>imemo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>imemo</name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_STR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case(imemo_##t): return #t</cpp:value></cpp:define>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>cref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>svar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>throw_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>ifunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>ment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>iseq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>ast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TYPE_STR</name><argument_list>(<argument><expr><name>parser_strterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPE_STR</name></cpp:undef>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>dump_object</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>memsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>allocation_info</name></name> <modifier>*</modifier></type><name>ainfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name><name>flags</name><index>[<expr><name>RB_OBJ_GC_FLAGS_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SPECIAL_CONST_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append_special_const</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj_references</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj_klass</name></name> <operator>=</operator> <ternary><condition><expr><call><name>BUILTIN_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_NODE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>RBASIC_CLASS</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj</name></name> <operator>==</operator> <name><name>dc</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"{\"address\":\"%#"</literal><name>PRIxVALUE</name><literal type="string">"\", \"type\":\"%s\""</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>obj_type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj_klass</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"class\":\"%#"</literal><name>PRIxVALUE</name><literal type="string">"\""</literal></expr></argument>, <argument><expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj_klass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_frozen_p</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"frozen\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>BUILTIN_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>T_NONE</name></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><name>T_IMEMO</name></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"imemo_type\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>imemo_name</name><argument_list>(<argument><expr><call><name>imemo_type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>T_SYMBOL</name></expr>:</case>

<expr_stmt><expr><call><name>dump_append_string_content</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><call><name>rb_sym2str</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>T_STRING</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>STR_EMBED_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"embedded\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_broken_string</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"broken\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FL_TEST</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>RSTRING_FSTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"fstring\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>STR_SHARED_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"shared\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append_string_content</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ENCODING_IS_ASCII8BIT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"encoding\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>rb_enc_name</name><argument_list>(<argument><expr><call><name>rb_enc_from_index</name><argument_list>(<argument><expr><call><name>ENCODING_GET</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>T_HASH</name></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"size\":%"</literal><name>PRIuSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>RHASH_SIZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FL_TEST</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>RHASH_PROC_DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"default\":\"%#"</literal><name>PRIxVALUE</name><literal type="string">"\""</literal></expr></argument>, <argument><expr><call><name>RHASH_IFNONE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>T_ARRAY</name></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"length\":%ld"</literal></expr></argument>, <argument><expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FL_TEST</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ELTS_SHARED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"shared\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FL_TEST</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>RARRAY_EMBED_FLAG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"embedded\":true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>T_CLASS</name></expr>:</case>

<case>case <expr><name>T_MODULE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj_klass</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"name\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>rb_class2name</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>T_DATA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>RTYPEDDATA_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"struct\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>RTYPEDDATA_TYPE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>wrap_struct_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>T_FLOAT</name></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"value\":\"%g\""</literal></expr></argument>, <argument><expr><call><name>RFLOAT_VALUE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>T_OBJECT</name></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"ivars\":%u"</literal></expr></argument>, <argument><expr><call><name>ROBJECT_NUMIV</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>T_FILE</name></expr>:</case>

<expr_stmt><expr><name>fptr</name> <operator>=</operator> <call><name>RFILE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"fd\":%d"</literal></expr></argument>, <argument><expr><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>T_ZOMBIE</name></expr>:</case>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>rb_objspace_reachable_objects_from</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>reachable_object_i</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>cur_obj_references</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ainfo</name> <operator>=</operator> <call><name>objspace_lookup_allocation_info</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"file\":\"%s\", \"line\":%lu"</literal></expr></argument>, <argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>mid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>m</name> <init>= <expr><call><name>rb_sym2str</name><argument_list>(<argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>mid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"method\":\"%s\""</literal></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"generation\":%"</literal><name>PRIuSIZE</name></expr></argument>, <argument><expr><name><name>ainfo</name><operator>-&gt;</operator><name>generation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>memsize</name> <operator>=</operator> <call><name>rb_obj_memsize_of</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"memsize\":%"</literal><name>PRIuSIZE</name></expr></argument>, <argument><expr><name>memsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>rb_obj_gc_flags</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"flags\":{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"\"%s\":true"</literal></expr></argument>, <argument><expr><call><name>rb_id2name</name><argument_list>(<argument><expr><name><name>flags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>heap_i</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vstart</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vend</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name> <init>= <expr><operator>(</operator>struct <name>dump_config</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>vstart</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>v</name> <operator>!=</operator> <operator>(</operator><name>VALUE</name><operator>)</operator><name>vend</name></expr>;</condition> <incr><expr><name>v</name> <operator>+=</operator> <name>stride</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>full_heap</name></name> <operator>||</operator> <call><name>RBASIC</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_object</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>root_obj_i</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name> <init>= <expr><operator>(</operator>struct <name>dump_config</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>root_category</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>category</name> <operator>!=</operator> <name><name>dc</name><operator>-&gt;</operator><name>root_category</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"]}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>-&gt;</operator><name>root_category</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>category</name> <operator>!=</operator> <name><name>dc</name><operator>-&gt;</operator><name>root_category</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">"{\"type\":\"ROOT\", \"root\":\"%s\", \"references\":[\"%#"</literal><name>PRIxVALUE</name><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="string">", \"%#"</literal><name>PRIxVALUE</name><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>root_category</name></name> <operator>=</operator> <name>category</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>roots</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>dump_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>opts</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>full_heap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>sym_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Qtrue</name> <operator>==</operator> <call><name>rb_hash_lookup2</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>sym_full</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>full_heap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>sym_stdout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>output</name> <operator>==</operator> <name>sym_file</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>fptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_require</name><argument_list>(<argument><expr><literal type="string">"tempfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">".json"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_funcallv</name><argument_list>(<argument><expr><call><name>rb_path2class</name><argument_list>(<argument><expr><literal type="string">"Tempfile"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>io</name>:</label>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>rb_io_get_write_io</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_io_flush</name><argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetOpenFile</name><argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <call><name>rb_io_stdio_file</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>output</name> <operator>==</operator> <name>sym_string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dc</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp</name> <operator>=</operator> <call><name>rb_io_check_io</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name>sym_file</name></expr>;</expr_stmt>

<goto>goto <name>io</name>;</goto>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"wrong output option: %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>output</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>dump_result</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dump_config</name></name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>sym_string</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_str_resurrect</name><argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>output</name> <operator>==</operator> <name>sym_file</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_io_flush</name><argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>dc</name><operator>-&gt;</operator><name>string</name></name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>objspace_dump</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>os</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>filename</name><index>[]</index></name> <init>= <expr><literal type="string">"rubyobj"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><name>Qnil</name></expr></init></decl>, <decl><type ref="prev"/><name>opts</name> <init>= <expr><name>Qnil</name></expr></init></decl>, <decl><type ref="prev"/><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dump_config</name></name></type> <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"1:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>dump_output</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>sym_string</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_object</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>dump_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>objspace_dump_all</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>os</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>filename</name><index>[]</index></name> <init>= <expr><literal type="string">"rubyheap"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>opts</name> <init>= <expr><name>Qnil</name></expr></init></decl>, <decl><type ref="prev"/><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dump_config</name></name></type> <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"0:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>dump_output</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>sym_file</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_objspace_reachable_objects_from_root</name><argument_list>(<argument><expr><name>root_obj_i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dc</name><operator>.</operator><name>roots</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dump_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><literal type="string">"]}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_objspace_each_objects</name><argument_list>(<argument><expr><name>heap_i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>dump_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_objspace_dump</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>rb_mObjSpace</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

rb_mObjSpace = rb_define_module("ObjectSpace"); 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>rb_mObjSpace</name></expr></argument>, <argument><expr><literal type="string">"dump"</literal></expr></argument>, <argument><expr><name>objspace_dump</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>rb_mObjSpace</name></expr></argument>, <argument><expr><literal type="string">"dump_all"</literal></expr></argument>, <argument><expr><name>objspace_dump_all</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_output</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_stdout</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_string</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_file</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_full</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"full"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_obj_gc_flags</name><argument_list>(<argument><expr><name>rb_mObjSpace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
