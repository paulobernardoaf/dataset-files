<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\openssl\ossl_pkcs12.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ossl.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NewPKCS12</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TypedData_Wrap_Struct((klass), &amp;ossl_pkcs12_type, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetPKCS12</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>p12</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(!(p12)) ossl_raise(rb_eRuntimeError, "PKCS12 wasn't initialized."); RTYPEDDATA_DATA(obj) = (p12); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetPKCS12</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>p12</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TypedData_Get_Struct((obj), PKCS12, &amp;ossl_pkcs12_type, (p12)); if(!(p12)) ossl_raise(rb_eRuntimeError, "PKCS12 wasn't initialized."); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_pkcs12_set_key</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_iv_set((o), "@key", (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_pkcs12_set_cert</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_iv_set((o), "@certificate", (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_pkcs12_set_ca_certs</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_iv_set((o), "@ca_certs", (v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_pkcs12_get_key</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_iv_get((o), "@key")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_pkcs12_get_cert</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_iv_get((o), "@certificate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_pkcs12_get_ca_certs</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_iv_get((o), "@ca_certs")</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cPKCS12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ePKCS12Error</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ossl_pkcs12_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>PKCS12_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_pkcs12_type</name> <init>= <expr><block>{

<expr><literal type="string">"OpenSSL/PKCS12"</literal></expr>,

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><name>ossl_pkcs12_free</name></expr>,

}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_pkcs12_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PKCS12</name> <modifier>*</modifier></type><name>p12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewPKCS12</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>p12</name> <operator>=</operator> <call><name>PKCS12_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKCS12Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetPKCS12</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>p12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_pkcs12_initialize_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PKCS12</name> <modifier>*</modifier></type><name>p12</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p12_old</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p12_new</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_frozen</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetPKCS12</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>p12_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetPKCS12</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>p12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p12_new</name> <operator>=</operator> <call><name>ASN1_dup</name><argument_list>(<argument><expr><operator>(</operator><name>i2d_of_void</name> <operator>*</operator><operator>)</operator><name>i2d_PKCS12</name></expr></argument>, <argument><expr><operator>(</operator><name>d2i_of_void</name> <operator>*</operator><operator>)</operator><name>d2i_PKCS12</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p12_new</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKCS12Error</name></expr></argument>, <argument><expr><literal type="string">"ASN1_dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetPKCS12</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>p12_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PKCS12_free</name><argument_list>(<argument><expr><name>p12_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_pkcs12_s_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>pass</name></decl>, <decl><type ref="prev"/><name>name</name></decl>, <decl><type ref="prev"/><name>pkey</name></decl>, <decl><type ref="prev"/><name>cert</name></decl>, <decl><type ref="prev"/><name>ca</name></decl>, <decl><type ref="prev"/><name>key_nid</name></decl>, <decl><type ref="prev"/><name>cert_nid</name></decl>, <decl><type ref="prev"/><name>key_iter</name></decl>, <decl><type ref="prev"/><name>mac_iter</name></decl>, <decl><type ref="prev"/><name>keytype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>friendlyname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> <operator>*</operator><name>x509s</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nkey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ncert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kiter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>miter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ktype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PKCS12</name> <modifier>*</modifier></type><name>p12</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"46"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_nid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cert_nid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mac_iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keytype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>passphrase</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>friendlyname</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>GetPKeyPtr</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x509</name> <operator>=</operator> <call><name>GetX509CertPtr</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>key_nid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nkey</name> <operator>=</operator> <call><name>OBJ_txt2nid</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>key_nid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NID_undef</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"Unknown PBE algorithm %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>key_nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>cert_nid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ncert</name> <operator>=</operator> <call><name>OBJ_txt2nid</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>cert_nid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NID_undef</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"Unknown PBE algorithm %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>cert_nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>key_iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>kiter</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>key_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>mac_iter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>miter</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>mac_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>keytype</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ktype</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>keytype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewPKCS12</name><argument_list>(<argument><expr><name>cPKCS12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x509s</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>ossl_x509_ary2sk</name><argument_list>(<argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>p12</name> <operator>=</operator> <call><name>PKCS12_create</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>friendlyname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>, <argument><expr><name>x509s</name></expr></argument>,

<argument><expr><name>nkey</name></expr></argument>, <argument><expr><name>ncert</name></expr></argument>, <argument><expr><name>kiter</name></expr></argument>, <argument><expr><name>miter</name></expr></argument>, <argument><expr><name>ktype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>x509s</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p12</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKCS12Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetPKCS12</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>p12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_pkcs12_set_key</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_pkcs12_set_cert</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_pkcs12_set_ca_certs</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_pkcs12_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name></decl>, <decl><type ref="prev"/><name>pass</name></decl>, <decl><type ref="prev"/><name>pkey</name></decl>, <decl><type ref="prev"/><name>cert</name></decl>, <decl><type ref="prev"/><name>ca</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>passphrase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> <operator>*</operator><name>x509s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PKCS12</name> <modifier>*</modifier></type><name>pkcs</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>passphrase</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>ossl_obj2bio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>d2i_PKCS12_bio</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pkcs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pkey</name> <operator>=</operator> <name>cert</name> <operator>=</operator> <name>ca</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERR_set_mark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>PKCS12_parse</name><argument_list>(<argument><expr><name>pkcs</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x509</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x509s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKCS12Error</name></expr></argument>, <argument><expr><literal type="string">"PKCS12_parse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ERR_pop_to_mark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pkey</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>ossl_pkey_new</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x509</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>ossl_x509_new</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>x509</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x509s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ca</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>ossl_x509_sk2ary</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>x509s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>err</name>:</label>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>x509s</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_pkcs12_set_key</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_pkcs12_set_cert</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_pkcs12_set_ca_certs</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>st</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_pkcs12_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PKCS12</name> <modifier>*</modifier></type><name>p12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPKCS12</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>p12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>i2d_PKCS12</name><argument_list>(<argument><expr><name>p12</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKCS12Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>i2d_PKCS12</name><argument_list>(<argument><expr><name>p12</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>ePKCS12Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ossl_str_adjust</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_ossl_pkcs12</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

mOSSL = rb_define_module("OpenSSL");

eOSSLError = rb_define_class_under(mOSSL, "OpenSSLError", rb_eStandardError);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cPKCS12</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mOSSL</name></expr></argument>, <argument><expr><literal type="string">"PKCS12"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ePKCS12Error</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cPKCS12</name></expr></argument>, <argument><expr><literal type="string">"PKCS12Error"</literal></expr></argument>, <argument><expr><name>eOSSLError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cPKCS12</name></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><name>ossl_pkcs12_s_create</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cPKCS12</name></expr></argument>, <argument><expr><name>ossl_pkcs12_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPKCS12</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>ossl_pkcs12_initialize_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cPKCS12</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cPKCS12</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"certificate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cPKCS12</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"ca_certs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPKCS12</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_pkcs12_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cPKCS12</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_pkcs12_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
