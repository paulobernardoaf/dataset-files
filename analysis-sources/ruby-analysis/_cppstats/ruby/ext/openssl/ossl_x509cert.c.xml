<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\openssl\ossl_x509cert.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ossl.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NewX509</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TypedData_Wrap_Struct((klass), &amp;ossl_x509_type, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetX509</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>x509</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(x509)) { ossl_raise(rb_eRuntimeError, "CERT wasn't initialized!"); } RTYPEDDATA_DATA(obj) = (x509); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetX509</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>x509</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TypedData_Get_Struct((obj), X509, &amp;ossl_x509_type, (x509)); if (!(x509)) { ossl_raise(rb_eRuntimeError, "CERT wasn't initialized!"); } } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cX509Cert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>eX509CertError</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ossl_x509_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_x509_type</name> <init>= <expr><block>{

<expr><literal type="string">"OpenSSL/X509"</literal></expr>,

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><name>ossl_x509_free</name></expr>,

}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>VALUE</name></type>

<name>ossl_x509_new</name><parameter_list>(<parameter><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewX509</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x509</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>X509_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>X509_dup</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetX509</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>X509</name> <modifier>*</modifier></type>

<name>GetX509CertPtr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x509</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>X509</name> <modifier>*</modifier></type>

<name>DupX509CertPtr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_up_ref</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x509</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewX509</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x509</name> <operator>=</operator> <call><name>X509_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x509</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetX509</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>ossl_to_der_if_possible</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>ossl_obj2bio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x509</name> <operator>=</operator> <call><name>PEM_read_bio_X509</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x509</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OSSL_BIO_reset</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x509</name> <operator>=</operator> <call><name>d2i_X509_bio</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x509</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_check_frozen</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self</name> <operator>==</operator> <name>other</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>self</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x509</name> <operator>=</operator> <call><name>X509_dup</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x509</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>x509</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>i2d_X509</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>i2d_X509</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ossl_str_adjust</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_to_pem</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PEM_write_bio_X509</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_to_text</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static VALUE

ossl_x509_to_req(VALUE self)

{

X509 *x509;

X509_REQ *req;

VALUE obj;

GetX509(self, x509);

if (!(req = X509_to_X509_REQ(x509, NULL, EVP_md5()))) {

ossl_raise(eX509CertError, NULL);

}

obj = ossl_x509req_new(req);

X509_REQ_free(req);

return obj;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_get_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>X509_get_version</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_set_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>version</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ver</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ver</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><literal type="string">"version must be &gt;= 0!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_set_version</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>version</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_get_serial</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>asn1integer_to_num</name><argument_list>(<argument><expr><call><name>X509_get_serialNumber</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_set_serial</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>X509_set_serialNumber</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><call><name>num_to_asn1integer</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><call><name>X509_get_serialNumber</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>num</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_get_signature_algorithm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>i2a_ASN1_OBJECT</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>X509_get0_tbs_sigalg</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>algorithm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_get_subject</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_NAME</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ossl_x509name_new</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_set_subject</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>subject</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_set_subject_name</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><call><name>GetX509NamePtr</name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>subject</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_get_issuer</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_NAME</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>X509_get_issuer_name</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ossl_x509name_new</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_set_issuer</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>issuer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_set_issuer_name</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><call><name>GetX509NamePtr</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>issuer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_get_not_before</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ASN1_TIME</name> <modifier>*</modifier></type><name>asn1time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>asn1time</name> <operator>=</operator> <call><name>X509_get0_notBefore</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>asn1time_to_time</name><argument_list>(<argument><expr><name>asn1time</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_set_not_before</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_TIME</name> <modifier>*</modifier></type><name>asn1time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>asn1time</name> <operator>=</operator> <call><name>ossl_x509_time_adjust</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_set1_notBefore</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>asn1time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASN1_TIME_free</name><argument_list>(<argument><expr><name>asn1time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><literal type="string">"X509_set_notBefore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASN1_TIME_free</name><argument_list>(<argument><expr><name>asn1time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>time</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_get_not_after</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ASN1_TIME</name> <modifier>*</modifier></type><name>asn1time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>asn1time</name> <operator>=</operator> <call><name>X509_get0_notAfter</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>asn1time_to_time</name><argument_list>(<argument><expr><name>asn1time</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_set_not_after</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_TIME</name> <modifier>*</modifier></type><name>asn1time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>asn1time</name> <operator>=</operator> <call><name>ossl_x509_time_adjust</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_set1_notAfter</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>asn1time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASN1_TIME_free</name><argument_list>(<argument><expr><name>asn1time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><literal type="string">"X509_set_notAfter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASN1_TIME_free</name><argument_list>(<argument><expr><name>asn1time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>time</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_get_public_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>X509_get_pubkey</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ossl_pkey_new</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_set_public_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pkey</name> <operator>=</operator> <call><name>GetPKeyPtr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_pkey_check_public_key</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_set_pubkey</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><literal type="string">"X509_set_pubkey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>key</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_sign</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>digest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pkey</name> <operator>=</operator> <call><name>GetPrivPKeyPtr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>ossl_evp_get_digestbyname</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_sign</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_verify</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pkey</name> <operator>=</operator> <call><name>GetPKeyPtr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_pkey_check_public_key</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>X509_verify</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><name>Qtrue</name></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>ossl_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_check_private_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pkey</name> <operator>=</operator> <call><name>GetPrivPKeyPtr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_check_private_key</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_get_extensions</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_EXTENSION</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>X509_get_ext_count</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>X509_get_ext</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>ossl_x509ext_new</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ary</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_set_extensions</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ary</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_EXTENSION</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>OSSL_Check_Kind</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cX509Ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ext</name> <operator>=</operator> <call><name>X509_delete_ext</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>X509_EXTENSION_free</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>GetX509ExtPtr</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_add_ext</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>ary</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_add_extension</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>extension</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>x509</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_EXTENSION</name> <modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>GetX509ExtPtr</name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_add_ext</name><argument_list>(<argument><expr><name>x509</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509CertError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>extension</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"#&lt;%"</literal><name>PRIsVALUE</name><literal type="string">": subject=%+"</literal><name>PRIsVALUE</name><literal type="string">", "</literal>

<literal type="string">"issuer=%+"</literal><name>PRIsVALUE</name><literal type="string">", serial=%+"</literal><name>PRIsVALUE</name><literal type="string">", "</literal>

<literal type="string">"not_before=%+"</literal><name>PRIsVALUE</name><literal type="string">", not_after=%+"</literal><name>PRIsVALUE</name><literal type="string">"&gt;"</literal></expr></argument>,

<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ossl_x509_get_subject</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ossl_x509_get_issuer</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ossl_x509_get_serial</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ossl_x509_get_not_before</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ossl_x509_get_not_after</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_x509_eq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>cX509Cert</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetX509</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>!</operator><call><name>X509_cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_ossl_x509cert</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

mOSSL = rb_define_module("OpenSSL");

eOSSLError = rb_define_class_under(mOSSL, "OpenSSLError", rb_eStandardError);

mX509 = rb_define_module_under(mOSSL, "X509");

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>eX509CertError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mX509</name></expr></argument>, <argument><expr><literal type="string">"CertificateError"</literal></expr></argument>, <argument><expr><name>eOSSLError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cX509Cert</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mX509</name></expr></argument>, <argument><expr><literal type="string">"Certificate"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><name>ossl_x509_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_x509_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>ossl_x509_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_x509_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"to_pem"</literal></expr></argument>, <argument><expr><name>ossl_x509_to_pem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><literal type="string">"to_pem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"to_text"</literal></expr></argument>, <argument><expr><name>ossl_x509_to_text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>ossl_x509_get_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"version="</literal></expr></argument>, <argument><expr><name>ossl_x509_set_version</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"signature_algorithm"</literal></expr></argument>, <argument><expr><name>ossl_x509_get_signature_algorithm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"serial"</literal></expr></argument>, <argument><expr><name>ossl_x509_get_serial</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"serial="</literal></expr></argument>, <argument><expr><name>ossl_x509_set_serial</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"subject"</literal></expr></argument>, <argument><expr><name>ossl_x509_get_subject</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"subject="</literal></expr></argument>, <argument><expr><name>ossl_x509_set_subject</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"issuer"</literal></expr></argument>, <argument><expr><name>ossl_x509_get_issuer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"issuer="</literal></expr></argument>, <argument><expr><name>ossl_x509_set_issuer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"not_before"</literal></expr></argument>, <argument><expr><name>ossl_x509_get_not_before</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"not_before="</literal></expr></argument>, <argument><expr><name>ossl_x509_set_not_before</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"not_after"</literal></expr></argument>, <argument><expr><name>ossl_x509_get_not_after</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"not_after="</literal></expr></argument>, <argument><expr><name>ossl_x509_set_not_after</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"public_key"</literal></expr></argument>, <argument><expr><name>ossl_x509_get_public_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"public_key="</literal></expr></argument>, <argument><expr><name>ossl_x509_set_public_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"sign"</literal></expr></argument>, <argument><expr><name>ossl_x509_sign</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"verify"</literal></expr></argument>, <argument><expr><name>ossl_x509_verify</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"check_private_key"</literal></expr></argument>, <argument><expr><name>ossl_x509_check_private_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"extensions"</literal></expr></argument>, <argument><expr><name>ossl_x509_get_extensions</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"extensions="</literal></expr></argument>, <argument><expr><name>ossl_x509_set_extensions</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"add_extension"</literal></expr></argument>, <argument><expr><name>ossl_x509_add_extension</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>ossl_x509_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cX509Cert</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><name>ossl_x509_eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
