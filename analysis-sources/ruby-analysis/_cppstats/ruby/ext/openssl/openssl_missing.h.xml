<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\openssl\openssl_missing.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_EC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EC_CURVE_NIST2NID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>int</name></type> <name>ossl_EC_curve_nist2nid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EC_curve_nist2nid</name></cpp:macro> <cpp:value>ossl_EC_curve_nist2nid</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_REVOKED_DUP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_REVOKED_dup</name><parameter_list>(<parameter><type><name>rev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(X509_REVOKED *)ASN1_dup((i2d_of_void *)i2d_X509_REVOKED, (d2i_of_void *)d2i_X509_REVOKED, (char *)(rev))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_STORE_CTX_GET0_STORE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_CTX_get0_store</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;ctx)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_IS_SERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_is_server</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;server)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BN_GENCB_NEW</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_GENCB_new</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((BN_GENCB *)OPENSSL_malloc(sizeof(BN_GENCB)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BN_GENCB_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_GENCB_free</name><parameter_list>(<parameter><type><name>cb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPENSSL_free(cb)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BN_GENCB_GET_ARG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BN_GENCB_get_arg</name><parameter_list>(<parameter><type><name>cb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(cb)-&gt;arg</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EVP_MD_CTX_NEW</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_MD_CTX_new</name></cpp:macro> <cpp:value>EVP_MD_CTX_create</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EVP_MD_CTX_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_MD_CTX_free</name></cpp:macro> <cpp:value>EVP_MD_CTX_destroy</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HMAC_CTX_NEW</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>HMAC_CTX</name> <modifier>*</modifier></type><name>ossl_HMAC_CTX_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_CTX_new</name></cpp:macro> <cpp:value>ossl_HMAC_CTX_new</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HMAC_CTX_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>ossl_HMAC_CTX_free</name><parameter_list>(<parameter><decl><type><name>HMAC_CTX</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC_CTX_free</name></cpp:macro> <cpp:value>ossl_HMAC_CTX_free</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_STORE_GET_EX_DATA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_get_ex_data</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CRYPTO_get_ex_data(&amp;(x)-&gt;ex_data, (idx))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_STORE_SET_EX_DATA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_set_ex_data</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CRYPTO_set_ex_data(&amp;(x)-&gt;ex_data, (idx), (data))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_STORE_GET_EX_NEW_INDEX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>X509_STORE_get_ex_new_index</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_get_ex_new_index</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>newf</name></type></parameter>, <parameter><type><name>dupf</name></type></parameter>, <parameter><type><name>freef</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509_STORE, (l), (p), (newf), (dupf), (freef))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_CRL_GET0_SIGNATURE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>ossl_X509_CRL_get0_signature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>X509_CRL</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASN1_BIT_STRING</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>X509_ALGOR</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_CRL_get0_signature</name></cpp:macro> <cpp:value>ossl_X509_CRL_get0_signature</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_REQ_GET0_SIGNATURE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>ossl_X509_REQ_get0_signature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>X509_REQ</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASN1_BIT_STRING</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>X509_ALGOR</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_REQ_get0_signature</name></cpp:macro> <cpp:value>ossl_X509_REQ_get0_signature</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_REVOKED_GET0_SERIALNUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_REVOKED_get0_serialNumber</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;serialNumber)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_REVOKED_GET0_REVOCATIONDATE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_REVOKED_get0_revocationDate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;revocationDate)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_GET0_TBS_SIGALG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_get0_tbs_sigalg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;cert_info-&gt;signature)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_STORE_CTX_GET0_UNTRUSTED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_CTX_get0_untrusted</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;untrusted)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_STORE_CTX_GET0_CERT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_CTX_get0_cert</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;cert)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_STORE_CTX_GET0_CHAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_CTX_get0_chain</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_STORE_CTX_get_chain(ctx)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_SINGLERESP_GET0_ID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OCSP_SINGLERESP_get0_id</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;certId)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CTX_GET_CIPHERS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CTX_get_ciphers</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ctx)-&gt;cipher_list)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_UP_REF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_up_ref</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CRYPTO_add(&amp;(x)-&gt;references, 1, CRYPTO_LOCK_X509)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_CRL_UP_REF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_CRL_up_ref</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CRYPTO_add(&amp;(x)-&gt;references, 1, CRYPTO_LOCK_X509_CRL);</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_STORE_UP_REF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_STORE_up_ref</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CRYPTO_add(&amp;(x)-&gt;references, 1, CRYPTO_LOCK_X509_STORE);</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_SESSION_UP_REF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_SESSION_up_ref</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CRYPTO_add(&amp;(x)-&gt;references, 1, CRYPTO_LOCK_SSL_SESSION);</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EVP_PKEY_UP_REF</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_PKEY_up_ref</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CRYPTO_add(&amp;(x)-&gt;references, 1, CRYPTO_LOCK_EVP_PKEY);</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPAQUE_OPENSSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>LIBRESSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x2070000fL</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_PKEY_GETTER</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>, <parameter><type><name>_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline _type *EVP_PKEY_get0_##_type(EVP_PKEY *pkey) { return pkey-&gt;pkey._name; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_KEY_ACCESSOR2</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>, <parameter><type><name>_group</name></type></parameter>, <parameter><type><name>a1</name></type></parameter>, <parameter><type><name>a2</name></type></parameter>, <parameter><type><name>_fail_cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void _type##_get0_##_group(const _type *obj, const BIGNUM **a1, const BIGNUM **a2) { if (a1) *a1 = obj-&gt;a1; if (a2) *a2 = obj-&gt;a2; } static inline int _type##_set0_##_group(_type *obj, BIGNUM *a1, BIGNUM *a2) { if (_fail_cond) return 0; BN_clear_free(obj-&gt;a1); obj-&gt;a1 = a1; BN_clear_free(obj-&gt;a2); obj-&gt;a2 = a2; return 1; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPL_KEY_ACCESSOR3</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>, <parameter><type><name>_group</name></type></parameter>, <parameter><type><name>a1</name></type></parameter>, <parameter><type><name>a2</name></type></parameter>, <parameter><type><name>a3</name></type></parameter>, <parameter><type><name>_fail_cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void _type##_get0_##_group(const _type *obj, const BIGNUM **a1, const BIGNUM **a2, const BIGNUM **a3) { if (a1) *a1 = obj-&gt;a1; if (a2) *a2 = obj-&gt;a2; if (a3) *a3 = obj-&gt;a3; } static inline int _type##_set0_##_group(_type *obj, BIGNUM *a1, BIGNUM *a2, BIGNUM *a3) { if (_fail_cond) return 0; BN_clear_free(obj-&gt;a1); obj-&gt;a1 = a1; BN_clear_free(obj-&gt;a2); obj-&gt;a2 = a2; BN_clear_free(obj-&gt;a3); obj-&gt;a3 = a3; return 1; }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_RSA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>IMPL_PKEY_GETTER</name><argument_list>(<argument>RSA</argument>, <argument>rsa</argument>)</argument_list></macro>

<macro><name>IMPL_KEY_ACCESSOR3</name><argument_list>(<argument>RSA</argument>, <argument>key</argument>, <argument>n</argument>, <argument>e</argument>, <argument>d</argument>, <argument>(n == obj-&gt;n || e == obj-&gt;e || (obj-&gt;d &amp;&amp; d == obj-&gt;d))</argument>)</argument_list></macro>

<macro><name>IMPL_KEY_ACCESSOR2</name><argument_list>(<argument>RSA</argument>, <argument>factors</argument>, <argument>p</argument>, <argument>q</argument>, <argument>(p == obj-&gt;p || q == obj-&gt;q)</argument>)</argument_list></macro>

<macro><name>IMPL_KEY_ACCESSOR3</name><argument_list>(<argument>RSA</argument>, <argument>crt_params</argument>, <argument>dmp1</argument>, <argument>dmq1</argument>, <argument>iqmp</argument>, <argument>(dmp1 == obj-&gt;dmp1 || dmq1 == obj-&gt;dmq1 || iqmp == obj-&gt;iqmp)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_DSA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>IMPL_PKEY_GETTER</name><argument_list>(<argument>DSA</argument>, <argument>dsa</argument>)</argument_list></macro>

<macro><name>IMPL_KEY_ACCESSOR2</name><argument_list>(<argument>DSA</argument>, <argument>key</argument>, <argument>pub_key</argument>, <argument>priv_key</argument>, <argument>(pub_key == obj-&gt;pub_key || (obj-&gt;priv_key &amp;&amp; priv_key == obj-&gt;priv_key))</argument>)</argument_list></macro>

<macro><name>IMPL_KEY_ACCESSOR3</name><argument_list>(<argument>DSA</argument>, <argument>pqg</argument>, <argument>p</argument>, <argument>q</argument>, <argument>g</argument>, <argument>(p == obj-&gt;p || q == obj-&gt;q || g == obj-&gt;g)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_DH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>IMPL_PKEY_GETTER</name><argument_list>(<argument>DH</argument>, <argument>dh</argument>)</argument_list></macro>

<macro><name>IMPL_KEY_ACCESSOR2</name><argument_list>(<argument>DH</argument>, <argument>key</argument>, <argument>pub_key</argument>, <argument>priv_key</argument>, <argument>(pub_key == obj-&gt;pub_key || (obj-&gt;priv_key &amp;&amp; priv_key == obj-&gt;priv_key))</argument>)</argument_list></macro>

<macro><name>IMPL_KEY_ACCESSOR3</name><argument_list>(<argument>DH</argument>, <argument>pqg</argument>, <argument>p</argument>, <argument>q</argument>, <argument>g</argument>, <argument>(p == obj-&gt;p || (obj-&gt;q &amp;&amp; q == obj-&gt;q) || g == obj-&gt;g)</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ENGINE</name> <modifier>*</modifier></type><name>DH_get0_engine</name><parameter_list>(<parameter><decl><type><name>DH</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>dh</name><operator>-&gt;</operator><name>engine</name></name></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_EC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>IMPL_PKEY_GETTER</name><argument_list>(<argument>EC_KEY</argument>, <argument>ec</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IMPL_PKEY_GETTER</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IMPL_KEY_ACCESSOR2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IMPL_KEY_ACCESSOR3</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EVP_CTRL_AEAD_GET_TAG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_CTRL_AEAD_GET_TAG</name></cpp:macro> <cpp:value>EVP_CTRL_GCM_GET_TAG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_CTRL_AEAD_SET_TAG</name></cpp:macro> <cpp:value>EVP_CTRL_GCM_SET_TAG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_CTRL_AEAD_SET_IVLEN</name></cpp:macro> <cpp:value>EVP_CTRL_GCM_SET_IVLEN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_X509_GET0_NOTBEFORE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_get0_notBefore</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_get_notBefore(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_get0_notAfter</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_get_notAfter(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_CRL_get0_lastUpdate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_CRL_get_lastUpdate(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_CRL_get0_nextUpdate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_CRL_get_nextUpdate(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_set1_notBefore</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_set_notBefore(x, t)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_set1_notAfter</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_set_notAfter(x, t)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_CRL_set1_lastUpdate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_CRL_set_lastUpdate(x, t)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X509_CRL_set1_nextUpdate</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X509_CRL_set_nextUpdate(x, t)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_SESSION_GET_PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_SESSION_get_protocol_version</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;ssl_version)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TS_STATUS_INFO_GET0_STATUS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_STATUS_INFO_get0_status</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;status)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TS_STATUS_INFO_GET0_TEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_STATUS_INFO_get0_text</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;text)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TS_STATUS_INFO_GET0_FAILURE_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_STATUS_INFO_get0_failure_info</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)-&gt;failure_info)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TS_VERIFY_CTS_SET_CERTS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_VERIFY_CTS_set_certs</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>crts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ctx)-&gt;certs=(crts))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TS_VERIFY_CTX_SET_STORE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_VERIFY_CTX_set_store</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ctx)-&gt;store=(str))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TS_VERIFY_CTX_ADD_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_VERIFY_CTX_add_flags</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ctx)-&gt;flags |= (f))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TS_RESP_CTX_SET_TIME_CB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_RESP_CTX_set_time_cb</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>callback</name></type></parameter>, <parameter><type><name>dta</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (ctx)-&gt;time_cb = (callback); (ctx)-&gt;time_cb_data = (dta); } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
