<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\openssl\ossl_pkey_ec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ossl.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_EC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_PEM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPORT_DER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_ec_group_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_ec_point_type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetPKeyEC</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>pkey</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { GetPKey((obj), (pkey)); if (EVP_PKEY_base_id(pkey) != EVP_PKEY_EC) { ossl_raise(rb_eRuntimeError, "THIS IS NOT A EC PKEY!"); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetEC</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { EVP_PKEY *_pkey; GetPKeyEC(obj, _pkey); (key) = EVP_PKEY_get0_EC_KEY(_pkey); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetECGroup</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>group</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TypedData_Get_Struct(obj, EC_GROUP, &amp;ossl_ec_group_type, group); if ((group) == NULL) ossl_raise(eEC_GROUP, "EC_GROUP is not initialized"); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetECPoint</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>point</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TypedData_Get_Struct(obj, EC_POINT, &amp;ossl_ec_point_type, point); if ((point) == NULL) ossl_raise(eEC_POINT, "EC_POINT is not initialized"); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetECPointGroup</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>group</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { VALUE _group = rb_attr_get(obj, id_i_group); GetECGroup(_group, group); } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>eECError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cEC_GROUP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>eEC_GROUP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cEC_POINT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>eEC_POINT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>s_GFp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>s_GFp_simple</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>s_GFp_mont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>s_GFp_nist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>s_GF2m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>s_GF2m_simple</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>ID_uncompressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>ID_compressed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>ID_hybrid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_i_group</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ec_group_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ec_point_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ec_instance</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ec</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewPKey</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pkey</name> <operator>=</operator> <call><name>EVP_PKEY_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_PKEY_assign_EC_KEY</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetPKey</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type> <name>ossl_ec_new</name><parameter_list>(<parameter><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkey</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ec_instance</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><call><name>EC_KEY_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewPKey</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_base_id</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EVP_PKEY_EC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"Not a EC key!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetPKey</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EC_KEY</name> <modifier>*</modifier></type>

<name>ec_key_new_from_group</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cEC_GROUP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ec</name> <operator>=</operator> <call><name>EC_KEY_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EC_KEY_set_group</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nid</name> <init>= <expr><call><name>OBJ_sn2nid</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nid</name> <operator>==</operator> <name>NID_undef</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"invalid curve name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ec</name> <operator>=</operator> <call><name>EC_KEY_new_by_curve_name</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EC_KEY_set_asn1_flag</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>OPENSSL_EC_NAMED_CURVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_KEY_set_conv_form</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>POINT_CONVERSION_UNCOMPRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ec</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ec_key_s_generate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>ec_key_new_from_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ec_instance</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Qfalse</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EC_KEY_generate_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EC_KEY_generate_key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name></decl>, <decl><type ref="prev"/><name>pass</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPKey</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_base_id</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EVP_PKEY_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EC_KEY already initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ec</name> <operator>=</operator> <call><name>EC_KEY_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cEC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>other_ec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>other_ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ec</name> <operator>=</operator> <call><name>EC_KEY_dup</name><argument_list>(<argument><expr><name>other_ec</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>cEC_GROUP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>ec_key_new_from_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pass</name> <operator>=</operator> <call><name>ossl_pem_passwd_value</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>ossl_obj2bio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>PEM_read_bio_ECPrivateKey</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ossl_pem_passwd_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OSSL_BIO_reset</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>PEM_read_bio_EC_PUBKEY</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ossl_pem_passwd_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OSSL_BIO_reset</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>d2i_ECPrivateKey_bio</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OSSL_BIO_reset</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>d2i_EC_PUBKEY_bio</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>ec_key_new_from_group</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_PKEY_assign_EC_KEY</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EVP_PKEY_assign_EC_KEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ec_key_initialize_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ec_new</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPKey</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_base_id</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EVP_PKEY_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EC already initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ec_new</name> <operator>=</operator> <call><name>EC_KEY_dup</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ec_new</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EC_KEY_dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_PKEY_assign_EC_KEY</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>, <argument><expr><name>ec_new</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EVP_PKEY_assign_EC_KEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ec_key_get_group</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>EC_KEY_get0_group</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>group</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ec_group_new</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ec_key_set_group</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>group_v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>group_v</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_KEY_set_group</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EC_KEY_set_group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>group_v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_get_private_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bn</name> <operator>=</operator> <call><name>EC_KEY_get0_private_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ossl_bn_new</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_set_private_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>private_key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>private_key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>private_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>EC_KEY_set_private_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>bn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EC_KEY_set_private_key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>private_key</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_get_public_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>point</name> <operator>=</operator> <call><name>EC_KEY_get0_public_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ec_point_new</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><call><name>EC_KEY_get0_group</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_set_public_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>public_key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>public_key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>public_key</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>EC_KEY_set_public_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>point</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EC_KEY_set_public_key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>public_key</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_is_public</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>EC_KEY_get0_public_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_is_private</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>EC_KEY_get0_private_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_to_string</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ciph</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>private</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_CIPHER</name> <modifier>*</modifier></type><name>cipher</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_KEY_get0_public_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"can't export - no public key set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_KEY_check_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"can't export - EC_KEY_check_key failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_KEY_get0_private_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>private</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>ciph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name>ossl_evp_get_cipherbyname</name><argument_list>(<argument><expr><name>ciph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pass</name> <operator>=</operator> <call><name>ossl_pem_passwd_value</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>out</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"BIO_new(BIO_s_mem())"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXPORT_PEM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>private</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PEM_write_bio_ECPrivateKey</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ossl_pem_passwd_cb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PEM_write_bio_EC_PUBKEY</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>EXPORT_DER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>private</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>i2d_ECPrivateKey_bio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>i2d_EC_PUBKEY_bio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"unknown format (internal error)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"outlen=%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_export</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cipher</name></decl>, <decl><type ref="prev"/><name>passwd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cipher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ossl_ec_key_to_string</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>EXPORT_PEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ossl_ec_key_to_string</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>EXPORT_DER</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_to_text</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>out</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"BIO_new(BIO_s_mem())"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EC_KEY_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EC_KEY_print"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_generate_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_KEY_generate_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EC_KEY_generate_key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_check_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_KEY_check_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"EC_KEY_check_key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_dh_compute_key</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>pubkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_len</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_len</name> <operator>=</operator> <call><name>ECDH_compute_key</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"ECDH_compute_key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_dsa_sign_asn1</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_KEY_get0_private_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"Private EC key needed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>ECDSA_size</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ECDSA_sign</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_len</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"ECDSA_sign"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_key_dsa_verify_asn1</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetEC</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>ECDSA_verify</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name>Qtrue</name></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><name>Qfalse</name></expr>;</return>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><literal type="string">"ECDSA_verify"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ossl_ec_group_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>EC_GROUP_clear_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_ec_group_type</name> <init>= <expr><block>{

<expr><literal type="string">"OpenSSL/ec_group"</literal></expr>,

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><name>ossl_ec_group_free</name></expr>,

}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ec_group_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ossl_ec_group_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ec_group_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group_new</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ossl_ec_group_alloc</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>group_new</name> <operator>=</operator> <call><name>EC_GROUP_dup</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>group_new</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"EC_GROUP_dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>group_new</name></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>arg1</name></decl>, <decl><type ref="prev"/><name>arg2</name></decl>, <decl><type ref="prev"/><name>arg3</name></decl>, <decl><type ref="prev"/><name>arg4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>EC_GROUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ossl_ec_group_type</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>group</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"EC_GROUP is already initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"13"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_METHOD</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>s_GFp_simple</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>EC_GFp_simple_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <name>s_GFp_mont</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>EC_GFp_mont_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <name>s_GFp_nist</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>EC_GFp_nist_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_EC2M</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <name>s_GF2m_simple</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>EC_GF2m_simple_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>method</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>group</name> <operator>=</operator> <call><name>EC_GROUP_new</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"EC_GROUP_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unknown symbol, must be :GFp_simple, :GFp_mont, :GFp_nist or :GF2m_simple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>cEC_GROUP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>arg1_group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg1_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>group</name> <operator>=</operator> <call><name>EC_GROUP_dup</name><argument_list>(<argument><expr><name>arg1_group</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"EC_GROUP_dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>ossl_obj2bio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>PEM_read_bio_ECPKParameters</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>group</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OSSL_BIO_reset</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>d2i_ECPKParameters_bio</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>group</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nid</name> <init>= <expr><call><name>OBJ_sn2nid</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ossl_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>nid</name> <operator>==</operator> <name>NID_undef</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"unknown curve name (%"</literal><name>PRIsVALUE</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>EC_GROUP_new_by_curve_name</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"unable to create curve (%"</literal><name>PRIsVALUE</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EC_GROUP_set_asn1_flag</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>OPENSSL_EC_NAMED_CURVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_GROUP_set_point_conversion_form</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>POINT_CONVERSION_UNCOMPRESSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><name>EC_GROUP</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>new_curve</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>BN_CTX</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GetBNPtr</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>GetBNPtr</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>GetBNPtr</name><argument_list>(<argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>s_GFp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_curve</name> <operator>=</operator> <name>EC_GROUP_new_curve_GFp</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_EC2M</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <name>s_GF2m</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_curve</name> <operator>=</operator> <name>EC_GROUP_new_curve_GF2m</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unknown symbol, must be :GFp or :GF2m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>group</name> <operator>=</operator> <call><name>new_curve</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"EC_GROUP_new_by_GF*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unknown argument, must be :GFp or :GF2m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"wrong number of arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>group</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ec_group_initialize_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>group_new</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>EC_GROUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ossl_ec_group_type</name></expr></argument>, <argument><expr><name>group_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>group_new</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"EC::Group already initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>group_new</name> <operator>=</operator> <call><name>EC_GROUP_dup</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>group_new</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"EC_GROUP_dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>group_new</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_eql</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>group2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>group1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>group2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_GROUP_cmp</name><argument_list>(<argument><expr><name>group1</name></expr></argument>, <argument><expr><name>group2</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_get_generator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_POINT</name> <modifier>*</modifier></type><name>generator</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>generator</name> <operator>=</operator> <call><name>EC_GROUP_get0_generator</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>generator</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ec_point_new</name><argument_list>(<argument><expr><name>generator</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_set_generator</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>generator</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>cofactor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>o</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>co</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>generator</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>co</name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>cofactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_GROUP_set_generator</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>co</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"EC_GROUP_set_generator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_get_order</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>bn_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bn_obj</name> <operator>=</operator> <call><name>ossl_bn_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>bn_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_GROUP_get_order</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"EC_GROUP_get_order"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bn_obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_get_cofactor</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>bn_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bn_obj</name> <operator>=</operator> <call><name>ossl_bn_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>bn_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_GROUP_get_cofactor</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"EC_GROUP_get_cofactor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bn_obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_get_curve_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nid</name> <operator>=</operator> <call><name>EC_GROUP_get_curve_name</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>OBJ_nid2sn</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_s_builtin_curves</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_builtin_curve</name> <modifier>*</modifier></type><name>curves</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crv_len</name> <init>= <expr><call><name>rb_long2int</name><argument_list>(<argument><expr><call><name>EC_get_builtin_curves</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>curves</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>EC_builtin_curve</name></expr></argument>, <argument><expr><name>crv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>curves</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EC_get_builtin_curves</name><argument_list>(<argument><expr><name>curves</name></expr></argument>, <argument><expr><name>crv_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"EC_get_builtin_curves"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><name>crv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>crv_len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sname</name> <init>= <expr><call><name>OBJ_nid2sn</name><argument_list>(<argument><expr><name><name>curves</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>nid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><name><name>curves</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>comment</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><ternary><condition><expr><name>comment</name></expr> ?</condition><then> <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>Qnil</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_get_asn1_flag</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>EC_GROUP_get_asn1_flag</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_set_asn1_flag</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>flag_v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_GROUP_set_asn1_flag</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>flag_v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>flag_v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_get_point_conversion_form</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>point_conversion_form_t</name></type> <name>form</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>EC_GROUP_get_point_conversion_form</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>form</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>POINT_CONVERSION_UNCOMPRESSED</name></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ID_uncompressed</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>POINT_CONVERSION_COMPRESSED</name></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ID_compressed</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>POINT_CONVERSION_HYBRID</name></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ID_hybrid</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"unsupported point conversion form: %d, this module should be updated"</literal></expr></argument>, <argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><call><name>ID2SYM</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>point_conversion_form_t</name></type>

<name>parse_point_conversion_form_symbol</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ID</name></type> <name>id</name> <init>= <expr><call><name>SYM2ID</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>ID_uncompressed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>POINT_CONVERSION_UNCOMPRESSED</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <name>ID_compressed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>POINT_CONVERSION_COMPRESSED</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <name>ID_hybrid</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>POINT_CONVERSION_HYBRID</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unsupported point conversion form %+"</literal><name>PRIsVALUE</name>

<literal type="string">" (expected :compressed, :uncompressed, or :hybrid)"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ec_group_set_point_conversion_form</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>form_v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>point_conversion_form_t</name></type> <name>form</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>parse_point_conversion_form_symbol</name><argument_list>(<argument><expr><name>form_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EC_GROUP_set_point_conversion_form</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>form_v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_get_seed</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>seed_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seed_len</name> <operator>=</operator> <call><name>EC_GROUP_get_seed_len</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seed_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>EC_GROUP_get0_seed</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>seed_len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_set_seed</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>seed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_GROUP_set_seed</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"EC_GROUP_set_seed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>seed</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_get_degree</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>EC_GROUP_get_degree</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_to_string</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>out</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"BIO_new(BIO_s_mem())"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXPORT_PEM</name></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PEM_write_bio_ECPKParameters</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXPORT_DER</name></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>i2d_ECPKParameters_bio</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"unknown format (internal error)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eECError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_to_pem</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ossl_ec_group_to_string</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>EXPORT_PEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ossl_ec_group_to_string</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>EXPORT_DER</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_group_to_text</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>out</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"BIO_new(BIO_s_mem())"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ECPKParameters_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_GROUP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ossl_ec_point_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>EC_POINT_clear_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_ec_point_type</name> <init>= <expr><block>{

<expr><literal type="string">"OpenSSL/EC_POINT"</literal></expr>,

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><name>ossl_ec_point_free</name></expr>,

}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ec_point_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>TypedData_Wrap_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ossl_ec_point_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ec_point_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ossl_ec_point_alloc</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>point_new</name> <operator>=</operator> <call><name>EC_POINT_dup</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>point_new</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>point_new</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_i_group</name></expr></argument>, <argument><expr><call><name>ec_group_new</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_point_initialize_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>, <parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_point_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>group_v</name></decl>, <decl><type ref="prev"/><name>arg2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>EC_POINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ossl_ec_point_type</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>point</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT already initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>group_v</name></expr></argument>, <argument><expr><name>cEC_POINT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"invalid second argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ossl_ec_point_initialize_copy</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group_v</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>group_v</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>point</name> <operator>=</operator> <call><name>EC_POINT_new</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>point</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>cBN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>point</name> <operator>=</operator> <call><name>EC_POINT_bn2point</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><call><name>GetBNPtr</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>point</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_bn2point"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>point</name> <operator>=</operator> <call><name>EC_POINT_new</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>point</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EC_POINT_oct2point</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EC_POINT_free</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_oct2point"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>point</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_i_group</name></expr></argument>, <argument><expr><name>group_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ec_point_initialize_copy</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>point_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>group_v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>EC_POINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ossl_ec_point_type</name></expr></argument>, <argument><expr><name>point_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>point_new</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC::Point already initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>group_v</name> <operator>=</operator> <call><name>rb_obj_dup</name><argument_list>(<argument><expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>id_i_group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>group_v</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>point_new</name> <operator>=</operator> <call><name>EC_POINT_dup</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>point_new</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_dup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>RTYPEDDATA_DATA</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>point_new</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_i_group</name></expr></argument>, <argument><expr><name>group_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_point_eql</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>point2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>group_v1</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>id_i_group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>group_v2</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>id_i_group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ossl_ec_group_eql</name><argument_list>(<argument><expr><name>group_v1</name></expr></argument>, <argument><expr><name>group_v2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Qfalse</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>point1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>point2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>group_v1</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_POINT_cmp</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point1</name></expr></argument>, <argument><expr><name>point2</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_point_is_at_infinity</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPointGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>EC_POINT_is_at_infinity</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name>Qtrue</name></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><name>Qfalse</name></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_is_at_infinity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_point_is_on_curve</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPointGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>EC_POINT_is_on_curve</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name>Qtrue</name></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><name>Qfalse</name></expr>;</return>

<default>default:</default> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_is_on_curve"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_point_make_affine</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPointGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_POINT_make_affine</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_make_affine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_point_invert</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPointGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_POINT_invert</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_invert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_point_set_to_infinity</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPointGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_POINT_set_to_infinity</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_set_to_infinity"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ec_point_to_octet_string</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>conversion_form</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>point_conversion_form_t</name></type> <name>form</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPointGroup</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>form</name> <operator>=</operator> <call><name>parse_point_conversion_form_symbol</name><argument_list>(<argument><expr><name>conversion_form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>EC_POINT_point2oct</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_point2oct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EC_POINT_point2oct</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>form</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_point2oct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_point_add</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point_self</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>point_other</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>point_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>group_v</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_i_group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>point_self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>point_other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>group_v</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_ec_point_initialize</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_v</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>point_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_POINT_add</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point_result</name></expr></argument>, <argument><expr><name>point_self</name></expr></argument>, <argument><expr><name>point_other</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"EC_POINT_add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_ec_point_mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>EC_POINT</name> <modifier>*</modifier></type><name>point_self</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>point_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_GROUP</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>group_v</name> <init>= <expr><call><name>rb_attr_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id_i_group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>arg1</name></decl>, <decl><type ref="prev"/><name>arg2</name></decl>, <decl><type ref="prev"/><name>arg3</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>bn_g</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>point_self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECGroup</name><argument_list>(<argument><expr><name>group_v</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_ec_point_initialize</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>group_v</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>point_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"12"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name> <init>= <expr><call><name>GetBNPtr</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bn_g</name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_POINT_mul</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point_result</name></expr></argument>, <argument><expr><name>bn_g</name></expr></argument>, <argument><expr><name>point_self</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>bns_tmp</name></decl>, <decl><type ref="prev"/><name>tmp_p</name></decl>, <decl><type ref="prev"/><name>tmp_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EC_POINT</name> <modifier>*</modifier><modifier>*</modifier></type><name>points</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier><modifier>*</modifier></type><name>bignums</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"bns must be 1 longer than points; see the documentation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bns_tmp</name> <operator>=</operator> <call><name>rb_ary_tmp_new</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bignums</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BIGNUM</name> <operator>*</operator></expr></argument>, <argument><expr><name>tmp_b</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>item</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bignums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>bns_tmp</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>points</name> <operator>=</operator> <call><name>ALLOCV_N</name><argument_list>(<argument><expr><specifier>const</specifier> <name>EC_POINT</name> <operator>*</operator></expr></argument>, <argument><expr><name>tmp_p</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>point_self</name></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetECPoint</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bn_g</name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EC_POINTs_mul</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>point_result</name></expr></argument>, <argument><expr><name>bn_g</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>points</name></expr></argument>, <argument><expr><name>bignums</name></expr></argument>, <argument><expr><name>ossl_bn_ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>tmp_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>tmp_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eEC_POINT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>tmp_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>tmp_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_ossl_ec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

mPKey = rb_define_module_under(mOSSL, "PKey");

cPKey = rb_define_class_under(mPKey, "PKey", rb_cObject);

eOSSLError = rb_define_class_under(mOSSL, "OpenSSLError", rb_eStandardError);

ePKeyError = rb_define_class_under(mPKey, "PKeyError", eOSSLError);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>eECError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mPKey</name></expr></argument>, <argument><expr><literal type="string">"ECError"</literal></expr></argument>, <argument><expr><name>ePKeyError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cEC</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mPKey</name></expr></argument>, <argument><expr><literal type="string">"EC"</literal></expr></argument>, <argument><expr><name>cPKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cEC_GROUP</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"Group"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cEC_POINT</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"Point"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eEC_GROUP</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>, <argument><expr><name>eOSSLError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eEC_POINT</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>, <argument><expr><name>eOSSLError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_GFp</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"GFp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_GF2m</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"GF2m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_GFp_simple</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"GFp_simple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_GFp_mont</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"GFp_mont"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_GFp_nist</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"GFp_nist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s_GF2m_simple</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"GF2m_simple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ID_uncompressed</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"uncompressed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ID_compressed</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"compressed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ID_hybrid</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"hybrid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"NAMED_CURVE"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>OPENSSL_EC_NAMED_CURVE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_EC_EXPLICIT_CURVE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"EXPLICIT_CURVE"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>OPENSSL_EC_EXPLICIT_CURVE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"builtin_curves"</literal></expr></argument>, <argument><expr><name>ossl_s_builtin_curves</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"generate"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_s_generate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_initialize_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"group"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_get_group</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"group="</literal></expr></argument>, <argument><expr><name>ossl_ec_key_set_group</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"private_key"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_get_private_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"private_key="</literal></expr></argument>, <argument><expr><name>ossl_ec_key_set_private_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"public_key"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_get_public_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"public_key="</literal></expr></argument>, <argument><expr><name>ossl_ec_key_set_public_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"private?"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_is_private</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"public?"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_is_public</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"private_key?"</literal></expr></argument>, <argument><expr><literal type="string">"private?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"public_key?"</literal></expr></argument>, <argument><expr><literal type="string">"public?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"generate_key!"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_generate_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"generate_key"</literal></expr></argument>, <argument><expr><literal type="string">"generate_key!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"check_key"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_check_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"dh_compute_key"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_dh_compute_key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"dsa_sign_asn1"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_dsa_sign_asn1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"dsa_verify_asn1"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_dsa_verify_asn1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"export"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_export</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"to_pem"</literal></expr></argument>, <argument><expr><literal type="string">"export"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC</name></expr></argument>, <argument><expr><literal type="string">"to_text"</literal></expr></argument>, <argument><expr><name>ossl_ec_key_to_text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><name>ossl_ec_group_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_initialize_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"eql?"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_eql</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><literal type="string">"eql?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"generator"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_get_generator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"set_generator"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_set_generator</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"order"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_get_order</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"cofactor"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_get_cofactor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"curve_name"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_get_curve_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"asn1_flag"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_get_asn1_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"asn1_flag="</literal></expr></argument>, <argument><expr><name>ossl_ec_group_set_asn1_flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"point_conversion_form"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_get_point_conversion_form</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"point_conversion_form="</literal></expr></argument>, <argument><expr><name>ossl_ec_group_set_point_conversion_form</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"seed"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_get_seed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"seed="</literal></expr></argument>, <argument><expr><name>ossl_ec_group_set_seed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"degree"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_get_degree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"to_pem"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_to_pem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_GROUP</name></expr></argument>, <argument><expr><literal type="string">"to_text"</literal></expr></argument>, <argument><expr><name>ossl_ec_group_to_text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><name>ossl_ec_point_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"initialize_copy"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_initialize_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"group"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"eql?"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_eql</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><literal type="string">"eql?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"infinity?"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_is_at_infinity</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"on_curve?"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_is_on_curve</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"make_affine!"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_make_affine</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"invert!"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_invert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"set_to_infinity!"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_set_to_infinity</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"to_octet_string"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_to_octet_string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_add</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cEC_POINT</name></expr></argument>, <argument><expr><literal type="string">"mul"</literal></expr></argument>, <argument><expr><name>ossl_ec_point_mul</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_i_group</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><name>void</name></type> <name>Init_ossl_ec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
