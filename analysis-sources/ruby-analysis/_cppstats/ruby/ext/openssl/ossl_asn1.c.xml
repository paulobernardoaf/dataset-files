<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\openssl\ossl_asn1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ossl.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_asn1_decode0</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yield</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>num_read</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_asn1_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>VALUE</name></type>

<name>asn1time_to_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASN1_TIME</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>time</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>V_ASN1_UTCTIME</name></expr>:</case>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>time</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%2d%2d%2d%2d%2d%2dZ"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"bad UTCTIME format: \"%s\""</literal></expr></argument>,

<argument><expr><name><name>time</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>&lt;</operator> <literal type="number">69</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+=</operator> <literal type="number">1900</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_GENERALIZEDTIME</name></expr>:</case>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>time</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="string">"%4d%2d%2d%2d%2d%2dZ"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"bad GENERALIZEDTIME format: \"%s\""</literal></expr></argument>,

<argument><expr><name><name>time</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>rb_warning</name><argument_list>(<argument><expr><literal type="string">"unknown time format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_funcall2</name><argument_list>(<argument><expr><name>rb_cTime</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"utc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ossl_time_split</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>days</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name> <init>= <expr><call><name>rb_Integer</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>sec</name> <operator>=</operator> <name>t</name> <operator>%</operator> <literal type="number">86400</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>days</name> <operator>=</operator> <call><name>rb_long2int</name><argument_list>(<argument><expr><name>t</name> <operator>/</operator> <literal type="number">86400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>days</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sec</name> <operator>=</operator> <call><name>NUM2TIMET</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>asn1str_to_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASN1_STRING</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>asn1integer_to_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASN1_INTEGER</name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ai</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"ASN1_INTEGER is NULL!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ai</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>V_ASN1_ENUMERATED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>ASN1_ENUMERATED_to_BN</name><argument_list>(<argument><expr><operator>(</operator><name>ASN1_ENUMERATED</name> <operator>*</operator><operator>)</operator><name>ai</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>ASN1_INTEGER_to_BN</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bn</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eOSSLError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>ossl_bn_new</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>num</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ASN1_INTEGER</name> <modifier>*</modifier></type>

<name>num_to_asn1integer</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>ASN1_INTEGER</name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"Can't convert nil into Integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bn</name> <operator>=</operator> <call><name>GetBNPtr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ai</name> <operator>=</operator> <call><name>BN_to_ASN1_INTEGER</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eOSSLError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ai</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_asn1_get_value</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_attr_get((o),sivVALUE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_asn1_get_tag</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_attr_get((o),sivTAG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_asn1_get_tagging</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_attr_get((o),sivTAGGING)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_asn1_get_tag_class</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_attr_get((o),sivTAG_CLASS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_asn1_get_indefinite_length</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_attr_get((o),sivINDEFINITE_LENGTH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_asn1_set_value</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_ivar_set((o),sivVALUE,(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_asn1_set_tag</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_ivar_set((o),sivTAG,(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_asn1_set_tagging</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_ivar_set((o),sivTAGGING,(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_asn1_set_tag_class</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_ivar_set((o),sivTAG_CLASS,(v))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_asn1_set_indefinite_length</name><parameter_list>(<parameter><type><name>o</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_ivar_set((o),sivINDEFINITE_LENGTH,(v))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>VALUE</name></type> <name>mASN1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>eASN1Error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1Data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1Primitive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1Constructive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1EndOfContent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1Boolean</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1Integer</name></decl>, <decl><type ref="prev"/><name>cASN1Enumerated</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1BitString</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1OctetString</name></decl>, <decl><type ref="prev"/><name>cASN1UTF8String</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1NumericString</name></decl>, <decl><type ref="prev"/><name>cASN1PrintableString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1T61String</name></decl>, <decl><type ref="prev"/><name>cASN1VideotexString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1IA5String</name></decl>, <decl><type ref="prev"/><name>cASN1GraphicString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1ISO64String</name></decl>, <decl><type ref="prev"/><name>cASN1GeneralString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1UniversalString</name></decl>, <decl><type ref="prev"/><name>cASN1BMPString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1Null</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1ObjectId</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1UTCTime</name></decl>, <decl><type ref="prev"/><name>cASN1GeneralizedTime</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VALUE</name></type> <name>cASN1Sequence</name></decl>, <decl><type ref="prev"/><name>cASN1Set</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>sym_IMPLICIT</name></decl>, <decl><type ref="prev"/><name>sym_EXPLICIT</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>sym_UNIVERSAL</name></decl>, <decl><type ref="prev"/><name>sym_APPLICATION</name></decl>, <decl><type ref="prev"/><name>sym_CONTEXT_SPECIFIC</name></decl>, <decl><type ref="prev"/><name>sym_PRIVATE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>sivVALUE</name></decl>, <decl><type ref="prev"/><name>sivTAG</name></decl>, <decl><type ref="prev"/><name>sivTAG_CLASS</name></decl>, <decl><type ref="prev"/><name>sivTAGGING</name></decl>, <decl><type ref="prev"/><name>sivINDEFINITE_LENGTH</name></decl>, <decl><type ref="prev"/><name>sivUNUSED_BITS</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>id_each</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ASN1_BOOLEAN</name></type>

<name>obj_to_asn1bool</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"Can't convert nil into Boolean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0xff</literal></expr> </then><else>: <expr><literal type="number">0x0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASN1_INTEGER</name><modifier>*</modifier></type>

<name>obj_to_asn1int</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>num_to_asn1integer</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASN1_BIT_STRING</name><modifier>*</modifier></type>

<name>obj_to_asn1bstr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>unused_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_BIT_STRING</name> <modifier>*</modifier></type><name>bstr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unused_bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>unused_bits</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"unused_bits for a bitstring value must be in "</literal>\

<literal type="string">"the range 0 to 7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>bstr</name> <operator>=</operator> <call><name>ASN1_BIT_STRING_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASN1_BIT_STRING_set</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bstr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ASN1_STRING_FLAG_BITS_LEFT</name><operator>|</operator><literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>bstr</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ASN1_STRING_FLAG_BITS_LEFT</name> <operator>|</operator> <name>unused_bits</name></expr>;</expr_stmt>

<return>return <expr><name>bstr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASN1_STRING</name><modifier>*</modifier></type>

<name>obj_to_asn1str</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_STRING</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>str</name> <operator>=</operator> <call><name>ASN1_STRING_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASN1_STRING_set</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASN1_NULL</name><modifier>*</modifier></type>

<name>obj_to_asn1null</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_NULL</name> <modifier>*</modifier></type><name>null</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"nil expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>null</name> <operator>=</operator> <call><name>ASN1_NULL_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>null</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASN1_OBJECT</name><modifier>*</modifier></type>

<name>obj_to_asn1obj</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>a1obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a1obj</name> <operator>=</operator> <call><name>OBJ_txt2obj</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>a1obj</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a1obj</name> <operator>=</operator> <call><name>OBJ_txt2obj</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>a1obj</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"invalid OBJECT ID %"</literal><name>PRIsVALUE</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>a1obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASN1_UTCTIME</name> <modifier>*</modifier></type>

<name>obj_to_asn1utime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_UTCTIME</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off_days</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ossl_time_split</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off_days</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>=</operator> <call><name>ASN1_UTCTIME_adj</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>off_days</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASN1_GENERALIZEDTIME</name> <modifier>*</modifier></type>

<name>obj_to_asn1gtime</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_GENERALIZEDTIME</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off_days</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ossl_time_split</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off_days</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>t</name> <operator>=</operator> <call><name>ASN1_GENERALIZEDTIME_adj</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>off_days</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASN1_STRING</name><modifier>*</modifier></type>

<name>obj_to_asn1derstr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_STRING</name> <modifier>*</modifier></type><name>a1str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_to_der</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>a1str</name> <operator>=</operator> <call><name>ASN1_STRING_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASN1_STRING_set</name><argument_list>(<argument><expr><name>a1str</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>a1str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>decode_bool</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>der</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>der</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"invalid length for BOOLEAN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"invalid BOOLEAN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>decode_int</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>der</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_INTEGER</name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>der</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>ai</name> <operator>=</operator> <call><name>d2i_ASN1_INTEGER</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>asn1integer_to_num</name></expr></argument>,

<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_INTEGER_free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>decode_bstr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>der</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>unused_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_BIT_STRING</name> <modifier>*</modifier></type><name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>der</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>bstr</name> <operator>=</operator> <call><name>d2i_ASN1_BIT_STRING</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>bstr</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>unused_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bstr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ASN1_STRING_FLAG_BITS_LEFT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>unused_bits</name> <operator>=</operator> <name><name>bstr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>bstr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_BIT_STRING_free</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>decode_enum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>der</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_ENUMERATED</name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>der</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>ai</name> <operator>=</operator> <call><name>d2i_ASN1_ENUMERATED</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>asn1integer_to_num</name></expr></argument>,

<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_ENUMERATED_free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>decode_null</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>der</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_NULL</name> <modifier>*</modifier></type><name>null</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>der</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>null</name> <operator>=</operator> <call><name>d2i_ASN1_NULL</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASN1_NULL_free</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>decode_obj</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>der</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>bio</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>der</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>=</operator> <call><name>d2i_ASN1_OBJECT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>nid</name> <operator>=</operator> <call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NID_undef</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ASN1_OBJECT_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>OBJ_nid2sn</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>bio</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ASN1_OBJECT_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>i2a_ASN1_OBJECT</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_OBJECT_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>decode_time</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>der</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_TIME</name> <modifier>*</modifier></type><name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>der</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>time</name> <operator>=</operator> <call><name>d2i_ASN1_TIME</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>asn1time_to_time</name></expr></argument>,

<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_TIME_free</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>decode_eoc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>der</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>der</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>der</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>klass</name></decl>;</decl_stmt>

}</block></struct></type> <name>ossl_asn1_info_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ossl_asn1_info_t</name></type> <name><name>ossl_asn1_info</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"EOC"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1EndOfContent</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"BOOLEAN"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1Boolean</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"INTEGER"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1Integer</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"BIT_STRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1BitString</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"OCTET_STRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1OctetString</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"NULL"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1Null</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"OBJECT"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1ObjectId</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"OBJECT_DESCRIPTOR"</literal></expr>, <expr><name>NULL</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"EXTERNAL"</literal></expr>, <expr><name>NULL</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"REAL"</literal></expr>, <expr><name>NULL</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"ENUMERATED"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1Enumerated</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"EMBEDDED_PDV"</literal></expr>, <expr><name>NULL</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"UTF8STRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1UTF8String</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"RELATIVE_OID"</literal></expr>, <expr><name>NULL</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"[UNIVERSAL 14]"</literal></expr>, <expr><name>NULL</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"[UNIVERSAL 15]"</literal></expr>, <expr><name>NULL</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"SEQUENCE"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1Sequence</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"SET"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1Set</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"NUMERICSTRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1NumericString</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"PRINTABLESTRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1PrintableString</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"T61STRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1T61String</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"VIDEOTEXSTRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1VideotexString</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"IA5STRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1IA5String</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"UTCTIME"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1UTCTime</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"GENERALIZEDTIME"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1GeneralizedTime</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"GRAPHICSTRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1GraphicString</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"ISO64STRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1ISO64String</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"GENERALSTRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1GeneralString</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"UNIVERSALSTRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1UniversalString</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"CHARACTER_STRING"</literal></expr>, <expr><name>NULL</name></expr>, }</block></expr>, 

<expr><block>{ <expr><literal type="string">"BMPSTRING"</literal></expr>, <expr><operator>&amp;</operator><name>cASN1BMPString</name></expr>, }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{<decl><name>ossl_asn1_info_size</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ossl_asn1_info</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ossl_asn1_info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>class_tag_map</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ossl_asn1_default_tag</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>ASN1_TYPE</name><modifier>*</modifier></type>

<name>ossl_asn1_get_asn1type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_TYPE</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>rflag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_func</name>)<parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>ossl_asn1_default_tag</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ossl_asn1_get_value</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>V_ASN1_BOOLEAN</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>obj_to_asn1bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_func</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_INTEGER</name></expr>:</case> 

<case>case <expr><name>V_ASN1_ENUMERATED</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>obj_to_asn1int</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_func</name> <operator>=</operator> <name>ASN1_INTEGER_free</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_BIT_STRING</name></expr>:</case>

<expr_stmt><expr><name>rflag</name> <operator>=</operator> <call><name>rb_attr_get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sivUNUSED_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>obj_to_asn1bstr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>rflag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_func</name> <operator>=</operator> <name>ASN1_BIT_STRING_free</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_NULL</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>obj_to_asn1null</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_func</name> <operator>=</operator> <name>ASN1_NULL_free</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_OCTET_STRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_UTF8STRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_NUMERICSTRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_PRINTABLESTRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_T61STRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_VIDEOTEXSTRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_IA5STRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_GRAPHICSTRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_ISO64STRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_GENERALSTRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_UNIVERSALSTRING</name></expr>:</case> 

<case>case <expr><name>V_ASN1_BMPSTRING</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>obj_to_asn1str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_func</name> <operator>=</operator> <name>ASN1_STRING_free</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_OBJECT</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>obj_to_asn1obj</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_func</name> <operator>=</operator> <name>ASN1_OBJECT_free</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_UTCTIME</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>obj_to_asn1utime</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_func</name> <operator>=</operator> <name>ASN1_TIME_free</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_GENERALIZEDTIME</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>obj_to_asn1gtime</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_func</name> <operator>=</operator> <name>ASN1_TIME_free</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_SET</name></expr>:</case> 

<case>case <expr><name>V_ASN1_SEQUENCE</name></expr>:</case>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>obj_to_asn1derstr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>free_func</name> <operator>=</operator> <name>ASN1_STRING_free</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"unsupported ASN.1 type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>OPENSSL_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ASN1_TYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>free_func</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free_func</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"ASN1_TYPE alloc failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ASN1_TYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_TYPE_set</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ossl_asn1_default_tag</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp_class</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp_class</name> <operator>=</operator> <call><name>CLASS_OF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tmp_class</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>rb_hash_lookup</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>tmp_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp_class</name> <operator>=</operator> <call><name>rb_class_superclass</name><argument_list>(<argument><expr><name>tmp_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ossl_asn1_tag</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>ossl_asn1_get_tag</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"tag number not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ossl_asn1_tag_class</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ossl_asn1_get_tag_class</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>s</name> <operator>==</operator> <name>sym_UNIVERSAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>V_ASN1_UNIVERSAL</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>s</name> <operator>==</operator> <name>sym_APPLICATION</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>V_ASN1_APPLICATION</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>s</name> <operator>==</operator> <name>sym_CONTEXT_SPECIFIC</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>V_ASN1_CONTEXT_SPECIFIC</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>s</name> <operator>==</operator> <name>sym_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>V_ASN1_PRIVATE</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"invalid tag class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1_class2sym</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>tc</name> <operator>&amp;</operator> <name>V_ASN1_PRIVATE</name><operator>)</operator> <operator>==</operator> <name>V_ASN1_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sym_PRIVATE</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>tc</name> <operator>&amp;</operator> <name>V_ASN1_CONTEXT_SPECIFIC</name><operator>)</operator> <operator>==</operator> <name>V_ASN1_CONTEXT_SPECIFIC</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sym_CONTEXT_SPECIFIC</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>tc</name> <operator>&amp;</operator> <name>V_ASN1_APPLICATION</name><operator>)</operator> <operator>==</operator> <name>V_ASN1_APPLICATION</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sym_APPLICATION</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>sym_UNIVERSAL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1data_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tag_class</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>tag_class</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"invalid tag class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_tag</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_tag_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_indefinite_length</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>to_der_internal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>constructed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indef_len</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>body</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>encoding</name> <init>= <expr><ternary><condition><expr><name>constructed</name></expr> ?</condition><then> <expr><ternary><condition><expr><name>indef_len</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tag_class</name> <init>= <expr><call><name>ossl_asn1_tag_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tag_number</name> <init>= <expr><call><name>ossl_asn1_tag</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>default_tag_number</name> <init>= <expr><call><name>ossl_asn1_default_tag</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>body_length</name></decl>, <decl><type ref="prev"/><name>total_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>body_length</name> <operator>=</operator> <call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ossl_asn1_get_tagging</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>sym_EXPLICIT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>inner_length</name></decl>, <decl><type ref="prev"/><name>e_encoding</name> <init>= <expr><ternary><condition><expr><name>indef_len</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>default_tag_number</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"explicit tagging of unknown tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>inner_length</name> <operator>=</operator> <call><name>ASN1_object_size</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>body_length</name></expr></argument>, <argument><expr><name>default_tag_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_length</name> <operator>=</operator> <call><name>ASN1_object_size</name><argument_list>(<argument><expr><name>e_encoding</name></expr></argument>, <argument><expr><name>inner_length</name></expr></argument>, <argument><expr><name>tag_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>total_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_put_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>e_encoding</name></expr></argument>, <argument><expr><name>inner_length</name></expr></argument>, <argument><expr><name>tag_number</name></expr></argument>, <argument><expr><name>tag_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_put_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>body_length</name></expr></argument>, <argument><expr><name>default_tag_number</name></expr></argument>, <argument><expr><name>V_ASN1_UNIVERSAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>body_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>body_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>indef_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASN1_put_eoc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ASN1_put_eoc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>total_length</name> <operator>=</operator> <call><name>ASN1_object_size</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>body_length</name></expr></argument>, <argument><expr><name>tag_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>total_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_put_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>body_length</name></expr></argument>, <argument><expr><name>tag_number</name></expr></argument>, <argument><expr><name>tag_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>body_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>body_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>indef_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ASN1_put_eoc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>total_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_asn1prim_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ossl_asn1cons_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1data_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name> <init>= <expr><call><name>ossl_asn1_get_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ossl_asn1cons_to_der</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>ossl_asn1_get_indefinite_length</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"indefinite length form cannot be used "</literal> \

<literal type="string">"with primitive encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ossl_asn1prim_to_der</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>int_ossl_asn1_decode0_prim</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>hlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>,

<parameter><decl><type><name>VALUE</name></type> <name>tc</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>num_read</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>asn1data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tc</name> <operator>==</operator> <name>sym_UNIVERSAL</name> <operator>&amp;&amp;</operator> <name>tag</name> <operator>&lt;</operator> <name>ossl_asn1_info_size</name></expr>)</condition> <block>{<block_content>

<switch>switch<condition>(<expr><name>tag</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>V_ASN1_EOC</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>decode_eoc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hlen</name><operator>+</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_BOOLEAN</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>decode_bool</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hlen</name><operator>+</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_INTEGER</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>decode_int</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hlen</name><operator>+</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_BIT_STRING</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>decode_bstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hlen</name><operator>+</operator><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_NULL</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>decode_null</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hlen</name><operator>+</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_ENUMERATED</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>decode_enum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hlen</name><operator>+</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_OBJECT</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>decode_obj</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hlen</name><operator>+</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>V_ASN1_UTCTIME</name></expr>:</case> 

<case>case <expr><name>V_ASN1_GENERALIZEDTIME</name></expr>:</case>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>decode_time</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hlen</name><operator>+</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>hlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>hlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <name>hlen</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>num_read</name> <operator>=</operator> <name>hlen</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tc</name> <operator>==</operator> <name>sym_UNIVERSAL</name> <operator>&amp;&amp;</operator>

<name>tag</name> <operator>&lt;</operator> <name>ossl_asn1_info_size</name> <operator>&amp;&amp;</operator> <name><name>ossl_asn1_info</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>klass</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name> <init>= <expr><operator>*</operator><name><name>ossl_asn1_info</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>klass</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>tc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>asn1data</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_initialize</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>asn1data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tag</name> <operator>==</operator> <name>V_ASN1_BIT_STRING</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>asn1data</name></expr></argument>, <argument><expr><name>sivUNUSED_BITS</name></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>asn1data</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>cASN1Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1data_initialize</name><argument_list>(<argument><expr><name>asn1data</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>asn1data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>int_ossl_asn1_decode0_cons</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>max_len</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yield</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>tc</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>num_read</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>asn1data</name></decl>, <decl><type ref="prev"/><name>ary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indefinite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>available_len</name></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><operator>*</operator><name>offset</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>indefinite</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0x21</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>available_len</name> <operator>=</operator> <ternary><condition><expr><name>indefinite</name></expr> ?</condition><then> <expr><name>max_len</name></expr> </then><else>: <expr><name>length</name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><name>available_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>inner_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ossl_asn1_decode0</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>available_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>yield</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inner_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>num_read</name> <operator>+=</operator> <name>inner_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name>available_len</name> <operator>-=</operator> <name>inner_read</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>indefinite</name> <operator>&amp;&amp;</operator>

<call><name>ossl_asn1_tag</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>V_ASN1_EOC</name> <operator>&amp;&amp;</operator>

<call><name>ossl_asn1_get_tag_class</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>sym_UNIVERSAL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>tc</name> <operator>==</operator> <name>sym_UNIVERSAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name><name>args</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>V_ASN1_SEQUENCE</name> <operator>||</operator> <name>tag</name> <operator>==</operator> <name>V_ASN1_SET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>asn1data</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><operator>*</operator><name><name>ossl_asn1_info</name><index>[<expr><name>tag</name></expr>]</index></name><operator>.</operator><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>asn1data</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>cASN1Constructive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ary</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>tc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_initialize</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>asn1data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>asn1data</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>cASN1Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1data_initialize</name><argument_list>(<argument><expr><name>asn1data</name></expr></argument>, <argument><expr><name>ary</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>indefinite</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_asn1_set_indefinite_length</name><argument_list>(<argument><expr><name>asn1data</name></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_asn1_set_indefinite_length</name><argument_list>(<argument><expr><name>asn1data</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<return>return <expr><name>asn1data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1_decode0</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>yield</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>num_read</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>inner_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>off</name> <init>= <expr><operator>*</operator><name>offset</name></expr></init></decl>, <decl><type ref="prev"/><name>hlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>, <decl><type ref="prev"/><name>tc</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>asn1data</name></decl>, <decl><type ref="prev"/><name>tag_class</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>ASN1_get_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p0</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&gt;</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"value is too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>tc</name> <operator>&amp;</operator> <name>V_ASN1_PRIVATE</name><operator>)</operator> <operator>==</operator> <name>V_ASN1_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag_class</name> <operator>=</operator> <name>sym_PRIVATE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>tc</name> <operator>&amp;</operator> <name>V_ASN1_CONTEXT_SPECIFIC</name><operator>)</operator> <operator>==</operator> <name>V_ASN1_CONTEXT_SPECIFIC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag_class</name> <operator>=</operator> <name>sym_CONTEXT_SPECIFIC</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><name>tc</name> <operator>&amp;</operator> <name>V_ASN1_APPLICATION</name><operator>)</operator> <operator>==</operator> <name>V_ASN1_APPLICATION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag_class</name> <operator>=</operator> <name>sym_APPLICATION</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tag_class</name> <operator>=</operator> <name>sym_UNIVERSAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>hlen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>yield</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <name>V_ASN1_CONSTRUCTED</name><operator>)</operator></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>ossl_asn1_class2sym</name><argument_list>(<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_yield</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>j</name> <operator>&amp;</operator> <name>V_ASN1_CONSTRUCTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <name>hlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>hlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>asn1data</name> <operator>=</operator> <call><name>int_ossl_asn1_decode0_cons</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>hlen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>yield</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_class</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inner_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>inner_read</name> <operator>+=</operator> <name>hlen</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"indefinite length for primitive value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>asn1data</name> <operator>=</operator> <call><name>int_ossl_asn1_decode0_prim</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_class</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inner_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>hlen</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_read</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>num_read</name> <operator>=</operator> <name>inner_read</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>inner_read</name> <operator>!=</operator> <name>hlen</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>,

<argument><expr><literal type="string">"Type mismatch. Bytes read: %ld Bytes available: %ld"</literal></expr></argument>,

<argument><expr><name>inner_read</name></expr></argument>, <argument><expr><name>hlen</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<return>return <expr><name>asn1data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>int_ossl_decode_sanity_check</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>read</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>read</name> <operator>!=</operator> <name>len</name> <operator>||</operator> <name>offset</name> <operator>!=</operator> <name>len</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>,

<argument><expr><literal type="string">"Type mismatch. Total bytes read: %ld Bytes available: %ld Offset: %ld"</literal></expr></argument>,

<argument><expr><name>read</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1_traverse</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ossl_to_der_if_possible</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_str_new4</name><argument_list>(<argument><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_decode0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int_ossl_decode_sanity_check</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>read</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1_decode</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ossl_to_der_if_possible</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_str_new4</name><argument_list>(<argument><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ossl_asn1_decode0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int_ossl_decode_sanity_check</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>read</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1_decode_all</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>tmp_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>ossl_to_der_if_possible</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rb_str_new4</name><argument_list>(<argument><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tmp_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>tmp_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ossl_asn1_decode0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>tmp_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>read</name> <operator>+=</operator> <name>tmp_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_len</name> <operator>-=</operator> <name>tmp_read</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int_ossl_decode_sanity_check</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>read</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ary</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>, <decl><type ref="prev"/><name>tagging</name></decl>, <decl><type ref="prev"/><name>tag_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>default_tag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"13"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagging</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>default_tag</name> <operator>=</operator> <call><name>ossl_asn1_default_tag</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>default_tag</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"must specify tag number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>tagging</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>tagging</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"invalid tagging method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tag_class</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>tagging</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tag_class</name> <operator>=</operator> <name>sym_UNIVERSAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tag_class</name> <operator>=</operator> <name>sym_CONTEXT_SPECIFIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SYMBOL_P</name><argument_list>(<argument><expr><name>tag_class</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"invalid tag class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block>{<block_content>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>INT2NUM</name><argument_list>(<argument><expr><name>default_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tagging</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tag_class</name> <operator>=</operator> <name>sym_UNIVERSAL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_tag</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_tagging</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tagging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_tag_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_indefinite_length</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>default_tag</name> <operator>==</operator> <name>V_ASN1_BIT_STRING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>sivUNUSED_BITS</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1eoc_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tag</name></decl>, <decl><type ref="prev"/><name>tagging</name></decl>, <decl><type ref="prev"/><name>tag_class</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tagging</name> <operator>=</operator> <name>Qnil</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tag_class</name> <operator>=</operator> <name>sym_UNIVERSAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_tag</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_tagging</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tagging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_tag_class</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>tag_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_asn1_set_indefinite_length</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1eoc_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="string">"\0\0"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1prim_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_TYPE</name> <modifier>*</modifier></type><name>asn1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>alllen</name></decl>, <decl><type ref="prev"/><name>bodylen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>, <decl><type ref="prev"/><name>tc</name></decl>, <decl><type ref="prev"/><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ossl_asn1_default_tag</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_asn1_get_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>to_der_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>asn1</name> <operator>=</operator> <call><name>ossl_asn1_get_asn1type</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alllen</name> <operator>=</operator> <call><name>i2d_ASN1_TYPE</name><argument_list>(<argument><expr><name>asn1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alllen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASN1_TYPE_free</name><argument_list>(<argument><expr><name>asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"i2d_ASN1_TYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ossl_str_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>alllen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASN1_TYPE_free</name><argument_list>(<argument><expr><name>asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p0</name> <operator>=</operator> <name>p1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>i2d_ASN1_TYPE</name><argument_list>(<argument><expr><name>asn1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_TYPE_free</name><argument_list>(<argument><expr><name>asn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p0</name> <operator>-</operator> <name>p1</name> <operator>==</operator> <name>alllen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>ASN1_get_object</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bodylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>, <argument><expr><name>alllen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"ASN1_get_object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><call><name>to_der_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>rb_str_drop_bytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>alllen</name> <operator>-</operator> <name>bodylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1cons_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>, <decl><type ref="prev"/><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indef_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>indef_len</name> <operator>=</operator> <call><name>RTEST</name><argument_list>(<argument><expr><call><name>ossl_asn1_get_indefinite_length</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_convert_type</name><argument_list>(<argument><expr><call><name>ossl_asn1_get_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"Array"</literal></expr></argument>, <argument><expr><literal type="string">"to_a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>item</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>indef_len</name> <operator>&amp;&amp;</operator> <call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>cASN1EndOfContent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"illegal EOC octets in value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>ossl_to_der_if_possible</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_append</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>to_der_internal</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>indef_len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1cons_each</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_block_call</name><argument_list>(<argument><expr><call><name>ossl_asn1_get_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1obj_s_register</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>oid</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sn</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ln</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>OBJ_create</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>Qtrue</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1obj_get_sn</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ossl_asn1_get_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nid</name> <operator>=</operator> <call><name>OBJ_txt2nid</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NID_undef</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>OBJ_nid2sn</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1obj_get_ln</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ossl_asn1_get_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nid</name> <operator>=</operator> <call><name>OBJ_txt2nid</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NID_undef</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>OBJ_nid2ln</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1obj_eq</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>other</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>valSelf</name></decl>, <decl><type ref="prev"/><name>valOther</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nidSelf</name></decl>, <decl><type ref="prev"/><name>nidOther</name></decl>;</decl_stmt>

<expr_stmt><expr><name>valSelf</name> <operator>=</operator> <call><name>ossl_asn1_get_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>valOther</name> <operator>=</operator> <call><name>ossl_asn1_get_value</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nidSelf</name> <operator>=</operator> <call><name>OBJ_txt2nid</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>valSelf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NID_undef</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"OBJ_txt2nid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nidOther</name> <operator>=</operator> <call><name>OBJ_txt2nid</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>valOther</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NID_undef</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"OBJ_txt2nid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>nidSelf</name> <operator>==</operator> <name>nidOther</name></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>asn1obj_get_oid_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>vobj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>a1obj</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>vobj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_usascii_str_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>OBJ_obj2txt</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a1obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"OBJ_obj2txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_str_resize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>OBJ_obj2txt</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a1obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"OBJ_obj2txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_asn1obj_get_oid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>a1obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a1obj</name> <operator>=</operator> <call><name>obj_to_asn1obj</name><argument_list>(<argument><expr><call><name>ossl_asn1_get_value</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><name>asn1obj_get_oid_i</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>a1obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_OBJECT_free</name><argument_list>(<argument><expr><name>a1obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static VALUE ossl_asn1_##klass(int argc, VALUE *argv, VALUE self){ return rb_funcall3(cASN1##klass, rb_intern("new"), argc, argv); }</cpp:value></cpp:define>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>Boolean</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>Integer</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>Enumerated</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>BitString</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>OctetString</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>UTF8String</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>NumericString</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>PrintableString</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>T61String</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>VideotexString</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>IA5String</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>GraphicString</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>ISO64String</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>GeneralString</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>UniversalString</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>BMPString</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>Null</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>ObjectId</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>UTCTime</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>GeneralizedTime</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>Sequence</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>Set</argument>)</argument_list></macro>

<macro><name>OSSL_ASN1_IMPL_FACTORY_METHOD</name><argument_list>(<argument>EndOfContent</argument>)</argument_list></macro>

<function><type><name>void</name></type>

<name>Init_ossl_asn1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

mOSSL = rb_define_module("OpenSSL");

eOSSLError = rb_define_class_under(mOSSL, "OpenSSLError", rb_eStandardError);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sym_UNIVERSAL</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"UNIVERSAL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_CONTEXT_SPECIFIC</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"CONTEXT_SPECIFIC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_APPLICATION</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"APPLICATION"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_PRIVATE</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"PRIVATE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_EXPLICIT</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"EXPLICIT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sym_IMPLICIT</name> <operator>=</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"IMPLICIT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sivVALUE</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sivTAG</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sivTAGGING</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@tagging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sivTAG_CLASS</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@tag_class"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sivINDEFINITE_LENGTH</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@indefinite_length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sivUNUSED_BITS</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"@unused_bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mASN1</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mOSSL</name></expr></argument>, <argument><expr><literal type="string">"ASN1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eASN1Error</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mASN1</name></expr></argument>, <argument><expr><literal type="string">"ASN1Error"</literal></expr></argument>, <argument><expr><name>eOSSLError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mASN1</name></expr></argument>, <argument><expr><literal type="string">"traverse"</literal></expr></argument>, <argument><expr><name>ossl_asn1_traverse</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mASN1</name></expr></argument>, <argument><expr><literal type="string">"decode"</literal></expr></argument>, <argument><expr><name>ossl_asn1_decode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mASN1</name></expr></argument>, <argument><expr><literal type="string">"decode_all"</literal></expr></argument>, <argument><expr><name>ossl_asn1_decode_all</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mASN1</name></expr></argument>, <argument><expr><literal type="string">"UNIVERSAL_TAG_NAME"</literal></expr></argument>, <argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ossl_asn1_info_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>ossl_asn1_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mASN1</name></expr></argument>, <argument><expr><name><name>ossl_asn1_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name><name>ossl_asn1_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cASN1Data</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mASN1</name></expr></argument>, <argument><expr><literal type="string">"ASN1Data"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cASN1Data</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cASN1Data</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"tag"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cASN1Data</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"tag_class"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cASN1Data</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"indefinite_length"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cASN1Data</name></expr></argument>, <argument><expr><literal type="string">"infinite_length"</literal></expr></argument>, <argument><expr><literal type="string">"indefinite_length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cASN1Data</name></expr></argument>, <argument><expr><literal type="string">"infinite_length="</literal></expr></argument>, <argument><expr><literal type="string">"indefinite_length="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1Data</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_asn1data_initialize</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1Data</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_asn1data_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cASN1Primitive</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mASN1</name></expr></argument>, <argument><expr><literal type="string">"Primitive"</literal></expr></argument>, <argument><expr><name>cASN1Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cASN1Primitive</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"tagging"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>cASN1Primitive</name></expr></argument>, <argument><expr><literal type="string">"indefinite_length="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_undef_method</name><argument_list>(<argument><expr><name>cASN1Primitive</name></expr></argument>, <argument><expr><literal type="string">"infinite_length="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1Primitive</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_asn1_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1Primitive</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_asn1prim_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cASN1Constructive</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mASN1</name></expr></argument>,<argument><expr><literal type="string">"Constructive"</literal></expr></argument>, <argument><expr><name>cASN1Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_include_module</name><argument_list>(<argument><expr><name>cASN1Constructive</name></expr></argument>, <argument><expr><name>rb_mEnumerable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cASN1Constructive</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"tagging"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1Constructive</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_asn1_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1Constructive</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_asn1cons_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1Constructive</name></expr></argument>, <argument><expr><literal type="string">"each"</literal></expr></argument>, <argument><expr><name>ossl_asn1cons_each</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OSSL_ASN1_DEFINE_CLASS</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>super</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{cASN1##name = rb_define_class_under(mASN1, #name, cASN1##super);rb_define_module_function(mASN1, #name, ossl_asn1_##name, -1);}while(0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>Boolean</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>Integer</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>Enumerated</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>BitString</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>OctetString</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>UTF8String</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>NumericString</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>PrintableString</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>T61String</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>VideotexString</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>IA5String</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>GraphicString</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>ISO64String</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>GeneralString</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>UniversalString</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>BMPString</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>Null</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>ObjectId</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>UTCTime</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>GeneralizedTime</name></expr></argument>, <argument><expr><name>Primitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>Sequence</name></expr></argument>, <argument><expr><name>Constructive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>Set</name></expr></argument>, <argument><expr><name>Constructive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OSSL_ASN1_DEFINE_CLASS</name><argument_list>(<argument><expr><name>EndOfContent</name></expr></argument>, <argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

cASN1ObjectId = rb_define_class_under(mASN1, "ObjectId", cASN1Primitive); 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cASN1ObjectId</name></expr></argument>, <argument><expr><literal type="string">"register"</literal></expr></argument>, <argument><expr><name>ossl_asn1obj_s_register</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1ObjectId</name></expr></argument>, <argument><expr><literal type="string">"sn"</literal></expr></argument>, <argument><expr><name>ossl_asn1obj_get_sn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1ObjectId</name></expr></argument>, <argument><expr><literal type="string">"ln"</literal></expr></argument>, <argument><expr><name>ossl_asn1obj_get_ln</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1ObjectId</name></expr></argument>, <argument><expr><literal type="string">"oid"</literal></expr></argument>, <argument><expr><name>ossl_asn1obj_get_oid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cASN1ObjectId</name></expr></argument>, <argument><expr><literal type="string">"short_name"</literal></expr></argument>, <argument><expr><literal type="string">"sn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cASN1ObjectId</name></expr></argument>, <argument><expr><literal type="string">"long_name"</literal></expr></argument>, <argument><expr><literal type="string">"ln"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1ObjectId</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>, <argument><expr><name>ossl_asn1obj_eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cASN1BitString</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"unused_bits"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1EndOfContent</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_asn1eoc_initialize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cASN1EndOfContent</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_asn1eoc_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>class_tag_map</name> <operator>=</operator> <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_gc_register_mark_object</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1EndOfContent</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_EOC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1Boolean</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_BOOLEAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1Integer</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_INTEGER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1BitString</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_BIT_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1OctetString</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_OCTET_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1Null</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1ObjectId</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_OBJECT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1Enumerated</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_ENUMERATED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1UTF8String</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_UTF8STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1Sequence</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1Set</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_SET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1NumericString</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_NUMERICSTRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1PrintableString</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_PRINTABLESTRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1T61String</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_T61STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1VideotexString</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_VIDEOTEXSTRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1IA5String</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_IA5STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1UTCTime</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_UTCTIME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1GeneralizedTime</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_GENERALIZEDTIME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1GraphicString</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_GRAPHICSTRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1ISO64String</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_ISO64STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1GeneralString</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_GENERALSTRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1UniversalString</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_UNIVERSALSTRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>class_tag_map</name></expr></argument>, <argument><expr><name>cASN1BMPString</name></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>V_ASN1_BMPSTRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>id_each</name> <operator>=</operator> <call><name>rb_intern_const</name><argument_list>(<argument><expr><literal type="string">"each"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
