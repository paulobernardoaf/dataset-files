<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\openssl\ossl_ts.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ossl.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_TS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NewTSRequest</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TypedData_Wrap_Struct((klass), &amp;ossl_ts_req_type, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetTSRequest</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>req</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(req)) { ossl_raise(rb_eRuntimeError, "TS_REQ wasn't initialized."); } RTYPEDDATA_DATA(obj) = (req); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetTSRequest</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>req</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TypedData_Get_Struct((obj), TS_REQ, &amp;ossl_ts_req_type, (req)); if (!(req)) { ossl_raise(rb_eRuntimeError, "TS_REQ wasn't initialized."); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NewTSResponse</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TypedData_Wrap_Struct((klass), &amp;ossl_ts_resp_type, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetTSResponse</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>resp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(resp)) { ossl_raise(rb_eRuntimeError, "TS_RESP wasn't initialized."); } RTYPEDDATA_DATA(obj) = (resp); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetTSResponse</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>resp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TypedData_Get_Struct((obj), TS_RESP, &amp;ossl_ts_resp_type, (resp)); if (!(resp)) { ossl_raise(rb_eRuntimeError, "TS_RESP wasn't initialized."); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NewTSTokenInfo</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TypedData_Wrap_Struct((klass), &amp;ossl_ts_token_info_type, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SetTSTokenInfo</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(info)) { ossl_raise(rb_eRuntimeError, "TS_TST_INFO wasn't initialized."); } RTYPEDDATA_DATA(obj) = (info); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetTSTokenInfo</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>, <parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { TypedData_Get_Struct((obj), TS_TST_INFO, &amp;ossl_ts_token_info_type, (info)); if (!(info)) { ossl_raise(rb_eRuntimeError, "TS_TST_INFO wasn't initialized."); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_tsfac_get_default_policy_id</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_attr_get((o),rb_intern("@default_policy_id"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_tsfac_get_serial_number</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_attr_get((o),rb_intern("@serial_number"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_tsfac_get_gen_time</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_attr_get((o),rb_intern("@gen_time"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_tsfac_get_additional_certs</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_attr_get((o),rb_intern("@additional_certs"))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ossl_tsfac_get_allowed_digests</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_attr_get((o),rb_intern("@allowed_digests"))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>mTimestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>eTimestampError</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cTimestampRequest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cTimestampResponse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cTimestampTokenInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cTimestampFactory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>sBAD_ALG</name></decl>, <decl><type ref="prev"/><name>sBAD_REQUEST</name></decl>, <decl><type ref="prev"/><name>sBAD_DATA_FORMAT</name></decl>, <decl><type ref="prev"/><name>sTIME_NOT_AVAILABLE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>sUNACCEPTED_POLICY</name></decl>, <decl><type ref="prev"/><name>sUNACCEPTED_EXTENSION</name></decl>, <decl><type ref="prev"/><name>sADD_INFO_NOT_AVAILABLE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ID</name></type> <name>sSYSTEM_FAILURE</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ossl_ts_req_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>TS_REQ_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_ts_req_type</name> <init>= <expr><block>{

<expr><literal type="string">"OpenSSL/Timestamp/Request"</literal></expr>,

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><name>ossl_ts_req_free</name></expr>,

}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ossl_ts_resp_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>TS_RESP_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_ts_resp_type</name> <init>= <expr><block>{

<expr><literal type="string">"OpenSSL/Timestamp/Response"</literal></expr>,

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><name>ossl_ts_resp_free</name></expr>,

}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ossl_ts_token_info_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>TS_TST_INFO_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>ossl_ts_token_info_type</name> <init>= <expr><block>{

<expr><literal type="string">"OpenSSL/Timestamp/TokenInfo"</literal></expr>,

<expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><name>ossl_ts_token_info_free</name></expr>,

}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>asn1_to_der</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>template</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>i2d</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>template</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>i2d</name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"Error when encoding to DER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>i2d</name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"Error when encoding to DER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_str_set_len</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASN1_OBJECT</name><modifier>*</modifier></type>

<name>obj_to_asn1obj</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>a1obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a1obj</name> <operator>=</operator> <call><name>OBJ_txt2obj</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>a1obj</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a1obj</name> <operator>=</operator> <call><name>OBJ_txt2obj</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>a1obj</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eASN1Error</name></expr></argument>, <argument><expr><literal type="string">"invalid OBJECT ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>a1obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>get_asn1obj</name><parameter_list>(<parameter><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nid</name> <operator>=</operator> <call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NID_undef</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>OBJ_nid2sn</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>out</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eX509AttrError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>i2a_ASN1_OBJECT</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ossl_membio2str</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewTSRequest</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>req</name> <operator>=</operator> <call><name>TS_REQ_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetTSRequest</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TS_REQ_set_version</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TS_REQ_set_cert_req</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>ts_req</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>arg</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>ossl_to_der_if_possible</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>ossl_obj2bio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ts_req</name> <operator>=</operator> <call><name>d2i_TS_REQ_bio</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ts_req</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"Error when decoding the timestamp request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ts_req</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_get_algorithm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_MSG_IMPRINT</name> <modifier>*</modifier></type><name>mi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_ALGOR</name> <modifier>*</modifier></type><name>algor</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <call><name>TS_REQ_get_msg_imprint</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>algor</name> <operator>=</operator> <call><name>TS_MSG_IMPRINT_get_algo</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_asn1obj</name><argument_list>(<argument><expr><name><name>algor</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_set_algorithm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>algo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_MSG_IMPRINT</name> <modifier>*</modifier></type><name>mi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_ALGOR</name> <modifier>*</modifier></type><name>algor</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>obj_to_asn1obj</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <call><name>TS_REQ_get_msg_imprint</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>algor</name> <operator>=</operator> <call><name>TS_MSG_IMPRINT_get_algo</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>X509_ALGOR_set0</name><argument_list>(<argument><expr><name>algor</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>V_ASN1_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ASN1_OBJECT_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"X509_ALGOR_set0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>algo</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_get_msg_imprint</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_MSG_IMPRINT</name> <modifier>*</modifier></type><name>mi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_OCTET_STRING</name> <modifier>*</modifier></type><name>hashed_msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <call><name>TS_REQ_get_msg_imprint</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hashed_msg</name> <operator>=</operator> <call><name>TS_MSG_IMPRINT_get_msg</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>hashed_msg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>hashed_msg</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_set_msg_imprint</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_MSG_IMPRINT</name> <modifier>*</modifier></type><name>mi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <call><name>TS_REQ_get_msg_imprint</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TS_MSG_IMPRINT_set_msg</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LENINT</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"TS_MSG_IMPRINT_set_msg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hash</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_get_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>TS_REQ_get_version</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_set_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>version</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>ver</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ver</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"version must be &gt;= 0!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TS_REQ_set_version</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"TS_REQ_set_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>version</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_get_policy_id</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TS_REQ_get_policy_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_asn1obj</name><argument_list>(<argument><expr><call><name>TS_REQ_get_policy_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_set_policy_id</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>obj_to_asn1obj</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>TS_REQ_set_policy_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_OBJECT_free</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"TS_REQ_set_policy_id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>oid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_get_nonce</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ASN1_INTEGER</name> <modifier>*</modifier></type> <name>nonce</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>nonce</name> <operator>=</operator> <call><name>TS_REQ_get_nonce</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>asn1integer_to_num</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_set_nonce</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_INTEGER</name> <modifier>*</modifier></type><name>nonce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nonce</name> <operator>=</operator> <call><name>num_to_asn1integer</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>TS_REQ_set_nonce</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_INTEGER_free</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>num</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_get_cert_requested</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>TS_REQ_get_cert_req</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr></then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_set_cert_requested</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>requested</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TS_REQ_set_cert_req</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>requested</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>requested</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_req_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_MSG_IMPRINT</name> <modifier>*</modifier></type><name>mi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_ALGOR</name> <modifier>*</modifier></type><name>algo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_OCTET_STRING</name> <modifier>*</modifier></type><name>hashed_msg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <call><name>TS_REQ_get_msg_imprint</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>algo</name> <operator>=</operator> <call><name>TS_MSG_IMPRINT_get_algo</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><name><name>algo</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NID_undef</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"Message imprint missing algorithm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hashed_msg</name> <operator>=</operator> <call><name>TS_MSG_IMPRINT_get_msg</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hashed_msg</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"Message imprint missing hashed message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>asn1_to_der</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>req</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>int</name> <argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator><name>void</name> <operator>*</operator><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>)</operator><name>i2d_TS_REQ</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_resp_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewTSResponse</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>resp</name> <operator>=</operator> <call><name>TS_RESP_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetTSResponse</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_resp_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>der</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>ts_resp</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>der</name> <operator>=</operator> <call><name>ossl_to_der_if_possible</name><argument_list>(<argument><expr><name>der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>ossl_obj2bio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ts_resp</name> <operator>=</operator> <call><name>d2i_TS_RESP_bio</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts_resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ts_resp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"Error when decoding the timestamp response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ts_resp</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_resp_get_status</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_STATUS_INFO</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ASN1_INTEGER</name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSResponse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>TS_RESP_get_status_info</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>TS_STATUS_INFO_get0_status</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>asn1integer_to_num</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_resp_get_failure_info</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_STATUS_INFO</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TS_STATUS_INFO_GET0_FAILURE_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>ASN1_BIT_STRING</name> <modifier>*</modifier></type><name>fi</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>ASN1_BIT_STRING</name> <modifier>*</modifier></type><name>fi</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>GetTSResponse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>TS_RESP_get_status_info</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <call><name>TS_STATUS_INFO_get0_failure_info</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fi</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ASN1_BIT_STRING_get_bit</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>TS_INFO_BAD_ALG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sBAD_ALG</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ASN1_BIT_STRING_get_bit</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>TS_INFO_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sBAD_REQUEST</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ASN1_BIT_STRING_get_bit</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>TS_INFO_BAD_DATA_FORMAT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sBAD_DATA_FORMAT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ASN1_BIT_STRING_get_bit</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>TS_INFO_TIME_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sTIME_NOT_AVAILABLE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ASN1_BIT_STRING_get_bit</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>TS_INFO_UNACCEPTED_POLICY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sUNACCEPTED_POLICY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ASN1_BIT_STRING_get_bit</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>TS_INFO_UNACCEPTED_EXTENSION</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sUNACCEPTED_EXTENSION</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ASN1_BIT_STRING_get_bit</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>TS_INFO_ADD_INFO_NOT_AVAILABLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sADD_INFO_NOT_AVAILABLE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ASN1_BIT_STRING_get_bit</name><argument_list>(<argument><expr><name>fi</name></expr></argument>, <argument><expr><name>TS_INFO_SYSTEM_FAILURE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sSYSTEM_FAILURE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized failure info."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_resp_get_status_text</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_STATUS_INFO</name> <modifier>*</modifier></type><name>si</name></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <call><name>STACK_OF</name><argument_list>(<argument><expr><name>ASN1_UTF8STRING</name></expr></argument>)</argument_list></call> <operator>*</operator><name>text</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ASN1_UTF8STRING</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSResponse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>si</name> <operator>=</operator> <call><name>TS_RESP_get_status_info</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>text</name> <operator>=</operator> <call><name>TS_STATUS_INFO_get0_text</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sk_ASN1_UTF8STRING_num</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>sk_ASN1_UTF8STRING_value</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>asn1str_to_str</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_resp_get_token</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PKCS7</name> <modifier>*</modifier></type><name>p7</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSResponse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p7</name> <operator>=</operator> <call><name>TS_RESP_get_token</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewPKCS7</name><argument_list>(<argument><expr><name>cPKCS7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>copy</name> <operator>=</operator> <call><name>PKCS7_dup</name><argument_list>(<argument><expr><name>p7</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetPKCS7</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_resp_get_token_info</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSResponse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>info</name> <operator>=</operator> <call><name>TS_RESP_get_tst_info</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewTSTokenInfo</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>copy</name> <operator>=</operator> <call><name>TS_TST_INFO_dup</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetTSTokenInfo</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_resp_get_tsa_certificate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PKCS7</name> <modifier>*</modifier></type><name>p7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PKCS7_SIGNER_INFO</name> <modifier>*</modifier></type><name>ts_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSResponse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p7</name> <operator>=</operator> <call><name>TS_RESP_get_token</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ts_info</name> <operator>=</operator> <call><name>sk_PKCS7_SIGNER_INFO_value</name><argument_list>(<argument><expr><name><name>p7</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>sign</name><operator>-&gt;</operator><name>signer_info</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>PKCS7_cert_from_signer_info</name><argument_list>(<argument><expr><name>p7</name></expr></argument>, <argument><expr><name>ts_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cert</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ossl_x509_new</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_resp_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSResponse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>asn1_to_der</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>resp</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>int</name> <argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator><name>void</name> <operator>*</operator><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>)</operator><name>i2d_TS_RESP</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_resp_verify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ts_req</name></decl>, <decl><type ref="prev"/><name>store</name></decl>, <decl><type ref="prev"/><name>intermediates</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_STORE</name> <modifier>*</modifier></type><name>x509st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_VERIFY_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> <operator>*</operator><name>x509inter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PKCS7</name><modifier>*</modifier></type> <name>p7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>cert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ok</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"21"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts_req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>intermediates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTSResponse</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>ts_req</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x509st</name> <operator>=</operator> <call><name>GetX509StorePtr</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ctx</name> <operator>=</operator> <call><name>TS_REQ_to_TS_VERIFY_CTX</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"Error when creating the verification context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>intermediates</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x509inter</name> <operator>=</operator> <call><name>ossl_protect_x509_ary2sk</name><argument_list>(<argument><expr><name>intermediates</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TS_VERIFY_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>x509inter</name> <operator>=</operator> <call><name>sk_X509_new_null</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TS_VERIFY_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"sk_X509_new_null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p7</name> <operator>=</operator> <call><name>TS_RESP_get_token</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TS_VERIFY_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>x509inter</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"TS_RESP_get_token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sk_X509_num</name><argument_list>(<argument><expr><name><name>p7</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>sign</name><operator>-&gt;</operator><name>cert</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>sk_X509_value</name><argument_list>(<argument><expr><name><name>p7</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>sign</name><operator>-&gt;</operator><name>cert</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sk_X509_push</name><argument_list>(<argument><expr><name>x509inter</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>x509inter</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TS_VERIFY_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"sk_X509_push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>X509_up_ref</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>TS_VERIFY_CTS_set_certs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>x509inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TS_VERIFY_CTX_add_flags</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>TS_VFY_SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TS_VERIFY_CTX_set_store</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>x509st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>TS_RESP_verify_response</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TS_VERIFY_CTX_set_store</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TS_VERIFY_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"TS_RESP_verify_response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_alloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>NewTSTokenInfo</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>info</name> <operator>=</operator> <call><name>TS_TST_INFO_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetTSTokenInfo</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>der</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>der</name> <operator>=</operator> <call><name>ossl_to_der_if_possible</name><argument_list>(<argument><expr><name>der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>ossl_obj2bio</name><argument_list>(<argument><expr><operator>&amp;</operator><name>der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>d2i_TS_TST_INFO_bio</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><literal type="string">"Error when decoding the timestamp token info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_get_version</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSTokenInfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>LONG2NUM</name><argument_list>(<argument><expr><call><name>TS_TST_INFO_get_version</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_get_policy_id</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSTokenInfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_asn1obj</name><argument_list>(<argument><expr><call><name>TS_TST_INFO_get_policy_id</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_get_algorithm</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_MSG_IMPRINT</name> <modifier>*</modifier></type><name>mi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_ALGOR</name> <modifier>*</modifier></type><name>algo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSTokenInfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <call><name>TS_TST_INFO_get_msg_imprint</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>algo</name> <operator>=</operator> <call><name>TS_MSG_IMPRINT_get_algo</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_asn1obj</name><argument_list>(<argument><expr><name><name>algo</name><operator>-&gt;</operator><name>algorithm</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_get_msg_imprint</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_MSG_IMPRINT</name> <modifier>*</modifier></type><name>mi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_OCTET_STRING</name> <modifier>*</modifier></type><name>hashed_msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSTokenInfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mi</name> <operator>=</operator> <call><name>TS_TST_INFO_get_msg_imprint</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hashed_msg</name> <operator>=</operator> <call><name>TS_MSG_IMPRINT_get_msg</name><argument_list>(<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>hashed_msg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>hashed_msg</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_get_serial_number</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSTokenInfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>asn1integer_to_num</name><argument_list>(<argument><expr><call><name>TS_TST_INFO_get_serial</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_get_gen_time</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSTokenInfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>asn1time_to_time</name><argument_list>(<argument><expr><call><name>TS_TST_INFO_get_time</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_get_ordering</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSTokenInfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><call><name>TS_TST_INFO_get_ordering</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>Qtrue</name></expr> </then><else>: <expr><name>Qfalse</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_get_nonce</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ASN1_INTEGER</name> <modifier>*</modifier></type><name>nonce</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSTokenInfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>nonce</name> <operator>=</operator> <call><name>TS_TST_INFO_get_nonce</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>asn1integer_to_num</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_ts_token_info_to_der</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TS_TST_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetTSTokenInfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>asn1_to_der</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>info</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>int</name> <argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator><name>void</name> <operator>*</operator><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>)</operator><name>i2d_TS_TST_INFO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ASN1_INTEGER</name> <modifier>*</modifier></type>

<name>ossl_tsfac_serial_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>TS_resp_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASN1_INTEGER</name> <modifier>*</modifier><modifier>*</modifier></type><name>snptr</name> <init>= <expr><operator>(</operator><name>ASN1_INTEGER</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_INTEGER</name> <modifier>*</modifier></type><name>sn</name> <init>= <expr><operator>*</operator><name>snptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>snptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>sn</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>ossl_tsfac_time_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>TS_resp_ctx</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>usec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sec</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>usec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ossl_tsfac_create_ts</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>certificate</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>request</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>serial_number</name></decl>, <decl><type ref="prev"/><name>def_policy_id</name></decl>, <decl><type ref="prev"/><name>gen_time</name></decl>, <decl><type ref="prev"/><name>additional_certs</name></decl>, <decl><type ref="prev"/><name>allowed_digests</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> <operator>*</operator><name>inter_certs</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tsresp</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>sign_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>tsa_cert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_RESP</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TS_RESP_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier></type><name>req_bio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_INTEGER</name> <modifier>*</modifier></type><name>asn1_serial</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASN1_OBJECT</name> <modifier>*</modifier></type><name>def_policy_id_obj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>lgen_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tsresp</name> <operator>=</operator> <call><name>NewTSResponse</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsa_cert</name> <operator>=</operator> <call><name>GetX509CertPtr</name><argument_list>(<argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign_key</name> <operator>=</operator> <call><name>GetPrivPKeyPtr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetTSRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gen_time</name> <operator>=</operator> <call><name>ossl_tsfac_get_gen_time</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_instance_of</name><argument_list>(<argument><expr><name>gen_time</name></expr></argument>, <argument><expr><name>rb_cTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <literal type="string">"@gen_time must be a Time."</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lgen_time</name> <operator>=</operator> <call><name>NUM2LONG</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>gen_time</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"to_i"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>serial_number</name> <operator>=</operator> <call><name>ossl_tsfac_get_serial_number</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>serial_number</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <literal type="string">"@serial_number must be set."</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>asn1_serial</name> <operator>=</operator> <call><name>num_to_asn1integer</name><argument_list>(<argument><expr><name>serial_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>def_policy_id</name> <operator>=</operator> <call><name>ossl_tsfac_get_default_policy_id</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>def_policy_id</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TS_REQ_get_policy_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <literal type="string">"No policy id in the request and no default policy set"</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>def_policy_id</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TS_REQ_get_policy_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>def_policy_id_obj</name> <operator>=</operator> <operator>(</operator><name>ASN1_OBJECT</name><operator>*</operator><operator>)</operator><call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>obj_to_asn1obj</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>def_policy_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ctx</name> <operator>=</operator> <call><name>TS_RESP_CTX_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <literal type="string">"Memory allocation failed."</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TS_RESP_CTX_set_serial_cb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ossl_tsfac_serial_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asn1_serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TS_RESP_CTX_set_signer_cert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tsa_cert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <literal type="string">"Certificate does not contain the timestamping extension"</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>additional_certs</name> <operator>=</operator> <call><name>ossl_tsfac_get_additional_certs</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>additional_certs</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inter_certs</name> <operator>=</operator> <call><name>ossl_protect_x509_ary2sk</name><argument_list>(<argument><expr><name>additional_certs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TS_RESP_CTX_set_certs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>inter_certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>inter_certs</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TS_RESP_CTX_set_signer_key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sign_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>def_policy_id</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TS_REQ_get_policy_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TS_RESP_CTX_set_def_policy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>def_policy_id_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TS_REQ_get_policy_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TS_RESP_CTX_set_def_policy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>TS_REQ_get_policy_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TS_RESP_CTX_set_time_cb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ossl_tsfac_time_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lgen_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>allowed_digests</name> <operator>=</operator> <call><name>ossl_tsfac_get_allowed_digests</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>allowed_digests</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rbmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>allowed_digests</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>rbmd</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>allowed_digests</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>EVP_MD</name> <operator>*</operator><operator>)</operator><call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>ossl_evp_get_digestbyname</name></expr></argument>, <argument><expr><name>rbmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TS_RESP_CTX_add_md</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rb_protect</name><argument_list>(<argument><expr><name>ossl_to_der</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>req_bio</name> <operator>=</operator> <operator>(</operator><name>BIO</name><operator>*</operator><operator>)</operator><call><name>rb_protect</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>VALUE</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>VALUE</name></expr></argument>)</argument_list></call><operator>)</operator><name>ossl_obj2bio</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>TS_RESP_create_response</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>req_bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>req_bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>response</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err_msg</name> <operator>=</operator> <literal type="string">"Error during response generation"</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ossl_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetTSResponse</name><argument_list>(<argument><expr><name>tsresp</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tsresp</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>ASN1_INTEGER_free</name><argument_list>(<argument><expr><name>asn1_serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASN1_OBJECT_free</name><argument_list>(<argument><expr><name>def_policy_id_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TS_RESP_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err_msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ossl_raise</name><argument_list>(<argument><expr><name>eTimestampError</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_ossl_ts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

mOSSL = rb_define_module("OpenSSL"); 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sBAD_ALG</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"BAD_ALG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sBAD_REQUEST</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"BAD_REQUEST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sBAD_DATA_FORMAT</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"BAD_DATA_FORMAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sTIME_NOT_AVAILABLE</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"TIME_NOT_AVAILABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sUNACCEPTED_POLICY</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"UNACCEPTED_POLICY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sUNACCEPTED_EXTENSION</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"UNACCEPTED_EXTENSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sADD_INFO_NOT_AVAILABLE</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"ADD_INFO_NOT_AVAILABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sSYSTEM_FAILURE</name> <operator>=</operator> <call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"SYSTEM_FAILURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mTimestamp</name> <operator>=</operator> <call><name>rb_define_module_under</name><argument_list>(<argument><expr><name>mOSSL</name></expr></argument>, <argument><expr><literal type="string">"Timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eTimestampError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mTimestamp</name></expr></argument>, <argument><expr><literal type="string">"TimestampError"</literal></expr></argument>, <argument><expr><name>eOSSLError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cTimestampResponse</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mTimestamp</name></expr></argument>, <argument><expr><literal type="string">"Response"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><name>ossl_ts_resp_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_ts_resp_initialize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><name>ossl_ts_resp_get_status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"failure_info"</literal></expr></argument>, <argument><expr><name>ossl_ts_resp_get_failure_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"status_text"</literal></expr></argument>, <argument><expr><name>ossl_ts_resp_get_status_text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"token"</literal></expr></argument>, <argument><expr><name>ossl_ts_resp_get_token</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"token_info"</literal></expr></argument>, <argument><expr><name>ossl_ts_resp_get_token_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"tsa_certificate"</literal></expr></argument>, <argument><expr><name>ossl_ts_resp_get_tsa_certificate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_ts_resp_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"verify"</literal></expr></argument>, <argument><expr><name>ossl_ts_resp_verify</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cTimestampTokenInfo</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mTimestamp</name></expr></argument>, <argument><expr><literal type="string">"TokenInfo"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><name>ossl_ts_token_info_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_ts_token_info_initialize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>ossl_ts_token_info_get_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><literal type="string">"policy_id"</literal></expr></argument>, <argument><expr><name>ossl_ts_token_info_get_policy_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><literal type="string">"algorithm"</literal></expr></argument>, <argument><expr><name>ossl_ts_token_info_get_algorithm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><literal type="string">"message_imprint"</literal></expr></argument>, <argument><expr><name>ossl_ts_token_info_get_msg_imprint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><literal type="string">"serial_number"</literal></expr></argument>, <argument><expr><name>ossl_ts_token_info_get_serial_number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><literal type="string">"gen_time"</literal></expr></argument>, <argument><expr><name>ossl_ts_token_info_get_gen_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><literal type="string">"ordering"</literal></expr></argument>, <argument><expr><name>ossl_ts_token_info_get_ordering</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><literal type="string">"nonce"</literal></expr></argument>, <argument><expr><name>ossl_ts_token_info_get_nonce</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampTokenInfo</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_ts_token_info_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cTimestampRequest</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mTimestamp</name></expr></argument>, <argument><expr><literal type="string">"Request"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><name>ossl_ts_req_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>ossl_ts_req_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"version="</literal></expr></argument>, <argument><expr><name>ossl_ts_req_set_version</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>ossl_ts_req_get_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"algorithm="</literal></expr></argument>, <argument><expr><name>ossl_ts_req_set_algorithm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"algorithm"</literal></expr></argument>, <argument><expr><name>ossl_ts_req_get_algorithm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"message_imprint="</literal></expr></argument>, <argument><expr><name>ossl_ts_req_set_msg_imprint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"message_imprint"</literal></expr></argument>, <argument><expr><name>ossl_ts_req_get_msg_imprint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"policy_id="</literal></expr></argument>, <argument><expr><name>ossl_ts_req_set_policy_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"policy_id"</literal></expr></argument>, <argument><expr><name>ossl_ts_req_get_policy_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"nonce="</literal></expr></argument>, <argument><expr><name>ossl_ts_req_set_nonce</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"nonce"</literal></expr></argument>, <argument><expr><name>ossl_ts_req_get_nonce</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"cert_requested="</literal></expr></argument>, <argument><expr><name>ossl_ts_req_set_cert_requested</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"cert_requested?"</literal></expr></argument>, <argument><expr><name>ossl_ts_req_get_cert_requested</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampRequest</name></expr></argument>, <argument><expr><literal type="string">"to_der"</literal></expr></argument>, <argument><expr><name>ossl_ts_req_to_der</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"GRANTED"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TS_STATUS_GRANTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"GRANTED_WITH_MODS"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TS_STATUS_GRANTED_WITH_MODS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"REJECTION"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TS_STATUS_REJECTION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"WAITING"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TS_STATUS_WAITING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"REVOCATION_WARNING"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TS_STATUS_REVOCATION_WARNING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cTimestampResponse</name></expr></argument>, <argument><expr><literal type="string">"REVOCATION_NOTIFICATION"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TS_STATUS_REVOCATION_NOTIFICATION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cTimestampFactory</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mTimestamp</name></expr></argument>, <argument><expr><literal type="string">"Factory"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cTimestampFactory</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"allowed_digests"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cTimestampFactory</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"default_policy_id"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cTimestampFactory</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"serial_number"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cTimestampFactory</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"gen_time"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_attr</name><argument_list>(<argument><expr><name>cTimestampFactory</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"additional_certs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cTimestampFactory</name></expr></argument>, <argument><expr><literal type="string">"create_timestamp"</literal></expr></argument>, <argument><expr><name>ossl_tsfac_create_ts</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
