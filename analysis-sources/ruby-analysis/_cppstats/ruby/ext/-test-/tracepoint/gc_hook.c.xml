<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\-test-\tracepoint\gc_hook.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/debug.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>invoking</name></decl>;</decl_stmt> 

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>invoke_proc_ensure</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>invoking</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>invoke_proc_begin</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_proc_call</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>invoke_proc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name> <init>= <expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>invoking</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>invoke_proc_begin</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name>invoke_proc_ensure</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>gc_start_end_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>tpval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>rb_trace_arg_t</name> <modifier>*</modifier></type><name>tparg</name> <init>= <expr><call><name>rb_tracearg_from_tracepoint</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"trace: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>rb_tracearg_event_flag</name><argument_list>(<argument><expr><name>tparg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RUBY_INTERNAL_EVENT_GC_START</name></expr> ?</condition><then> <expr><literal type="string">"gc_start"</literal></expr> </then><else>: <expr><literal type="string">"gc_end"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>invoking</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_postponed_job_register</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>invoke_proc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>set_gc_hook</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>module</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>rb_event_flag_t</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tp_str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proc_str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>tpval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name>tp_key</name> <init>= <expr><call><name>rb_intern</name><argument_list>(<argument><expr><name>tp_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name>proc_key</name> <init>= <expr><call><name>rb_intern</name><argument_list>(<argument><expr><name>proc_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_ivar_defined</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>tp_key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>RTEST</name><argument_list>(<argument><expr><name>tpval</name> <operator>=</operator> <call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>tp_key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_tracepoint_disable</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>tp_key</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>proc_key</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rb_obj_is_proc</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"trace_func needs to be Proc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tpval</name> <operator>=</operator> <call><name>rb_tracepoint_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>gc_start_end_i</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>tp_key</name></expr></argument>, <argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>proc_key</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rb_tracepoint_enable</name><argument_list>(<argument><expr><name>tpval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>proc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>set_after_gc_start</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>module</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_gc_hook</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name>RUBY_INTERNAL_EVENT_GC_START</name></expr></argument>,

<argument><expr><literal type="string">"__set_after_gc_start_tpval__"</literal></expr></argument>, <argument><expr><literal type="string">"__set_after_gc_start_proc__"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>start_after_gc_exit</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>module</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>proc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_gc_hook</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name>RUBY_INTERNAL_EVENT_GC_EXIT</name></expr></argument>,

<argument><expr><literal type="string">"__set_after_gc_exit_tpval__"</literal></expr></argument>, <argument><expr><literal type="string">"__set_after_gc_exit_proc__"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_gc_hook</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>module</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"after_gc_start_hook="</literal></expr></argument>, <argument><expr><name>set_after_gc_start</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"after_gc_exit_hook="</literal></expr></argument>, <argument><expr><name>start_after_gc_exit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
