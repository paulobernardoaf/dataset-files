<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\-test-\memory_status\memory_status.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/message.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/kern_return.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/task_info.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_WIN32</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cMemoryStatus</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>read_status</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>size</name> <init>= <expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__APPLE__</name></expr></cpp:if>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>kern_return_t</name></type> <name>error</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>MACH_TASK_BASIC_INFO</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>task_flavor_t</name></type> <name>flavor</name> <init>= <expr><name>MACH_TASK_BASIC_INFO</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>out_count</name> <init>= <expr><name>MACH_TASK_BASIC_INFO_COUNT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach_task_basic_info_data_t</name></type> <name>taskinfo</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>task_flavor_t</name></type> <name>flavor</name> <init>= <expr><name>TASK_BASIC_INFO</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>out_count</name> <init>= <expr><name>TASK_BASIC_INFO_COUNT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>task_basic_info_data_t</name></type> <name>taskinfo</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>taskinfo</name><operator>.</operator><name>virtual_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>taskinfo</name><operator>.</operator><name>resident_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>task_info</name><argument_list>(<argument><expr><call><name>mach_task_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flavor</name></expr></argument>,

<argument><expr><operator>(</operator><name>task_info_t</name><operator>)</operator><operator>&amp;</operator><name>taskinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ULL2NUM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL2NUM</name></cpp:macro> <cpp:value>SIZET2NUM</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ULL2NUM</name><argument_list>(<argument><expr><name><name>taskinfo</name><operator>.</operator><name>virtual_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rss</name> <operator>=</operator> <call><name>ULL2NUM</name><argument_list>(<argument><expr><name><name>taskinfo</name><operator>.</operator><name>resident_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_struct_aset</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_WIN32</name></expr></cpp:elif>

<decl_stmt><decl><type><name>VALUE</name></type> <name>peak</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROCESS_MEMORY_COUNTERS</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetProcessMemoryInfo</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>cb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>SIZET2NUM</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>PagefileUsage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>peak</name> <operator>=</operator> <call><name>SIZET2NUM</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>PeakWorkingSetSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_struct_aset</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>peak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_struct_aset</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_memory_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>mMemory</name> <init>= <expr><call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"Memory"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cMemoryStatus</name> <operator>=</operator>

<call><name>rb_struct_define_under</name><argument_list>(<argument><expr><name>mMemory</name></expr></argument>, <argument><expr><literal type="string">"Status"</literal></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__APPLE__</name></expr></cpp:if>

<argument><expr><literal type="string">"rss"</literal></expr></argument>,

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_WIN32</name></expr></cpp:elif>

<argument><expr><literal type="string">"peak"</literal></expr></argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cMemoryStatus</name></expr></argument>, <argument><expr><literal type="string">"_update"</literal></expr></argument>, <argument><expr><name>read_status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
