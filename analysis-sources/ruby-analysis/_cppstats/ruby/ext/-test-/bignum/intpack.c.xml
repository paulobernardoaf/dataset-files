<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\-test-\bignum\intpack.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/bignum.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_integer_pack_raw_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>numwords_arg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>wordsize_arg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>nails</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>numwords</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>wordsize</name> <init>= <expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>wordsize_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_str_modify</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>rb_integer_pack</name><argument_list>(<argument><expr><name>val</name></expr></argument>,

<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>numwords_arg</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>wordsize_arg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>nails</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_ary_new_from_args</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wordsize</name> <operator>*</operator> <name>numwords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_integer_pack_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>numwords_arg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>wordsize_arg</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>nails</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>numwords</name> <init>= <expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>numwords_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>wordsize</name> <init>= <expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>wordsize_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>numwords</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wordsize</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>LONG_MAX</name> <operator>/</operator> <name>wordsize</name> <operator>&lt;</operator> <name>numwords</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"too big numwords * wordsize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>rb_str_new</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>numwords</name> <operator>*</operator> <name>wordsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>rb_integer_pack</name><argument_list>(<argument><expr><name>val</name></expr></argument>,

<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numwords</name></expr></argument>,

<argument><expr><name>wordsize</name></expr></argument>, <argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>nails</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_assoc_new</name><argument_list>(<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_integer_unpack_m</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>numwords</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>wordsize</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>nails</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>StringValue</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_integer_unpack</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>numwords</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>wordsize</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>nails</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_integer_test_numbits_2comp_without_sign</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><ternary><condition><expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> </then><else>: <expr><call><name>BIGNUM_NEGATIVE_P</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>rb_absint_numwords</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>neg</name> <operator>&amp;&amp;</operator> <call><name>rb_absint_singlebit_p</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><call><name>SIZET2NUM</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_integer_test_numbytes_2comp_with_sign</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><ternary><condition><expr><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>FIX2LONG</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> </then><else>: <expr><call><name>BIGNUM_NEGATIVE_P</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nlz_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>rb_absint_size</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlz_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nlz_bits</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>neg</name> <operator>&amp;&amp;</operator> <call><name>rb_absint_singlebit_p</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>SIZET2NUM</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_intpack</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"test_pack_raw"</literal></expr></argument>, <argument><expr><name>rb_integer_pack_raw_m</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"test_pack"</literal></expr></argument>, <argument><expr><name>rb_integer_pack_m</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"test_unpack"</literal></expr></argument>, <argument><expr><name>rb_integer_unpack_m</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_MSWORD_FIRST"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_MSWORD_FIRST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_LSWORD_FIRST"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_LSWORD_FIRST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_MSBYTE_FIRST"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_MSBYTE_FIRST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_LSBYTE_FIRST"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_LSBYTE_FIRST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_NATIVE_BYTE_ORDER"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_NATIVE_BYTE_ORDER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_2COMP"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_2COMP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_LITTLE_ENDIAN"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_BIG_ENDIAN"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_FORCE_BIGNUM"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_FORCE_BIGNUM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_NEGATIVE"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_NEGATIVE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"INTEGER_PACK_FORCE_GENERIC_IMPLEMENTATION"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>INTEGER_PACK_FORCE_GENERIC_IMPLEMENTATION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"test_numbits_2comp_without_sign"</literal></expr></argument>, <argument><expr><name>rb_integer_test_numbits_2comp_without_sign</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cInteger</name></expr></argument>, <argument><expr><literal type="string">"test_numbytes_2comp_with_sign"</literal></expr></argument>, <argument><expr><name>rb_integer_test_numbytes_2comp_with_sign</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
