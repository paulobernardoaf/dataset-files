<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\-test-\bignum\str2big.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/bignum.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>str2big_poweroftwo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vbase</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>badcheck</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_str2big_poweroftwo</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>vbase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>badcheck</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>str2big_normal</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vbase</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>badcheck</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_str2big_normal</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>vbase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>badcheck</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>str2big_karatsuba</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vbase</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>badcheck</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_str2big_karatsuba</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>vbase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>badcheck</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBGMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>str2big_gmp</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vbase</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>badcheck</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_str2big_gmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>vbase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>badcheck</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str2big_gmp</name></cpp:macro> <cpp:value>rb_f_notimplement</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>

<name>Init_str2big</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cString</name></expr></argument>, <argument><expr><literal type="string">"str2big_poweroftwo"</literal></expr></argument>, <argument><expr><name>str2big_poweroftwo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cString</name></expr></argument>, <argument><expr><literal type="string">"str2big_normal"</literal></expr></argument>, <argument><expr><name>str2big_normal</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cString</name></expr></argument>, <argument><expr><literal type="string">"str2big_karatsuba"</literal></expr></argument>, <argument><expr><name>str2big_karatsuba</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cString</name></expr></argument>, <argument><expr><literal type="string">"str2big_gmp"</literal></expr></argument>, <argument><expr><name>str2big_gmp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
