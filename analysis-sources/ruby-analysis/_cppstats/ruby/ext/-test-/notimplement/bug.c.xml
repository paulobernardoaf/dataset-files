<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\-test-\notimplement\bug.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>bug_funcall</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"not enough argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>rb_funcallv</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_to_id</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_notimplement</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>mBug</name> <init>= <expr><call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"Bug"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>klass</name> <init>= <expr><call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mBug</name></expr></argument>, <argument><expr><literal type="string">"NotImplement"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mBug</name></expr></argument>, <argument><expr><literal type="string">"funcall"</literal></expr></argument>, <argument><expr><name>bug_funcall</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mBug</name></expr></argument>, <argument><expr><literal type="string">"notimplement"</literal></expr></argument>, <argument><expr><name>rb_f_notimplement</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><literal type="string">"notimplement"</literal></expr></argument>, <argument><expr><name>rb_f_notimplement</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
