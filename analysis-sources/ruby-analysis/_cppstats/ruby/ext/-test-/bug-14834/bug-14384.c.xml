<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\-test-\bug-14834\bug-14384.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby/ruby.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby/debug.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAYBE_UNUSED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAYBE_UNUSED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><specifier>static</specifier> <macro><name>NOINLINE</name><argument_list>(<argument>VALUE f(VALUE)</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>NOINLINE</name><argument_list>(<argument>void g(VALUE, void*)</argument>)</argument_list></macro></expr>;</expr_stmt>

<extern>extern NOINLINE(void Init_bug_14384(void</extern>))<empty_stmt>;</empty_stmt>

<function><type><name>void</name></type>

<name>Init_bug_14834</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>q</name> <init>= <expr><call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"Bug"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="string">"bug_14834"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>f</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>w</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>e</name> <init>= <expr><call><name>rb_tracepoint_new</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>RUBY_INTERNAL_EVENT_NEWOBJ</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_tracepoint_enable</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>rb_tracepoint_disable</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type>

<name>g</name><argument_list>(<argument><expr><macro><name>MAYBE_UNUSED</name><argument_list>(<argument>VALUE q</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>void</name><operator>*</operator> <name>w</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator><name>w</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name> <init>= <expr><operator>*</operator><name>e</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>e</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>VALUE</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_profile_frames</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

</unit>
