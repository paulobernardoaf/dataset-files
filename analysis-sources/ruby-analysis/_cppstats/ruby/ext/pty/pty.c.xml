<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\pty\pty.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_EXTCONF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> RUBY_EXTCONF_H</cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PWD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pty.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_WAIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIFSTOPPED</name><parameter_list>(<parameter><type><name>status</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((status) &amp; 0xff) == 0x7f)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_STROPTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stropts.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/process.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/signal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/io.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/util.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEVICELEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETEUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETREUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seteuid</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setreuid(-1, (e))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETRESUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seteuid</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setresuid(-1, (e), -1)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>eChildExited</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>echild_status</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>pty_info</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_pid_t</name></type> <name>child_pid</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getDevice</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>char</name> <index>[<expr><name>DEVICELEN</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>child_info</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>master</name></decl>, <decl><type ref="prev"/><name>slave</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slavename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>execarg_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rb_execarg</name></name> <modifier>*</modifier></type><name>eargp</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>chfunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>errbuf_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>child_info</name></name> <modifier>*</modifier></type><name>carg</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>master</name> <init>= <expr><name><name>carg</name><operator>-&gt;</operator><name>master</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slave</name> <init>= <expr><name><name>carg</name><operator>-&gt;</operator><name>slave</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_EXIT</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { strlcpy(errbuf, (str), errbuf_len); return -1; } while (0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETSID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETPGRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SETGRP_VOID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>setpgrp</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_EXIT</name><argument_list>(<argument><expr><literal type="string">"setpgrp()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<if_stmt><if>if <condition>(<expr><call><name>setpgrp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_EXIT</name><argument_list>(<argument><expr><literal type="string">"setpgrp()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>rb_cloexec_open</name><argument_list>(<argument><expr><literal type="string">"/dev/tty"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ERROR_EXIT</name><argument_list>(<argument><expr><literal type="string">"/dev/tty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>TIOCNOTTY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ERROR_EXIT</name><argument_list>(<argument><expr><literal type="string">"ioctl(TIOCNOTTY)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCSCTTY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name>slave</name></expr></argument>, <argument><expr><name>TIOCSCTTY</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slave</name> <operator>=</operator> <call><name>rb_cloexec_open</name><argument_list>(<argument><expr><name><name>carg</name><operator>-&gt;</operator><name>slavename</name></name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slave</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_EXIT</name><argument_list>(<argument><expr><literal type="string">"open: pty slave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>slave</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>slave</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>slave</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>!</operator><call><name>close</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETEUID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETREUID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SETRESUID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>seteuid</name><argument_list>(<argument><expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ERROR_EXIT</name><argument_list>(<argument><expr><literal type="string">"seteuid()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><call><name>rb_exec_async_signal_safe</name><argument_list>(<argument><expr><name><name>carg</name><operator>-&gt;</operator><name>eargp</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf_len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ERROR_EXIT</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>establishShell</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pty_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>char</name></type> <name><name>SlaveName</name><index>[<expr><name>DEVICELEN</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>master</name></decl>, <decl><type ref="prev"/><name>slave</name></decl>, <decl><type ref="prev"/><name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>getenv</name><argument_list>()</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>child_info</name></name></type> <name>carg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shellname</name> <init>= <expr><literal type="string">"/bin/sh"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SHELL"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shellname</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_PWD_H</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>username</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"USER"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pwent</name> <init>= <expr><call><name>getpwnam</name><argument_list>(<argument><expr><ternary><condition><expr><name>username</name></expr> ?</condition><then> <expr><name>username</name></expr> </then><else>: <expr><call><name>getlogin</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pwent</name> <operator>&amp;&amp;</operator> <name><name>pwent</name><operator>-&gt;</operator><name>pw_shell</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shellname</name> <operator>=</operator> <name><name>pwent</name><operator>-&gt;</operator><name>pw_shell</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>shellname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name> <operator>=</operator> <operator>&amp;</operator><name>v</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>carg</name><operator>.</operator><name>execarg_obj</name></name> <operator>=</operator> <call><name>rb_execarg_new</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>carg</name><operator>.</operator><name>eargp</name></name> <operator>=</operator> <call><name>rb_execarg_get</name><argument_list>(<argument><expr><name><name>carg</name><operator>.</operator><name>execarg_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_execarg_parent_start</name><argument_list>(<argument><expr><name><name>carg</name><operator>.</operator><name>execarg_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>getDevice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>master</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slave</name></expr></argument>, <argument><expr><name>SlaveName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>carg</name><operator>.</operator><name>master</name></name> <operator>=</operator> <name>master</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>carg</name><operator>.</operator><name>slave</name></name> <operator>=</operator> <name>slave</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>carg</name><operator>.</operator><name>slavename</name></name> <operator>=</operator> <name>SlaveName</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>errbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>rb_fork_async_signal_safe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>chfunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>carg</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_execarg_parent_end</name><argument_list>(<argument><expr><name><name>carg</name><operator>.</operator><name>execarg_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_jump_tag</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>errbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>errbuf</name></expr> </then><else>: <expr><literal type="string">"fork failed"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_execarg_parent_end</name><argument_list>(<argument><expr><name><name>carg</name><operator>.</operator><name>execarg_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>child_pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>master</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name><name>carg</name><operator>.</operator><name>execarg_obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_OPENPT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENPTY</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTSNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>no_mesg</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>slavedevice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nomesg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nomesg</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>chmod</name><argument_list>(<argument><expr><name>slavedevice</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>I_PUSH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>ioctl_I_PUSH</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>I_FIND</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>I_FIND</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>I_PUSH</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>get_device_once</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>SlaveName</name><index>[<expr><name>DEVICELEN</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nomesg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fail</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_OPENPT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>masterfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>slavefd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slavedevice</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__FreeBSD_version</name> <operator>&lt;</operator> <literal type="number">902000</literal><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>masterfd</name> <operator>=</operator> <call><name>posix_openpt</name><argument_list>(<argument><expr><name>O_RDWR</name><operator>|</operator><name>O_NOCTTY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_grantpt</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_fd_fix_cloexec</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>O_RDWR</name><operator>|</operator><name>O_NOCTTY</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_CLOEXEC</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>masterfd</name> <operator>=</operator> <call><name>posix_openpt</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>rb_fd_fix_cloexec</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_grantpt</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>unlockpt</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slavedevice</name> <operator>=</operator> <call><name>ptsname</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>no_mesg</name><argument_list>(<argument><expr><name>slavedevice</name></expr></argument>, <argument><expr><name>nomesg</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slavefd</name> <operator>=</operator> <call><name>rb_cloexec_open</name><argument_list>(<argument><expr><name>slavedevice</name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_NOCTTY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>I_PUSH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>ioctl_I_PUSH</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>, <argument><expr><literal type="string">"ptem"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl_I_PUSH</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>, <argument><expr><literal type="string">"ldterm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl_I_PUSH</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>, <argument><expr><literal type="string">"ttcompat"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>master</name> <operator>=</operator> <name>masterfd</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>slave</name> <operator>=</operator> <name>slavefd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>SlaveName</name></expr></argument>, <argument><expr><name>slavedevice</name></expr></argument>, <argument><expr><name>DEVICELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>slavefd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>masterfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"can't get Master/Slave device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_OPENPTY</name></expr></cpp:elif>

<if_stmt><if>if <condition>(<expr><call><name>openpty</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>slave</name></expr></argument>, <argument><expr><name>SlaveName</name></expr></argument>,

<argument><expr><operator>(</operator>struct <name>termios</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>winsize</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fail</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"openpty() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_fd_fix_cloexec</name><argument_list>(<argument><expr><operator>*</operator><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_fd_fix_cloexec</name><argument_list>(<argument><expr><operator>*</operator><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>no_mesg</name><argument_list>(<argument><expr><name>SlaveName</name></expr></argument>, <argument><expr><name>nomesg</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fail</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"can't chmod slave pty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE__GETPTY</name></expr></cpp:elif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name>nomesg</name></expr> ?</condition><then> <expr><literal type="number">0600</literal></expr> </then><else>: <expr><literal type="number">0622</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>name</name> <operator>=</operator> <call><name>_getpty</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fail</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"_getpty() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_fd_fix_cloexec</name><argument_list>(<argument><expr><operator>*</operator><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>slave</name> <operator>=</operator> <call><name>rb_cloexec_open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><operator>*</operator><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>SlaveName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>DEVICELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PTSNAME</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name>int</name></type> <name>masterfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>slavefd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slavedevice</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>s</name>)<parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>ptsname</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>unlockpt</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>masterfd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/ptmx"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>rb_grantpt</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_fd_fix_cloexec</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>masterfd</name> <operator>=</operator> <call><name>rb_cloexec_open</name><argument_list>(<argument><expr><literal type="string">"/dev/ptmx"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>rb_grantpt</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>unlockpt</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>slavedevice</name> <operator>=</operator> <call><name>ptsname</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>no_mesg</name><argument_list>(<argument><expr><name>slavedevice</name></expr></argument>, <argument><expr><name>nomesg</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>slavefd</name> <operator>=</operator> <call><name>rb_cloexec_open</name><argument_list>(<argument><expr><name>slavedevice</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>I_PUSH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><call><name>ioctl_I_PUSH</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>, <argument><expr><literal type="string">"ptem"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ioctl_I_PUSH</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>, <argument><expr><literal type="string">"ldterm"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ioctl_I_PUSH</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>, <argument><expr><literal type="string">"ttcompat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>master</name> <operator>=</operator> <name>masterfd</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>slave</name> <operator>=</operator> <name>slavefd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>SlaveName</name></expr></argument>, <argument><expr><name>slavedevice</name></expr></argument>, <argument><expr><name>DEVICELEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>slavefd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>masterfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"can't get Master/Slave device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>masterfd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>slavefd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>MasterName</name><index>[<expr><name>DEVICELEN</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX1</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c"0",c"1",c"2",c"3",c"4",c"5",c"6",c"7", c"8",c"9",c"a",c"b",c"c",c"d",c"e",c"f"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>MasterDevice</name><index>[]</index></name> <init>= <expr><literal type="string">"/dev/ptym/pty%s"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>SlaveDevice</name><index>[]</index></name> <init>= <expr><literal type="string">"/dev/pty/tty%s"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>deviceNo</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"u"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_IBMESA</name></expr></argument>)</argument_list></call></expr></cpp:elif> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>MasterDevice</name><index>[]</index></name> <init>= <expr><literal type="string">"/dev/ptyp%s"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>SlaveDevice</name><index>[]</index></name> <init>= <expr><literal type="string">"/dev/ttyp%s"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>deviceNo</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"6"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"7"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>MasterDevice</name><index>[]</index></name> <init>= <expr><literal type="string">"/dev/pty%s"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>SlaveDevice</name><index>[]</index></name> <init>= <expr><literal type="string">"/dev/tty%s"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>deviceNo</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HEX1</name><argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEX1</name></cpp:undef>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>numberof</name><argument_list>(<argument><expr><name>deviceNo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>devno</name> <init>= <expr><name><name>deviceNo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>MasterName</name></expr></argument>, <argument><expr><sizeof>sizeof <name>MasterName</name></sizeof></expr></argument>, <argument><expr><name>MasterDevice</name></expr></argument>, <argument><expr><name>devno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>masterfd</name> <operator>=</operator> <call><name>rb_cloexec_open</name><argument_list>(<argument><expr><name>MasterName</name></expr></argument>,<argument><expr><name>O_RDWR</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>master</name> <operator>=</operator> <name>masterfd</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>SlaveName</name></expr></argument>, <argument><expr><name>DEVICELEN</name></expr></argument>, <argument><expr><name>SlaveDevice</name></expr></argument>, <argument><expr><name>devno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slavefd</name> <operator>=</operator> <call><name>rb_cloexec_open</name><argument_list>(<argument><expr><name>SlaveName</name></expr></argument>,<argument><expr><name>O_RDWR</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>slave</name> <operator>=</operator> <name>slavefd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>chown</name><argument_list>(<argument><expr><name>SlaveName</name></expr></argument>, <argument><expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getgid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>chmod</name><argument_list>(<argument><expr><name>SlaveName</name></expr></argument>, <argument><expr><ternary><condition><expr><name>nomesg</name></expr> ?</condition><then> <expr><literal type="number">0600</literal></expr> </then><else>: <expr><literal type="number">0622</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>(<expr><name>slavefd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>slavefd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>masterfd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>masterfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fail</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"can't get %s"</literal></expr></argument>, <argument><expr><name>SlaveName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>getDevice</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>master</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>slave</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>SlaveName</name><index>[<expr><name>DEVICELEN</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nomesg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_device_once</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>slave</name></expr></argument>, <argument><expr><name>SlaveName</name></expr></argument>, <argument><expr><name>nomesg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_device_once</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>slave</name></expr></argument>, <argument><expr><name>SlaveName</name></expr></argument>, <argument><expr><name>nomesg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>pty_close_pty</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>assoc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>io</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>assoc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>T_FILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <call><name>RFILE</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>fptr</name><operator>-&gt;</operator><name>fd</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_io_close</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>pty_open</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>master_fd</name></decl>, <decl><type ref="prev"/><name>slave_fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>slavename</name><index>[<expr><name>DEVICELEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>master_io</name></decl>, <decl><type ref="prev"/><name>slave_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>master_fptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slave_fptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>assoc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>getDevice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>master_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slave_fd</name></expr></argument>, <argument><expr><name>slavename</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>master_io</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>rb_cIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MakeOpenFile</name><argument_list>(<argument><expr><name>master_io</name></expr></argument>, <argument><expr><name>master_fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>master_fptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>FMODE_READWRITE</name> <operator>|</operator> <name>FMODE_SYNC</name> <operator>|</operator> <name>FMODE_DUPLEX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>master_fptr</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>master_fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>master_fptr</name><operator>-&gt;</operator><name>pathv</name></name> <operator>=</operator> <call><name>rb_obj_freeze</name><argument_list>(<argument><expr><call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"masterpty:%s"</literal></expr></argument>, <argument><expr><name>slavename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slave_file</name> <operator>=</operator> <call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>rb_cFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MakeOpenFile</name><argument_list>(<argument><expr><name>slave_file</name></expr></argument>, <argument><expr><name>slave_fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slave_fptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>FMODE_READWRITE</name> <operator>|</operator> <name>FMODE_SYNC</name> <operator>|</operator> <name>FMODE_DUPLEX</name> <operator>|</operator> <name>FMODE_TTY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slave_fptr</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>slave_fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slave_fptr</name><operator>-&gt;</operator><name>pathv</name></name> <operator>=</operator> <call><name>rb_obj_freeze</name><argument_list>(<argument><expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name>slavename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>assoc</name> <operator>=</operator> <call><name>rb_assoc_new</name><argument_list>(<argument><expr><name>master_io</name></expr></argument>, <argument><expr><name>slave_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>assoc</name></expr></argument>, <argument><expr><name>pty_close_pty</name></expr></argument>, <argument><expr><name>assoc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>assoc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>pty_detach_process</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pty_info</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_waitpid</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>child_pid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_detach_process</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>child_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>pty_getpty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pty_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_io_t</name> <modifier>*</modifier></type><name>wfptr</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>rfptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rport</name> <init>= <expr><call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>rb_cFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>wport</name> <init>= <expr><call><name>rb_obj_alloc</name><argument_list>(<argument><expr><name>rb_cFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>SlaveName</name><index>[<expr><name>DEVICELEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MakeOpenFile</name><argument_list>(<argument><expr><name>rport</name></expr></argument>, <argument><expr><name>rfptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MakeOpenFile</name><argument_list>(<argument><expr><name>wport</name></expr></argument>, <argument><expr><name>wfptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>establishShell</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>SlaveName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rfptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>rb_io_modestr_fmode</name><argument_list>(<argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rfptr</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>fd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rfptr</name><operator>-&gt;</operator><name>pathv</name></name> <operator>=</operator> <call><name>rb_obj_freeze</name><argument_list>(<argument><expr><call><name>rb_str_new_cstr</name><argument_list>(<argument><expr><name>SlaveName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wfptr</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>rb_io_modestr_fmode</name><argument_list>(<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>FMODE_SYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wfptr</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>rb_cloexec_dup</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wfptr</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_sys_fail</name><argument_list>(<argument><expr><literal type="string">"dup()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_update_max_fd</name><argument_list>(<argument><expr><name><name>wfptr</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wfptr</name><operator>-&gt;</operator><name>pathv</name></name> <operator>=</operator> <name><name>rfptr</name><operator>-&gt;</operator><name>pathv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>rb_ary_new2</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>rport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><name>wport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><call><name>PIDT2NUM</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>child_pid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>pty_detach_process</name></expr></argument>, <argument><expr><operator>(</operator><name>VALUE</name><operator>)</operator><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<macro><name>NORETURN</name><argument_list>(<argument>static void raise_from_check(rb_pid_t pid, int status)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>raise_from_check</name><parameter_list>(<parameter><decl><type><name>rb_pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>exc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIFSTOPPED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IF_STOPPED</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIFSTOPPED</name><parameter_list>(<parameter><type><name>status</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IF_STOPPED(status)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>--</operator><operator>--</operator><operator>&gt;&gt;</operator> <name>Either</name> <name>IF_STOPPED</name> <name>or</name> <name>WIFSTOPPED</name> <name>is</name> <name>needed</name> <operator>&lt;&lt;</operator><operator>--</operator><operator>--</operator></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><call><name>WIFSTOPPED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="string">"stopped"</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="string">"changed"</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="string">"exited"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>rb_sprintf</name><argument_list>(<argument><expr><literal type="string">"pty - %s: %ld"</literal></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exc</name> <operator>=</operator> <call><name>rb_exc_new_str</name><argument_list>(<argument><expr><name>eChildExited</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_iv_set</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><call><name>rb_last_status_get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>pty_check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>pid</name></decl>, <decl><type ref="prev"/><name>exc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rb_pid_t</name></type> <name>cpid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flag</name> <init>=

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>WNOHANG</name><operator>|</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WUNTRACED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>WUNTRACED</name><operator>|</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cpid</name> <operator>=</operator> <call><name>rb_waitpid</name><argument_list>(<argument><expr><call><name>NUM2PIDT</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>cpid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RTEST</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>rb_last_status_get</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>raise_from_check</name><argument_list>(<argument><expr><name>cpid</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNREACHABLE_RETURN</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cPTY</name></decl>;</decl_stmt>

<function><type><name>void</name></type>

<name>Init_pty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>cPTY</name> <operator>=</operator> <call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"PTY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>cPTY</name></expr></argument>,<argument><expr><literal type="string">"getpty"</literal></expr></argument>,<argument><expr><name>pty_getpty</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>cPTY</name></expr></argument>,<argument><expr><literal type="string">"spawn"</literal></expr></argument>,<argument><expr><name>pty_getpty</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cPTY</name></expr></argument>,<argument><expr><literal type="string">"check"</literal></expr></argument>,<argument><expr><name>pty_check</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cPTY</name></expr></argument>,<argument><expr><literal type="string">"open"</literal></expr></argument>,<argument><expr><name>pty_open</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eChildExited</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>cPTY</name></expr></argument>,<argument><expr><literal type="string">"ChildExited"</literal></expr></argument>,<argument><expr><name>rb_eRuntimeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>eChildExited</name></expr></argument>,<argument><expr><literal type="string">"status"</literal></expr></argument>,<argument><expr><name>echild_status</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
