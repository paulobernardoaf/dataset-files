<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\sdbm\_sdbm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/ruby.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sdbm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTESIZ</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSD42</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEEK_SET</name></cpp:macro> <cpp:value>L_SET</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memset</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bzero((s), (n))</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memcpy</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bcopy((s2), (s1), (n))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memcmp</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bcmp((s1),(s2),(n))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SEEDUPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEEDUPS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BADMESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADMESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf x</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIG_E</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SHORT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned)((unsigned char *)(p))[(i)*2] &lt;&lt; 8) + (((unsigned char *)(p))[(i)*2 + 1]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_SHORT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned char *)(p))[(i)*2] = (unsigned char)((s) &gt;&gt; 8), ((unsigned char *)(p))[(i)*2 + 1] = (unsigned char)(s))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SHORT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)[(i)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_SHORT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)[(i)] = (s))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>fitpair</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>putpair</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>datum</name><operator>,</operator> <name>datum</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>datum</name> <name>getpair</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>datum</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>delpair</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>datum</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>chkpage</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>datum</name> <name>getnkey</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>splpage</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>,</operator> <name>long</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SEEDUPS</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>duppair</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>datum</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DOSISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSD42</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPERM</name></cpp:macro> <cpp:value>EACCES</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>errno</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>getdbit</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>,</operator> <name>long</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>setdbit</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>,</operator> <name>long</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>getpage</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>,</operator> <name>long</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>datum</name> <name>getnext</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>makroom</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>,</operator> <name>long</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bad</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x).dptr == NULL || (x).dsize &lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exhash</name><parameter_list>(<parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdbm_hash((item).dptr, (item).dsize)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ioerr</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((db)-&gt;flags |= DBM_IOERR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF_PAG</name><parameter_list>(<parameter><type><name>off</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(long) (off) * PBLKSIZ</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF_DIR</name><parameter_list>(<parameter><type><name>off</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(long) (off) * DBLKSIZ</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name><name>masks</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">000000000000L</literal></expr>, <expr><literal type="number">000000000001L</literal></expr>, <expr><literal type="number">000000000003L</literal></expr>,

<expr><literal type="number">000000000007L</literal></expr>, <expr><literal type="number">000000000017L</literal></expr>, <expr><literal type="number">000000000037L</literal></expr>,

<expr><literal type="number">000000000077L</literal></expr>, <expr><literal type="number">000000000177L</literal></expr>, <expr><literal type="number">000000000377L</literal></expr>,

<expr><literal type="number">000000000777L</literal></expr>, <expr><literal type="number">000000001777L</literal></expr>, <expr><literal type="number">000000003777L</literal></expr>,

<expr><literal type="number">000000007777L</literal></expr>, <expr><literal type="number">000000017777L</literal></expr>, <expr><literal type="number">000000037777L</literal></expr>,

<expr><literal type="number">000000077777L</literal></expr>, <expr><literal type="number">000000177777L</literal></expr>, <expr><literal type="number">000000377777L</literal></expr>,

<expr><literal type="number">000000777777L</literal></expr>, <expr><literal type="number">000001777777L</literal></expr>, <expr><literal type="number">000003777777L</literal></expr>,

<expr><literal type="number">000007777777L</literal></expr>, <expr><literal type="number">000017777777L</literal></expr>, <expr><literal type="number">000037777777L</literal></expr>,

<expr><literal type="number">000077777777L</literal></expr>, <expr><literal type="number">000177777777L</literal></expr>, <expr><literal type="number">000377777777L</literal></expr>,

<expr><literal type="number">000777777777L</literal></expr>, <expr><literal type="number">001777777777L</literal></expr>, <expr><literal type="number">003777777777L</literal></expr>,

<expr><literal type="number">007777777777L</literal></expr>, <expr><literal type="number">017777777777L</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>datum</name></type> <name>nullitem</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>DBM</name> <modifier>*</modifier></type>

<name>sdbm_open</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>pagname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator> <expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>DIRFEXT</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>PAGFEXT</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dirname</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr><operator>,</operator> <expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dirname</name> <operator>=</operator> <call><name>strcat</name><argument_list>(<argument><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DIRFEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pagname</name> <operator>=</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>dirname</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pagname</name> <operator>=</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>pagname</name></expr></argument>, <argument><expr><name>PAGFEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>sdbm_prep</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>pagname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>db</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>fd_set_cloexec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>&lt;</operator> <name>fd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FD_CLOEXEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FD_CLOEXEC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>DBM</name> <modifier>*</modifier></type>

<name>sdbm_prep</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pagname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>dstat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>db</name> <operator>=</operator> <operator>(</operator><name>DBM</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DBM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr><operator>,</operator> <expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>hmask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>blkptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>keyptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_WRONLY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>O_WRONLY</name><operator>)</operator> <operator>|</operator> <name>O_RDWR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_RDONLY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>DBM_RDONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_BINARY</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_CLOEXEC</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>pagname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fd_set_cloexec</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fd_set_cloexec</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dstat</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dirbno</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>dstat</name><operator>.</operator><name>st_size</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>maxbno</name></name> <operator>=</operator> <name><name>dstat</name><operator>.</operator><name>st_size</name></name> <operator>*</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>BYTESIZ</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DBLKSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>db</name></expr>;</return>

<label><name>err</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>sdbm_close</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>datum</name></type>

<name>sdbm_fetch</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>datum</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>bad</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator> <expr><name>nullitem</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getpage</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>exhash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>getpair</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ioerr</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>nullitem</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>sdbm_delete</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>datum</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>bad</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sdbm_rdonly</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EPERM</name></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getpage</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>exhash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>delpair</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><call><name>OFF_PAG</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ioerr</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ioerr</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type>

<name>sdbm_store</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>datum</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>datum</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>need</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>long</name></type> <name>hash</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>bad</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sdbm_rdonly</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EPERM</name></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>need</name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>dsize</name></name> <operator>+</operator> <name><name>val</name><operator>.</operator><name>dsize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>need</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>need</name></expr></argument> &gt;</argument_list></name> <name>PAIRMAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>getpage</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>(</operator><name>hash</name> <operator>=</operator> <call><name>exhash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <name>DBM_REPLACE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>delpair</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SEEDUPS</name></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><call><name>duppair</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fitpair</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>makroom</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ioerr</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>putpair</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><call><name>OFF_PAG</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ioerr</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ioerr</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>makroom</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>int</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>newp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>twin</name><index>[<expr><name>PBLKSIZ</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name></expr></cpp:if>

<decl_stmt><decl><type><name>char</name></type> <name><name>zer</name><index>[<expr><name>PBLKSIZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>oldtail</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pag</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><name>twin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>smax</name> <init>= <expr><name>SPLTMAX</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>splpage</name><argument_list>(<argument><expr><name>pag</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>hmask</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>newp</name> <operator>=</operator> <operator>(</operator><name>hash</name> <operator>&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>hmask</name></name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>hmask</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"newp: %ld\n"</literal><operator>,</operator> <name>newp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name></expr></cpp:if>

<expr_stmt><expr><name>oldtail</name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>OFF_PAG</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>oldtail</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>write</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><name>zer</name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oldtail</name> <operator>+=</operator> <name>PBLKSIZ</name></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>&amp;</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>hmask</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><call><name>OFF_PAG</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name>pag</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><call><name>OFF_PAG</name><argument_list>(<argument><expr><name>newp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>setdbit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>curbit</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fitpair</name><argument_list>(<argument><expr><name>pag</name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>curbit</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>curbit</name></name> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><name>hash</name> <operator>&amp;</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>hmask</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>hmask</name></name> <operator>|=</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>hmask</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><call><name>OFF_PAG</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>smax</name></expr>)</condition>;</do>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BADMESS</name></expr></cpp:if>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <operator>(</operator><call><name>write</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"sdbm: cannot insert after SPLTMAX attempts.\n"</literal></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>datum</name></type>

<name>sdbm_firstkey</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator> <expr><name>nullitem</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><call><name>OFF_PAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ioerr</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>nullitem</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>blkptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>keyptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>getnext</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>datum</name></type>

<name>sdbm_nextkey</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator> <expr><name>nullitem</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>getnext</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>getpage</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>long</name> <name>int</name></type> <name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>hbit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>long</name></type> <name>dbit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>long</name></type> <name>pagb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dbit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hbit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>dbit</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>maxbno</name></name> <operator>&amp;&amp;</operator> <call><name>getdbit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dbit</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>dbit</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>hash</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>hbit</name><operator>++</operator><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"dbit: %ld..."</literal><operator>,</operator> <name>dbit</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>curbit</name></name> <operator>=</operator> <name>dbit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>hmask</name></name> <operator>=</operator> <name><name>masks</name><index>[<expr><name>hbit</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pagb</name> <operator>=</operator> <name>hash</name> <operator>&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>hmask</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pagb</name> <operator>!=</operator> <name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><call><name>OFF_PAG</name><argument_list>(<argument><expr><name>pagb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>chkpage</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name> <operator>=</operator> <name>pagb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"pag read: %ld\n"</literal><operator>,</operator> <name>pagb</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>getdbit</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>long</name> <name>int</name></type> <name>dbit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>long</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>long</name></type> <name>dirb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>dbit</name> <operator>/</operator> <name>BYTESIZ</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dirb</name> <operator>=</operator> <name>c</name> <operator>/</operator> <name>DBLKSIZ</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dirb</name> <operator>!=</operator> <name><name>db</name><operator>-&gt;</operator><name>dirbno</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name></expr></argument>, <argument><expr><call><name>OFF_DIR</name><argument_list>(<argument><expr><name>dirb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirbuf</name></name></expr></argument>, <argument><expr><name>DBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dirbno</name></name> <operator>=</operator> <name>dirb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"dir read: %ld\n"</literal><operator>,</operator> <name>dirb</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>db</name><operator>-&gt;</operator><name>dirbuf</name><index>[<expr><name>c</name> <operator>%</operator> <name>DBLKSIZ</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>dbit</name> <operator>%</operator> <name>BYTESIZ</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>setdbit</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>long</name> <name>int</name></type> <name>dbit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>long</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>long</name></type> <name>dirb</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>dbit</name> <operator>/</operator> <name>BYTESIZ</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dirb</name> <operator>=</operator> <name>c</name> <operator>/</operator> <name>DBLKSIZ</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dirb</name> <operator>!=</operator> <name><name>db</name><operator>-&gt;</operator><name>dirbno</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name></expr></argument>, <argument><expr><call><name>OFF_DIR</name><argument_list>(<argument><expr><name>dirb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirbuf</name></name></expr></argument>, <argument><expr><name>DBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dirbno</name></name> <operator>=</operator> <name>dirb</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"dir read: %ld\n"</literal><operator>,</operator> <name>dirb</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dirbuf</name><index>[<expr><name>c</name> <operator>%</operator> <name>DBLKSIZ</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>dbit</name> <operator>%</operator> <name>BYTESIZ</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dbit</name> <operator>&gt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>maxbno</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>maxbno</name></name> <operator>+=</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>DBLKSIZ</name> <operator>*</operator> <name>BYTESIZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name></expr></argument>, <argument><expr><call><name>OFF_DIR</name><argument_list>(<argument><expr><name>dirb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dirbuf</name></name></expr></argument>, <argument><expr><name>DBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>datum</name></type>

<name>getnext</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>DBM</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>keyptr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>getnkey</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>keyptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>dptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>key</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>keyptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name> <operator>!=</operator> <name><name>db</name><operator>-&gt;</operator><name>blkptr</name></name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><call><name>OFF_PAG</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>blkptr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pagbno</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>blkptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>chkpage</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pagbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>ioerr</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>nullitem</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BSD42</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exhash</name><parameter_list>(<parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sdbm_hash((item).dptr, (item).dsize)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>seepair</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>fitpair</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>ino</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>pag</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>n</name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>PBLKSIZ</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>free</name> <operator>=</operator> <name>off</name> <operator>-</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>need</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"free %d need %d\n"</literal><operator>,</operator> <name>free</name><operator>,</operator> <name>need</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>need</name> <operator>&lt;=</operator> <name>free</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>putpair</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pag</name></decl></parameter>, <parameter><decl><type><name>datum</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>datum</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>ino</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>pag</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>n</name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>PBLKSIZ</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>-=</operator> <name><name>key</name><operator>.</operator><name>dsize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>dsize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name>pag</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PUT_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>-=</operator> <name><name>val</name><operator>.</operator><name>dsize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>dsize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name>pag</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>dptr</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>PUT_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>n</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUT_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>datum</name></type>

<name>getpair</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pag</name></decl></parameter>, <parameter><decl><type><name>datum</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>datum</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>ino</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>pag</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>nullitem</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>seepair</name><argument_list>(<argument><expr><name>pag</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>dsize</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>nullitem</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>dptr</name></name> <operator>=</operator> <name>pag</name> <operator>+</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>dsize</name></name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SEEDUPS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>duppair</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pag</name></decl></parameter>, <parameter><decl><type><name>datum</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>ino</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>pag</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>seepair</name><argument_list>(<argument><expr><name>pag</name></expr></argument>, <argument><expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>dsize</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>datum</name></type>

<name>getnkey</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>ino</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>pag</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name>num</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>num</name> <operator>&gt;</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>nullitem</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>PBLKSIZ</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dptr</name></name> <operator>=</operator> <name>pag</name> <operator>+</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dsize</name></name> <operator>=</operator> <name>off</name> <operator>-</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>key</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>delpair</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pag</name></decl></parameter>, <parameter><decl><type><name>datum</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>ino</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>pag</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>seepair</name><argument_list>(<argument><expr><name>pag</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>dptr</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>dsize</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>pag</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>PBLKSIZ</name></expr> </then><else>: <expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>pag</name> <operator>+</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>ptrdiff_t</name></type> <name>zoo</name> <init>= <expr><name>dst</name> <operator>-</operator> <name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"free-up %"</literal><name>PRIdPTRDIFF</name><literal type="string">" "</literal><operator>,</operator> <name>zoo</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DUFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVB</name></cpp:macro> <cpp:value>*--dst = *--src</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>loop</name> <init>= <expr><operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>m</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <do>do <block>{<block_content>

<expr_stmt><expr><name>MOVB</name></expr>;</expr_stmt> <case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>MOVB</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>MOVB</name></expr>;</expr_stmt> <case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>MOVB</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>MOVB</name></expr>;</expr_stmt> <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>MOVB</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>MOVB</name></expr>;</expr_stmt> <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>MOVB</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>loop</name></expr>)</condition>;</do>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MEMMOVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dst</name><operator>-</operator><name>m</name></expr></argument>, <argument><expr><name>src</name><operator>-</operator><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<while>while <condition>(<expr><name>m</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>--</operator><name>dst</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>src</name></expr>;</expr_stmt></block_content></block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PUT_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>zoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>PUT_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>seepair</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pag</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>int</name></type> <name>siz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>off</name> <init>= <expr><name>PBLKSIZ</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>ino</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>pag</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>siz</name> <operator>==</operator> <name>off</name> <operator>-</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pag</name> <operator>+</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>siz</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>splpage</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>new</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>int</name></type> <name>sbit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>datum</name></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>datum</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>off</name> <init>= <expr><name>PBLKSIZ</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>cur</name><index>[<expr><name>PBLKSIZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>ino</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>cur</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memcpy</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>pag</name></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><name>pag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>memset</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PBLKSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ino</name><operator>++</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ino</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dptr</name></name> <operator>=</operator> <name>cur</name> <operator>+</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dsize</name></name> <operator>=</operator> <name>off</name> <operator>-</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>dptr</name></name> <operator>=</operator> <name>cur</name> <operator>+</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>val</name><operator>.</operator><name>dsize</name></name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>putpair</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><call><name>exhash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>sbit</name><operator>)</operator></expr> ?</condition><then> <expr><name>new</name></expr> </then><else>: <expr><name>pag</name></expr></else></ternary></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d split %d/%d\n"</literal><operator>,</operator> <operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>cur</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>/</operator> <literal type="number">2</literal><operator>,</operator>

<operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>new</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>/</operator> <literal type="number">2</literal><operator>,</operator>

<operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>pag</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>chkpage</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>short</name> <modifier>*</modifier></type><name>ino</name> <init>= <expr><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name>pag</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <name>PBLKSIZ</name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name>PBLKSIZ</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ino</name><operator>++</operator></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ino</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>off</name> <operator>||</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>off</name> <operator>||</operator>

<call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>GET_SHORT</name><argument_list>(<argument><expr><name>ino</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type>

<name>sdbm_hash</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DUFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASHC</name></cpp:macro> <cpp:value>n = *str++ + 65599 * n</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>loop</name> <init>= <expr><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>len</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <do>do <block>{<block_content>

<expr_stmt><expr><name>HASHC</name></expr>;</expr_stmt> <case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>HASHC</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>HASHC</name></expr>;</expr_stmt> <case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>HASHC</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>HASHC</name></expr>;</expr_stmt> <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>HASHC</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>HASHC</name></expr>;</expr_stmt> <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>HASHC</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>loop</name></expr>)</condition>;</do>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>str</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator> <operator>+</operator> <literal type="number">65587L</literal> <operator>*</operator> <name>n</name></expr>;</expr_stmt></block_content></block></while>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

</unit>
