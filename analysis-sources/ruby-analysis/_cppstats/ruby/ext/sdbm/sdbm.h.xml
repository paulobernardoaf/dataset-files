<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\sdbm\sdbm.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBLKSIZ</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PBLKSIZ</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAIRMAX</name></cpp:macro> <cpp:value>1008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLTMAX</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRFEXT</name></cpp:macro> <cpp:value>".dir"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGFEXT</name></cpp:macro> <cpp:value>".pag"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>dirf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pagf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>keyptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>off_t</name></type> <name>maxbno</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>curbit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>hmask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>blkptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>blkno</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>pagbno</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>pagbuf</name><index>[<expr><name>PBLKSIZ</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>long</name></type> <name>dirbno</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>dirbuf</name><index>[<expr><name>DBLKSIZ</name></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>DBM</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_RDONLY</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_IOERR</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdbm_rdonly</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((db)-&gt;flags &amp; DBM_RDONLY)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdbm_error</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((db)-&gt;flags &amp; DBM_IOERR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdbm_clearerr</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((db)-&gt;flags &amp;= ~DBM_IOERR)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdbm_dirfno</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((db)-&gt;dirf)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdbm_pagfno</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((db)-&gt;pagf)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dsize</name></decl>;</decl_stmt>

}</block></struct></type> <name>datum</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>datum</name></type> <name>nullitem</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>proto</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>proto</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_INSERT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_REPLACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>DBM</name> <modifier>*</modifier><name>sdbm_open</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>sdbm_close</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>datum</name> <name>sdbm_fetch</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>,</operator> <name>datum</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>sdbm_delete</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>,</operator> <name>datum</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>sdbm_store</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>,</operator> <name>datum</name><operator>,</operator> <name>datum</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>datum</name> <name>sdbm_firstkey</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>datum</name> <name>sdbm_nextkey</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>DBM</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>DBM</name> <modifier>*</modifier><name>sdbm_prep</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>long</name> <name>sdbm_hash</name></type> <name>proto</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
