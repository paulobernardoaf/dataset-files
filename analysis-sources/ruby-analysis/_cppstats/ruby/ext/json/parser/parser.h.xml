<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\json\parser\parser.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RUBY_RE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"re.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RUBY_ST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/st.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"st.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>option_given_p</name><parameter_list>(<parameter><type><name>opts</name></type></parameter>, <parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RTEST(rb_funcall(opts, i_key_p, 1, key))</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>UTF32</name>;</typedef> 

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>UTF16</name>;</typedef> 

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>UTF8</name>;</typedef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNI_REPLACEMENT_CHAR</name></cpp:macro> <cpp:value>(UTF32)0x0000FFFD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNI_SUR_HIGH_START</name></cpp:macro> <cpp:value>(UTF32)0xD800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNI_SUR_HIGH_END</name></cpp:macro> <cpp:value>(UTF32)0xDBFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNI_SUR_LOW_START</name></cpp:macro> <cpp:value>(UTF32)0xDC00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNI_SUR_LOW_END</name></cpp:macro> <cpp:value>(UTF32)0xDFFF</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>JSON_ParserStruct</name> <block>{

<decl_stmt><decl><type><name>VALUE</name></type> <name>Vsource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>memo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>create_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_nesting</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allow_nan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parsing_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>symbolize_names</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>object_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>array_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>decimal_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>create_additions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>match_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fbuffer</name></decl>;</decl_stmt>

}</block></struct></type> <name>JSON_Parser</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PARSER</name></cpp:macro> <cpp:value>GET_PARSER_INIT; if (!json-&gt;Vsource) rb_raise(rb_eTypeError, "uninitialized instance")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_PARSER_INIT</name></cpp:macro> <cpp:value>JSON_Parser *json; TypedData_Get_Struct(self, JSON_Parser, &amp;JSON_Parser_type, json)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MinusInfinity</name></cpp:macro> <cpp:value>"-Infinity"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVIL</name></cpp:macro> <cpp:value>0x666</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>UTF32</name></type> <name>unescape_unicode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>convert_UTF32_to_UTF8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>UTF32</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_object</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_nesting</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_value</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_nesting</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_integer</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_float</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_array</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_nesting</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>json_string_unescape</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stringEnd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>JSON_parse_string</name><parameter_list>(<parameter><decl><type><name>JSON_Parser</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>convert_encoding</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cParser_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cParser_parse</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>JSON_mark</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>JSON_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cJSON_parser_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cParser_source</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ZALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZALLOC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *)ruby_zalloc(sizeof(type)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>ruby_zalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ruby_xmalloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TypedData_Make_Struct</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>JSON_Parser_type</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW_TYPEDDATA_WRAPPER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TypedData_Make_Struct</name><parameter_list>(<parameter><type><name>klass</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>ignore</name></type></parameter>, <parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Data_Make_Struct(klass, type, NULL, JSON_free, json)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TypedData_Get_Struct</name><parameter_list>(<parameter><type><name>self</name></type></parameter>, <parameter><type><name>JSON_Parser</name></type></parameter>, <parameter><type><name>ignore</name></type></parameter>, <parameter><type><name>json</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Data_Get_Struct(self, JSON_Parser, json)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
