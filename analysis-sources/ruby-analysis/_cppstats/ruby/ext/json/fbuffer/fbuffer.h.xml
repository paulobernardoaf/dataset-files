<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\json\fbuffer\fbuffer.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RHASH_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RHASH_SIZE</name><parameter_list>(<parameter><type><name>hsh</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RHASH(hsh)-&gt;tbl-&gt;num_entries)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RFLOAT_VALUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFLOAT_VALUE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(RFLOAT(val)-&gt;value)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RARRAY_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RARRAY_LEN</name><parameter_list>(<parameter><type><name>ARRAY</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RARRAY(ARRAY)-&gt;len</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RSTRING_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_PTR</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RSTRING(string)-&gt;ptr</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RSTRING_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_LEN</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RSTRING(string)-&gt;len</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRIsVALUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_CLASSNAME</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_class(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_STRING</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(obj)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIsVALUE</name></cpp:macro> <cpp:value>"s"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_CLASSNAME</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_classname(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_STRING</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>StringValueCStr(obj)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RUBY_ENCODING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ruby/encoding.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_UTF8</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_enc_associate((obj), rb_utf8_encoding())</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_UTF8</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RB_GC_GUARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_GC_GUARD</name><parameter_list>(<parameter><type><name>object</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>FBufferStruct</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>initial_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>capa</name></decl>;</decl_stmt>

}</block></struct></type> <name>FBuffer</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FBUFFER_INITIAL_LENGTH_DEFAULT</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FBUFFER_PTR</name><parameter_list>(<parameter><type><name>fb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fb-&gt;ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FBUFFER_LEN</name><parameter_list>(<parameter><type><name>fb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fb-&gt;len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FBUFFER_CAPA</name><parameter_list>(<parameter><type><name>fb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fb-&gt;capa)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FBUFFER_PAIR</name><parameter_list>(<parameter><type><name>fb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FBUFFER_PTR(fb), FBUFFER_LEN(fb)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>FBuffer</name> <modifier>*</modifier></type><name>fbuffer_alloc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>initial_length</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_free</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_clear</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_append</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSON_GENERATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_append_long</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>number</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_append_char</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>newchr</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSON_GENERATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>FBuffer</name> <modifier>*</modifier></type><name>fbuffer_dup</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fbuffer_to_s</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>FBuffer</name> <modifier>*</modifier></type><name>fbuffer_alloc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>initial_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>initial_length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>initial_length</name> <operator>=</operator> <name>FBUFFER_INITIAL_LENGTH_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fb</name> <operator>=</operator> <call><name>ALLOC</name><argument_list>(<argument><expr><name>FBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>fb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>initial_length</name></name> <operator>=</operator> <name>initial_length</name></expr>;</expr_stmt>

<return>return <expr><name>fb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_free</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fb</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_clear</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_inc_capa</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>requested</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>required</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fb</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>fb</name><operator>-&gt;</operator><name>initial_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>capa</name></name> <operator>=</operator> <name><name>fb</name><operator>-&gt;</operator><name>initial_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>required</name> <operator>=</operator> <name><name>fb</name><operator>-&gt;</operator><name>capa</name></name></expr>;</init> <condition><expr><name>requested</name> <operator>&gt;</operator> <name>required</name> <operator>-</operator> <name><name>fb</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>required</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>required</name> <operator>&gt;</operator> <name><name>fb</name><operator>-&gt;</operator><name>capa</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>REALLOC_N</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr><name>required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>capa</name></name> <operator>=</operator> <name>required</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_append</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newstr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fbuffer_inc_capa</name><argument_list>(<argument><expr><name>fb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MEMCPY</name><argument_list>(<argument><expr><name><name>fb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name><name>fb</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSON_GENERATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_append_str</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newstr</name> <init>= <expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RB_GC_GUARD</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>fb</name></expr></argument>, <argument><expr><name>newstr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_append_char</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>newchr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fbuffer_inc_capa</name><argument_list>(<argument><expr><name>fb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>fb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name><name>fb</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>=</operator> <name>newchr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fb</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JSON_GENERATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>freverse</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>end</name></expr><operator>,</operator> <expr><operator>*</operator><name>end</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>start</name></expr><operator>,</operator> <expr><operator>*</operator><name>start</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type> <name>fltoa</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>digits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>sign</name> <init>= <expr><name>number</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>number</name> <operator>=</operator> <operator>-</operator><name>number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>tmp</name><operator>++</operator> <operator>=</operator> <name><name>digits</name><index>[<expr><name>number</name> <operator>%</operator> <literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block> while <condition>(<expr><name>number</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>tmp</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>freverse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tmp</name> <operator>-</operator> <name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fbuffer_append_long</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>number</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name> <init>= <expr><call><name>fltoa</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>fb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FBuffer</name> <modifier>*</modifier></type><name>fbuffer_dup</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name> <init>= <expr><name><name>fb</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fbuffer_alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbuffer_append</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>FBUFFER_PAIR</name><argument_list>(<argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type> <name>fbuffer_to_s</name><parameter_list>(<parameter><decl><type><name>FBuffer</name> <modifier>*</modifier></type><name>fb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><call><name>rb_str_new</name><argument_list>(<argument><expr><call><name>FBUFFER_PTR</name><argument_list>(<argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FBUFFER_LEN</name><argument_list>(<argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fbuffer_free</name><argument_list>(<argument><expr><name>fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FORCE_UTF8</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
