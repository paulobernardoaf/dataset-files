<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\fiddle\fiddle.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fiddle.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>VALUE</name></type> <name>mFiddle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_eFiddleError</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TYPE_SSIZE_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_INT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SSIZE_T</name></cpp:macro> <cpp:value>TYPE_INT</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SSIZE_T</name></cpp:macro> <cpp:value>TYPE_LONG</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_LONG_LONG</name> <operator>&amp;&amp;</operator> <name>SIZEOF_SIZE_T</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SSIZE_T</name></cpp:macro> <cpp:value>TYPE_LONG_LONG</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SIZE_T</name></cpp:macro> <cpp:value>(-1*SIGNEDNESS_OF_SIZE_T*TYPE_SSIZE_T)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TYPE_PTRDIFF_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_PTRDIFF_T</name> <operator>==</operator> <name>SIZEOF_INT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_PTRDIFF_T</name></cpp:macro> <cpp:value>TYPE_INT</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_PTRDIFF_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_PTRDIFF_T</name></cpp:macro> <cpp:value>TYPE_LONG</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_LONG_LONG</name> <operator>&amp;&amp;</operator> <name>SIZEOF_PTRDIFF_T</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_PTRDIFF_T</name></cpp:macro> <cpp:value>TYPE_LONG_LONG</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TYPE_INTPTR_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_INTPTR_T</name> <operator>==</operator> <name>SIZEOF_INT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_INTPTR_T</name></cpp:macro> <cpp:value>TYPE_INT</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_INTPTR_T</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_INTPTR_T</name></cpp:macro> <cpp:value>TYPE_LONG</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_LONG_LONG</name> <operator>&amp;&amp;</operator> <name>SIZEOF_INTPTR_T</name> <operator>==</operator> <name>SIZEOF_LONG_LONG</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_INTPTR_T</name></cpp:macro> <cpp:value>TYPE_LONG_LONG</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_UINTPTR_T</name></cpp:macro> <cpp:value>(-TYPE_INTPTR_T)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>Init_fiddle_pointer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_malloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>ruby_xmalloc</name><argument_list>(<argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>PTR2NUM</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_realloc</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>NUM2PTR</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>ruby_xrealloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>NUM2SIZET</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>PTR2NUM</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_fiddle_free</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>NUM2PTR</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ruby_xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_fiddle_ptr2value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>addr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>NUM2PTR</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_value2ptr</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>PTR2NUM</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>Init_fiddle_handle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>

<name>Init_fiddle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>mFiddle</name> <operator>=</operator> <call><name>rb_define_module</name><argument_list>(<argument><expr><literal type="string">"Fiddle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rb_eFiddleError</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"DLError"</literal></expr></argument>, <argument><expr><name>rb_eStandardError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_VOID"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_VOID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_VOIDP"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_VOIDP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_CHAR"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_CHAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_SHORT"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_SHORT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_INT"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_LONG"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_LONG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_LONG_LONG"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_LONG_LONG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_FLOAT"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_FLOAT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_DOUBLE"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_DOUBLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_SIZE_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_SIZE_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_SSIZE_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_SSIZE_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_PTRDIFF_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_PTRDIFF_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_INTPTR_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_INTPTR_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"TYPE_UINTPTR_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>TYPE_UINTPTR_T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_VOIDP"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>ALIGN_VOIDP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_CHAR"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>ALIGN_CHAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_SHORT"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>ALIGN_SHORT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_INT"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>ALIGN_INT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_LONG"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>ALIGN_LONG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_LONG_LONG"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>ALIGN_LONG_LONG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_FLOAT"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>ALIGN_FLOAT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_DOUBLE"</literal></expr></argument>,<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>ALIGN_DOUBLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_SIZE_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>ALIGN_OF</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_SSIZE_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>ALIGN_OF</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_PTRDIFF_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>ALIGN_OF</name><argument_list>(<argument><expr><name>ptrdiff_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_INTPTR_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>ALIGN_OF</name><argument_list>(<argument><expr><name>intptr_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"ALIGN_UINTPTR_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><call><name>ALIGN_OF</name><argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"WINDOWS"</literal></expr></argument>, <argument><expr><name>Qtrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"WINDOWS"</literal></expr></argument>, <argument><expr><name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_VOIDP"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_CHAR"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_SHORT"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_INT"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_LONG"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_LONG_LONG"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LONG_LONG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_FLOAT"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_DOUBLE"</literal></expr></argument>,<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_SIZE_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_SSIZE_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_PTRDIFF_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ptrdiff_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_INTPTR_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intptr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"SIZEOF_UINTPTR_T"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"RUBY_FREE"</literal></expr></argument>, <argument><expr><call><name>PTR2NUM</name><argument_list>(<argument><expr><name>ruby_xfree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"BUILD_RUBY_PLATFORM"</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>RUBY_PLATFORM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"dlwrap"</literal></expr></argument>, <argument><expr><name>rb_fiddle_value2ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"dlunwrap"</literal></expr></argument>, <argument><expr><name>rb_fiddle_ptr2value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>, <argument><expr><name>rb_fiddle_malloc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"realloc"</literal></expr></argument>, <argument><expr><name>rb_fiddle_realloc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>, <argument><expr><name>rb_fiddle_free</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_fiddle_function</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_fiddle_closure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_fiddle_handle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Init_fiddle_pointer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
