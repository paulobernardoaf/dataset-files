<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\fiddle\conversions.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fiddle.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><union>union

<block>{

<decl_stmt><decl><type><name>ffi_arg</name></type> <name>fffi_arg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ffi_sarg</name></type> <name>fffi_sarg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>uchar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>schar</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>ushort</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>signed</name> <name>short</name></type> <name>sshort</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uint</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>sint</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulong</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>signed</name> <name>long</name></type> <name>slong</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>ffloat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>ddouble</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LONG_LONG</name></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name> <name>LONG_LONG</name></type> <name>ulong_long</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>signed</name> <name>LONG_LONG</name></type> <name>slong_long</name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pointer</name></decl>;</decl_stmt> 

}</block></union></type> <name>fiddle_generic</name>;</typedef>

<function_decl><type><name>ffi_type</name> <modifier>*</modifier></type> <name>int_to_ffi_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>value_to_generic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>fiddle_generic</name> <modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VALUE</name></type> <name>generic_to_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>rettype</name></decl></parameter>, <parameter><decl><type><name>fiddle_generic</name></type> <name>retval</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE2GENERIC</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>, <parameter><type><name>_src</name></type></parameter>, <parameter><type><name>_dst</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>value_to_generic((_type), (_src), (_dst))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT2FFI_TYPE</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int_to_ffi_type(_type)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERIC2VALUE</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>, <parameter><type><name>_retval</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>generic_to_value((_type), (_retval))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_VOIDP</name> <operator>==</operator> <name>SIZEOF_LONG</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LONG2NUM((long)(x)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void*)(NUM2ULONG(x)))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR2NUM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(LL2NUM((LONG_LONG)(x)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM2PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void*)(NUM2ULL(x)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
