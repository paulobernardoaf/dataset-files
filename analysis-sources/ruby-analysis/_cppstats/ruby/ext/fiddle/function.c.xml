<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\fiddle\function.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fiddle.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby/thread.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PRIsVALUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_CLASSNAME</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_class(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_STRING</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(obj)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIsVALUE</name></cpp:macro> <cpp:value>"s"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_CLASSNAME</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rb_obj_classname(obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RB_OBJ_STRING</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>StringValueCStr(obj)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cFiddleFunction</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ARGS</name></cpp:macro> <cpp:value>(SIZE_MAX / (sizeof(void *) + sizeof(fiddle_generic)) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check_Max_Args</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Check_Max_Args_(name, len, "")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check_Max_Args_Long</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Check_Max_Args_(name, len, "l")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check_Max_Args_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ((size_t)(len) &lt; MAX_ARGS) { } else { rb_raise(rb_eTypeError, name" is so large that it can cause integer overflow (%"fmt"d)", (len)); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>deallocate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ffi_cif</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>arg_types</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>arg_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>function_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ffi_cif</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>ffi_cif</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FFI_NO_RAW_API</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>FFI_NO_RAW_API</name></expr></cpp:if>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>ffi_raw_size</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>rb_data_type_t</name></type> <name>function_data_type</name> <init>= <expr><block>{

<expr><literal type="string">"fiddle/function"</literal></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>deallocate</name></expr>, <expr><name>function_memsize</name></expr>,}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ffi_cif</name> <modifier>*</modifier></type> <name>cif</name></decl>;</decl_stmt>

<return>return <expr><call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr><name>ffi_cif</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>function_data_type</name></expr></argument>, <argument><expr><name>cif</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>rb_fiddle_new_function</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>ret_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>arg_types</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ret_type</name></expr>;</expr_stmt>

<return>return <expr><call><name>rb_class_new_instance</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>cFiddleFunction</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>parse_keyword_arg_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <call><name>ID2SYM</name><argument_list>(<argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_iv_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@name"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unknown keyword: %"</literal><name>PRIsVALUE</name></expr></argument>,

<argument><expr><call><name>RB_OBJ_STRING</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ST_CONTINUE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ffi_cif</name> <modifier>*</modifier></type> <name>cif</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ffi_type</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg_types</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ffi_status</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>args</name></decl>, <decl><type ref="prev"/><name>ret_type</name></decl>, <decl><type ref="prev"/><name>abi</name></decl>, <decl><type ref="prev"/><name>kwds</name></decl>, <decl><type ref="prev"/><name>ary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nabi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cfunc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"31:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kwds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_iv_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@closure"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>rb_Integer</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cfunc</name> <operator>=</operator> <call><name>NUM2PTR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PTR2NUM</name><argument_list>(<argument><expr><name>cfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nabi</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>abi</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>FFI_DEFAULT_ABI</name></expr> </then><else>: <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>abi</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>abi</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>nabi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>ret_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rtype</name> <operator>=</operator> <call><name>INT2FFI_TYPE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret_type</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check_Max_Args</name><argument_list>(<argument><expr><literal type="string">"args"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ary</name> <operator>=</operator> <call><name>rb_ary_subseq</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>a</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>INT2FFI_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_ary_store</name><argument_list>(<argument><expr><name>ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>INT2FIX</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>ary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_iv_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@ptr"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_iv_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@args"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_iv_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@return_type"</literal></expr></argument>, <argument><expr><name>ret_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_iv_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@abi"</literal></expr></argument>, <argument><expr><name>abi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NIL_P</name><argument_list>(<argument><expr><name>kwds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>kwds</name></expr></argument>, <argument><expr><name>parse_keyword_arg_i</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ffi_cif</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>function_data_type</name></expr></argument>, <argument><expr><name>cif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>arg_types</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ffi_type</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>arg_types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>INT2FFI_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>arg_types</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ffi_prep_cif</name><argument_list>(<argument><expr><name>cif</name></expr></argument>, <argument><expr><name>nabi</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rtype</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"error creating CIF %d"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>nogvl_ffi_call_args</name> <block>{

<decl_stmt><decl><type><name>ffi_cif</name> <modifier>*</modifier></type><name>cif</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fiddle_generic</name></type> <name>retval</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>nogvl_ffi_call</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>nogvl_ffi_call_args</name></name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ffi_call</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>cif</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>fn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><operator>-&gt;</operator><name>retval</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>function_call</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>nogvl_ffi_call_args</name></name></type> <name>args</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fiddle_generic</name> <modifier>*</modifier></type><name>generic_args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>cfunc</name></decl>, <decl><type ref="prev"/><name>types</name></decl>, <decl><type ref="prev"/><name>cPointer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>alloc_buffer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cfunc</name> <operator>=</operator> <call><name>rb_iv_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@ptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>types</name> <operator>=</operator> <call><name>rb_iv_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cPointer</name> <operator>=</operator> <call><name>rb_const_get</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"Pointer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check_Max_Args</name><argument_list>(<argument><expr><literal type="string">"number of arguments"</literal></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <operator>(</operator><name>i</name> <operator>=</operator> <call><name>RARRAY_LENINT</name><argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_error_arity</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>ffi_cif</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>function_data_type</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>cif</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>generic_args</name> <operator>=</operator> <call><name>ALLOCV</name><argument_list>(<argument><expr><name>alloc_buffer</name></expr></argument>,

<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>argc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>argc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fiddle_generic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>values</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>generic_args</name> <operator>+</operator>

<operator>(</operator><name>size_t</name><operator>)</operator><name>argc</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fiddle_generic</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name> <init>= <expr><call><name>RARRAY_AREF</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>src</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argtype</name> <init>= <expr><call><name>FIX2INT</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argtype</name> <operator>==</operator> <name>TYPE_VOIDP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>INT2FIX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>cPointer</name> <operator>!=</operator> <call><name>CLASS_OF</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>cPointer</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>rb_Integer</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VALUE2GENERIC</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>generic_args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>generic_args</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>values</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><call><name>NUM2PTR</name><argument_list>(<argument><expr><name>cfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rb_thread_call_without_gvl</name><argument_list>(<argument><expr><name>nogvl_ffi_call</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"last_error="</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"win32_last_error="</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ALLOCV_END</name><argument_list>(<argument><expr><name>alloc_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>GENERIC2VALUE</name><argument_list>(<argument><expr><call><name>rb_iv_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"@return_type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>retval</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_fiddle_function</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>cFiddleFunction</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"Function"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cFiddleFunction</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>FFI_DEFAULT_ABI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_FFI_STDCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cFiddleFunction</name></expr></argument>, <argument><expr><literal type="string">"STDCALL"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>FFI_STDCALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cFiddleFunction</name></expr></argument>, <argument><expr><name>allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cFiddleFunction</name></expr></argument>, <argument><expr><literal type="string">"call"</literal></expr></argument>, <argument><expr><name>function_call</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cFiddleFunction</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
