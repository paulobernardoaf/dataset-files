<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\fiddle\handle.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ruby.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fiddle.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_cHandle</name></decl>;</decl_stmt>

<struct>struct <name>dl_handle</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>open</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enable_close</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>w32_coredll</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MEMORY_BASIC_INFORMATION</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>VirtualQuery</name><argument_list>(<argument><expr><name>_errno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>m</name><operator>.</operator><name>AllocationBase</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>w32_dlclose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>ptr</name> <operator>==</operator> <call><name>w32_coredll</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><operator>(</operator><name>HMODULE</name><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>errno</name> <operator>=</operator> <call><name>rb_w32_map_errno</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlclose</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>w32_dlclose(ptr)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fiddle_handle_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dl_handle</name></name> <modifier>*</modifier></type><name>fiddle_handle</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>fiddle_handle</name><operator>-&gt;</operator><name>open</name></name> <operator>&amp;&amp;</operator> <name><name>fiddle_handle</name><operator>-&gt;</operator><name>enable_close</name></name></expr> )</condition><block>{<block_content>

<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>fiddle_handle_memsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dl_handle</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>fiddle_handle_data_type</name> <init>= <expr><block>{

<expr><literal type="string">"fiddle/handle"</literal></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>fiddle_handle_free</name></expr>, <expr><name>fiddle_handle_memsize</name></expr>,}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_handle_close</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dl_handle</name></name> <modifier>*</modifier></type><name>fiddle_handle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>dl_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiddle_handle_data_type</name></expr></argument>, <argument><expr><name>fiddle_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiddleError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>dlerror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiddleError</name></expr></argument>, <argument><expr><literal type="string">"could not close handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiddleError</name></expr></argument>, <argument><expr><literal type="string">"dlclose() called too many times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>UNREACHABLE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_handle_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dl_handle</name></name> <modifier>*</modifier></type><name>fiddle_handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr>struct <name>dl_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiddle_handle_data_type</name></expr></argument>, <argument><expr><name>fiddle_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>enable_close</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>predefined_fiddle_handle</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>rb_fiddle_handle_s_allocate</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dl_handle</name></name> <modifier>*</modifier></type><name>fiddle_handle</name> <init>= <expr><call><name>DATA_PTR</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OBJ_FREEZE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_handle_initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dl_handle</name></name> <modifier>*</modifier></type><name>fiddle_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>lib</name></decl>, <decl><type ref="prev"/><name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clib</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cflag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"02"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lib</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>clib</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cflag</name> <operator>=</operator> <name>RTLD_LAZY</name> <operator>|</operator> <name>RTLD_GLOBAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>clib</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cflag</name> <operator>=</operator> <name>RTLD_LAZY</name> <operator>|</operator> <name>RTLD_GLOBAL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>clib</name> <operator>=</operator> <ternary><condition><expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cflag</name> <operator>=</operator> <call><name>NUM2INT</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>rb_bug</name><argument_list>(<argument><expr><literal type="string">"rb_fiddle_handle_new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>clib</name></expr> )</condition><block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>rb_libruby_handle</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>rb_libruby_handle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>STRCASECMP</name><argument_list>(<argument><expr><name>clib</name></expr></argument>, <argument><expr><literal type="string">"libc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RUBY_COREDLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <call><name>STRCASECMP</name><argument_list>(<argument><expr><name>clib</name></expr></argument>, <argument><expr><name>RUBY_COREDLL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>STRCASECMP</name><argument_list>(<argument><expr><name>clib</name></expr></argument>, <argument><expr><name>RUBY_COREDLL</name><literal type="string">".dll"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"coredll.dll"</literal></expr></argument>, <argument><expr><name>cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cflag</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>w32_coredll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><name>clib</name></expr></argument>, <argument><expr><name>cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>err</name> <operator>=</operator> <call><name>dlerror</name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiddleError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>ptr</name></expr> )</condition><block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dlerror</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiddleError</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>dl_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiddle_handle_data_type</name></expr></argument>, <argument><expr><name>fiddle_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>fiddle_handle</name><operator>-&gt;</operator><name>open</name></name> <operator>&amp;&amp;</operator> <name><name>fiddle_handle</name><operator>-&gt;</operator><name>enable_close</name></name></expr> )</condition><block>{<block_content>

<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>enable_close</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>rb_block_given_p</name><argument_list>()</argument_list></call></expr> )</condition><block>{<block_content>

<expr_stmt><expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>rb_yield</name></expr></argument>, <argument><expr><name>self</name></expr></argument>, <argument><expr><name>rb_fiddle_handle_close</name></expr></argument>, <argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_handle_enable_close</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dl_handle</name></name> <modifier>*</modifier></type><name>fiddle_handle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>dl_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiddle_handle_data_type</name></expr></argument>, <argument><expr><name>fiddle_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>enable_close</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_handle_disable_close</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dl_handle</name></name> <modifier>*</modifier></type><name>fiddle_handle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>dl_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiddle_handle_data_type</name></expr></argument>, <argument><expr><name>fiddle_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>enable_close</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_handle_close_enabled_p</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dl_handle</name></name> <modifier>*</modifier></type><name>fiddle_handle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>dl_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiddle_handle_data_type</name></expr></argument>, <argument><expr><name>fiddle_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>enable_close</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>Qtrue</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>Qfalse</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_handle_to_i</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dl_handle</name></name> <modifier>*</modifier></type><name>fiddle_handle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>dl_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiddle_handle_data_type</name></expr></argument>, <argument><expr><name>fiddle_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>PTR2NUM</name><argument_list>(<argument><expr><name>fiddle_handle</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>fiddle_handle_sym</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>symbol</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_handle_sym</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dl_handle</name></name> <modifier>*</modifier></type><name>fiddle_handle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>dl_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fiddle_handle_data_type</name></expr></argument>, <argument><expr><name>fiddle_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>fiddle_handle</name><operator>-&gt;</operator><name>open</name></name></expr> )</condition><block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiddleError</name></expr></argument>, <argument><expr><literal type="string">"closed handle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>fiddle_handle_sym</name><argument_list>(<argument><expr><name><name>fiddle_handle</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_NEXT</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RTLD_DEFAULT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RTLD_DEFAULT</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>rb_fiddle_handle_s_sym</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>sym</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>fiddle_handle_sym</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>fiddle_handle_sym</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>symbol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_DLERROR</name></cpp:macro> <cpp:value>if ((err = dlerror()) != 0) { func = 0; }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_DLERROR</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dlerror</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>func</name> <operator>=</operator> <operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>()</argument_list></call><operator>)</operator><operator>(</operator><name>VALUE</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CHECK_DLERROR</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FUNC_STDCALL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>func</name></expr> )</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name_n</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name_a</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name_a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name_n</name> <operator>=</operator> <name>name_a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name_a</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name_a</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>name_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CHECK_DLERROR</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>func</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name_n</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>name_a</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>name_n</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>xmalloc</name><argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name_n</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name_n</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr> )</control><block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name_n</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>name_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CHECK_DLERROR</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>func</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>func</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>name_n</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name_n</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'@'</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr> )</control><block>{<block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name_n</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>func</name> <operator>=</operator> <call><name>dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>name_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CHECK_DLERROR</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>func</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<label><name>found</name>:</label>

<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>name_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>func</name></expr> )</condition><block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eFiddleError</name></expr></argument>, <argument><expr><literal type="string">"unknown symbol \"%"</literal><name>PRIsVALUE</name><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>PTR2NUM</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_fiddle_handle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>rb_cHandle</name> <operator>=</operator> <call><name>rb_define_class_under</name><argument_list>(<argument><expr><name>mFiddle</name></expr></argument>, <argument><expr><literal type="string">"Handle"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><name>rb_fiddle_handle_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"sym"</literal></expr></argument>, <argument><expr><name>rb_fiddle_handle_s_sym</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>rb_fiddle_handle_s_sym</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"NEXT"</literal></expr></argument>, <argument><expr><call><name>predefined_fiddle_handle</name><argument_list>(<argument><expr><name>RTLD_NEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><call><name>predefined_fiddle_handle</name><argument_list>(<argument><expr><name>RTLD_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"RTLD_GLOBAL"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>RTLD_GLOBAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"RTLD_LAZY"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>RTLD_LAZY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"RTLD_NOW"</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>RTLD_NOW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>rb_fiddle_handle_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"to_i"</literal></expr></argument>, <argument><expr><name>rb_fiddle_handle_to_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><name>rb_fiddle_handle_close</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"sym"</literal></expr></argument>, <argument><expr><name>rb_fiddle_handle_sym</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>rb_fiddle_handle_sym</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"disable_close"</literal></expr></argument>, <argument><expr><name>rb_fiddle_handle_disable_close</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"enable_close"</literal></expr></argument>, <argument><expr><name>rb_fiddle_handle_enable_close</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>rb_cHandle</name></expr></argument>, <argument><expr><literal type="string">"close_enabled?"</literal></expr></argument>, <argument><expr><name>rb_fiddle_handle_close_enabled_p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
