<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\nkf\nkf-utf8\nkf.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NKF_VERSION</name></cpp:macro> <cpp:value>"2.1.5"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NKF_RELEASE_DATE</name></cpp:macro> <cpp:value>"2018-12-15"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_RIGHT</name></cpp:macro> <cpp:value>"Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa).\n" "Copyright (C) 1996-2018, The nkf Project."</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nkf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8tbl.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WIN32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOS</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOSERRORS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXED_MIME</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICT_MIME</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<enum>enum <name>byte_order</name> <block>{

<decl><name>ENDIAN_BIG</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ENDIAN_LITTLE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>ENDIAN_2143</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>ENDIAN_3412</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BS</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAB</name></cpp:macro> <cpp:value>0x09</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LF</name></cpp:macro> <cpp:value>0x0a</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR</name></cpp:macro> <cpp:value>0x0d</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESC</name></cpp:macro> <cpp:value>0x1b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEL</name></cpp:macro> <cpp:value>0x7f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI</name></cpp:macro> <cpp:value>0x0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO</name></cpp:macro> <cpp:value>0x0e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS2</name></cpp:macro> <cpp:value>0x8e</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS3</name></cpp:macro> <cpp:value>0x8f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRLF</name></cpp:macro> <cpp:value>0x0D0A</cpp:value></cpp:define>

<enum>enum <name>nkf_encodings</name> <block>{

<decl><name>ASCII</name></decl>,

<decl><name>ISO_8859_1</name></decl>,

<decl><name>ISO_2022_JP</name></decl>,

<decl><name>CP50220</name></decl>,

<decl><name>CP50221</name></decl>,

<decl><name>CP50222</name></decl>,

<decl><name>ISO_2022_JP_1</name></decl>,

<decl><name>ISO_2022_JP_3</name></decl>,

<decl><name>ISO_2022_JP_2004</name></decl>,

<decl><name>SHIFT_JIS</name></decl>,

<decl><name>WINDOWS_31J</name></decl>,

<decl><name>CP10001</name></decl>,

<decl><name>EUC_JP</name></decl>,

<decl><name>EUCJP_NKF</name></decl>,

<decl><name>CP51932</name></decl>,

<decl><name>EUCJP_MS</name></decl>,

<decl><name>EUCJP_ASCII</name></decl>,

<decl><name>SHIFT_JISX0213</name></decl>,

<decl><name>SHIFT_JIS_2004</name></decl>,

<decl><name>EUC_JISX0213</name></decl>,

<decl><name>EUC_JIS_2004</name></decl>,

<decl><name>UTF_8</name></decl>,

<decl><name>UTF_8N</name></decl>,

<decl><name>UTF_8_BOM</name></decl>,

<decl><name>UTF8_MAC</name></decl>,

<decl><name>UTF_16</name></decl>,

<decl><name>UTF_16BE</name></decl>,

<decl><name>UTF_16BE_BOM</name></decl>,

<decl><name>UTF_16LE</name></decl>,

<decl><name>UTF_16LE_BOM</name></decl>,

<decl><name>UTF_32</name></decl>,

<decl><name>UTF_32BE</name></decl>,

<decl><name>UTF_32BE_BOM</name></decl>,

<decl><name>UTF_32LE</name></decl>,

<decl><name>UTF_32LE_BOM</name></decl>,

<decl><name>BINARY</name></decl>,

<decl><name>NKF_ENCODING_TABLE_SIZE</name></decl>,

<decl><name>JIS_X_0201_1976_K</name> <init>= <expr><literal type="number">0x1013</literal></expr></init></decl>, 

<decl><name>JIS_X_0208</name> <init>= <expr><literal type="number">0x1168</literal></expr></init></decl>, 

<decl><name>JIS_X_0212</name> <init>= <expr><literal type="number">0x1159</literal></expr></init></decl>, 

<decl><name>JIS_X_0213_2</name> <init>= <expr><literal type="number">0x1229</literal></expr></init></decl>, 

<decl><name>JIS_X_0213_1</name> <init>= <expr><literal type="number">0x1233</literal></expr></init></decl> 

}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>s_iconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>e_iconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>w_iconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>w_iconv16</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>w_iconv32</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>j_oconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>s_oconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>e_oconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>w_oconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>w_oconv16</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>w_oconv32</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>iconv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>oconv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>nkf_native_encoding</name>;</typedef>

<decl_stmt><decl><type><name>nkf_native_encoding</name></type> <name>NkfEncodingASCII</name> <init>= <expr><block>{ <expr><literal type="string">"ASCII"</literal></expr>, <expr><name>e_iconv</name></expr>, <expr><name>e_oconv</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_native_encoding</name></type> <name>NkfEncodingISO_2022_JP</name> <init>= <expr><block>{ <expr><literal type="string">"ISO-2022-JP"</literal></expr>, <expr><name>e_iconv</name></expr>, <expr><name>j_oconv</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_native_encoding</name></type> <name>NkfEncodingShift_JIS</name> <init>= <expr><block>{ <expr><literal type="string">"Shift_JIS"</literal></expr>, <expr><name>s_iconv</name></expr>, <expr><name>s_oconv</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_native_encoding</name></type> <name>NkfEncodingEUC_JP</name> <init>= <expr><block>{ <expr><literal type="string">"EUC-JP"</literal></expr>, <expr><name>e_iconv</name></expr>, <expr><name>e_oconv</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_native_encoding</name></type> <name>NkfEncodingUTF_8</name> <init>= <expr><block>{ <expr><literal type="string">"UTF-8"</literal></expr>, <expr><name>w_iconv</name></expr>, <expr><name>w_oconv</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_native_encoding</name></type> <name>NkfEncodingUTF_16</name> <init>= <expr><block>{ <expr><literal type="string">"UTF-16"</literal></expr>, <expr><name>w_iconv16</name></expr>, <expr><name>w_oconv16</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_native_encoding</name></type> <name>NkfEncodingUTF_32</name> <init>= <expr><block>{ <expr><literal type="string">"UTF-32"</literal></expr>, <expr><name>w_iconv32</name></expr>, <expr><name>w_oconv32</name></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>nkf_native_encoding</name> <modifier>*</modifier></type><name>base_encoding</name></decl>;</decl_stmt>

}</block></struct></type> <name>nkf_encoding</name>;</typedef>

<decl_stmt><decl><type><name>nkf_encoding</name></type> <name><name>nkf_encoding_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>ASCII</name></expr>, <expr><literal type="string">"US-ASCII"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingASCII</name></expr>}</block></expr>,

<expr><block>{<expr><name>ISO_8859_1</name></expr>, <expr><literal type="string">"ISO-8859-1"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingASCII</name></expr>}</block></expr>,

<expr><block>{<expr><name>ISO_2022_JP</name></expr>, <expr><literal type="string">"ISO-2022-JP"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingISO_2022_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>CP50220</name></expr>, <expr><literal type="string">"CP50220"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingISO_2022_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>CP50221</name></expr>, <expr><literal type="string">"CP50221"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingISO_2022_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>CP50222</name></expr>, <expr><literal type="string">"CP50222"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingISO_2022_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>ISO_2022_JP_1</name></expr>, <expr><literal type="string">"ISO-2022-JP-1"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingISO_2022_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>ISO_2022_JP_3</name></expr>, <expr><literal type="string">"ISO-2022-JP-3"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingISO_2022_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>ISO_2022_JP_2004</name></expr>, <expr><literal type="string">"ISO-2022-JP-2004"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingISO_2022_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>SHIFT_JIS</name></expr>, <expr><literal type="string">"Shift_JIS"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingShift_JIS</name></expr>}</block></expr>,

<expr><block>{<expr><name>WINDOWS_31J</name></expr>, <expr><literal type="string">"Windows-31J"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingShift_JIS</name></expr>}</block></expr>,

<expr><block>{<expr><name>CP10001</name></expr>, <expr><literal type="string">"CP10001"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingShift_JIS</name></expr>}</block></expr>,

<expr><block>{<expr><name>EUC_JP</name></expr>, <expr><literal type="string">"EUC-JP"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingEUC_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>EUCJP_NKF</name></expr>, <expr><literal type="string">"eucJP-nkf"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingEUC_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>CP51932</name></expr>, <expr><literal type="string">"CP51932"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingEUC_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>EUCJP_MS</name></expr>, <expr><literal type="string">"eucJP-MS"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingEUC_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>EUCJP_ASCII</name></expr>, <expr><literal type="string">"eucJP-ASCII"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingEUC_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>SHIFT_JISX0213</name></expr>, <expr><literal type="string">"Shift_JISX0213"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingShift_JIS</name></expr>}</block></expr>,

<expr><block>{<expr><name>SHIFT_JIS_2004</name></expr>, <expr><literal type="string">"Shift_JIS-2004"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingShift_JIS</name></expr>}</block></expr>,

<expr><block>{<expr><name>EUC_JISX0213</name></expr>, <expr><literal type="string">"EUC-JISX0213"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingEUC_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>EUC_JIS_2004</name></expr>, <expr><literal type="string">"EUC-JIS-2004"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingEUC_JP</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_8</name></expr>, <expr><literal type="string">"UTF-8"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_8</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_8N</name></expr>, <expr><literal type="string">"UTF-8N"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_8</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_8_BOM</name></expr>, <expr><literal type="string">"UTF-8-BOM"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_8</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF8_MAC</name></expr>, <expr><literal type="string">"UTF8-MAC"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_8</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_16</name></expr>, <expr><literal type="string">"UTF-16"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_16</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_16BE</name></expr>, <expr><literal type="string">"UTF-16BE"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_16</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_16BE_BOM</name></expr>, <expr><literal type="string">"UTF-16BE-BOM"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_16</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_16LE</name></expr>, <expr><literal type="string">"UTF-16LE"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_16</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_16LE_BOM</name></expr>, <expr><literal type="string">"UTF-16LE-BOM"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_16</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_32</name></expr>, <expr><literal type="string">"UTF-32"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_32</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_32BE</name></expr>, <expr><literal type="string">"UTF-32BE"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_32</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_32BE_BOM</name></expr>, <expr><literal type="string">"UTF-32BE-BOM"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_32</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_32LE</name></expr>, <expr><literal type="string">"UTF-32LE"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_32</name></expr>}</block></expr>,

<expr><block>{<expr><name>UTF_32LE_BOM</name></expr>, <expr><literal type="string">"UTF-32LE-BOM"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingUTF_32</name></expr>}</block></expr>,

<expr><block>{<expr><name>BINARY</name></expr>, <expr><literal type="string">"BINARY"</literal></expr>, <expr><operator>&amp;</operator><name>NkfEncodingASCII</name></expr>}</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>

}</block> <decl><name><name>encoding_name_to_id_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"US-ASCII"</literal></expr>, <expr><name>ASCII</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ASCII"</literal></expr>, <expr><name>ASCII</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"646"</literal></expr>, <expr><name>ASCII</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ROMAN8"</literal></expr>, <expr><name>ASCII</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ISO-2022-JP"</literal></expr>, <expr><name>ISO_2022_JP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ISO2022JP-CP932"</literal></expr>, <expr><name>CP50220</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CP50220"</literal></expr>, <expr><name>CP50220</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CP50221"</literal></expr>, <expr><name>CP50221</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CSISO2022JP"</literal></expr>, <expr><name>CP50221</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CP50222"</literal></expr>, <expr><name>CP50222</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ISO-2022-JP-1"</literal></expr>, <expr><name>ISO_2022_JP_1</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ISO-2022-JP-3"</literal></expr>, <expr><name>ISO_2022_JP_3</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ISO-2022-JP-2004"</literal></expr>, <expr><name>ISO_2022_JP_2004</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SHIFT_JIS"</literal></expr>, <expr><name>SHIFT_JIS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SJIS"</literal></expr>, <expr><name>SHIFT_JIS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"MS_Kanji"</literal></expr>, <expr><name>SHIFT_JIS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"PCK"</literal></expr>, <expr><name>SHIFT_JIS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"WINDOWS-31J"</literal></expr>, <expr><name>WINDOWS_31J</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CSWINDOWS31J"</literal></expr>, <expr><name>WINDOWS_31J</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CP932"</literal></expr>, <expr><name>WINDOWS_31J</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"MS932"</literal></expr>, <expr><name>WINDOWS_31J</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CP10001"</literal></expr>, <expr><name>CP10001</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EUCJP"</literal></expr>, <expr><name>EUC_JP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EUC-JP"</literal></expr>, <expr><name>EUC_JP</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EUCJP-NKF"</literal></expr>, <expr><name>EUCJP_NKF</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"CP51932"</literal></expr>, <expr><name>CP51932</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EUC-JP-MS"</literal></expr>, <expr><name>EUCJP_MS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EUCJP-MS"</literal></expr>, <expr><name>EUCJP_MS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EUCJPMS"</literal></expr>, <expr><name>EUCJP_MS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EUC-JP-ASCII"</literal></expr>, <expr><name>EUCJP_ASCII</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EUCJP-ASCII"</literal></expr>, <expr><name>EUCJP_ASCII</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SHIFT_JISX0213"</literal></expr>, <expr><name>SHIFT_JISX0213</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"SHIFT_JIS-2004"</literal></expr>, <expr><name>SHIFT_JIS_2004</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EUC-JISX0213"</literal></expr>, <expr><name>EUC_JISX0213</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"EUC-JIS-2004"</literal></expr>, <expr><name>EUC_JIS_2004</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-8"</literal></expr>, <expr><name>UTF_8</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-8N"</literal></expr>, <expr><name>UTF_8N</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-8-BOM"</literal></expr>, <expr><name>UTF_8_BOM</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF8-MAC"</literal></expr>, <expr><name>UTF8_MAC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-8-MAC"</literal></expr>, <expr><name>UTF8_MAC</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-16"</literal></expr>, <expr><name>UTF_16</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-16BE"</literal></expr>, <expr><name>UTF_16BE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-16BE-BOM"</literal></expr>, <expr><name>UTF_16BE_BOM</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-16LE"</literal></expr>, <expr><name>UTF_16LE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-16LE-BOM"</literal></expr>, <expr><name>UTF_16LE_BOM</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-32"</literal></expr>, <expr><name>UTF_32</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-32BE"</literal></expr>, <expr><name>UTF_32BE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-32BE-BOM"</literal></expr>, <expr><name>UTF_32BE_BOM</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-32LE"</literal></expr>, <expr><name>UTF_32LE</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-32LE-BOM"</literal></expr>, <expr><name>UTF_32LE_BOM</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"BINARY"</literal></expr>, <expr><name>BINARY</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CODE_JIS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ENCIDX</name></cpp:macro> <cpp:value>ISO_2022_JP</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CODE_SJIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ENCIDX</name></cpp:macro> <cpp:value>SHIFT_JIS</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CODE_WINDOWS_31J</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ENCIDX</name></cpp:macro> <cpp:value>WINDOWS_31J</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CODE_EUC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ENCIDX</name></cpp:macro> <cpp:value>EUC_JP</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CODE_UTF8</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ENCIDX</name></cpp:macro> <cpp:value>UTF_8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_alnum</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(('a'&lt;=c &amp;&amp; c&lt;='z')||('A'&lt;= c &amp;&amp; c&lt;='Z')||('0'&lt;=c &amp;&amp; c&lt;='9'))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_toupper</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(('a'&lt;=c &amp;&amp; c&lt;='z')?(c-('a'-'A')):c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_isoctal</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>('0'&lt;=c &amp;&amp; c&lt;='7')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_isdigit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>('0'&lt;=c &amp;&amp; c&lt;='9')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_isxdigit</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nkf_isdigit(c) || ('a'&lt;=c &amp;&amp; c&lt;='f') || ('A'&lt;=c &amp;&amp; c &lt;= 'F'))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_isblank</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c == SP || c == TAB)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_isspace</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nkf_isblank(c) || c == CR || c == LF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_isalpha</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(('a' &lt;= c &amp;&amp; c &lt;= 'z') || ('A' &lt;= c &amp;&amp; c &lt;= 'Z'))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_isalnum</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nkf_isdigit(c) || nkf_isalpha(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_isprint</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SP&lt;=c &amp;&amp; c&lt;='~')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_isgraph</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>('!'&lt;=c &amp;&amp; c&lt;='~')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hex2bin</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(('0'&lt;=c&amp;&amp;c&lt;='9') ? (c-'0') : ('A'&lt;=c&amp;&amp;c&lt;='F') ? (c-'A'+10) : ('a'&lt;=c&amp;&amp;c&lt;='f') ? (c-'a'+10) : 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bin2hex</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>("0123456789ABCDEF"[c&amp;15])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_eucg3</name><parameter_list>(<parameter><type><name>c2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned short)c2 &gt;&gt; 8) == SS3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_noescape_mime</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c == CR) || (c == LF) || ((c &gt; SP) &amp;&amp; (c &lt; DEL) &amp;&amp; (c != '?') &amp;&amp; (c != '=') &amp;&amp; (c != '_') &amp;&amp; (c != '(') &amp;&amp; (c != ')') &amp;&amp; (c != '.') &amp;&amp; (c != 0x22)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_ibmext_in_sjis</name><parameter_list>(<parameter><type><name>c2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CP932_TABLE_BEGIN &lt;= c2 &amp;&amp; c2 &lt;= CP932_TABLE_END)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_byte_jisx0201_katakana_p</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SP &lt;= c &amp;&amp; c &lt;= 0x5F)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOLD_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INT_IS_SHORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOBUF_SIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOBUF_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_J</name></cpp:macro> <cpp:value>'B'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_R</name></cpp:macro> <cpp:value>'B'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETA1</name></cpp:macro> <cpp:value>0x22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETA2</name></cpp:macro> <cpp:value>0x2e</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EASYWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>POINT</name></type> <name>_BufferSize</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>input_code</name><block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>status_func</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>iconv_func</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>_file_stat</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_codename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>nkf_encoding</name> <modifier>*</modifier></type><name>input_encoding</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>nkf_encoding</name> <modifier>*</modifier></type><name>output_encoding</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCS_MAP_ASCII</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCS_MAP_MS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCS_MAP_CP932</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCS_MAP_CP10001</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ms_ucs_map_f</name> <init>= <expr><name>UCS_MAP_ASCII</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>no_cp932ext_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>no_best_fit_chars_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>input_endian</name> <init>= <expr><name>ENDIAN_BIG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>input_bom_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>unicode_subchar</name> <init>= <expr><literal type="char">'?'</literal></expr></init></decl>;</decl_stmt> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>encode_fallback</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>w_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>output_bom_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>output_endian</name> <init>= <expr><name>ENDIAN_BIG</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>std_putc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>std_getc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>std_ungetc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>broken_getc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>broken_ungetc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>mime_getc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mime_putc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>stdibuf</name><index>[<expr><name>IOBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>stdobuf</name><index>[<expr><name>IOBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NKF_UNSPECIFIED</name></cpp:macro> <cpp:value>(-TRUE)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>unbuf_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>estab_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nop_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>binmode_f</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rot_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hira_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>alpha_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mime_f</name> <init>= <expr><name>MIME_DECODE_DEFAULT</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mime_decode_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mimebuf_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>broken_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>iso8859_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mimeout_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>x0201_f</name> <init>= <expr><name>NKF_UNSPECIFIED</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>iso2022jp_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE_NORMALIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nfc_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_nfc_getc</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>std_getc</name></expr></init>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_nfc_ungetc</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter> ,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>std_ungetc</name></expr></init>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cap_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_cgetc</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>std_getc</name></expr></init>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_cungetc</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter> ,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>std_ungetc</name></expr></init>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>url_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_ugetc</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>std_getc</name></expr></init>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_uungetc</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter> ,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>std_ungetc</name></expr></init>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_EUCG3</name></cpp:macro> <cpp:value>NKF_INT32_C(0x8F00)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_MASK</name></cpp:macro> <cpp:value>NKF_INT32_C(0xFF000000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLASS_UNICODE</name></cpp:macro> <cpp:value>NKF_INT32_C(0x01000000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_MASK</name></cpp:macro> <cpp:value>NKF_INT32_C(0x00FFFFFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE_BMP_MAX</name></cpp:macro> <cpp:value>NKF_INT32_C(0x0000FFFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNICODE_MAX</name></cpp:macro> <cpp:value>NKF_INT32_C(0x0010FFFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_char_euc3_new</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) | PREFIX_EUCG3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_char_unicode_new</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) | CLASS_UNICODE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_char_unicode_p</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c &amp; CLASS_MASK) == CLASS_UNICODE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_char_unicode_bmp_p</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c &amp; VALUE_MASK) &lt;= UNICODE_BMP_MAX)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_char_unicode_value_p</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c &amp; VALUE_MASK) &lt;= UNICODE_MAX)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF16_TO_UTF32</name><parameter_list>(<parameter><type><name>lead</name></type></parameter>, <parameter><type><name>trail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((lead) &lt;&lt; 10) + (trail) - NKF_INT32_C(0x35FDC00))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NUMCHAR_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>numchar_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_ngetc</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>std_getc</name></expr></init>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_nungetc</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter> ,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>std_ungetc</name></expr></init>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>noout_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>no_putc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>debug_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>iconv_for_check</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>guess_f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_input_codename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codename</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXEC_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>exec_f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cp51932_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cp932inv_f</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>x0212_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>x0213_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>prefix_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>e_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>s_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name></type> <name><name>input_code_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"EUC-JP"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><name>e_status</name></expr>, <expr><name>e_iconv</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"Shift_JIS"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><name>s_status</name></expr>, <expr><name>s_iconv</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"UTF-8"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><name>w_status</name></expr>, <expr><name>w_iconv</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-16"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><name>w_iconv16</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"UTF-32"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><name>w_iconv32</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mimeout_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>base64_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>f_prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fold_preserve_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fold_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fold_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>kanji_intro</name> <init>= <expr><name>DEFAULT_J</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>ascii_intro</name> <init>= <expr><name>DEFAULT_R</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOLD_MARGIN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FOLD</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fold_margin</name> <init>= <expr><name>FOLD_MARGIN</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>no_connection2</name><parameter_list>(<parameter><decl><type><name>ARG_UNUSED</name> <name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>ARG_UNUSED</name> <name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>ARG_UNUSED</name> <name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"nkf internal module connection failure.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>no_connection</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>no_connection2</name><argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>iconv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list> <init>= <expr><name>no_connection2</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>oconv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list> <init>= <expr><name>no_connection</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>o_zconv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list> <init>= <expr><name>no_connection</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>o_fconv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list> <init>= <expr><name>no_connection</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>o_eol_conv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list> <init>= <expr><name>no_connection</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>o_rot_conv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list> <init>= <expr><name>no_connection</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>o_hira_conv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list> <init>= <expr><name>no_connection</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>o_base64conv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list> <init>= <expr><name>no_connection</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>o_iso2022jp_check_conv</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list> <init>= <expr><name>no_connection</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>o_putc</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list> <init>= <expr><name>std_putc</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_getc</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>std_getc</name></expr></init>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_ungetc</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>=<expr><name>std_ungetc</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_bgetc</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>std_getc</name></expr></init>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_bungetc</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter> ,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>std_ungetc</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>o_mputc</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list> <init>= <expr><name>std_putc</name></expr></init> ;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_mgetc</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>std_getc</name></expr></init>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_mungetc</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter> ,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>std_ungetc</name></expr></init>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_mgetc_buf</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>std_getc</name></expr></init>;</function_decl> 

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>i_mungetc_buf</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>std_ungetc</name></expr></init>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>output_mode</name> <init>= <expr><name>ASCII</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>input_mode</name> <init>= <expr><name>ASCII</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mime_decode_mode</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>cv</name><index>[]</index></name><init>= <expr><block>{

<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x57</literal></expr>,

<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x21</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x29</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x43</literal></expr>,

<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x3c</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x26</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x2a</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x2d</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x2f</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x35</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x37</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x3b</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x3d</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x3f</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x46</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x4a</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x4b</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x4c</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x4d</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x4e</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x4f</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x52</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x5b</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x5e</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x5f</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x62</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x69</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x6a</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x6b</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x6c</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x6d</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x6f</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x2c</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>dv</name><index>[]</index></name><init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x74</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x2c</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x2e</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x36</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x3a</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x3c</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x3e</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x47</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x53</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x5c</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ev</name><index>[]</index></name><init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x54</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x5d</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ev_x0213</name><index>[]</index></name><init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x78</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x7b</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x7c</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x7d</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x7e</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>fv</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x2c</literal></expr>,<expr><literal type="number">0x2e</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x3a</literal></expr>,

<expr><literal type="number">0x3b</literal></expr>,<expr><literal type="number">0x3f</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x5e</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x5f</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x2d</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x2f</literal></expr>,

<expr><literal type="number">0x5c</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x7c</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x27</literal></expr>,

<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x5b</literal></expr>,<expr><literal type="number">0x5d</literal></expr>,

<expr><literal type="number">0x7b</literal></expr>,<expr><literal type="number">0x7d</literal></expr>,<expr><literal type="number">0x3c</literal></expr>,<expr><literal type="number">0x3e</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x2d</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x3d</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x3c</literal></expr>,<expr><literal type="number">0x3e</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x2a</literal></expr>,<expr><literal type="number">0x40</literal></expr>,

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>

}</block></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>option_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>file_out_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERWRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>overwrite_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>preserve_time_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>backup_f</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>backup_suffix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>eolmode_f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>input_eol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>prev_cr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EASYWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>end_check</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>nkf_xmalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"can't malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>

<name>nkf_xrealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"can't realloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_xfree</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free(ptr)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>nkf_str_caseeql</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>target</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nkf_toupper</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>nkf_toupper</name><argument_list>(<argument><expr><name><name>target</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>target</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_encoding</name><modifier>*</modifier></type>

<name>nkf_enc_from_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>NKF_ENCODING_TABLE_SIZE</name> <operator>&lt;=</operator> <name>idx</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>nkf_encoding_table</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>nkf_enc_find_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>name</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>name</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>encoding_name_to_id_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nkf_str_caseeql</name><argument_list>(<argument><expr><name><name>encoding_name_to_id_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>encoding_name_to_id_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_encoding</name><modifier>*</modifier></type>

<name>nkf_enc_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>nkf_enc_find_index</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_enc_name</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(enc)-&gt;name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_enc_to_index</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(enc)-&gt;id</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_enc_to_base_encoding</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(enc)-&gt;base_encoding</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_enc_to_iconv</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>nkf_enc_to_base_encoding(enc)-&gt;iconv</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_enc_to_oconv</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>nkf_enc_to_base_encoding(enc)-&gt;oconv</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_enc_asciicompat</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nkf_enc_to_base_encoding(enc) == &amp;NkfEncodingASCII ||nkf_enc_to_base_encoding(enc) == &amp;NkfEncodingISO_2022_JP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_enc_unicode_p</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nkf_enc_to_base_encoding(enc) == &amp;NkfEncodingUTF_8 ||nkf_enc_to_base_encoding(enc) == &amp;NkfEncodingUTF_16 ||nkf_enc_to_base_encoding(enc) == &amp;NkfEncodingUTF_32)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_enc_cp5022x_p</name><parameter_list>(<parameter><type><name>enc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(nkf_enc_to_index(enc) == CP50220 ||nkf_enc_to_index(enc) == CP50221 ||nkf_enc_to_index(enc) == CP50222)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CODE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type>

<name>nkf_locale_charmap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LANGINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WIN32__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"CP%d"</literal></expr></argument>, <argument><expr><call><name>GetACP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INT_IS_SHORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<return>return <expr><name>NULL</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name><name>ulCP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ulncp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DosQueryCp</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulCP</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ulCP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulncp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ulCP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">932</literal> <operator>||</operator> <name><name>ulCP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">943</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Shift_JIS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"CP%lu"</literal></expr></argument>, <argument><expr><name><name>ulCP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>buf</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_encoding</name><modifier>*</modifier></type>

<name>nkf_locale_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_encoding</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encname</name> <init>= <expr><call><name>nkf_locale_charmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>encname</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>nkf_enc_find</name><argument_list>(<argument><expr><name>encname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>enc</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>nkf_encoding</name><modifier>*</modifier></type>

<name>nkf_utf8_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>nkf_encoding_table</name><index>[<expr><name>UTF_8</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_encoding</name><modifier>*</modifier></type>

<name>nkf_default_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_encoding</name> <modifier>*</modifier></type><name>enc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CODE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>nkf_locale_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_ENCIDX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>DEFAULT_ENCIDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>nkf_utf8_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>enc</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>long</name></type> <name>capa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

}</block></struct></type> <name>nkf_buf_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>nkf_buf_t</name> <modifier>*</modifier></type>

<name>nkf_buf_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_buf_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>nkf_xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nkf_buf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>nkf_xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nkf_char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>capa</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static void

nkf_buf_dispose(nkf_buf_t *buf)

{

nkf_xfree(buf-&gt;ptr);

nkf_xfree(buf);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_buf_length</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buf)-&gt;len)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nkf_buf_empty_p</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((buf)-&gt;len == 0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>nkf_buf_at</name><parameter_list>(<parameter><decl><type><name>nkf_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nkf_buf_clear</name><parameter_list>(<parameter><decl><type><name>nkf_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nkf_buf_push</name><parameter_list>(<parameter><decl><type><name>nkf_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>capa</name></name> <operator>&lt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>nkf_buf_pop</name><parameter_list>(<parameter><decl><type><name>nkf_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>nkf_buf_empty_p</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><operator>--</operator><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fprintf</name></cpp:macro> <cpp:value>dllprintf</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,<argument><expr><literal type="string">"Network Kanji Filter Version "</literal> <name>NKF_VERSION</name> <literal type="string">" ("</literal> <name>NKF_RELEASE_DATE</name> <literal type="string">") \n"</literal> <name>COPY_RIGHT</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,

<argument><expr><literal type="string">"Usage: nkf -[flags] [--] [in file] .. [out file for -O flag]\n"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" j/s/e/w Specify output encoding ISO-2022-JP, Shift_JIS, EUC-JP\n"</literal>

<literal type="string">" UTF options is -w[8[0],{16,32}[{B,L}[0]]]\n"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" J/S/E/W Specify input encoding ISO-2022-JP, Shift_JIS, EUC-JP\n"</literal>

<literal type="string">" UTF option is -W[8,[16,32][B,L]]\n"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">" J/S/E Specify output encoding ISO-2022-JP, Shift_JIS, EUC-JP\n"</literal></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,

<argument><expr><literal type="string">" m[BQSN0] MIME decode [B:base64,Q:quoted,S:strict,N:nonstrict,0:no decode]\n"</literal>

<literal type="string">" M[BQ] MIME encode [B:base64 Q:quoted]\n"</literal>

<literal type="string">" f/F Folding: -f60 or -f or -f60-10 (fold margin 10) F preserve nl\n"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,

<argument><expr><literal type="string">" Z[0-4] Default/0: Convert JISX0208 Alphabet to ASCII\n"</literal>

<literal type="string">" 1: Kankaku to one space 2: to two spaces 3: HTML Entity\n"</literal>

<literal type="string">" 4: JISX0208 Katakana to JISX0201 Katakana\n"</literal>

<literal type="string">" X,x Convert Halfwidth Katakana to Fullwidth or preserve it\n"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,

<argument><expr><literal type="string">" O Output to File (DEFAULT 'nkf.out')\n"</literal>

<literal type="string">" L[uwm] Line mode u:LF w:CRLF m:CR (DEFAULT noconversion)\n"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,

<argument><expr><literal type="string">" --ic=&lt;encoding&gt; Specify the input encoding\n"</literal>

<literal type="string">" --oc=&lt;encoding&gt; Specify the output encoding\n"</literal>

<literal type="string">" --hiragana --katakana Hiragana/Katakana Conversion\n"</literal>

<literal type="string">" --katakana-hiragana Converts each other\n"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><literal type="string">" --{cap, url}-input Convert hex after ':' or '%%'\n"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NUMCHAR_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" --numchar-input Convert Unicode Character Reference\n"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" --fb-{skip, html, xml, perl, java, subchar}\n"</literal>

<literal type="string">" Specify unassigned character's replacement\n"</literal></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERWRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><literal type="string">" --in-place[=SUF] Overwrite original files\n"</literal>

<literal type="string">" --overwrite[=SUF] Preserve timestamp of original files\n"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">" -g --guess Guess the input code\n"</literal>

<literal type="string">" -v --version Print the version\n"</literal>

<literal type="string">" --help/-V Print this help / configuration\n"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>show_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,

<argument><expr><literal type="string">"Summary of my nkf "</literal> <name>NKF_VERSION</name> <literal type="string">" ("</literal> <name>NKF_RELEASE_DATE</name> <literal type="string">") configuration:\n"</literal>

<literal type="string">" Compile-time options:\n"</literal>

<literal type="string">" Compiled at: "</literal> <name>__DATE__</name> <literal type="string">" "</literal> <name>__TIME__</name> <literal type="string">"\n"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,

<argument><expr><literal type="string">" Default output encoding: "</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CODE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"LOCALE (%s)\n"</literal></expr></argument>, <argument><expr><call><name>nkf_enc_name</name><argument_list>(<argument><expr><call><name>nkf_default_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_ENCIDX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<literal type="string">"CONFIG (%s)\n"</literal></expr></argument>, <argument><expr><call><name>nkf_enc_name</name><argument_list>(<argument><expr><call><name>nkf_default_encoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">"NONE\n"</literal></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>HELP_OUTPUT</name></expr></argument>,

<argument><expr><literal type="string">" Default output end of line: "</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEFAULT_NEWLINE</name> <operator>==</operator> <name>CR</name></expr></cpp:if>

<literal type="string">"CR"</literal>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>DEFAULT_NEWLINE</name> <operator>==</operator> <name>CRLF</name></expr></cpp:elif>

<literal type="string">"CRLF"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">"LF"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\n"</literal>

<literal type="string">" Decode MIME encoded string: "</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MIME_DECODE_DEFAULT</name></expr></cpp:if>

<literal type="string">"ON"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">"OFF"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\n"</literal>

<literal type="string">" Convert JIS X 0201 Katakana: "</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>X0201_DEFAULT</name></expr></cpp:if>

<literal type="string">"ON"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">"OFF"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\n"</literal>

<literal type="string">" --help, --version output: "</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HELP_OUTPUT_HELP_OUTPUT</name></expr></cpp:if>

<literal type="string">"HELP_OUTPUT"</literal>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<literal type="string">"STDOUT"</literal>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERWRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>

<name>get_backup_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>asterisk_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filename_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>suffix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>suffix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>asterisk_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>asterisk_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>backup_filename</name> <operator>=</operator> <call><name>nkf_xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>asterisk_count</name> <operator>*</operator> <operator>(</operator><name>filename_length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>suffix</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition><incr/>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>suffix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>backup_filename</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>backup_filename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>filename_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>filename_length</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>backup_filename</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>suffix</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>backup_filename</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>filename_length</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>backup_filename</name> <operator>=</operator> <call><name>nkf_xmalloc</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>backup_filename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>backup_filename</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>backup_filename</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>backup_filename</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>nkf_each_char_to_hex</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <name>VALUE_MASK</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>shift</name></expr>)</condition><block>{<block_content>

<while>while<condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>f</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>c</name><operator>&gt;&gt;</operator><name>shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>encode_fallback_html</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <name>VALUE_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal><operator>+</operator><operator>(</operator><name>c</name><operator>/</operator><call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal><operator>+</operator><operator>(</operator><name>c</name><operator>/</operator><call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call> <operator>)</operator><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal><operator>+</operator><operator>(</operator><name>c</name><operator>/</operator><literal type="number">10000</literal> <operator>)</operator><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal><operator>+</operator><operator>(</operator><name>c</name><operator>/</operator><literal type="number">1000</literal> <operator>)</operator><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal><operator>+</operator><operator>(</operator><name>c</name><operator>/</operator><literal type="number">100</literal> <operator>)</operator><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal><operator>+</operator><operator>(</operator><name>c</name><operator>/</operator><literal type="number">10</literal> <operator>)</operator><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal><operator>+</operator> <name>c</name> <operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>encode_fallback_xml</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_each_char_to_hex</name><argument_list>(<argument><expr><name>oconv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>encode_fallback_java</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <name>VALUE_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>nkf_char_unicode_bmp_p</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">0xD7C0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator> <operator>+</operator> <call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">0xDC00</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>high</name><operator>&gt;&gt;</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>high</name><operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>high</name><operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>high</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>low</name><operator>&gt;&gt;</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>low</name><operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>low</name><operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>low</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>c</name><operator>&gt;&gt;</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>c</name><operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>c</name><operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><name>c</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>encode_fallback_perl</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_each_char_to_hex</name><argument_list>(<argument><expr><name>oconv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>encode_fallback_subchar</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>unicode_subchar</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>c</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>

}</block> <decl><name><name>long_option</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"ic="</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"oc="</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"base64"</literal></expr>,<expr><literal type="string">"jMB"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"euc"</literal></expr>,<expr><literal type="string">"e"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"euc-input"</literal></expr>,<expr><literal type="string">"E"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fj"</literal></expr>,<expr><literal type="string">"jm"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"help"</literal></expr>,<expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jis"</literal></expr>,<expr><literal type="string">"j"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"jis-input"</literal></expr>,<expr><literal type="string">"J"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mac"</literal></expr>,<expr><literal type="string">"sLm"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mime"</literal></expr>,<expr><literal type="string">"jM"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"mime-input"</literal></expr>,<expr><literal type="string">"m"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"msdos"</literal></expr>,<expr><literal type="string">"sLw"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sjis"</literal></expr>,<expr><literal type="string">"s"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sjis-input"</literal></expr>,<expr><literal type="string">"S"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"unix"</literal></expr>,<expr><literal type="string">"eLu"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"version"</literal></expr>,<expr><literal type="string">"v"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"windows"</literal></expr>,<expr><literal type="string">"sLw"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"hiragana"</literal></expr>,<expr><literal type="string">"h1"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"katakana"</literal></expr>,<expr><literal type="string">"h2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"katakana-hiragana"</literal></expr>,<expr><literal type="string">"h3"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guess="</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"guess"</literal></expr>, <expr><literal type="string">"g2"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"cp932"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"no-cp932"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"x0212"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"utf8"</literal></expr>, <expr><literal type="string">"w"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"utf16"</literal></expr>, <expr><literal type="string">"w16"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"ms-ucs-map"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fb-skip"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fb-html"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fb-xml"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fb-perl"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fb-java"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fb-subchar"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fb-subchar="</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"utf8-input"</literal></expr>, <expr><literal type="string">"W"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"utf16-input"</literal></expr>, <expr><literal type="string">"W16"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"no-cp932ext"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"no-best-fit-chars"</literal></expr>,<expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE_NORMALIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"utf8mac-input"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERWRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"overwrite"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"overwrite="</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"in-place"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"in-place="</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"cap-input"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"url-input"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NUMCHAR_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"numchar-input"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"no-output"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"debug"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"cp932inv"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXEC_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"exec-in"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"exec-out"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{<expr><literal type="string">"prefix="</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_input_encoding</name><parameter_list>(<parameter><decl><type><name>nkf_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>nkf_enc_to_index</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ISO_8859_1</name></expr>:</case>

<expr_stmt><expr><name>iso8859_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CP50221</name></expr>:</case>

<case>case <expr><name>CP50222</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<case>case <expr><name>CP50220</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_CP932</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>ISO_2022_JP_1</name></expr>:</case>

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ISO_2022_JP_3</name></expr>:</case>

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x0213_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ISO_2022_JP_2004</name></expr>:</case>

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x0213_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SHIFT_JIS</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>WINDOWS_31J</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_CP932</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<break>break;</break>

<case>case <expr><name>CP10001</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_CP10001</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>EUC_JP</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>EUCJP_NKF</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>CP51932</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_CP932</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>EUCJP_MS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_MS</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>EUCJP_ASCII</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_ASCII</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>SHIFT_JISX0213</name></expr>:</case>

<case>case <expr><name>SHIFT_JIS_2004</name></expr>:</case>

<expr_stmt><expr><name>x0213_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>EUC_JISX0213</name></expr>:</case>

<case>case <expr><name>EUC_JIS_2004</name></expr>:</case>

<expr_stmt><expr><name>x0213_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE_NORMALIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>UTF8_MAC</name></expr>:</case>

<expr_stmt><expr><name>nfc_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>UTF_16</name></expr>:</case>

<case>case <expr><name>UTF_16BE</name></expr>:</case>

<case>case <expr><name>UTF_16BE_BOM</name></expr>:</case>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_BIG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UTF_16LE</name></expr>:</case>

<case>case <expr><name>UTF_16LE_BOM</name></expr>:</case>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_LITTLE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UTF_32</name></expr>:</case>

<case>case <expr><name>UTF_32BE</name></expr>:</case>

<case>case <expr><name>UTF_32BE_BOM</name></expr>:</case>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_BIG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UTF_32LE</name></expr>:</case>

<case>case <expr><name>UTF_32LE_BOM</name></expr>:</case>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_LITTLE</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_output_encoding</name><parameter_list>(<parameter><decl><type><name>nkf_encoding</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>nkf_enc_to_index</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CP50220</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_CP932</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>CP50221</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_CP932</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>ISO_2022_JP</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>ISO_2022_JP_1</name></expr>:</case>

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>ISO_2022_JP_3</name></expr>:</case>

<case>case <expr><name>ISO_2022_JP_2004</name></expr>:</case>

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x0213_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>SHIFT_JIS</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>WINDOWS_31J</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_CP932</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>CP10001</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_CP10001</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>EUC_JP</name></expr>:</case>

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_ASCII</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>EUCJP_NKF</name></expr>:</case>

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_ASCII</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>CP51932</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_CP932</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>EUCJP_MS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_MS</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>EUCJP_ASCII</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_ASCII</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>SHIFT_JISX0213</name></expr>:</case>

<case>case <expr><name>SHIFT_JIS_2004</name></expr>:</case>

<expr_stmt><expr><name>x0213_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>EUC_JISX0213</name></expr>:</case>

<case>case <expr><name>EUC_JIS_2004</name></expr>:</case>

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x0213_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>UTF_8_BOM</name></expr>:</case>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UTF_16</name></expr>:</case>

<case>case <expr><name>UTF_16BE_BOM</name></expr>:</case>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UTF_16LE</name></expr>:</case>

<expr_stmt><expr><name>output_endian</name> <operator>=</operator> <name>ENDIAN_LITTLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UTF_16LE_BOM</name></expr>:</case>

<expr_stmt><expr><name>output_endian</name> <operator>=</operator> <name>ENDIAN_LITTLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UTF_32</name></expr>:</case>

<case>case <expr><name>UTF_32BE_BOM</name></expr>:</case>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UTF_32LE</name></expr>:</case>

<expr_stmt><expr><name>output_endian</name> <operator>=</operator> <name>ENDIAN_LITTLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>UTF_32LE_BOM</name></expr>:</case>

<expr_stmt><expr><name>output_endian</name> <operator>=</operator> <name>ENDIAN_LITTLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>input_code</name></name><modifier>*</modifier></type>

<name>find_inputcode_byfunc</name><parameter_list>(<parameter><function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>iconv_func</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iconv_func</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>input_code_list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iconv_func</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>iconv_func</name></name></expr>)</condition><block>{<block_content>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_iconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>f</name></decl></parameter>, <parameter><function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>iconv_func</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_CODE_FIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>||</operator> <operator>!</operator><name>input_encoding</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>estab_f</name> <operator>!=</operator> <name>f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>estab_f</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv_func</name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_CODE_FIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>(</operator><name>f</name> <operator>==</operator> <operator>-</operator><name>TRUE</name> <operator>||</operator> <operator>!</operator><name>input_encoding</name><operator>)</operator></expr> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block>{<block_content>

<expr_stmt><expr><name>iconv</name> <operator>=</operator> <name>iconv_func</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>estab_f</name> <operator>&amp;&amp;</operator> <name>iconv_for_check</name> <operator>!=</operator> <name>iconv</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>find_inputcode_byfunc</name><argument_list>(<argument><expr><name>iconv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_input_codename</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>iconv_for_check</name> <operator>=</operator> <name>iconv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>x0212_shift</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>ret</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_eucg3</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0x75</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>c</name> <operator>+</operator> <operator>(</operator><literal type="number">0x109</literal> <operator>-</operator> <literal type="number">0x75</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0x75</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x7f</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>c</name> <operator>+</operator> <operator>(</operator><literal type="number">0x113</literal> <operator>-</operator> <literal type="number">0x75</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>x0212_unshift</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>ret</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x7f</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x88</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>c</name> <operator>+</operator> <operator>(</operator><literal type="number">0x75</literal> <operator>-</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><literal type="number">0x89</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x92</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PREFIX_EUCG3</name> <operator>|</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>c</name> <operator>+</operator> <operator>(</operator><literal type="number">0x75</literal> <operator>-</operator> <literal type="number">0x89</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type>

<name>is_x0213_2_in_x0212</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>x0213_2_table</name><index>[]</index></name> <init>=

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ku</name> <init>= <expr><name>c1</name> <operator>-</operator> <literal type="number">0x20</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ku</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>x0213_2_table</name><index>[<expr><name>ku</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><literal type="number">78</literal> <operator>&lt;=</operator> <name>ku</name> <operator>&amp;&amp;</operator> <name>ku</name> <operator>&lt;=</operator> <literal type="number">94</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>e2s_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>ndx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_eucg3</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>ndx</name> <operator>=</operator> <name>c2</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x0213_f</name> <operator>&amp;&amp;</operator> <call><name>is_x0213_2_in_x0212</name><argument_list>(<argument><expr><name>ndx</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><literal type="number">0x21</literal> <operator>&lt;=</operator> <name>ndx</name> <operator>&amp;&amp;</operator> <name>ndx</name> <operator>&lt;=</operator> <literal type="number">0x2F</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ndx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xec</literal> <operator>-</operator> <name>ndx</name> <operator>/</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>ndx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>c1</name> <operator>&lt;</operator> <literal type="number">0x60</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x1f</literal></expr> </then><else>: <expr><literal type="number">0x20</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">0x7e</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><literal type="number">0x6E</literal> <operator>&lt;=</operator> <name>ndx</name> <operator>&amp;&amp;</operator> <name>ndx</name> <operator>&lt;=</operator> <literal type="number">0x7E</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ndx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0xbe</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>ndx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>c1</name> <operator>&lt;</operator> <literal type="number">0x60</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x1f</literal></expr> </then><else>: <expr><literal type="number">0x20</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">0x7e</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if<condition>(<expr><call><name>nkf_isgraph</name><argument_list>(<argument><expr><name>ndx</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>x0212_shiftjis</name><index>[<expr><name>ndx</name> <operator>-</operator> <literal type="number">0x21</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x21</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>x0212_shift</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><literal type="number">0x7F</literal> <operator>&lt;</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c2</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>c2</name> <operator>&lt;=</operator> <literal type="number">0x5e</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x71</literal></expr> </then><else>: <expr><literal type="number">0xb1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>c1</name> <operator>&lt;</operator> <literal type="number">0x60</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x1f</literal></expr> </then><else>: <expr><literal type="number">0x20</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">0x7e</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>s2e_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>val</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>shift_jisx0213_s1a3_table</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=<expr><block>{ <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0xFC</literal> <operator>&lt;</operator> <name>c1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp932inv_f</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>x0213_f</name> <operator>&amp;&amp;</operator> <call><name>is_ibmext_in_sjis</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>shiftjis_cp932</name><index>[<expr><name>c2</name> <operator>-</operator> <name>CP932_TABLE_BEGIN</name></expr>]</index><index>[<expr><name>c1</name> <operator>-</operator> <literal type="number">0x40</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name>

<operator>&amp;&amp;</operator> <name>CP932INV_TABLE_BEGIN</name> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <name>CP932INV_TABLE_END</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>cp932inv</name><index>[<expr><name>c2</name> <operator>-</operator> <name>CP932INV_TABLE_BEGIN</name></expr>]</index><index>[<expr><name>c1</name> <operator>-</operator> <literal type="number">0x40</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x0213_f</name> <operator>&amp;&amp;</operator> <call><name>is_ibmext_in_sjis</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>shiftjis_x0212</name><index>[<expr><name>c2</name> <operator>-</operator> <literal type="number">0xfa</literal></expr>]</index><index>[<expr><name>c1</name> <operator>-</operator> <literal type="number">0x40</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0x7FFF</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>PREFIX_EUCG3</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><name>c2</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>x0213_f</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&gt;=</operator> <literal type="number">0xF0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>c2</name> <operator>&lt;=</operator> <literal type="number">0xF3</literal> <operator>||</operator> <operator>(</operator><name>c2</name> <operator>==</operator> <literal type="number">0xF4</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;</operator> <literal type="number">0x9F</literal><operator>)</operator></expr>)</condition><block>{<block_content> 

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>PREFIX_EUCG3</name> <operator>|</operator> <literal type="number">0x20</literal> <operator>|</operator> <name><name>shift_jisx0213_s1a3_table</name><index>[<expr><name>c2</name> <operator>-</operator> <literal type="number">0xF0</literal></expr>]</index><index>[<expr><literal type="number">0x9E</literal> <operator>&lt;</operator> <name>c1</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content> 

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>PREFIX_EUCG3</name> <operator>|</operator> <operator>(</operator><name>c2</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">0x17B</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x9E</literal> <operator>&lt;</operator> <name>c1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SJ0162</name></cpp:macro> <cpp:value>0x00e1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SJ6394</name></cpp:macro> <cpp:value>0x0161</cpp:value></cpp:define> 

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c2</name> <operator>+</operator> <name>c2</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>c2</name> <operator>&lt;=</operator> <literal type="number">0x9F</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SJ0162</name></expr> </then><else>: <expr><name>SJ6394</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x9E</literal> <operator>&lt;</operator> <name>c1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;</operator> <literal type="number">0x9F</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c1</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>DEL</name><operator>)</operator></expr> ?</condition><then> <expr><name>SP</name></expr> </then><else>: <expr><literal type="number">0x1F</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c1</name> <operator>-</operator> <literal type="number">0x7E</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>x0212_unshift</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nkf_unicode_to_utf8</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p3</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <name>VALUE_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <literal type="number">0xc0</literal> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>nkf_char_unicode_bmp_p</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <literal type="number">0xe0</literal> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p3</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>nkf_char_unicode_value_p</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <literal type="number">0xf0</literal> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p3</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p4</name> <operator>=</operator> <literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>nkf_utf8_to_unicode</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c3</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>wc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&lt;=</operator> <literal type="number">0xC1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&lt;=</operator> <literal type="number">0xDF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>|=</operator> <operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&lt;=</operator> <literal type="number">0xEF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>|=</operator> <operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>|=</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>&lt;=</operator> <literal type="number">0xF4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>|=</operator> <operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>|=</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wc</name> <operator>|=</operator> <operator>(</operator><name>c4</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>wc</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>

<name>unicode_to_jis_common2</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>psize</name></decl></parameter>,

<parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>-=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>psize</name> <operator>&lt;=</operator> <name>c1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pp</name><index>[<expr><name>c1</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c0</name> <operator>-=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c0</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>sizeof_utf8_to_euc_C2</name> <operator>&lt;=</operator> <name>c0</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>c0</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>no_cp932ext_f</name> <operator>&amp;&amp;</operator> <operator>(</operator>

<operator>(</operator><name>val</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x2D</literal> <operator>||</operator> 

<name>val</name> <operator>&gt;</operator> <call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">0xF300</literal></expr></argument>)</argument_list></call> 

<operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0x7FFF</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>|=</operator> <name>PREFIX_EUCG3</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>SO</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c2</name> <operator>=</operator> <name>JIS_X_0201_1976_K</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>unicode_to_jis_common</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ppp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>no_best_fit_chars_table_C2</name><index>[]</index></name> <init>=

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>no_best_fit_chars_table_C2_ms</name><index>[]</index></name> <init>=

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>no_best_fit_chars_table_932_C2</name><index>[]</index></name> <init>=

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>no_best_fit_chars_table_932_C3</name><index>[]</index></name> <init>=

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0xe0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>no_best_fit_chars_f</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP932</name></expr>)</condition><block>{<block_content>

<switch>switch<condition>(<expr><name>c2</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0xC2</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>no_best_fit_chars_table_932_C2</name><index>[<expr><name>c1</name><operator>&amp;</operator><literal type="number">0x3F</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xC3</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>no_best_fit_chars_table_932_C3</name><index>[<expr><name>c1</name><operator>&amp;</operator><literal type="number">0x3F</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><operator>!</operator><name>cp932inv_f</name></expr>)</condition><block>{<block_content>

<switch>switch<condition>(<expr><name>c2</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0xC2</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>no_best_fit_chars_table_C2</name><index>[<expr><name>c1</name><operator>&amp;</operator><literal type="number">0x3F</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xC3</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>no_best_fit_chars_table_932_C3</name><index>[<expr><name>c1</name><operator>&amp;</operator><literal type="number">0x3F</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_MS</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0xC2</literal> <operator>&amp;&amp;</operator> <name><name>no_best_fit_chars_table_C2_ms</name><index>[<expr><name>c1</name><operator>&amp;</operator><literal type="number">0x3F</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP10001</name></expr>)</condition><block>{<block_content>

<switch>switch<condition>(<expr><name>c2</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0xC2</literal></expr>:</case>

<switch>switch<condition>(<expr><name>c1</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0xA2</literal></expr>:</case>

<case>case <expr><literal type="number">0xA3</literal></expr>:</case>

<case>case <expr><literal type="number">0xA5</literal></expr>:</case>

<case>case <expr><literal type="number">0xA6</literal></expr>:</case>

<case>case <expr><literal type="number">0xAC</literal></expr>:</case>

<case>case <expr><literal type="number">0xAF</literal></expr>:</case>

<case>case <expr><literal type="number">0xB8</literal></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator>

<ternary><condition><expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP932</name></expr> ?</condition><then> <expr><name>utf8_to_euc_2bytes_932</name></expr> </then><else>:

<expr><ternary><condition><expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_MS</name></expr> ?</condition><then> <expr><name>utf8_to_euc_2bytes_ms</name></expr> </then><else>:

<expr><ternary><condition><expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP10001</name></expr> ?</condition><then> <expr><name>utf8_to_euc_2bytes_mac</name></expr> </then><else>:

<expr><ternary><condition><expr><name>x0213_f</name></expr> ?</condition><then> <expr><name>utf8_to_euc_2bytes_x0213</name></expr> </then><else>:

<expr><name>utf8_to_euc_2bytes</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unicode_to_jis_common2</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><name>sizeof_utf8_to_euc_2bytes</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>c0</name> <operator>&lt;</operator> <literal type="number">0xF0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>no_best_fit_chars_f</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP932</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0xE3</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <literal type="number">0x82</literal> <operator>&amp;&amp;</operator> <name>c0</name> <operator>==</operator> <literal type="number">0x94</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_MS</name></expr>)</condition><block>{<block_content>

<switch>switch<condition>(<expr><name>c2</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0xE2</literal></expr>:</case>

<switch>switch<condition>(<expr><name>c1</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0x80</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">0x94</literal> <operator>||</operator> <name>c0</name> <operator>==</operator> <literal type="number">0x96</literal> <operator>||</operator> <name>c0</name> <operator>==</operator> <literal type="number">0xBE</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x88</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">0x92</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0xE3</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0x80</literal> <operator>||</operator> <name>c0</name> <operator>==</operator> <literal type="number">0x9C</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP10001</name></expr>)</condition><block>{<block_content>

<switch>switch<condition>(<expr><name>c2</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0xE3</literal></expr>:</case>

<switch>switch<condition>(<expr><name>c1</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0x82</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">0x94</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x83</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">0xBB</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if><else>else<block>{<block_content>

<switch>switch<condition>(<expr><name>c2</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0xE2</literal></expr>:</case>

<switch>switch<condition>(<expr><name>c1</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0x80</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">0x95</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x88</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">0xA5</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0xEF</literal></expr>:</case>

<switch>switch<condition>(<expr><name>c1</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0xBC</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">0x8D</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xBD</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">0x9E</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>cp932inv_f</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xBF</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><literal type="number">0xA0</literal> <operator>&lt;=</operator> <name>c0</name> <operator>&amp;&amp;</operator> <name>c0</name> <operator>&lt;=</operator> <literal type="number">0xA5</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ppp</name> <operator>=</operator>

<ternary><condition><expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP932</name></expr> ?</condition><then> <expr><name>utf8_to_euc_3bytes_932</name></expr> </then><else>:

<expr><ternary><condition><expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_MS</name></expr> ?</condition><then> <expr><name>utf8_to_euc_3bytes_ms</name></expr> </then><else>:

<expr><ternary><condition><expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP10001</name></expr> ?</condition><then> <expr><name>utf8_to_euc_3bytes_mac</name></expr> </then><else>:

<expr><ternary><condition><expr><name>x0213_f</name></expr> ?</condition><then> <expr><name>utf8_to_euc_3bytes_x0213</name></expr> </then><else>:

<expr><name>utf8_to_euc_3bytes</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unicode_to_jis_common2</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name><name>ppp</name><index>[<expr><name>c2</name> <operator>-</operator> <literal type="number">0xE0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sizeof_utf8_to_euc_C2</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name><operator>&amp;&amp;</operator> <call><name>is_eucg3</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>encode_fallback</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>s2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>e2s_conv</name><argument_list>(<argument><expr><operator>*</operator><name>p2</name></expr></argument>, <argument><expr><operator>*</operator><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>s2e_conv</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X0213_SURROGATE_FIND</name><parameter_list>(<parameter><type><name>tbl</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>euc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; size; i++) if (tbl[i][0] == euc) { low = tbl[i][2]; break; } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>e2w_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP10001</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>c1</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x20</literal></expr>:</case>

<return>return <expr><literal type="number">0xA0</literal></expr>;</return>

<case>case <expr><literal type="number">0x7D</literal></expr>:</case>

<return>return <expr><literal type="number">0xA9</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>euc_to_utf8_1byte</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_eucg3</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_ASCII</name><operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">0x8F22</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <literal type="number">0x43</literal></expr>)</condition><block>{<block_content>

<return>return <expr><literal type="number">0xA6</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><name>c2</name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x21</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal><operator>&lt;=</operator><name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name><operator>&lt;</operator><name>sizeof_euc_to_utf8_2bytes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator>

<ternary><condition><expr><name>x0213_f</name></expr> ?</condition><then> <expr><name><name>x0212_to_utf8_2bytes_x0213</name><index>[<expr><name>c2</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>x0212_to_utf8_2bytes</name><index>[<expr><name>c2</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><name>c2</name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x21</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal><operator>&lt;=</operator><name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name><operator>&lt;</operator><name>sizeof_euc_to_utf8_2bytes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator>

<ternary><condition><expr><name>x0213_f</name></expr> ?</condition><then> <expr><name><name>euc_to_utf8_2bytes_x0213</name><index>[<expr><name>c2</name></expr>]</index></name></expr> </then><else>:

<expr><ternary><condition><expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_ASCII</name></expr> ?</condition><then> <expr><name><name>euc_to_utf8_2bytes</name><index>[<expr><name>c2</name></expr>]</index></name></expr> </then><else>:

<expr><ternary><condition><expr><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP10001</name></expr> ?</condition><then> <expr><name><name>euc_to_utf8_2bytes_mac</name><index>[<expr><name>c2</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>euc_to_utf8_2bytes_ms</name><index>[<expr><name>c2</name></expr>]</index></name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x21</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal><operator>&lt;=</operator><name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name><operator>&lt;</operator><name>sizeof_euc_to_utf8_1byte</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>val</name> <init>= <expr><name><name>p</name><index>[<expr><name>c1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x0213_f</name> <operator>&amp;&amp;</operator> <literal type="number">0xD800</literal><operator>&lt;=</operator><name>val</name> <operator>&amp;&amp;</operator> <name>val</name><operator>&lt;=</operator><literal type="number">0xDBFF</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>euc</name> <init>= <expr><operator>(</operator><name>c2</name><operator>+</operator><literal type="number">0x21</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>c1</name><operator>+</operator><literal type="number">0x21</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name><operator>==</operator><name><name>x0212_to_utf8_2bytes_x0213</name><index>[<expr><name>c2</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>X0213_SURROGATE_FIND</name><argument_list>(<argument><expr><name>x0213_2_surrogate_table</name></expr></argument>, <argument><expr><name>sizeof_x0213_2_surrogate_table</name></expr></argument>, <argument><expr><name>euc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>X0213_SURROGATE_FIND</name><argument_list>(<argument><expr><name>x0213_1_surrogate_table</name></expr></argument>, <argument><expr><name>sizeof_x0213_1_surrogate_table</name></expr></argument>, <argument><expr><name>euc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>low</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>UTF16_TO_UTF32</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>e2w_combining</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>comb</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>euc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sizeof_x0213_combining_chars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>x0213_combining_chars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>comb</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>sizeof_x0213_combining_chars</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>euc</name> <operator>=</operator> <operator>(</operator><name>c2</name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>c1</name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sizeof_x0213_combining_table</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>x0213_combining_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>euc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>x0213_combining_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>w2e_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><literal type="number">0xc0</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0xef</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unicode_to_jis_common</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NUMCHAR_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><call><name>nkf_utf8_to_unicode</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>w16e_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <name>VALUE_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>nkf_char_unicode_bmp_p</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>nkf_unicode_to_utf8</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unicode_to_jis_common</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x0213_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">0xD7C0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator> <operator>+</operator> <call><name>NKF_INT32_C</name><argument_list>(<argument><expr><literal type="number">0xDC00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sizeof_x0213_1_surrogate_table</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>x0213_1_surrogate_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name><name>x0213_1_surrogate_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>c2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>x0213_1_surrogate_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sizeof_x0213_2_surrogate_table</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>x0213_2_surrogate_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name><name>x0213_2_surrogate_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>c2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>x0213_2_surrogate_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>PREFIX_EUCG3</name> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>e_iconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name> <operator>||</operator> <name>c2</name> <operator>==</operator> <name>SS2</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iso2022jp_f</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>x0201_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>GETA1</name></expr>;</expr_stmt> <expr_stmt><expr><name>c1</name> <operator>=</operator> <name>GETA2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>JIS_X_0201_1976_K</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0x8f</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp51932_f</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>x0213_f</name> <operator>&amp;&amp;</operator> <literal type="number">0xF5</literal> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xFE</literal> <operator>&amp;&amp;</operator> <literal type="number">0xA1</literal> <operator>&lt;=</operator> <name>c0</name> <operator>&amp;&amp;</operator> <name>c0</name> <operator>&lt;=</operator> <literal type="number">0xFE</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><operator>(</operator><name>c1</name> <operator>-</operator> <literal type="number">0xF5</literal><operator>)</operator> <operator>*</operator> <literal type="number">94</literal> <operator>+</operator> <name>c0</name> <operator>-</operator> <literal type="number">0xA1</literal> <operator>+</operator> <literal type="number">0xE3AC</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><name>c2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c0</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp51932_f</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>s2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>e2s_conv</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>s2e_conv</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0x100</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c2</name> <operator>==</operator> <name>EOF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>c2</name> <operator>&lt;</operator> <name>SP</name> <operator>||</operator> <name>c2</name> <operator>==</operator> <name>ISO_8859_1</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp51932_f</name> <operator>&amp;&amp;</operator> <name>ms_ucs_map_f</name> <operator>&amp;&amp;</operator> <literal type="number">0xF5</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0xFE</literal> <operator>&amp;&amp;</operator> <literal type="number">0xA1</literal> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xFE</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><operator>(</operator><name>c2</name> <operator>-</operator> <literal type="number">0xF5</literal><operator>)</operator> <operator>*</operator> <literal type="number">94</literal> <operator>+</operator> <name>c1</name> <operator>-</operator> <literal type="number">0xA1</literal> <operator>+</operator> <literal type="number">0xE000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp51932_f</name> <operator>&amp;&amp;</operator> <literal type="number">0x79</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0x7c</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>s2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>e2s_conv</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>s2e_conv</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0x100</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>s_iconv</name><parameter_list>(<parameter><decl><type><name>ARG_UNUSED</name> <name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>ARG_UNUSED</name> <name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name> <operator>||</operator> <operator>(</operator><literal type="number">0xA1</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0xDF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iso2022jp_f</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>x0201_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>GETA1</name></expr>;</expr_stmt> <expr_stmt><expr><name>c1</name> <operator>=</operator> <name>GETA2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c2</name> <operator>==</operator> <name>EOF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>c2</name> <operator>&lt;</operator> <name>SP</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>x0213_f</name> <operator>&amp;&amp;</operator> <literal type="number">0xF0</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0xF9</literal> <operator>&amp;&amp;</operator> <literal type="number">0x40</literal> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xFC</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0x7F</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><operator>(</operator><name>c2</name> <operator>-</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>*</operator> <literal type="number">188</literal> <operator>+</operator> <operator>(</operator><name>c1</name> <operator>-</operator> <literal type="number">0x40</literal> <operator>-</operator> <operator>(</operator><literal type="number">0x7E</literal> <operator>&lt;</operator> <name>c1</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">0xE000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>ret</name> <init>= <expr><call><name>s2e_conv</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>x0213_wait_combining_p</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>wc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sizeof_x0213_combining_table</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>x0213_combining_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>wc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>x0213_combining_p</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>wc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sizeof_x0213_combining_chars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>x0213_combining_chars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>wc</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>FALSE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>w_iconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>w_iconv_utf8_1st_byte</name><index>[]</index></name> <init>=

<expr><block>{ 

<expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>,

<expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>,

<expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>,

<expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">70</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c3</name> <operator>&gt;</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c4</name> <operator>=</operator> <name>c3</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c3</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <literal type="number">0xff</literal> <operator>&lt;</operator> <name>c1</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>c3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else<block>{<block_content>

<switch>switch <condition>(<expr><name><name>w_iconv_utf8_1st_byte</name><index>[<expr><name>c1</name> <operator>-</operator> <literal type="number">0xC0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">21</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <literal type="number">0xBF</literal> <operator>&lt;</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">30</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c3</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0xA0</literal> <operator>||</operator> <literal type="number">0xBF</literal> <operator>&lt;</operator> <name>c2</name> <operator>||</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">31</literal></expr>:</case>

<case>case <expr><literal type="number">33</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c3</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c3</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <literal type="number">0x9F</literal> <operator>&lt;</operator> <name>c2</name> <operator>||</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">40</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c3</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0x90</literal> <operator>||</operator> <literal type="number">0xBF</literal> <operator>&lt;</operator> <name>c2</name> <operator>||</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>(</operator><name>c4</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">41</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c3</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <literal type="number">0xBF</literal> <operator>&lt;</operator> <name>c2</name> <operator>||</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>(</operator><name>c4</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">42</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c3</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0x80</literal> <operator>||</operator> <literal type="number">0x8F</literal> <operator>&lt;</operator> <name>c2</name> <operator>||</operator> <operator>(</operator><name>c3</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal> <operator>||</operator> <operator>(</operator><name>c4</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0xf8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><call><name>nkf_utf8_to_unicode</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x0213_f</name> <operator>&amp;&amp;</operator> <call><name>x0213_wait_combining_p</name><argument_list>(<argument><expr><call><name>nkf_utf8_to_unicode</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>w2e_conv</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>w_iconv_nocombine</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>ret</name> <init>= <expr><call><name>w2e_conv</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NKF_ICONV_INVALID_CODE_RANGE</name></cpp:macro> <cpp:value>-13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NKF_ICONV_WAIT_COMBINING_CHAR</name></cpp:macro> <cpp:value>-14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NKF_ICONV_NOT_COMBINED</name></cpp:macro> <cpp:value>-15</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>unicode_iconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>wc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nocombine</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>(</operator><name>wc</name><operator>&gt;&gt;</operator><literal type="number">11</literal><operator>)</operator> <operator>==</operator> <literal type="number">27</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NKF_ICONV_INVALID_CODE_RANGE</name></expr>;</return>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>wc</name> <operator>&lt;</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nocombine</name> <operator>&amp;&amp;</operator> <name>x0213_f</name> <operator>&amp;&amp;</operator> <call><name>x0213_wait_combining_p</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NKF_ICONV_WAIT_COMBINING_CHAR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>w16e_conv</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>wc</name> <operator>&lt;</operator> <literal type="number">0x10FFFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>NKF_ICONV_INVALID_CODE_RANGE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>unicode_iconv_combine</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>wc</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>wc2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wc2</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NKF_ICONV_NOT_COMBINED</name></expr>;</return>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>(</operator><name>wc2</name><operator>&gt;&gt;</operator><literal type="number">11</literal><operator>)</operator> <operator>==</operator> <literal type="number">27</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NKF_ICONV_INVALID_CODE_RANGE</name></expr>;</return>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>wc2</name> <operator>&lt;</operator> <literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>x0213_combining_p</name><argument_list>(<argument><expr><name>wc2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NKF_ICONV_NOT_COMBINED</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sizeof_x0213_combining_table</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>x0213_combining_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>wc</name> <operator>&amp;&amp;</operator>

<name><name>x0213_combining_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>wc2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>x0213_combining_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>x0213_combining_table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>wc2</name> <operator>&lt;</operator> <literal type="number">0x10FFFF</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NKF_ICONV_NOT_COMBINED</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>NKF_ICONV_INVALID_CODE_RANGE</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>NKF_ICONV_NOT_COMBINED</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>w_iconv_combine</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c3</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c4</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c5</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c6</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>wc</name></decl>, <decl><type ref="prev"/><name>wc2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>nkf_utf8_to_unicode</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wc2</name> <operator>=</operator> <call><name>nkf_utf8_to_unicode</name><argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wc2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>wc2</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>unicode_iconv_combine</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>wc2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NKF_ICONV_NEED_ONE_MORE_BYTE</name></cpp:macro> <cpp:value>(size_t)-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NKF_ICONV_NEED_TWO_MORE_BYTES</name></cpp:macro> <cpp:value>(size_t)-2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>nkf_iconv_utf_16</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c3</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>wc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input_endian</name> <operator>==</operator> <name>ENDIAN_BIG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0xD8</literal> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xDB</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0xDC</literal> <operator>&lt;=</operator> <name>c3</name> <operator>&amp;&amp;</operator> <name>c3</name> <operator>&lt;=</operator> <literal type="number">0xDF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>UTF16_TO_UTF32</name><argument_list>(<argument><expr><name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c2</name></expr></argument>, <argument><expr><name>c3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <return>return <expr><name>NKF_ICONV_NEED_TWO_MORE_BYTES</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0xD8</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0xDB</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0xDC</literal> <operator>&lt;=</operator> <name>c4</name> <operator>&amp;&amp;</operator> <name>c4</name> <operator>&lt;=</operator> <literal type="number">0xDF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>UTF16_TO_UTF32</name><argument_list>(<argument><expr><name>c2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c1</name></expr></argument>, <argument><expr><name>c4</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <return>return <expr><name>NKF_ICONV_NEED_TWO_MORE_BYTES</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c1</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call>(<modifier>*</modifier><name>unicode_iconv</name>)<argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>nkf_iconv_utf_16_combine</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c3</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>wc</name></decl>, <decl><type ref="prev"/><name>wc2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input_endian</name> <operator>==</operator> <name>ENDIAN_BIG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0xD8</literal> <operator>&lt;=</operator> <name>c3</name> <operator>&amp;&amp;</operator> <name>c3</name> <operator>&lt;=</operator> <literal type="number">0xDB</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NKF_ICONV_NOT_COMBINED</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wc2</name> <operator>=</operator> <name>c3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c4</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0xD8</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0xDB</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NKF_ICONV_NOT_COMBINED</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wc2</name> <operator>=</operator> <name>c4</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c3</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>unicode_iconv_combine</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>wc2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>nkf_iconv_utf_16_nocombine</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>wc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input_endian</name> <operator>==</operator> <name>ENDIAN_BIG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call>(<modifier>*</modifier><name>unicode_iconv</name>)<argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>w_iconv16</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>ARG_UNUSED</name> <name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">16</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>w_iconv32</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>ARG_UNUSED</name> <name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">32</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>utf32_to_nkf_char</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c3</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>wc</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>input_endian</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>ENDIAN_BIG</name></expr>:</case>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>c3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c4</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ENDIAN_LITTLE</name></expr>:</case>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c3</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>c2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ENDIAN_2143</name></expr>:</case>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>c4</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c3</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ENDIAN_3412</name></expr>:</case>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>c4</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>c2</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>NKF_ICONV_INVALID_CODE_RANGE</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>wc</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>nkf_iconv_utf_32</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c3</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>wc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>utf32_to_nkf_char</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>wc</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call>(<modifier>*</modifier><name>unicode_iconv</name>)<argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>nkf_iconv_utf_32_combine</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c3</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c4</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c5</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c6</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c7</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>wc</name></decl>, <decl><type ref="prev"/><name>wc2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>utf32_to_nkf_char</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>wc</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wc2</name> <operator>=</operator> <call><name>utf32_to_nkf_char</name><argument_list>(<argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><name>c7</name></expr></argument>, <argument><expr><name>c8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wc2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>wc2</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>unicode_iconv_combine</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>wc2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>nkf_iconv_utf_32_nocombine</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c3</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>wc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <call><name>utf32_to_nkf_char</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call>(<modifier>*</modifier><name>unicode_iconv</name>)<argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output_ascii_escape_sequence</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (output_mode != ASCII &amp;&amp; output_mode != ISO_8859_1) { (*o_putc)(ESC); (*o_putc)('('); (*o_putc)(ascii_intro); output_mode = mode; } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>output_escape_sequence</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output_mode</name> <operator>==</operator> <name>mode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ISO_8859_1</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JIS_X_0201_1976_K</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JIS_X_0208</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>kanji_intro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JIS_X_0212</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JIS_X_0213_1</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JIS_X_0213_2</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>j_oconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NUMCHAR_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>w16e_conv</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c1</name> <operator>&amp;</operator> <name>VALUE_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ms_ucs_map_f</name> <operator>&amp;&amp;</operator> <literal type="number">0xE000</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0xE757</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0xFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0x7F</literal> <operator>+</operator> <name>c1</name> <operator>/</operator> <literal type="number">94</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">0x21</literal> <operator>+</operator> <name>c1</name> <operator>%</operator> <literal type="number">94</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>encode_fallback</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>encode_fallback</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_ascii_escape_sequence</name><argument_list>(<argument><expr><name>ASCII</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_ascii_escape_sequence</name><argument_list>(<argument><expr><name>ASCII</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>ISO_8859_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_ascii_escape_sequence</name><argument_list>(<argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name><operator>|</operator><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>output_escape_sequence</name><argument_list>(<argument><expr><name>JIS_X_0201_1976_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_eucg3</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>output_escape_sequence</name><argument_list>(<argument><expr><ternary><condition><expr><name>x0213_f</name></expr> ?</condition><then> <expr><name>JIS_X_0213_2</name></expr> </then><else>: <expr><name>JIS_X_0212</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><ternary><condition><expr><name>ms_ucs_map_f</name></expr>

?</condition><then> <expr><name>c2</name><operator>&lt;</operator><literal type="number">0x20</literal> <operator>||</operator> <literal type="number">0x92</literal><operator>&lt;</operator><name>c2</name> <operator>||</operator> <name>c1</name><operator>&lt;</operator><literal type="number">0x20</literal> <operator>||</operator> <literal type="number">0x7e</literal><operator>&lt;</operator><name>c1</name></expr>

</then><else>: <expr><name>c2</name><operator>&lt;</operator><literal type="number">0x20</literal> <operator>||</operator> <literal type="number">0x7e</literal><operator>&lt;</operator><name>c2</name> <operator>||</operator> <name>c1</name><operator>&lt;</operator><literal type="number">0x20</literal> <operator>||</operator> <literal type="number">0x7e</literal><operator>&lt;</operator><name>c1</name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>output_escape_sequence</name><argument_list>(<argument><expr><ternary><condition><expr><name>x0213_f</name></expr> ?</condition><then> <expr><name>JIS_X_0213_1</name></expr> </then><else>: <expr><name>JIS_X_0208</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>e_oconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>w16e_conv</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c1</name> <operator>&amp;</operator> <name>VALUE_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x0212_f</name> <operator>&amp;&amp;</operator> <literal type="number">0xE000</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0xE757</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0xFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c1</name> <operator>/</operator> <literal type="number">94</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>+=</operator> <ternary><condition><expr><name>c2</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="number">0x75</literal></expr> </then><else>: <expr><literal type="number">0x8FEB</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">0x21</literal> <operator>+</operator> <name>c1</name> <operator>%</operator> <literal type="number">94</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_eucg3</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="number">0x8f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>encode_fallback</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>encode_fallback</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>EUC_JP</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>SS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name><operator>|</operator><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>ISO_8859_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>ISO_8859_1</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_eucg3</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>EUC_JP</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp932inv_f</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>s2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>e2s_conv</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>s2e_conv</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><call><name>is_eucg3</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x0212_f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="number">0x8f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_isgraph</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>nkf_isgraph</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>EUC_JP</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c2</name> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>s_oconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NUMCHAR_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>w16e_conv</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c1</name> <operator>&amp;</operator> <name>VALUE_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x0213_f</name> <operator>&amp;&amp;</operator> <literal type="number">0xE000</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0xE757</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0xFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c1</name> <operator>/</operator> <literal type="number">188</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>cp932inv_f</name></expr> ?</condition><then> <expr><literal type="number">0xF0</literal></expr> </then><else>: <expr><literal type="number">0xEB</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c1</name> <operator>%</operator> <literal type="number">188</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>+=</operator> <literal type="number">0x40</literal> <operator>+</operator> <operator>(</operator><name>c1</name> <operator>&gt;</operator> <literal type="number">0x3e</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>encode_fallback</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><call>(<modifier>*</modifier><name>encode_fallback</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>SHIFT_JIS</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name><operator>|</operator><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>ISO_8859_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>ISO_8859_1</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name> <operator>|</operator> <literal type="number">0x080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_eucg3</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>SHIFT_JIS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>e2s_conv</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_isprint</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>nkf_isprint</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>SHIFT_JIS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>e2s_conv</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cp932inv_f</name>

<operator>&amp;&amp;</operator> <name>CP932INV_TABLE_BEGIN</name> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <name>CP932INV_TABLE_END</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c</name> <init>= <expr><name><name>cp932inv</name><index>[<expr><name>c2</name> <operator>-</operator> <name>CP932INV_TABLE_BEGIN</name></expr>]</index><index>[<expr><name>c1</name> <operator>-</operator> <literal type="number">0x40</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>c</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prefix_table</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c1</name></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name><name>prefix_table</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_UTF8</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { nkf_unicode_to_utf8(val, &amp;c1, &amp;c2, &amp;c3, &amp;c4); (*o_putc)(c1); if (c2) (*o_putc)(c2); if (c3) (*o_putc)(c3); if (c4) (*o_putc)(c4); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>w_oconv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>output_bom_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'\357'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'\273'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="char">'\277'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>c1</name> <operator>&amp;</operator> <name>VALUE_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OUTPUT_UTF8</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>e2w_conv</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>val2</name> <operator>=</operator> <call><name>e2w_combining</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTPUT_UTF8</name><argument_list>(<argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OUTPUT_UTF8</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_UTF16_BYTES</name><parameter_list>(<parameter><type><name>c1</name></type></parameter>, <parameter><type><name>c2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (output_endian == ENDIAN_LITTLE){ (*o_putc)(c1); (*o_putc)(c2); }else{ (*o_putc)(c2); (*o_putc)(c1); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_UTF16</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (nkf_char_unicode_bmp_p(val)) { c2 = (val &gt;&gt; 8) &amp; 0xff; c1 = val &amp; 0xff; OUTPUT_UTF16_BYTES(c1, c2); } else { val &amp;= VALUE_MASK; if (val &lt;= UNICODE_MAX) { c2 = (val &gt;&gt; 10) + NKF_INT32_C(0xD7C0); c1 = (val &amp; 0x3FF) + NKF_INT32_C(0xDC00); OUTPUT_UTF16_BYTES(c2 &amp; 0xff, (c2 &gt;&gt; 8) &amp; 0xff); OUTPUT_UTF16_BYTES(c1 &amp; 0xff, (c1 &gt;&gt; 8) &amp; 0xff); } } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>w_oconv16</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output_bom_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OUTPUT_UTF16_BYTES</name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OUTPUT_UTF16</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>e2w_conv</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val2</name> <operator>=</operator> <call><name>e2w_combining</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTPUT_UTF16</name><argument_list>(<argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OUTPUT_UTF16</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>OUTPUT_UTF16_BYTES</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_UTF32</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (output_endian == ENDIAN_LITTLE){ (*o_putc)( (c) &amp; 0xFF); (*o_putc)(((c) &gt;&gt; 8) &amp; 0xFF); (*o_putc)(((c) &gt;&gt; 16) &amp; 0xFF); (*o_putc)(0); }else{ (*o_putc)(0); (*o_putc)(((c) &gt;&gt; 16) &amp; 0xFF); (*o_putc)(((c) &gt;&gt; 8) &amp; 0xFF); (*o_putc)( (c) &amp; 0xFF); } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>w_oconv32</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>output_bom_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output_endian</name> <operator>==</operator> <name>ENDIAN_LITTLE</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="number">0xFE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="number">0xFE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>ISO_8859_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <name>VALUE_MASK</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>e2w_conv</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val2</name> <operator>=</operator> <call><name>e2w_combining</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OUTPUT_UTF32</name><argument_list>(<argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>OUTPUT_UTF32</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_L2</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_KANA</name></cpp:macro> <cpp:value>(SCORE_L2 &lt;&lt; 1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_DEPEND</name></cpp:macro> <cpp:value>(SCORE_KANA &lt;&lt; 1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_CP932</name></cpp:macro> <cpp:value>(SCORE_DEPEND &lt;&lt; 1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_X0212</name></cpp:macro> <cpp:value>(SCORE_CP932 &lt;&lt; 1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_X0213</name></cpp:macro> <cpp:value>(SCORE_X0212 &lt;&lt; 1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_NO_EXIST</name></cpp:macro> <cpp:value>(SCORE_X0213 &lt;&lt; 1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_iMIME</name></cpp:macro> <cpp:value>(SCORE_NO_EXIST &lt;&lt; 1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_ERROR</name></cpp:macro> <cpp:value>(SCORE_iMIME &lt;&lt; 1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCORE_INIT</name></cpp:macro> <cpp:value>(SCORE_iMIME)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nkf_char</name></type> <name><name>score_table_A0</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>SCORE_DEPEND</name></expr>, <expr><name>SCORE_DEPEND</name></expr>, <expr><name>SCORE_DEPEND</name></expr>,

<expr><name>SCORE_DEPEND</name></expr>, <expr><name>SCORE_DEPEND</name></expr>, <expr><name>SCORE_DEPEND</name></expr>, <expr><name>SCORE_X0213</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nkf_char</name></type> <name><name>score_table_F0</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>SCORE_L2</name></expr>, <expr><name>SCORE_L2</name></expr>, <expr><name>SCORE_L2</name></expr>, <expr><name>SCORE_L2</name></expr>,

<expr><name>SCORE_L2</name></expr>, <expr><name>SCORE_DEPEND</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>,

<expr><name>SCORE_DEPEND</name></expr>, <expr><name>SCORE_DEPEND</name></expr>, <expr><name>SCORE_CP932</name></expr>, <expr><name>SCORE_CP932</name></expr>,

<expr><name>SCORE_CP932</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_ERROR</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nkf_char</name></type> <name><name>score_table_8FA0</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0213</name></expr>,

<expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>,

<expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>,

<expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nkf_char</name></type> <name><name>score_table_8FE0</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>,

<expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>,

<expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>,

<expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nkf_char</name></type> <name><name>score_table_8FF0</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0212</name></expr>,

<expr><name>SCORE_X0212</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>,

<expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>,

<expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>, <expr><name>SCORE_X0213</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_code_score</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>score</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>score</name></name> <operator>|=</operator> <name>score</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>clr_code_score</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>score</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>score</name></name> <operator>&amp;=</operator> <operator>~</operator><name>score</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>code_score</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c2</name> <init>= <expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c1</name> <init>= <expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>SCORE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>SS2</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>SCORE_KANA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0x8f</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x70</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>score_table_8FA0</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x70</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x60</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>score_table_8FE0</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x70</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x70</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>score_table_8FF0</name><index>[<expr><name>c1</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>SCORE_X0212</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>e2w_conv</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>SCORE_NO_EXIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x70</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x20</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>score_table_A0</name><index>[<expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x70</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x70</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>score_table_F0</name><index>[<expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x70</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0x50</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>SCORE_L2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>status_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv</name> <operator>==</operator> <name><name>ptr</name><operator>-&gt;</operator><name>iconv_func</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>status_push_ch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>ptr</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>status_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>status_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>status_clear</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>SCORE_INIT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>status_reinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>status_reset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>_file_stat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>status_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>DEL</name> <operator>&amp;&amp;</operator> <name>estab_f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>status_reset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>s_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>status_check</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>DEL</name></expr>)</condition><block>{<block_content>

<break>break;</break>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<break>break;</break>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><literal type="number">0xa1</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xdf</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>SS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_clear</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>(</operator><literal type="number">0x81</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xa0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="number">0xe0</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xea</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><literal type="number">0xed</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xee</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if><if type="elseif">else if <condition>(<expr><call><name>is_ibmext_in_sjis</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if><if type="elseif">else if <condition>(<expr><literal type="number">0xf0</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xfc</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>status_disable</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x40</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x7e</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xfc</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s2e_conv</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_clear</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>status_disable</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x40</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x7e</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xfc</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>s2e_conv</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>SCORE_CP932</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_clear</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>status_disable</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0x40</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x7e</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xfc</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>s2e_conv</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>SCORE_CP932</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_clear</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>status_disable</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>e_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>status_check</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>DEL</name></expr>)</condition><block>{<block_content>

<break>break;</break>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<break>break;</break>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>SS2</name> <operator>==</operator> <name>c</name> <operator>||</operator> <operator>(</operator><literal type="number">0xa1</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xfe</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if><if type="elseif">else if <condition>(<expr><literal type="number">0x8f</literal> <operator>==</operator> <name>c</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>status_disable</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><literal type="number">0xa1</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xfe</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_clear</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>status_disable</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><literal type="number">0xa1</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xfe</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>status_disable</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>w_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>status_check</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>DEL</name></expr>)</condition><block>{<block_content>

<break>break;</break>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<break>break;</break>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><literal type="number">0xc0</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xdf</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><literal type="number">0xe0</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xef</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><literal type="number">0xf0</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xf4</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>status_disable</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><literal type="number">0x80</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xbf</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bom</name> <init>= <expr><operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xef</literal> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbb</literal>

<operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xbf</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>w2e_conv</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptr</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bom</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>code_score</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>status_clear</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>status_disable</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><literal type="number">0x80</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0xbf</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>stat</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>status_push_ch</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>status_clear</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>status_disable</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>code_status</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>action_flag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>input_code_list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>status_func</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>status_func</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>status_func</name></name><operator>)</operator><operator>(</operator><name>p</name><operator>,</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>stat</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>action_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>stat</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>action_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>action_flag</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>estab_f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>iconv_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>DEL</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>input_code_list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>status_reset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>ptr</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>nkf_buf_t</name> <modifier>*</modifier></type><name>std_gc_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>broken_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_buf_t</name> <modifier>*</modifier></type><name>broken_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>mimeout_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_buf_t</name> <modifier>*</modifier></type><name>nfc_buf</name></decl>;</decl_stmt>

}</block></struct></type> <name>nkf_state_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>nkf_state_t</name> <modifier>*</modifier></type><name>nkf_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STD_GC_BUFSIZE</name></cpp:macro> <cpp:value>(256)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nkf_state_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nkf_state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nkf_buf_clear</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>std_gc_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_buf_clear</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_buf_clear</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>nfc_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>nkf_state</name> <operator>=</operator> <call><name>nkf_xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nkf_state_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>std_gc_buf</name></name> <operator>=</operator> <call><name>nkf_buf_new</name><argument_list>(<argument><expr><name>STD_GC_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_buf</name></name> <operator>=</operator> <call><name>nkf_buf_new</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>nfc_buf</name></name> <operator>=</operator> <call><name>nkf_buf_new</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>mimeout_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>std_getc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_buf_empty_p</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>std_gc_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<return>return <expr><call><name>nkf_buf_pop</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>std_gc_buf</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>getc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>std_ungetc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>ARG_UNUSED</name> <name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>nkf_buf_push</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>std_gc_buf</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>std_putc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>c</name><operator>!=</operator><name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name><name>hold_buf</name><index>[<expr><name>HOLD_SIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hold_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>push_hold_buf</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hold_count</name> <operator>&gt;=</operator> <name>HOLD_SIZE</name><operator>*</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hold_buf</name><index>[<expr><name>hold_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>hold_count</name> <operator>&gt;=</operator> <name>HOLD_SIZE</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>EOF</name></expr> </then><else>: <expr><name>hold_count</name></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>h_conv</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hold_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fromhold_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hold_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_hold_buf</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>push_hold_buf</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>ESC</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>code_status</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>push_hold_buf</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name> <operator>||</operator> <name>estab_f</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>estab_f</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>input_code_list</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>code_status</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status_func</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>iconv_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hold_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>hold_index</name> <operator>&lt;</operator> <name>hold_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>hold_buf</name><index>[<expr><name>hold_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&lt;=</operator> <name>DEL</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>iconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>iconv</name> <operator>==</operator> <name>s_iconv</name> <operator>&amp;&amp;</operator> <literal type="number">0xa1</literal> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xdf</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>iconv</name>)<argument_list>(<argument><expr><name>JIS_X_0201_1976_K</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fromhold_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_index</name> <operator>&lt;</operator> <name>hold_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>hold_buf</name><index>[<expr><name>hold_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fromhold_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c4</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>code_status</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call>(<modifier>*</modifier><name>iconv</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>hold_index</name> <operator>&lt;</operator> <name>hold_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <name><name>hold_buf</name><index>[<expr><name>hold_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>code_status</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_index</name> <operator>&lt;</operator> <name>hold_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c4</name> <operator>=</operator> <name><name>hold_buf</name><index>[<expr><name>hold_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c4</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <name>ret</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>code_status</name><argument_list>(<argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>iconv</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><name>c3</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>hold_index</name> <operator>&lt;</operator> <name>hold_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <name><name>hold_buf</name><index>[<expr><name>hold_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fromhold_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_index</name> <operator>&lt;</operator> <name>hold_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c4</name> <operator>=</operator> <name><name>hold_buf</name><index>[<expr><name>hold_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fromhold_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c4</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromhold_count</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hold_index</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>w_iconv_combine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromhold_count</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c4</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c3</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fromhold_count</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c4</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hold_index</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hold_index</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>hold_index</name> <operator>&lt;</operator> <name>hold_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <name><name>hold_buf</name><index>[<expr><name>hold_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fromhold_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>code_status</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>iconv</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c5</name></decl>, <decl><type ref="prev"/><name>c6</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_index</name> <operator>&lt;</operator> <name>hold_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c4</name> <operator>=</operator> <name><name>hold_buf</name><index>[<expr><name>hold_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fromhold_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c4</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_index</name> <operator>&lt;</operator> <name>hold_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c5</name> <operator>=</operator> <name><name>hold_buf</name><index>[<expr><name>hold_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fromhold_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c5</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromhold_count</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hold_index</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c4</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hold_index</name> <operator>&lt;</operator> <name>hold_count</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c6</name> <operator>=</operator> <name><name>hold_buf</name><index>[<expr><name>hold_index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fromhold_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c6</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromhold_count</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hold_index</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fromhold_count</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hold_index</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c5</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c5</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c4</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>w_iconv_combine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fromhold_count</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hold_index</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fromhold_count</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hold_index</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c6</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fromhold_count</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hold_index</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c6</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c5</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c6</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c5</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c4</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>c3</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>check_bom</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>input_bom_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">0x00</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xFE</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>input_encoding</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>w_iconv32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv</name> <operator>==</operator> <name>w_iconv32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_BIG</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xFE</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xFE</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>input_encoding</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>w_iconv32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv</name> <operator>==</operator> <name>w_iconv32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_2143</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xEF</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xBB</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xBF</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>input_encoding</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>w_iconv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv</name> <operator>==</operator> <name>w_iconv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xBF</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xBB</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xEF</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xFE</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>input_encoding</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>w_iconv32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv</name> <operator>==</operator> <name>w_iconv32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_3412</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>input_encoding</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>w_iconv16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv</name> <operator>==</operator> <name>w_iconv16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_BIG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xFE</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xFF</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0xFE</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>input_encoding</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>w_iconv32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv</name> <operator>==</operator> <name>w_iconv32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_LITTLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>input_encoding</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>w_iconv16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iconv</name> <operator>==</operator> <name>w_iconv16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_LITTLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xFE</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>broken_getc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_buf_empty_p</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>nkf_buf_pop</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_buf</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_bgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <name><name>nkf_state</name><operator>-&gt;</operator><name>broken_state</name></name> <operator>!=</operator> <name>ESC</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>input_mode</name> <operator>==</operator> <name>ASCII</name> <operator>||</operator> <name>input_mode</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name><operator>=</operator> <call>(<modifier>*</modifier><name>i_bgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'@'</literal><operator>||</operator> <name>c1</name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nkf_buf_push</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_buf</name></name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_buf_push</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_buf</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ESC</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_bungetc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>nkf_state</name><operator>-&gt;</operator><name>broken_state</name></name> <operator>!=</operator> <name>ESC</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>input_mode</name> <operator>==</operator> <name>JIS_X_0208</name> <operator>||</operator> <name>input_mode</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name><operator>=</operator> <call>(<modifier>*</modifier><name>i_bgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'J'</literal><operator>||</operator> <name>c1</name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nkf_buf_push</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_buf</name></name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_buf_push</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_buf</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ESC</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_bungetc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_state</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>broken_ungetc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>ARG_UNUSED</name> <name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nkf_buf_length</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nkf_buf_push</name><argument_list>(<argument><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>broken_buf</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>eol_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>guess_f</name> <operator>&amp;&amp;</operator> <name>input_eol</name> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <name>LF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_eol</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>input_eol</name> <operator>=</operator> <ternary><condition><expr><name>prev_cr</name></expr> ?</condition><then> <expr><name>CRLF</name></expr> </then><else>: <expr><name>LF</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>input_eol</name> <operator>!=</operator> <operator>(</operator><ternary><condition><expr><name>prev_cr</name></expr> ?</condition><then> <expr><name>CRLF</name></expr> </then><else>: <expr><name>LF</name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>input_eol</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <name>CR</name> <operator>&amp;&amp;</operator> <name>input_eol</name> <operator>==</operator> <name>LF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>input_eol</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>prev_cr</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>input_eol</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>input_eol</name> <operator>=</operator> <name>CR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>input_eol</name> <operator>!=</operator> <name>CR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>input_eol</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_cr</name> <operator>||</operator> <operator>(</operator><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <name>LF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev_cr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eolmode_f</name> <operator>!=</operator> <name>LF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>o_eol_conv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eolmode_f</name> <operator>!=</operator> <name>CR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>o_eol_conv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <name>CR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prev_cr</name> <operator>=</operator> <name>CR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c2</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>c1</name> <operator>!=</operator> <name>LF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>o_eol_conv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>put_newline</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><ternary><condition><expr><name>eolmode_f</name></expr> ?</condition><then> <expr><name>eolmode_f</name></expr> </then><else>: <expr><name>DEFAULT_NEWLINE</name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CRLF</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><literal type="number">0x0D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><literal type="number">0x0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><literal type="number">0x0D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LF</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><literal type="number">0x0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>oconv_newline</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><ternary><condition><expr><name>eolmode_f</name></expr> ?</condition><then> <expr><name>eolmode_f</name></expr> </then><else>: <expr><name>DEFAULT_NEWLINE</name></expr></else></ternary></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CRLF</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x0D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>CR</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x0D</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LF</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>char_size</name><parameter_list>(<parameter><type><name>c2</name></type></parameter>,<parameter><type><name>c1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c2?2:1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>fold_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>prev0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>fold_state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator> <name>CR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fold_preserve_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fold_state</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator> <name>LF</name><operator>&amp;&amp;</operator><name>f_prev</name><operator>==</operator><name>CR</name> <operator>&amp;&amp;</operator> <name>fold_preserve_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f_prev</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator> <name>BS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f_line</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f_line</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name><operator>==</operator><name>EOF</name> <operator>&amp;&amp;</operator> <name>f_line</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c1</name><operator>==</operator><name>LF</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fold_preserve_f</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><name>c1</name><operator>==</operator><name>CR</name><operator>||</operator><operator>(</operator><name>c1</name><operator>==</operator><name>LF</name><operator>&amp;&amp;</operator><name>f_prev</name><operator>!=</operator><name>CR</name><operator>)</operator><operator>)</operator>

<operator>&amp;&amp;</operator> <name>fold_preserve_f</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fold_preserve_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f_prev</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>CR</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>f_prev</name> <operator>==</operator> <name>c1</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>f_prev</name> <operator>==</operator> <name>LF</name><operator>)</operator></expr>

)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>f_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f_prev</name><operator>&amp;</operator><literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>f_prev</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>f_prev</name><operator>==</operator><name>SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f_prev</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>f_line</name><operator>&lt;=</operator><name>fold_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>SP</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>CR</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'\f'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f_prev</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c2</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_isblank</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c2</name> <operator>==</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <literal type="char">'!'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f_prev</name> <operator>==</operator> <name>SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f_prev</name> <operator>=</operator> <name>SP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>f_line</name><operator>&lt;=</operator><name>fold_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>SP</name></expr>;</expr_stmt></block_content></block></if> 

<else>else <block>{<block_content>

<expr_stmt><expr><name>f_prev</name> <operator>=</operator> <name>SP</name></expr>;</expr_stmt> <expr_stmt><expr><name>f_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>CR</name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prev0</name> <operator>=</operator> <name>f_prev</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>f_prev</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>||</operator> <name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f_prev</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>f_line</name> <operator>+=</operator> <ternary><condition><expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><call><name>char_size</name><argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f_line</name><operator>&lt;=</operator><name>fold_len</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>f_line</name><operator>&gt;</operator><name>fold_len</name><operator>+</operator><name>fold_margin</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <call><name>char_size</name><argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><operator>(</operator><literal type="number">0xde</literal><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><operator>(</operator><literal type="number">0xdf</literal><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><operator>(</operator><literal type="number">0xa4</literal><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><operator>(</operator><literal type="number">0xa3</literal><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><operator>(</operator><literal type="number">0xa1</literal><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><operator>(</operator><literal type="number">0xb0</literal><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>SP</name><operator>&lt;=</operator><name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name><operator>&lt;=</operator><operator>(</operator><literal type="number">0xdf</literal><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>c1</name><operator>==</operator><literal type="char">')'</literal><operator>||</operator> 

<name>c1</name><operator>==</operator><literal type="char">']'</literal><operator>||</operator>

<name>c1</name><operator>==</operator><literal type="char">'}'</literal><operator>||</operator>

<name>c1</name><operator>==</operator><literal type="char">'.'</literal><operator>||</operator>

<name>c1</name><operator>==</operator><literal type="char">','</literal><operator>||</operator>

<name>c1</name><operator>==</operator><literal type="char">'!'</literal><operator>||</operator>

<name>c1</name><operator>==</operator><literal type="char">'?'</literal><operator>||</operator>

<name>c1</name><operator>==</operator><literal type="char">'/'</literal><operator>||</operator>

<name>c1</name><operator>==</operator><literal type="char">':'</literal><operator>||</operator>

<name>c1</name><operator>==</operator><literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_alnum</name><argument_list>(<argument><expr><name>prev0</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <call><name>char_size</name><argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>prev0</name><operator>==</operator><name>SP</name><operator>)</operator> <operator>||</operator> 

<operator>(</operator><name>prev0</name><operator>==</operator><name>LF</name><operator>)</operator><operator>||</operator> 

<operator>(</operator><name>prev0</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <call><name>char_size</name><argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name><operator>==</operator><literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'K'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fold_state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else <block>{<block_content>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <call><name>char_size</name><argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <call><name>char_size</name><argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_state</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><name>fold_state</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LF</name></expr>:</case>

<expr_stmt><expr><call><name>oconv_newline</name><argument_list>(<argument><expr><name>o_fconv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_fconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return;</return>

<case>case <expr><name>CR</name></expr>:</case>

<expr_stmt><expr><call><name>oconv_newline</name><argument_list>(<argument><expr><name>o_fconv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TAB</name></expr>:</case>

<case>case <expr><name>SP</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_fconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_fconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>nkf_char</name></type> <name>z_prev2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>z_prev1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>z_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <literal type="number">0x20</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="number">0x7D</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="number">0x7E</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>z_prev2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <operator>(</operator><literal type="number">0xde</literal><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>z_prev2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name><name>dv</name><index>[<expr><operator>(</operator><name>z_prev1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dv</name><index>[<expr><operator>(</operator><name>z_prev1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <operator>(</operator><literal type="number">0xdf</literal><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ev</name><index>[<expr><operator>(</operator><name>z_prev1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>z_prev2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name><name>ev</name><index>[<expr><operator>(</operator><name>z_prev1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ev</name><index>[<expr><operator>(</operator><name>z_prev1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x0213_f</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <operator>(</operator><literal type="number">0xdf</literal><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ev_x0213</name><index>[<expr><operator>(</operator><name>z_prev1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>z_prev2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name><name>ev_x0213</name><index>[<expr><operator>(</operator><name>z_prev1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ev_x0213</name><index>[<expr><operator>(</operator><name>z_prev1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>z_prev2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name><name>cv</name><index>[<expr><operator>(</operator><name>z_prev1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cv</name><index>[<expr><operator>(</operator><name>z_prev1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dv</name><index>[<expr><operator>(</operator><name>c1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <name><name>ev</name><index>[<expr><operator>(</operator><name>c1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>x0213_f</name> <operator>&amp;&amp;</operator> <name><name>ev_x0213</name><index>[<expr><operator>(</operator><name>c1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z_prev1</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z_prev2</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name><name>cv</name><index>[<expr><operator>(</operator><name>c1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cv</name><index>[<expr><operator>(</operator><name>c1</name><operator>-</operator><name>SP</name><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_f</name><operator>&amp;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <literal type="number">0x23</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0x21</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0x21</literal><operator>==</operator><name>c1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>alpha_f</name><operator>&amp;</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>SP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alpha_f</name><operator>&amp;</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alpha_f</name><operator>&amp;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="number">0x20</literal><operator>&lt;</operator><name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name><operator>&lt;</operator><literal type="number">0x7f</literal> <operator>&amp;&amp;</operator> <name><name>fv</name><index>[<expr><name>c1</name><operator>-</operator><literal type="number">0x20</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>fv</name><index>[<expr><name>c1</name><operator>-</operator><literal type="number">0x20</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_f</name><operator>&amp;</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>entity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c1</name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <expr_stmt><expr><name>entity</name> <operator>=</operator> <literal type="string">"&amp;gt;"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <expr_stmt><expr><name>entity</name> <operator>=</operator> <literal type="string">"&amp;lt;"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'\"'</literal></expr>:</case> <expr_stmt><expr><name>entity</name> <operator>=</operator> <literal type="string">"&amp;quot;"</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case> <expr_stmt><expr><name>entity</name> <operator>=</operator> <literal type="string">"&amp;amp;"</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>entity</name></expr>)</condition><block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>entity</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>*</operator><name>entity</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_f</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0x21</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c1</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x23</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xA1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x56</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xA2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x57</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xA3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x22</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xA4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x26</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xA5</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x3C</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xB0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2B</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xDE</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2C</literal></expr>:</case>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0xDF</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name>JIS_X_0201_1976_K</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0x25</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>fullwidth_to_halfwidth</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x2700</literal></expr>, <expr><literal type="number">0x3100</literal></expr>, <expr><literal type="number">0x2800</literal></expr>, <expr><literal type="number">0x3200</literal></expr>, <expr><literal type="number">0x2900</literal></expr>, <expr><literal type="number">0x3300</literal></expr>, <expr><literal type="number">0x2A00</literal></expr>,

<expr><literal type="number">0x3400</literal></expr>, <expr><literal type="number">0x2B00</literal></expr>, <expr><literal type="number">0x3500</literal></expr>, <expr><literal type="number">0x3600</literal></expr>, <expr><literal type="number">0x365E</literal></expr>, <expr><literal type="number">0x3700</literal></expr>, <expr><literal type="number">0x375E</literal></expr>, <expr><literal type="number">0x3800</literal></expr>,

<expr><literal type="number">0x385E</literal></expr>, <expr><literal type="number">0x3900</literal></expr>, <expr><literal type="number">0x395E</literal></expr>, <expr><literal type="number">0x3A00</literal></expr>, <expr><literal type="number">0x3A5E</literal></expr>, <expr><literal type="number">0x3B00</literal></expr>, <expr><literal type="number">0x3B5E</literal></expr>, <expr><literal type="number">0x3C00</literal></expr>,

<expr><literal type="number">0x3C5E</literal></expr>, <expr><literal type="number">0x3D00</literal></expr>, <expr><literal type="number">0x3D5E</literal></expr>, <expr><literal type="number">0x3E00</literal></expr>, <expr><literal type="number">0x3E5E</literal></expr>, <expr><literal type="number">0x3F00</literal></expr>, <expr><literal type="number">0x3F5E</literal></expr>, <expr><literal type="number">0x4000</literal></expr>,

<expr><literal type="number">0x405E</literal></expr>, <expr><literal type="number">0x4100</literal></expr>, <expr><literal type="number">0x415E</literal></expr>, <expr><literal type="number">0x2F00</literal></expr>, <expr><literal type="number">0x4200</literal></expr>, <expr><literal type="number">0x425E</literal></expr>, <expr><literal type="number">0x4300</literal></expr>, <expr><literal type="number">0x435E</literal></expr>,

<expr><literal type="number">0x4400</literal></expr>, <expr><literal type="number">0x445E</literal></expr>, <expr><literal type="number">0x4500</literal></expr>, <expr><literal type="number">0x4600</literal></expr>, <expr><literal type="number">0x4700</literal></expr>, <expr><literal type="number">0x4800</literal></expr>, <expr><literal type="number">0x4900</literal></expr>, <expr><literal type="number">0x4A00</literal></expr>,

<expr><literal type="number">0x4A5E</literal></expr>, <expr><literal type="number">0x4A5F</literal></expr>, <expr><literal type="number">0x4B00</literal></expr>, <expr><literal type="number">0x4B5E</literal></expr>, <expr><literal type="number">0x4B5F</literal></expr>, <expr><literal type="number">0x4C00</literal></expr>, <expr><literal type="number">0x4C5E</literal></expr>, <expr><literal type="number">0x4C5F</literal></expr>,

<expr><literal type="number">0x4D00</literal></expr>, <expr><literal type="number">0x4D5E</literal></expr>, <expr><literal type="number">0x4D5F</literal></expr>, <expr><literal type="number">0x4E00</literal></expr>, <expr><literal type="number">0x4E5E</literal></expr>, <expr><literal type="number">0x4E5F</literal></expr>, <expr><literal type="number">0x4F00</literal></expr>, <expr><literal type="number">0x5000</literal></expr>,

<expr><literal type="number">0x5100</literal></expr>, <expr><literal type="number">0x5200</literal></expr>, <expr><literal type="number">0x5300</literal></expr>, <expr><literal type="number">0x2C00</literal></expr>, <expr><literal type="number">0x5400</literal></expr>, <expr><literal type="number">0x2D00</literal></expr>, <expr><literal type="number">0x5500</literal></expr>, <expr><literal type="number">0x2E00</literal></expr>,

<expr><literal type="number">0x5600</literal></expr>, <expr><literal type="number">0x5700</literal></expr>, <expr><literal type="number">0x5800</literal></expr>, <expr><literal type="number">0x5900</literal></expr>, <expr><literal type="number">0x5A00</literal></expr>, <expr><literal type="number">0x5B00</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x5C00</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x2600</literal></expr>, <expr><literal type="number">0x5D00</literal></expr>, <expr><literal type="number">0x335E</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x365F</literal></expr>,

<expr><literal type="number">0x375F</literal></expr>, <expr><literal type="number">0x385F</literal></expr>, <expr><literal type="number">0x395F</literal></expr>, <expr><literal type="number">0x3A5F</literal></expr>, <expr><literal type="number">0x3E5F</literal></expr>, <expr><literal type="number">0x425F</literal></expr>, <expr><literal type="number">0x445F</literal></expr>, <expr><literal type="number">0x0000</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fullwidth_to_halfwidth</name><index>[<expr><name>c1</name><operator>-</operator><literal type="number">0x20</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>fullwidth_to_halfwidth</name><index>[<expr><name>c1</name><operator>-</operator><literal type="number">0x20</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name>JIS_X_0201_1976_K</name></expr></argument>, <argument><expr><name>c2</name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name>JIS_X_0201_1976_K</name></expr></argument>, <argument><expr><name>c2</name><operator>&amp;</operator><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>c1</name><operator>&amp;</operator><name>VALUE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0x3099</literal> <operator>||</operator> <operator>(</operator><name>c1</name><operator>&amp;</operator><name>VALUE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0x309A</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name>JIS_X_0201_1976_K</name></expr></argument>, <argument><expr><literal type="number">0x5E</literal> <operator>+</operator> <operator>(</operator><name>c1</name><operator>&amp;</operator><name>VALUE_MASK</name><operator>)</operator> <operator>-</operator> <literal type="number">0x3099</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_zconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rot13</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ( c &lt; 'A') ? c: (c &lt;= 'M') ? (c + 13): (c &lt;= 'Z') ? (c - 13): (c &lt; 'a') ? (c): (c &lt;= 'm') ? (c + 13): (c &lt;= 'z') ? (c - 13): (c) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rot47</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ( c &lt; '!') ? c: ( c &lt;= 'O') ? (c + 47) : ( c &lt;= '~') ? (c - 47) : c )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>rot_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c2</name> <operator>==</operator> <name>JIS_X_0201_1976_K</name> <operator>||</operator> <name>c2</name> <operator>==</operator> <name>ISO_8859_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>rot13</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>rot47</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>rot47</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_rot_conv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>hira_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>hira_f</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0x25</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0x20</literal> <operator>&lt;</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;</operator> <literal type="number">0x74</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_hira_conv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0x74</literal> <operator>&amp;&amp;</operator> <call><name>nkf_enc_unicode_p</name><argument_list>(<argument><expr><name>output_encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><literal type="number">0x3094</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_hira_conv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0x21</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <literal type="number">0x33</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="number">0x34</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_hira_conv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hira_f</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><literal type="number">0x3094</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0x25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <literal type="number">0x74</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0x24</literal> <operator>&amp;&amp;</operator> <literal type="number">0x20</literal> <operator>&lt;</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;</operator> <literal type="number">0x74</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0x25</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name> <operator>==</operator> <literal type="number">0x21</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <literal type="number">0x35</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="number">0x36</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_hira_conv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>iso2022jp_check_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANGE_NUM_MAX</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nkf_char</name></type> <name><name>range</name><index>[<expr><name>RANGE_NUM_MAX</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0x222f</literal></expr>, <expr><literal type="number">0x2239</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x2242</literal></expr>, <expr><literal type="number">0x2249</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x2251</literal></expr>, <expr><literal type="number">0x225b</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x226b</literal></expr>, <expr><literal type="number">0x2271</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x227a</literal></expr>, <expr><literal type="number">0x227d</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x2321</literal></expr>, <expr><literal type="number">0x232f</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x233a</literal></expr>, <expr><literal type="number">0x2340</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x235b</literal></expr>, <expr><literal type="number">0x2360</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x237b</literal></expr>, <expr><literal type="number">0x237e</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x2474</literal></expr>, <expr><literal type="number">0x247e</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x2577</literal></expr>, <expr><literal type="number">0x257e</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x2639</literal></expr>, <expr><literal type="number">0x2640</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x2659</literal></expr>, <expr><literal type="number">0x267e</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x2742</literal></expr>, <expr><literal type="number">0x2750</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x2772</literal></expr>, <expr><literal type="number">0x277e</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x2841</literal></expr>, <expr><literal type="number">0x287e</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x4f54</literal></expr>, <expr><literal type="number">0x4f7e</literal></expr>,}</block></expr>,

<expr><block>{<expr><literal type="number">0x7425</literal></expr>, <expr><literal type="number">0x747e</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>c2</name> <operator>&gt;=</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&gt;=</operator> <literal type="number">0x7f</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>GETA1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>GETA2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>c2</name> <operator>&gt;=</operator> <literal type="number">0x29</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0x2f</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c2</name> <operator>&gt;=</operator> <literal type="number">0x75</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0x7e</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>GETA1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>GETA2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RANGE_NUM_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>range</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>range</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>c1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>GETA1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>GETA2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_iso2022jp_check_conv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>mime_pattern</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\075?EUC-JP?B?"</literal></expr>,

<expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\075?SHIFT_JIS?B?"</literal></expr>,

<expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\075?ISO-8859-1?Q?"</literal></expr>,

<expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\075?ISO-8859-1?B?"</literal></expr>,

<expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\075?ISO-2022-JP?B?"</literal></expr>,

<expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\075?ISO-2022-JP?B?"</literal></expr>,

<expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\075?ISO-2022-JP?Q?"</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\075?UTF-8?B?"</literal></expr>,

<expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\075?UTF-8?Q?"</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\075?US-ASCII?Q?"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>mime_priority_func</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list> <init>= <expr><block>{

<expr><name>e_iconv</name></expr></block></expr></init><operator>,</operator> s_iconv<operator>,</operator> 0<operator>,</operator> 0<operator>,</operator> 0<operator>,</operator> 0<operator>,</operator> 0<operator>,</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

w_iconv<operator>,</operator> w_iconv<operator>,</operator>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

0<operator>,</operator></function_decl>

};

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nkf_char</name></type> <name><name>mime_encode</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>EUC_JP</name></expr>, <expr><name>SHIFT_JIS</name></expr>, <expr><name>ISO_8859_1</name></expr>, <expr><name>ISO_8859_1</name></expr>, <expr><name>JIS_X_0208</name></expr>, <expr><name>JIS_X_0201_1976_K</name></expr>, <expr><name>JIS_X_0201_1976_K</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>UTF_8</name></expr>, <expr><name>UTF_8</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>ASCII</name></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nkf_char</name></type> <name><name>mime_encode_method</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'B'</literal></expr>,<expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="char">'Q'</literal></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIME_BUF_SIZE</name></cpp:macro> <cpp:value>(1024)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIME_BUF_MASK</name></cpp:macro> <cpp:value>(MIME_BUF_SIZE-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mime_input_buf</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mime_input_state.buf[(n)&amp;MIME_BUF_MASK]</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MIME_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>last</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>input</name></decl>;</decl_stmt> 

}</block> <decl><name>mime_input_state</name></decl>;</struct>

<function_decl><type><specifier>static</specifier> <name>nkf_char</name></type> (<modifier>*</modifier><name>mime_iconv_back</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>,<parameter><decl><type><name>nkf_char</name></type> <name>c0</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXRECOVER</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mime_input_buf_unshift</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><operator>--</operator><name><name>mime_input_state</name><operator>.</operator><name>top</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>mime_ungetc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>ARG_UNUSED</name> <name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mime_input_buf_unshift</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>mime_ungetc_buf</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mimebuf_f</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_mungetc_buf</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><operator>--</operator><name><name>mime_input_state</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>mime_getc_buf</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>mimebuf_f</name><operator>)</operator></expr>?</condition><then>

<expr><call>(<modifier>*</modifier><name>i_mgetc_buf</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>input</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>switch_mime_getc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i_getc</name><operator>!=</operator><name>mime_getc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_mgetc</name> <operator>=</operator> <name>i_getc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_getc</name> <operator>=</operator> <name>mime_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_mungetc</name> <operator>=</operator> <name>i_ungetc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_ungetc</name> <operator>=</operator> <name>mime_ungetc</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mime_f</name><operator>==</operator><name>STRICT_MIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_mgetc_buf</name> <operator>=</operator> <name>i_mgetc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_mgetc</name> <operator>=</operator> <name>mime_getc_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_mungetc_buf</name> <operator>=</operator> <name>i_mungetc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_mungetc</name> <operator>=</operator> <name>mime_ungetc_buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>unswitch_mime_getc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mime_f</name><operator>==</operator><name>STRICT_MIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_mgetc</name> <operator>=</operator> <name>i_mgetc_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_mungetc</name> <operator>=</operator> <name>i_mungetc_buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_getc</name> <operator>=</operator> <name>i_mgetc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ungetc</name> <operator>=</operator> <name>i_mungetc</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>mime_iconv_back</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>mime_iconv_back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mime_iconv_back</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>mime_integrity</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mime_input_state</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name><name>mime_input_state</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>mime_input_state</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>input</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>mime_input_state</name><operator>.</operator><name>input</name></name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name>c</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>mime_input_state</name><operator>.</operator><name>input</name></name><operator>-</operator><name><name>mime_input_state</name><operator>.</operator><name>top</name></name><operator>)</operator><operator>&amp;</operator><name>MIME_BUF_MASK</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name>d</name><operator>==</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>input</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mime_input_state</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>switch_mime_getc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator> <operator>(</operator><name>c</name><operator>==</operator><literal type="char">'+'</literal><operator>||</operator><name>c</name><operator>==</operator><literal type="char">'/'</literal><operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'='</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'?'</literal> <operator>||</operator> <call><name>is_alnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>input</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name><operator>=</operator><name>c</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>input</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name><name>mime_input_state</name><operator>.</operator><name>input</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>switch_mime_getc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>mime_begin_strict</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>,<decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name><name>r</name><index>[<expr><name>MAXRECOVER</name></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mime_pattern</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'='</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'?'</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>SP</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><name>EOF</name><operator>)</operator> <operator>||</operator> <call><name>nkf_toupper</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>mime_pattern</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mime_pattern</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name><operator>!=</operator><name><name>q</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>k</name><operator>==</operator><name>i</name> <operator>&amp;&amp;</operator> <call><name>nkf_toupper</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call><operator>==</operator><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mime_pattern</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mime_iconv_back</name> <operator>=</operator> <name>iconv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>mime_priority_func</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clr_code_score</name><argument_list>(<argument><expr><call><name>find_inputcode_byfunc</name><argument_list>(<argument><expr><name><name>mime_priority_func</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCORE_iMIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mime_decode_mode</name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mimebuf_f</name> <operator>=</operator> <name>unbuf_f</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unbuf_f</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>mime_integrity</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name><name>mime_pattern</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>switch_mime_getc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mimebuf_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>mime_begin</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>mime_input_state</name><operator>.</operator><name>last</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name><operator>++</operator></expr></argument>)</argument_list></call><operator>=</operator><literal type="char">'='</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name><operator>++</operator></expr></argument>)</argument_list></call><operator>=</operator><literal type="char">'?'</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>MAXRECOVER</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><name>LF</name><operator>||</operator><name>c1</name><operator>==</operator><name>SP</name><operator>||</operator><name>c1</name><operator>==</operator><name>CR</name><operator>||</operator>

<name>c1</name><operator>==</operator><literal type="char">'-'</literal><operator>||</operator><name>c1</name><operator>==</operator><literal type="char">'_'</literal><operator>||</operator><call><name>is_alnum</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>!=</operator><literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>++</operator><name>i</name><operator>&lt;</operator><name>MAXRECOVER</name><operator>)</operator> <operator>||</operator> <name>c1</name><operator>==</operator><name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'b'</literal><operator>||</operator><name>c1</name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'q'</literal><operator>||</operator><name>c1</name><operator>==</operator><literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <literal type="char">'Q'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>++</operator><name>i</name><operator>&lt;</operator><name>MAXRECOVER</name><operator>)</operator> <operator>||</operator> <name>c1</name><operator>==</operator><name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>!=</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>switch_mime_getc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mime_decode_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<return>return <expr><name>c1</name></expr>;</return> 

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>

<name>no_putc</name><parameter_list>(<parameter><decl><type><name>ARG_UNUSED</name> <name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>debug_f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>str</name></expr> ?</condition><then> <expr><name>str</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>set_input_codename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>codename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_codename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <name>codename</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>codename</name></expr></argument>, <argument><expr><name>input_codename</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type>

<name>get_guessed_code</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>input_codename</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>input_codename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <literal type="string">"BINARY"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>find_inputcode_byfunc</name><argument_list>(<argument><expr><name>iconv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_codename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <literal type="string">"ASCII"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>input_codename</name></expr></argument>, <argument><expr><literal type="string">"Shift_JIS"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCORE_DEPEND</name><operator>|</operator><name>SCORE_CP932</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <literal type="string">"CP932"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>input_codename</name></expr></argument>, <argument><expr><literal type="string">"EUC-JP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>&amp;</operator> <name>SCORE_X0213</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <literal type="string">"EUC-JIS-2004"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCORE_X0212</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <literal type="string">"EUCJP-MS"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCORE_DEPEND</name><operator>|</operator><name>SCORE_CP932</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <literal type="string">"CP51932"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>input_codename</name></expr></argument>, <argument><expr><literal type="string">"ISO-2022-JP"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCORE_KANA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <literal type="string">"CP50221"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>&amp;</operator> <operator>(</operator><name>SCORE_DEPEND</name><operator>|</operator><name>SCORE_CP932</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <literal type="string">"CP50220"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>input_codename</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>print_guessed_code</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input_codename</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>input_codename</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"BINARY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <call><name>get_guessed_code</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>guess_f</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>input_codename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>,

<argument><expr><name>input_codename</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>iconv</name> <operator>!=</operator> <name>w_iconv16</name> <operator>&amp;&amp;</operator> <name>iconv</name> <operator>!=</operator> <name>w_iconv32</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>input_endian</name> <operator>==</operator> <name>ENDIAN_LITTLE</name></expr> ?</condition><then> <expr><literal type="string">" LE"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>input_endian</name> <operator>==</operator> <name>ENDIAN_BIG</name></expr> ?</condition><then> <expr><literal type="string">" BE"</literal></expr> </then><else>:

<expr><literal type="string">"[BUG]"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>input_bom_f</name></expr> ?</condition><then> <expr><literal type="string">" (BOM)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>input_eol</name> <operator>==</operator> <name>CR</name></expr> ?</condition><then> <expr><literal type="string">" (CR)"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>input_eol</name> <operator>==</operator> <name>LF</name></expr> ?</condition><then> <expr><literal type="string">" (LF)"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>input_eol</name> <operator>==</operator> <name>CRLF</name></expr> ?</condition><then> <expr><literal type="string">" (CRLF)"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>input_eol</name> <operator>==</operator> <name>EOF</name></expr> ?</condition><then> <expr><literal type="string">" (MIXED NL)"</literal></expr> </then><else>:

<expr><literal type="string">""</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>hex_getc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>g</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>u</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>g</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>ch</name></expr>)</condition><block>{<block_content>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>g</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_isxdigit</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>u</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>g</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_isxdigit</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>u</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>u</name>)<argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><call><name>hex2bin</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <call><name>hex2bin</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>cap_getc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hex_getc</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>i_cgetc</name></expr></argument>, <argument><expr><name>i_cungetc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>cap_ungetc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call>(<modifier>*</modifier><name>i_cungetc</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>url_getc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hex_getc</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>i_ugetc</name></expr></argument>, <argument><expr><name>i_uungetc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>url_ungetc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call>(<modifier>*</modifier><name>i_uungetc</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NUMCHAR_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>numchar_getc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>g</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>i_ngetc</name></expr></init>;</function_decl>

<function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>u</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter> ,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>i_nungetc</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name><name>buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<modifier>*</modifier><name>g</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<modifier>*</modifier><name>g</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<modifier>*</modifier><name>g</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<modifier>*</modifier><name>g</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_isxdigit</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>|=</operator> <call><name>hex2bin</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call>(<modifier>*</modifier><name>g</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_isdigit</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <call><name>hex2bin</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<return>return <expr><call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>u</name>)<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>numchar_ungetc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call>(<modifier>*</modifier><name>i_nungetc</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE_NORMALIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>nfc_getc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>g</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>i_nfc_getc</name></expr></init>;</function_decl>

<function_decl><type><name>nkf_char</name></type> (<modifier>*</modifier><name>u</name>)<parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter> ,<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <init>= <expr><name>i_nfc_ungetc</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>nkf_buf_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>nkf_state</name><operator>-&gt;</operator><name>nfc_buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lower</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>upper</name><init>=<expr><name>NORMALIZATION_TABLE_LENGTH</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c</name> <init>= <expr><call>(<modifier>*</modifier><name>g</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0xFF</literal> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>nkf_buf_push</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<while>while <condition>(<expr><name>lower</name> <operator>&lt;=</operator> <name>upper</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>lower</name><operator>+</operator><name>upper</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <name><name>normalization_table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>nfd</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>len</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>NORMALIZATION_TABLE_NFD_LENGTH</name> <operator>&amp;&amp;</operator> <name><name>array</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <call><name>nkf_buf_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>g</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lower</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>upper</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nkf_buf_push</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>array</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <call><name>nkf_buf_at</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>array</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&lt;</operator> <call><name>nkf_buf_at</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lower</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>upper</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>array</name> <operator>=</operator> <name><name>normalization_table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>nfc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_buf_clear</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NORMALIZATION_TABLE_NFC_LENGTH</name> <operator>&amp;&amp;</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>nkf_buf_push</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block> while <condition>(<expr><name>lower</name> <operator>&lt;=</operator> <name>upper</name></expr>)</condition>;</do>

<while>while <condition>(<expr><call><name>nkf_buf_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call>(<modifier>*</modifier><name>u</name>)<argument_list>(<argument><expr><call><name>nkf_buf_pop</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>nkf_buf_pop</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>nfc_ungetc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call>(<modifier>*</modifier><name>i_nfc_ungetc</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>base64decode</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="char">'?'</literal></expr> ;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'G'</literal></expr> ;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <literal type="char">'4'</literal></expr> ;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="char">'&gt;'</literal></expr> ;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="char">'?'</literal></expr> ;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>mime_getc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>, <decl><type ref="prev"/><name>cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>, <decl><type ref="prev"/><name>exit_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>lwsp_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lwsp_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lwsp_buf_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>lwsp_size</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mime_input_state</name><operator>.</operator><name>top</name></name> <operator>!=</operator> <name><name>mime_input_state</name><operator>.</operator><name>last</name></name></expr>)</condition> <block>{<block_content> 

<return>return <expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>top</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mime_decode_mode</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator><name>mime_decode_mode</name><operator>==</operator><name>FALSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_decode_mode</name><operator>=</operator><name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unswitch_mime_getc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mimebuf_f</name> <operator>==</operator> <name>FIXED_MIME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>exit_mode</name> <operator>=</operator> <name>mime_decode_mode</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>exit_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mime_decode_mode</name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_mgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<label><name>restart_mime_q</name>:</label>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name>mimebuf_f</name> <operator>!=</operator> <name>FIXED_MIME</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SP</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>&lt;=</operator><name>SP</name> <operator>||</operator> <name>DEL</name><operator>&lt;=</operator><name>c1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <name>exit_mode</name></expr>;</expr_stmt> 

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>!=</operator><literal type="char">'='</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name><operator>!=</operator><literal type="char">'?'</literal> <operator>||</operator> <name>mimebuf_f</name> <operator>==</operator> <name>FIXED_MIME</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <name>exit_mode</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_mgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'?'</literal><operator>&amp;&amp;</operator><name>c2</name><operator>==</operator><literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name>mimebuf_f</name> <operator>!=</operator> <name>FIXED_MIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_mode</name> <operator>=</operator> <name>exit_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lwsp_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lwsp_buf</name> <operator>=</operator> <call><name>nkf_xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>lwsp_size</name><operator>+</operator><literal type="number">5</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>c1</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LF</name></expr>:</case>

<case>case <expr><name>CR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><name>LF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name> <operator>&amp;&amp;</operator> <call><name>nkf_isblank</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>SP</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <name>LF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name> <operator>&amp;&amp;</operator> <call><name>nkf_isblank</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>SP</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>LF</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>CR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SP</name></expr>:</case>

<case>case <expr><name>TAB</name></expr>:</case>

<expr_stmt><expr><name><name>lwsp_buf</name><index>[<expr><name>lwsp_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lwsp_count</name><operator>++</operator><operator>&gt;</operator><name>lwsp_size</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>lwsp_size</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lwsp_buf_new</name> <operator>=</operator> <call><name>nkf_xrealloc</name><argument_list>(<argument><expr><name>lwsp_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>lwsp_size</name><operator>+</operator><literal type="number">5</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lwsp_buf</name> <operator>=</operator> <name>lwsp_buf_new</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>lwsp_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>!=</operator> <literal type="char">'='</literal> <operator>||</operator> <operator>(</operator><name><name>lwsp_buf</name><index>[<expr><name>lwsp_count</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>SP</name> <operator>&amp;&amp;</operator> <name><name>lwsp_buf</name><index>[<expr><name>lwsp_count</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>TAB</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>lwsp_count</name><operator>--</operator></expr>;</init><condition><expr><name>lwsp_count</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>lwsp_count</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name><name>lwsp_buf</name><index>[<expr><name>lwsp_count</name></expr>]</index></name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>lwsp_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nkf_xfree</name><argument_list>(<argument><expr><name>lwsp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'='</literal><operator>&amp;&amp;</operator><name>c2</name><operator>&lt;</operator><name>SP</name></expr>)</condition> <block>{<block_content> 

<while>while<condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_mgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator><name>SP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <literal type="char">'Q'</literal></expr>;</expr_stmt> 

<goto>goto <name>restart_mime_q</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <literal type="char">'Q'</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_mungetc</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_mgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name><operator>&lt;=</operator><name>SP</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c2</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <literal type="char">'Q'</literal></expr>;</expr_stmt> 

<return>return <expr><operator>(</operator><operator>(</operator><call><name>hex2bin</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <call><name>hex2bin</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mime_decode_mode</name> <operator>!=</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<return>return <expr><call>(<modifier>*</modifier><name>i_mgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>mime_decode_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <name>exit_mode</name></expr>;</expr_stmt> 

<while>while <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_mgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;=</operator><name>SP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<label><name>mime_c2_retry</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_mgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;=</operator><name>SP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name><operator>==</operator><name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mime_f</name> <operator>!=</operator> <name>STRICT_MIME</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mime_c2_retry</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mimebuf_f</name><operator>!=</operator><name>FIXED_MIME</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>input_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c2</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c2</name> <operator>==</operator> <literal type="char">'='</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lwsp_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lwsp_buf</name> <operator>=</operator> <call><name>nkf_xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>lwsp_size</name><operator>+</operator><literal type="number">5</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>c1</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LF</name></expr>:</case>

<case>case <expr><name>CR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><name>LF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name> <operator>&amp;&amp;</operator> <call><name>nkf_isblank</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>SP</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><name>SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>SP</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name> <operator>&amp;&amp;</operator> <call><name>nkf_isblank</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>SP</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>LF</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>CR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>SP</name></expr>:</case>

<case>case <expr><name>TAB</name></expr>:</case>

<expr_stmt><expr><name><name>lwsp_buf</name><index>[<expr><name>lwsp_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lwsp_count</name><operator>++</operator><operator>&gt;</operator><name>lwsp_size</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>lwsp_size</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lwsp_buf_new</name> <operator>=</operator> <call><name>nkf_xrealloc</name><argument_list>(<argument><expr><name>lwsp_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>lwsp_size</name><operator>+</operator><literal type="number">5</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lwsp_buf</name> <operator>=</operator> <name>lwsp_buf_new</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>lwsp_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>!=</operator> <literal type="char">'='</literal> <operator>||</operator> <operator>(</operator><name><name>lwsp_buf</name><index>[<expr><name>lwsp_count</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>SP</name> <operator>&amp;&amp;</operator> <name><name>lwsp_buf</name><index>[<expr><name>lwsp_count</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>TAB</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>lwsp_count</name><operator>--</operator></expr>;</init><condition><expr><name>lwsp_count</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>lwsp_count</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name><name>lwsp_buf</name><index>[<expr><name>lwsp_count</name></expr>]</index></name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>lwsp_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nkf_xfree</name><argument_list>(<argument><expr><name>lwsp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<label><name>mime_c3_retry</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_mgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;=</operator><name>SP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c3</name><operator>==</operator><name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mime_f</name> <operator>!=</operator> <name>STRICT_MIME</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mime_c3_retry</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mimebuf_f</name><operator>!=</operator><name>FIXED_MIME</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>input_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c3</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<label><name>mime_c4_retry</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c4</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_mgetc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&lt;=</operator><name>SP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c4</name><operator>==</operator><name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mime_f</name> <operator>!=</operator> <name>STRICT_MIME</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>mime_c4_retry</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mimebuf_f</name><operator>!=</operator><name>FIXED_MIME</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>input_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c4</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">0x3f</literal> <operator>&amp;</operator> <call><name>base64decode</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0x3f</literal> <operator>&amp;</operator> <call><name>base64decode</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name> <operator>=</operator> <literal type="number">0x3f</literal> <operator>&amp;</operator> <call><name>base64decode</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t4</name> <operator>=</operator> <literal type="number">0x3f</literal> <operator>&amp;</operator> <call><name>base64decode</name><argument_list>(<argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0fc</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t2</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c3</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t3</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0c0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>t4</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c4</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>last</name></name><operator>++</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>cc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>c1</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>mime_input_buf</name><argument_list>(<argument><expr><name><name>mime_input_state</name><operator>.</operator><name>top</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>basis_64</name><index>[]</index></name> <init>=

<expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIMEOUT_BUF_LENGTH</name></cpp:macro> <cpp:value>74</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MIMEOUT_BUF_LENGTH</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

}</block> <decl><name>mimeout_state</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>open_mime</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mime_pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name><name>mime_pattern</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name><name>mime_encode</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mime_pattern</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>mimeout_mode</name> <operator>=</operator> <name><name>mime_encode_method</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base64_count</name><operator>&gt;</operator><literal type="number">45</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_isblank</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_newline</name><argument_list>(<argument><expr><name>o_mputc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>nkf_isspace</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nkf_isspace</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mime_putc</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mime_prechar</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mimeout_mode</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>base64_count</name> <operator>+</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>/</operator><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal><operator>&gt;</operator> <literal type="number">73</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_base64conv</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oconv_newline</name><argument_list>(<argument><expr><name>o_base64conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_base64conv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c2</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>c1</name> <operator>&gt;</operator> <name>DEL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>base64_count</name> <operator>+</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>/</operator><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal><operator>&gt;</operator> <literal type="number">66</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_base64conv</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oconv_newline</name><argument_list>(<argument><expr><name>o_base64conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_base64conv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_mode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>base64_count</name> <operator>+</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>/</operator><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal><operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mimeout_mode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>output_mode</name><operator>==</operator><name>ASCII</name> <operator>||</operator><name>output_mode</name> <operator>==</operator> <name>ISO_8859_1</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'Q'</literal></expr> </then><else>: <expr><literal type="char">'B'</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>open_mime</name><argument_list>(<argument><expr><name>output_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_base64conv</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oconv_newline</name><argument_list>(<argument><expr><name>o_base64conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_base64conv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_mode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>close_mime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>eof_mime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>mimeout_mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>basis_64</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>nkf_state</name><operator>-&gt;</operator><name>mimeout_state</name></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator><operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>basis_64</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>nkf_state</name><operator>-&gt;</operator><name>mimeout_state</name></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>mimeout_mode</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mimeout_f</name><operator>!=</operator><name>FIXED_MIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mimeout_mode</name> <operator>!=</operator> <literal type="char">'Q'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mimeout_mode</name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mimeout_addchar</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>mimeout_mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><name>CR</name><operator>||</operator><name>c</name><operator>==</operator><name>LF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>nkf_isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><call><name>bin2hex</name><argument_list>(<argument><expr><operator>(</operator><name>c</name><operator>&amp;</operator><literal type="number">0xf</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<expr_stmt><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>mimeout_state</name></name><operator>=</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>basis_64</name><index>[<expr><name>c</name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_mode</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>basis_64</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>nkf_state</name><operator>-&gt;</operator><name>mimeout_state</name></name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator><operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nkf_state</name><operator>-&gt;</operator><name>mimeout_state</name></name><operator>=</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_mode</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>basis_64</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>nkf_state</name><operator>-&gt;</operator><name>mimeout_state</name></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">6</literal><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>basis_64</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_mode</name><operator>=</operator><literal type="char">'B'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>mime_putc</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>lastchar</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mimeout_f</name> <operator>==</operator> <name>FIXED_MIME</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mimeout_mode</name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>base64_count</name> <operator>&gt;</operator> <literal type="number">71</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>!=</operator><name>CR</name> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><name>LF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_newline</name><argument_list>(<argument><expr><name>o_mputc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>base64_count</name> <operator>&gt;</operator> <literal type="number">71</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>eof_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_newline</name><argument_list>(<argument><expr><name>o_mputc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>eof_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>mimeout_addchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>mimeout_mode</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>open_mime</name><argument_list>(<argument><expr><name>output_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mimeout_mode</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_isblank</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nkf_isspace</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>base64_count</name> <operator>&lt;</operator> <literal type="number">71</literal></expr>)</condition><block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mimeout_addchar</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>eof_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mimeout_addchar</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mimeout_addchar</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>eof_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mimeout_addchar</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>lastchar</name> <operator>=</operator> <name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>lastchar</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mimeout_mode</name><operator>==</operator><literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>DEL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>output_mode</name><operator>==</operator><name>ASCII</name> <operator>||</operator><name>output_mode</name> <operator>==</operator> <name>ISO_8859_1</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>base64_count</name> <operator>&gt;</operator> <literal type="number">70</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_newline</name><argument_list>(<argument><expr><name>o_mputc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_isblank</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>base64_count</name> <operator>&gt;</operator> <literal type="number">70</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_newline</name><argument_list>(<argument><expr><name>o_mputc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>open_mime</name><argument_list>(<argument><expr><name>output_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_noescape_mime</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mimeout_addchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0x1B</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name><operator>++</operator></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mimeout_mode</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>DEL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>output_mode</name><operator>==</operator><name>ASCII</name> <operator>||</operator> <name>output_mode</name> <operator>==</operator> <name>ISO_8859_1</name> <operator>||</operator>

<name>output_mode</name> <operator>==</operator> <name>UTF_8</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nkf_isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mimeout_mode</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><name>CR</name> <operator>||</operator> <name>c</name><operator>==</operator><name>LF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>open_mime</name><argument_list>(<argument><expr><name>output_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CR</name> <operator>||</operator> <name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>LF</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>base64_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eof_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>base64_count</name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>base64_count</name> <operator>+</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">76</literal>

<operator>&amp;&amp;</operator> <name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>CR</name> <operator>&amp;&amp;</operator> <name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>LF</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><literal type="string">"boundary=\""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>-</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>mimeout_state</name><operator>.</operator><name>buf</name></name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>-</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_newline</name><argument_list>(<argument><expr><name>o_mputc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>nkf_isspace</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>put_newline</name><argument_list>(<argument><expr><name>o_mputc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>j</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>&gt;</operator><name>MIMEOUT_BUF_LENGTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>open_mime</name><argument_list>(<argument><expr><name>output_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lastchar</name><operator>==</operator><name>CR</name> <operator>||</operator> <name>lastchar</name> <operator>==</operator> <name>LF</name></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lastchar</name><operator>==</operator><name>SP</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>open_mime</name><argument_list>(<argument><expr><name>output_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>DEL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>output_mode</name><operator>==</operator><name>ASCII</name> <operator>||</operator> <name>output_mode</name> <operator>==</operator> <name>ISO_8859_1</name> <operator>||</operator>

<name>output_mode</name> <operator>==</operator> <name>UTF_8</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lastchar</name> <operator>==</operator> <name>CR</name> <operator>||</operator> <name>lastchar</name> <operator>==</operator> <name>LF</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nkf_isblank</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mimeout_addchar</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>eof_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nkf_isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>SP</name><operator>&lt;</operator><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>DEL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eof_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>&gt;</operator><name>MIMEOUT_BUF_LENGTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eof_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>SP</name><operator>&lt;</operator><name>c</name> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>&gt;</operator><name>MIMEOUT_BUF_LENGTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mimeout_addchar</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>mimeout_state</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>CR</name> <operator>||</operator> <name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>LF</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mimeout_addchar</name><argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>&lt;</operator><name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>eof_mime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_mputc</name>)<argument_list>(<argument><expr><name><name>mimeout_state</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>open_mime</name><argument_list>(<argument><expr><name>output_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mimeout_addchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>base64_conv</name><parameter_list>(<parameter><decl><type><name>nkf_char</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>nkf_char</name></type> <name>c1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>mime_prechar</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_base64conv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ICONV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>nkf_iconv_t</name> <block>{

<decl_stmt><decl><type><name>iconv_t</name></type> <name>cd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>input_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>output_buffer_size</name></decl>;</decl_stmt>

}</block></struct><empty_stmt>;</empty_stmt></type></typedef>

<function><type><specifier>static</specifier> <name>nkf_iconv_t</name></type>

<name>nkf_iconv_new</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tocode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fromcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_iconv_t</name></type> <name>converter</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>converter</name><operator>-&gt;</operator><name>input_buffer_size</name></name> <operator>=</operator> <name>IOBUF_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>converter</name><operator>-&gt;</operator><name>input_buffer</name></name> <operator>=</operator> <call><name>nkf_xmalloc</name><argument_list>(<argument><expr><name><name>converter</name><operator>-&gt;</operator><name>input_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>converter</name><operator>-&gt;</operator><name>output_buffer_size</name></name> <operator>=</operator> <name>IOBUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>converter</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>=</operator> <call><name>nkf_xmalloc</name><argument_list>(<argument><expr><name><name>converter</name><operator>-&gt;</operator><name>output_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>converter</name><operator>-&gt;</operator><name>cd</name></name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>tocode</name></expr></argument>, <argument><expr><name>fromcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>converter</name><operator>-&gt;</operator><name>cd</name></name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EINVAL</name></expr>:</case>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><literal type="string">"iconv doesn't support %s to %s conversion."</literal></expr></argument>, <argument><expr><name>fromcode</name></expr></argument>, <argument><expr><name>tocode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"can't iconv_open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>nkf_iconv_convert</name><parameter_list>(<parameter><decl><type><name>nkf_iconv_t</name> <modifier>*</modifier></type><name>converter</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>invalid</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>input_buffer</name> <init>= <expr><name><name>converter</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>input_length</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output_buffer</name> <init>= <expr><name><name>converter</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>output_length</name> <init>= <expr><name><name>converter</name><operator>-&gt;</operator><name>output_buffer_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>input_buffer</name><index>[<expr><name>input_length</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>input_length</name> <operator>&lt;</operator> <name><name>converter</name><operator>-&gt;</operator><name>input_buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>iconv</name><argument_list>(<argument><expr><name><name>converter</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>output_length</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name><name>output_buffer</name><index>[<expr><name><name>converter</name><operator>-&gt;</operator><name>output_buffer_size</name></name><operator>-</operator><name>output_length</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EINVAL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>input_buffer</name> <operator>!=</operator> <name><name>converter</name><operator>-&gt;</operator><name>input_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>converter</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>, <argument><expr><name>input_buffer</name></expr></argument>, <argument><expr><name>input_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>E2BIG</name></expr>:</case>

<expr_stmt><expr><name><name>converter</name><operator>-&gt;</operator><name>output_buffer_size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>output_buffer</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>converter</name><operator>-&gt;</operator><name>outbuf</name></name></expr></argument>, <argument><expr><name><name>converter</name><operator>-&gt;</operator><name>output_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"can't realloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>converter</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>=</operator> <name>output_buffer</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"can't iconv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>invalid</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

<return>return <expr><name>invalid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>nkf_iconv_close</name><parameter_list>(<parameter><decl><type><name>nkf_iconv_t</name> <modifier>*</modifier></type><name>convert</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>nkf_xfree</name><argument_list>(<argument><expr><name><name>converter</name><operator>-&gt;</operator><name>inbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_xfree</name><argument_list>(<argument><expr><name><name>converter</name><operator>-&gt;</operator><name>outbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name><name>converter</name><operator>-&gt;</operator><name>cd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>reinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>input_code_list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>status_reinit</name><argument_list>(<argument><expr><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

<expr_stmt><expr><name>unbuf_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>estab_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nop_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>binmode_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rot_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hira_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mime_f</name> <operator>=</operator> <name>MIME_DECODE_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mime_decode_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mimebuf_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>broken_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>iso8859_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>NKF_UNSPECIFIED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>iso2022jp_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_ASCII</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>no_cp932ext_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>no_best_fit_chars_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>encode_fallback</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>unicode_subchar</name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_BIG</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_endian</name> <operator>=</operator> <name>ENDIAN_BIG</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE_NORMALIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>nfc_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cap_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>url_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>numchar_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>noout_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>debug_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>guess_f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXEC_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>exec_f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x0213_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>prefix_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><name>hold_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mimeout_state</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>base64_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f_prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_preserve_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>kanji_intro</name> <operator>=</operator> <name>DEFAULT_J</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ascii_intro</name> <operator>=</operator> <name>DEFAULT_R</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_margin</name> <operator>=</operator> <name>FOLD_MARGIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o_zconv</name> <operator>=</operator> <name>no_connection</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o_fconv</name> <operator>=</operator> <name>no_connection</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o_eol_conv</name> <operator>=</operator> <name>no_connection</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o_rot_conv</name> <operator>=</operator> <name>no_connection</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o_hira_conv</name> <operator>=</operator> <name>no_connection</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o_base64conv</name> <operator>=</operator> <name>no_connection</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o_iso2022jp_check_conv</name> <operator>=</operator> <name>no_connection</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o_putc</name> <operator>=</operator> <name>std_putc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_getc</name> <operator>=</operator> <name>std_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ungetc</name> <operator>=</operator> <name>std_ungetc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bgetc</name> <operator>=</operator> <name>std_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bungetc</name> <operator>=</operator> <name>std_ungetc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o_mputc</name> <operator>=</operator> <name>std_putc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_mgetc</name> <operator>=</operator> <name>std_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_mungetc</name> <operator>=</operator> <name>std_ungetc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_mgetc_buf</name> <operator>=</operator> <name>std_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_mungetc_buf</name> <operator>=</operator> <name>std_ungetc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>file_out_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>eolmode_f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>input_eol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_cr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>option_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>z_prev2</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>z_prev1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>iconv_for_check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input_encoding</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_state_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>reinitdll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>module_connection</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>input_encoding</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>set_input_encoding</name><argument_list>(<argument><expr><name>input_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_encoding</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_default_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output_encoding</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>noout_f</name> <operator>||</operator> <name>guess_f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>ISO_2022_JP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_output_encoding</name><argument_list>(<argument><expr><name>output_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oconv</name> <operator>=</operator> <call><name>nkf_enc_to_oconv</name><argument_list>(<argument><expr><name>output_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>o_putc</name> <operator>=</operator> <name>std_putc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nkf_enc_unicode_p</name><argument_list>(<argument><expr><name>output_encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>UTF_8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x0201_f</name> <operator>==</operator> <name>NKF_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>X0201_DEFAULT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>noout_f</name> <operator>||</operator> <name>guess_f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>o_putc</name> <operator>=</operator> <name>no_putc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>mimeout_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o_mputc</name> <operator>=</operator> <name>o_putc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>o_putc</name> <operator>=</operator> <name>mime_putc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mimeout_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o_base64conv</name> <operator>=</operator> <name>oconv</name></expr>;</expr_stmt> <expr_stmt><expr><name>oconv</name> <operator>=</operator> <name>base64_conv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eolmode_f</name> <operator>||</operator> <name>guess_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o_eol_conv</name> <operator>=</operator> <name>oconv</name></expr>;</expr_stmt> <expr_stmt><expr><name>oconv</name> <operator>=</operator> <name>eol_conv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rot_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o_rot_conv</name> <operator>=</operator> <name>oconv</name></expr>;</expr_stmt> <expr_stmt><expr><name>oconv</name> <operator>=</operator> <name>rot_conv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>iso2022jp_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o_iso2022jp_check_conv</name> <operator>=</operator> <name>oconv</name></expr>;</expr_stmt> <expr_stmt><expr><name>oconv</name> <operator>=</operator> <name>iso2022jp_check_conv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hira_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o_hira_conv</name> <operator>=</operator> <name>oconv</name></expr>;</expr_stmt> <expr_stmt><expr><name>oconv</name> <operator>=</operator> <name>hira_conv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fold_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o_fconv</name> <operator>=</operator> <name>oconv</name></expr>;</expr_stmt> <expr_stmt><expr><name>oconv</name> <operator>=</operator> <name>fold_conv</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha_f</name> <operator>||</operator> <name>x0201_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>o_zconv</name> <operator>=</operator> <name>oconv</name></expr>;</expr_stmt> <expr_stmt><expr><name>oconv</name> <operator>=</operator> <name>z_conv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_getc</name> <operator>=</operator> <name>std_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ungetc</name> <operator>=</operator> <name>std_ungetc</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cap_f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>i_cgetc</name> <operator>=</operator> <name>i_getc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_getc</name> <operator>=</operator> <name>cap_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_cungetc</name> <operator>=</operator> <name>i_ungetc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_ungetc</name><operator>=</operator> <name>cap_ungetc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>url_f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>i_ugetc</name> <operator>=</operator> <name>i_getc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_getc</name> <operator>=</operator> <name>url_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_uungetc</name> <operator>=</operator> <name>i_ungetc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_ungetc</name><operator>=</operator> <name>url_ungetc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NUMCHAR_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>numchar_f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>i_ngetc</name> <operator>=</operator> <name>i_getc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_getc</name> <operator>=</operator> <name>numchar_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_nungetc</name> <operator>=</operator> <name>i_ungetc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_ungetc</name><operator>=</operator> <name>numchar_ungetc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE_NORMALIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>nfc_f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>i_nfc_getc</name> <operator>=</operator> <name>i_getc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_getc</name> <operator>=</operator> <name>nfc_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_nfc_ungetc</name> <operator>=</operator> <name>i_ungetc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_ungetc</name><operator>=</operator> <name>nfc_ungetc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>mime_f</name> <operator>&amp;&amp;</operator> <name>mimebuf_f</name><operator>==</operator><name>FIXED_MIME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_mgetc</name> <operator>=</operator> <name>i_getc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_getc</name> <operator>=</operator> <name>mime_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_mungetc</name> <operator>=</operator> <name>i_ungetc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_ungetc</name> <operator>=</operator> <name>mime_ungetc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>broken_f</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_bgetc</name> <operator>=</operator> <name>i_getc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_getc</name> <operator>=</operator> <name>broken_getc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bungetc</name> <operator>=</operator> <name>i_ungetc</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_ungetc</name> <operator>=</operator> <name>broken_ungetc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input_encoding</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><operator>-</operator><name>TRUE</name></expr></argument>, <argument><expr><call><name>nkf_enc_to_iconv</name><argument_list>(<argument><expr><name>input_encoding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>e_iconv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>input_code_list</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>status_reinit</name><argument_list>(<argument><expr><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>nkf_char</name></type>

<name>noconvert</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nop_f</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>module_connection</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call>(<modifier>*</modifier><name>o_putc</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name></cpp:macro> <cpp:value>continue</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP</name></cpp:macro> <cpp:value>c2=0;continue</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MORE</name></cpp:macro> <cpp:value>c2=c1;continue</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND</name></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST</name></cpp:macro> <cpp:value>break</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_input_mode</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { input_mode = mode; shift_mode = 0; set_input_codename("ISO-2022-JP"); debug("ISO-2022-JP"); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>kanji_convert</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c3</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c4</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>g2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_8bit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>input_encoding</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>nkf_enc_asciicompat</name><argument_list>(<argument><expr><name>input_encoding</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_8bit</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>input_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>module_connection</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"no output encoding given\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_bom</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>iconv</name> <operator>==</operator> <name>w_iconv32</name></expr>)</condition><block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>c4</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c5</name></decl>, <decl><type ref="prev"/><name>c6</name></decl>, <decl><type ref="prev"/><name>c7</name></decl>, <decl><type ref="prev"/><name>c8</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nkf_iconv_utf_32</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>NKF_ICONV_WAIT_COMBINING_CHAR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c5</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>c6</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>c7</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>c8</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nkf_iconv_utf_32_combine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>, <argument><expr><name>c7</name></expr></argument>, <argument><expr><name>c8</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c8</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c7</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c6</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c5</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_iconv_utf_32_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>nkf_iconv_utf_32_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<goto>goto <name>finished</name>;</goto>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>iconv</name> <operator>==</operator> <name>w_iconv16</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>c2</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>nkf_iconv_utf_16</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NKF_ICONV_NEED_TWO_MORE_BYTES</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>c4</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nkf_iconv_utf_16</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>NKF_ICONV_WAIT_COMBINING_CHAR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>c4</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nkf_iconv_utf_16_combine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nkf_iconv_utf_16_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>nkf_iconv_utf_16_nocombine</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<goto>goto <name>finished</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_CODE_FIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_encoding</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>code_status</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c2</name> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>input_encoding</name> <operator>&amp;&amp;</operator> <call><name>nkf_enc_cp5022x_p</name><argument_list>(<argument><expr><name>input_encoding</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x92</literal></expr> </then><else>: <expr><name>DEL</name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>estab_f</name><operator>&amp;&amp;</operator><operator>!</operator><name>mime_decode_mode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>h_conv</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call><operator>==</operator><name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>nkf_char_unicode_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>input_mode</name> <operator>==</operator> <name>JIS_X_0208</name> <operator>&amp;&amp;</operator> <name>DEL</name> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;</operator> <literal type="number">0x92</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>MORE</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>input_codename</name> <operator>&amp;&amp;</operator> <name><name>input_codename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'I'</literal> <operator>&amp;&amp;</operator>

<literal type="number">0xA1</literal> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xDF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>JIS_X_0201_1976_K</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&gt;</operator> <name>DEL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>estab_f</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>iso8859_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>MORE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>iso8859_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>ISO_8859_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>iconv</name> <operator>==</operator> <name>s_iconv</name> <operator>&amp;&amp;</operator> <literal type="number">0xA0</literal> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xDF</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>ms_ucs_map_f</name> <operator>==</operator> <name>UCS_MAP_CP10001</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <literal type="number">0xFD</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="number">0xFE</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>JIS_X_0201_1976_K</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>MORE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>SP</name> <operator>&lt;</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;</operator> <name>DEL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>shift_mode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iso8859_f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>ISO_8859_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>nkf_byte_jisx0201_katakana_p</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>JIS_X_0201_1976_K</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>input_mode</name> <operator>==</operator> <name>JIS_X_0208</name> <operator>||</operator> <name>input_mode</name> <operator>==</operator> <name>JIS_X_0212</name> <operator>||</operator>

<name>input_mode</name> <operator>==</operator> <name>JIS_X_0213_1</name> <operator>||</operator> <name>input_mode</name> <operator>==</operator> <name>JIS_X_0213_2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>MORE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name>mime_f</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>mime_decode_mode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mime_f</name> <operator>==</operator> <name>STRICT_MIME</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mime_begin_strict</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>mime_begin</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>SI</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_8bit</name> <operator>||</operator> <name>mime_decode_mode</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>SO</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_8bit</name> <operator>||</operator> <name>mime_decode_mode</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>is_8bit</name> <operator>||</operator> <name>mime_decode_mode</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'@'</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_input_mode</name><argument_list>(<argument><expr><name>JIS_X_0208</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'@'</literal><operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_input_mode</name><argument_list>(<argument><expr><name>JIS_X_0208</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_input_mode</name><argument_list>(<argument><expr><name>JIS_X_0212</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'O'</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_input_mode</name><argument_list>(<argument><expr><name>JIS_X_0213_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_input_mode</name><argument_list>(<argument><expr><name>JIS_X_0213_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>broken_f</name><operator>&amp;</operator><literal type="number">0x2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_mode</name> <operator>=</operator> <name>JIS_X_0208</name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_input_mode</name><argument_list>(<argument><expr><name>JIS_X_0201_1976_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="char">'J'</literal> <operator>||</operator> <name>c1</name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_input_mode</name><argument_list>(<argument><expr><name>ASCII</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>broken_f</name><operator>&amp;</operator><literal type="number">0x2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_input_mode</name><argument_list>(<argument><expr><name>ASCII</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>g2</name> <operator>=</operator> <name>ISO_8859_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g2</name> <operator>==</operator> <name>ISO_8859_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>ISO_8859_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>ESC</name> <operator>&amp;&amp;</operator> <name>iconv</name> <operator>==</operator> <name>s_iconv</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>LAST</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><literal type="char">'E'</literal> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="char">'G'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><literal type="char">'O'</literal> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="char">'Q'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>nkf_char</name></type> <name><name>jphone_emoji_first_table</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>=

<expr><block>{<expr><literal type="number">0xE1E0</literal></expr>, <expr><literal type="number">0xDFE0</literal></expr>, <expr><literal type="number">0xE2E0</literal></expr>, <expr><literal type="number">0xE3E0</literal></expr>, <expr><literal type="number">0xE4E0</literal></expr>, <expr><literal type="number">0xDFE0</literal></expr>, <expr><literal type="number">0xE0E0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><name><name>jphone_emoji_first_table</name><index>[<expr><name>c1</name> <operator>%</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>LAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>SP</name> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c1</name> <operator>+</operator> <name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>LAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SKIP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>LF</name> <operator>||</operator> <name>c1</name> <operator>==</operator> <name>CR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>broken_f</name><operator>&amp;</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_mode</name> <operator>=</operator> <name>ASCII</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>set_iconv</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mime_decode_f</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>mime_decode_mode</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>LF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <name>SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>SP</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c1</name><operator>==</operator><name>SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>SP</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>LF</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name><operator>=</operator><call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>EOF</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>==</operator> <name>SP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>SP</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>LF</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>i_ungetc</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>CR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>SEND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch<condition>(<expr><name>input_mode</name></expr>)</condition><block>{<block_content>

<case>case <expr><name>ASCII</name></expr>:</case>

<switch>switch <condition>(<expr><call>(<modifier>*</modifier><name>iconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>code_status</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c3</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c4</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>code_status</name><argument_list>(<argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>iconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c3</name><operator>|</operator><name>c4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c4</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>w_iconv_combine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c3</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>code_status</name><argument_list>(<argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name>iconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>c5</name></decl>, <decl><type ref="prev"/><name>c6</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c4</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c5</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c6</name> <operator>=</operator> <call>(<modifier>*</modifier><name>i_getc</name>)<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>w_iconv_combine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>, <argument><expr><name>c6</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c6</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c5</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c5</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call>(<modifier>*</modifier><name>i_ungetc</name>)<argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>w_iconv_nocombine</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>JIS_X_0208</name></expr>:</case>

<case>case <expr><name>JIS_X_0213_1</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ms_ucs_map_f</name> <operator>&amp;&amp;</operator>

<literal type="number">0x7F</literal> <operator>&lt;=</operator> <name>c2</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;=</operator> <literal type="number">0x92</literal> <operator>&amp;&amp;</operator>

<literal type="number">0x21</literal> <operator>&lt;=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0x7E</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>nkf_char_unicode_new</name><argument_list>(<argument><expr><operator>(</operator><name>c2</name> <operator>-</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>*</operator> <literal type="number">94</literal> <operator>+</operator> <name>c1</name> <operator>-</operator> <literal type="number">0x21</literal> <operator>+</operator> <literal type="number">0xE000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>JIS_X_0212</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>PREFIX_EUCG3</name> <operator>|</operator> <name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>JIS_X_0213_2</name></expr>:</case>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>PREFIX_EUCG3</name> <operator>|</operator> <name>c2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call>(<modifier>*</modifier><name>oconv</name>)<argument_list>(<argument><expr><name>input_mode</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></switch>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></while>

<label><name>finished</name>:</label>

<expr_stmt><expr><call>(<modifier>*</modifier><name>iconv</name>)<argument_list>(<argument><expr><name>EOF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input_codename</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_8bit</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>input_code_list</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>input_code</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>set_input_codename</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>options</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>nkf_char</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp_back</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nkf_encoding</name> <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>option_mode</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name><operator>++</operator><operator>!=</operator><literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<while>while <condition>(<expr><operator>*</operator><name>cp</name> <operator>||</operator> <name>cp_back</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>cp</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>cp_back</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp_back</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>cp</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'-'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cp</name> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <name>SP</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>option_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long_option</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <name><name>cp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition><incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name><name>cp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>||</operator> <name><name>cp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>SP</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>cp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown long option: --%s\n"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>!=</operator> <name>SP</name> <operator>&amp;&amp;</operator> <name>cp</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>alias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>cp_back</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alias</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"ic="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>nkf_enc_find</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>input_encoding</name> <operator>=</operator> <name>enc</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"oc="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>nkf_enc_find</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <name>enc</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"guess="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>guess_f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>guess_f</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERWRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"overwrite"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>file_out_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>overwrite_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>preserve_time_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"overwrite="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>file_out_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>overwrite_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>preserve_time_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backup_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backup_suffix</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"in-place"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>file_out_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>overwrite_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>preserve_time_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"in-place="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>file_out_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>overwrite_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>preserve_time_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backup_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backup_suffix</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INPUT_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"cap-input"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>cap_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"url-input"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>url_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NUMCHAR_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"numchar-input"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>numchar_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"no-output"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>noout_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"debug"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>debug_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"cp932"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <operator>-</operator><name>TRUE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_CP932</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"no-cp932"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>cp51932_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_ASCII</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SHIFTJIS_CP932</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"cp932inv"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>cp932inv_f</name> <operator>=</operator> <operator>-</operator><name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"x0212"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXEC_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"exec-in"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>exec_f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"exec-out"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>exec_f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"no-cp932ext"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>no_cp932ext_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"no-best-fit-chars"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>no_best_fit_chars_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"fb-skip"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>encode_fallback</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"fb-html"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>encode_fallback</name> <operator>=</operator> <name>encode_fallback_html</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"fb-xml"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>encode_fallback</name> <operator>=</operator> <name>encode_fallback_xml</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"fb-java"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>encode_fallback</name> <operator>=</operator> <name>encode_fallback_java</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"fb-perl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>encode_fallback</name> <operator>=</operator> <name>encode_fallback_perl</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"fb-subchar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>encode_fallback</name> <operator>=</operator> <name>encode_fallback_subchar</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"fb-subchar="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>encode_fallback</name> <operator>=</operator> <name>encode_fallback_subchar</name></expr>;</expr_stmt>

<expr_stmt><expr><name>unicode_subchar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>nkf_isdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>unicode_subchar</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>unicode_subchar</name> <operator>+=</operator> <call><name>hex2bin</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>nkf_isxdigit</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>unicode_subchar</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>unicode_subchar</name> <operator>|=</operator> <call><name>hex2bin</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>nkf_isoctal</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>unicode_subchar</name> <operator>*=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>unicode_subchar</name> <operator>+=</operator> <call><name>hex2bin</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>w16e_conv</name><argument_list>(<argument><expr><name>unicode_subchar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unicode_subchar</name> <operator>=</operator> <name>i</name><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <name>j</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"ms-ucs-map"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>ms_ucs_map_f</name> <operator>=</operator> <name>UCS_MAP_MS</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE_NORMALIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"utf8mac-input"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>nfc_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"prefix="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>nkf_isgraph</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><call><name>nkf_isgraph</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>prefix_table</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unsupported long option: --%s\n"</literal></expr></argument>, <argument><expr><name><name>long_option</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'b'</literal></expr>:</case> 

<expr_stmt><expr><name>unbuf_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'u'</literal></expr>:</case> 

<expr_stmt><expr><name>unbuf_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'t'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nop_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'2'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nop_f</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nop_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'j'</literal></expr>:</case> 

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>ISO_2022_JP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> 

<expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>EUCJP_NKF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> 

<expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>SHIFT_JIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> 

<expr_stmt><expr><name>iso8859_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>input_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>ISO_8859_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'@'</literal><operator>||</operator><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>kanji_intro</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'o'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'J'</literal><operator>||</operator><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'B'</literal><operator>||</operator><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'H'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ascii_intro</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><literal type="char">'9'</literal><operator>&gt;=</operator> <operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hira_f</name> <operator>|=</operator> <operator>(</operator><operator>*</operator><name>cp</name><operator>++</operator> <operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hira_f</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><name>rot_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<expr_stmt><expr><name>binmode_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<continue>continue;</continue>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'V'</literal></expr>:</case>

<expr_stmt><expr><call><name>show_configuration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><call><name>version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_OUTPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'8'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>UTF_8N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>UTF_8_BOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>enc_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="char">'1'</literal><operator>==</operator> <name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <literal type="char">'6'</literal><operator>==</operator><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>enc_idx</name> <operator>=</operator> <name>UTF_16</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="char">'3'</literal><operator>==</operator> <name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <literal type="char">'2'</literal><operator>==</operator><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>enc_idx</name> <operator>=</operator> <name>UTF_32</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>output_endian</name> <operator>=</operator> <name>ENDIAN_LITTLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>output_bom_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>enc_idx</name> <operator>=</operator> <ternary><condition><expr><name>enc_idx</name> <operator>==</operator> <name>UTF_16</name></expr>

?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>output_endian</name> <operator>==</operator> <name>ENDIAN_LITTLE</name></expr> ?</condition><then> <expr><name>UTF_16LE</name></expr> </then><else>: <expr><name>UTF_16BE</name></expr></else></ternary><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>output_endian</name> <operator>==</operator> <name>ENDIAN_LITTLE</name></expr> ?</condition><then> <expr><name>UTF_32LE</name></expr> </then><else>: <expr><name>UTF_32BE</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>enc_idx</name> <operator>=</operator> <ternary><condition><expr><name>enc_idx</name> <operator>==</operator> <name>UTF_16</name></expr>

?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>output_endian</name> <operator>==</operator> <name>ENDIAN_LITTLE</name></expr> ?</condition><then> <expr><name>UTF_16LE_BOM</name></expr> </then><else>: <expr><name>UTF_16BE_BOM</name></expr></else></ternary><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>output_endian</name> <operator>==</operator> <name>ENDIAN_LITTLE</name></expr> ?</condition><then> <expr><name>UTF_32LE_BOM</name></expr> </then><else>: <expr><name>UTF_32BE_BOM</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>output_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>enc_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTF8_INPUT_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'W'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'8'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>input_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>enc_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="char">'1'</literal><operator>==</operator> <name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <literal type="char">'6'</literal><operator>==</operator><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_BIG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc_idx</name> <operator>=</operator> <name>UTF_16</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="char">'3'</literal><operator>==</operator> <name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <literal type="char">'2'</literal><operator>==</operator><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_BIG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enc_idx</name> <operator>=</operator> <name>UTF_32</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>input_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>UTF_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_LITTLE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>input_endian</name> <operator>=</operator> <name>ENDIAN_BIG</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>enc_idx</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>enc_idx</name> <operator>==</operator> <name>UTF_16</name></expr>

?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>input_endian</name> <operator>==</operator> <name>ENDIAN_LITTLE</name></expr> ?</condition><then> <expr><name>UTF_16LE</name></expr> </then><else>: <expr><name>UTF_16BE</name></expr></else></ternary><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><ternary><condition><expr><name>input_endian</name> <operator>==</operator> <name>ENDIAN_LITTLE</name></expr> ?</condition><then> <expr><name>UTF_32LE</name></expr> </then><else>: <expr><name>UTF_32BE</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>input_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>enc_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'J'</literal></expr>:</case> 

<expr_stmt><expr><name>input_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>ISO_2022_JP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'E'</literal></expr>:</case> 

<expr_stmt><expr><name>input_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>EUCJP_NKF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> 

<expr_stmt><expr><name>input_encoding</name> <operator>=</operator> <call><name>nkf_enc_from_index</name><argument_list>(<argument><expr><name>SHIFT_JIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'Z'</literal></expr>:</case> 

<while>while <condition>(<expr><literal type="char">'0'</literal><operator>&lt;=</operator> <operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&lt;=</operator><literal type="char">'4'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alpha_f</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>*</operator><name>cp</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>alpha_f</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'x'</literal></expr>:</case> 

<expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> 

<continue>continue;</continue>

<case>case <expr><literal type="char">'X'</literal></expr>:</case> 

<expr_stmt><expr><name>x0201_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'F'</literal></expr>:</case> 

<expr_stmt><expr><name>fold_preserve_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> 

<expr_stmt><expr><name>fold_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><literal type="char">'0'</literal><operator>&lt;=</operator> <operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>fold_len</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_len</name> <operator>+=</operator> <operator>*</operator><name>cp</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><literal type="number">0</literal><operator>&lt;</operator><name>fold_len</name> <operator>&amp;&amp;</operator> <name>fold_len</name><operator>&lt;</operator><name>BUFSIZ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fold_len</name> <operator>=</operator> <name>DEFAULT_FOLD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fold_margin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<while>while<condition>(<expr><literal type="char">'0'</literal><operator>&lt;=</operator> <operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>fold_margin</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fold_margin</name> <operator>+=</operator> <operator>*</operator><name>cp</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'m'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'B'</literal><operator>||</operator><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_decode_mode</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mimebuf_f</name> <operator>=</operator> <name>FIXED_MIME</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'N'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_f</name> <operator>=</operator> <name>STRICT_MIME</name></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mime_decode_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mime_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mime_f</name> <operator>=</operator> <name>STRICT_MIME</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mimeout_mode</name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_f</name> <operator>=</operator> <name>FIXED_MIME</name></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'Q'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mimeout_mode</name> <operator>=</operator> <literal type="char">'Q'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mimeout_f</name> <operator>=</operator> <name>FIXED_MIME</name></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mimeout_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><literal type="char">'9'</literal><operator>&gt;=</operator> <operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>broken_f</name> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><operator>*</operator><name>cp</name><operator>++</operator> <operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>broken_f</name> <operator>|=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<continue>continue;</continue>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><name>file_out_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><name>eolmode_f</name> <operator>=</operator> <name>CRLF</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name>eolmode_f</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'I'</literal></expr>:</case> 

<expr_stmt><expr><name>iso2022jp_f</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>eolmode_f</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>eolmode_f</name> <operator>=</operator> <name>CR</name></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'w'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>eolmode_f</name> <operator>=</operator> <name>CRLF</name></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name><operator>==</operator><literal type="char">'0'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>eolmode_f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><literal type="char">'2'</literal> <operator>&lt;=</operator> <operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>guess_f</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>guess_f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>guess_f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>SP</name></expr>:</case>

<while>while<condition>(<expr><operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name><operator>++</operator><operator>!=</operator><literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<continue>continue;</continue>

<default>default:</default>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown option: -%c\n"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>cp</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32DLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nkf32dll.c"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PERL_XS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><name>int</name></type>

<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outfname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>origfname</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EASYWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>_BufferSize</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CODE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>nkf_state_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>argc</name><operator>--</operator></expr><operator>,</operator><expr><name>argv</name><operator>++</operator></expr>;</init> <condition><expr><operator>(</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>argv</name> <operator>==</operator> <literal type="char">'-'</literal></expr>;</condition> <incr><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>argv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>options</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXEC_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>exec_f</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>pid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exec_f</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>execvp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exec_f</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>guess_f</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>debug_f_back</name> <init>= <expr><name>debug_f</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXEC_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>exec_f_back</name> <init>= <expr><name>exec_f</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>X0212_ENABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>x0212_f_back</name> <init>= <expr><name>x0212_f</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>x0213_f_back</name> <init>= <expr><name>x0213_f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>guess_f_back</name> <init>= <expr><name>guess_f</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>reinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>guess_f</name> <operator>=</operator> <name>guess_f_back</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mime_f</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>debug_f</name> <operator>=</operator> <name>debug_f_back</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXEC_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>exec_f</name> <operator>=</operator> <name>exec_f_back</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>x0212_f</name> <operator>=</operator> <name>x0212_f_back</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x0213_f</name> <operator>=</operator> <name>x0213_f_back</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>binmode_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IBMC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__IBMCPP__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"wb"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>setbinmode</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>unbuf_f</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setbuf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setvbuffer</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>stdobuf</name></expr></argument>, <argument><expr><name>IOBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>binmode_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IBMC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__IBMCPP__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"rb"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>setbinmode</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>setvbuffer</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>stdibuf</name></expr></argument>, <argument><expr><name>IOBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nop_f</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>noconvert</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>kanji_convert</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>guess_f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_guessed_code</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nfiles</name> <init>= <expr><name>argc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_argument_error</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>argc</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>input_codename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input_eol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CHECK_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>iconv_for_check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fin</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><operator>(</operator><name>origfname</name> <operator>=</operator> <operator>*</operator><name>argv</name><operator>++</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>argv</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_argument_error</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERWRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd_backup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>file_out_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERWRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>overwrite_f</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>outfname</name> <operator>=</operator> <call><name>nkf_xmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>origfname</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">".nkftmpXXXXXX"</literal></expr></argument>)</argument_list></call>

<operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>, <argument><expr><name>origfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>outfname</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal>

<operator>||</operator> <name><name>outfname</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>outfname</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>, <argument><expr><literal type="string">"ntXXXXXX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mktemp</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>,

<argument><expr><name>S_IREAD</name> <operator>|</operator> <name>S_IWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>, <argument><expr><literal type="string">".nkftmpXXXXXX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>fd_backup</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>dup2</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>

)</condition><block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>origfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><if type="elseif">else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

if<condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outfname</name> <operator>=</operator> <operator>*</operator><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>outfname</name> <operator>=</operator> <literal type="string">"nkf.out"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>freopen</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name> <argument_list>(<argument><expr><name>outfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>binmode_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IBMC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__IBMCPP__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"wb"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>setbinmode</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>binmode_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IBMC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__IBMCPP__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">"rb"</literal></expr></argument>,<argument><expr><name>fin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>setbinmode</name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>setvbuffer</name><argument_list>(<argument><expr><name>fin</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>stdibuf</name></expr></argument>, <argument><expr><name>IOBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nop_f</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>noconvert</name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kanji_convert</name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nfiles</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>filename</name> <operator>=</operator> <name>origfname</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>guess_f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_guessed_code</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OVERWRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>overwrite_f</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WIN32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__EMX__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>time_t</name></type> <name><name>tb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>utimbuf</name></name></type> <name>tb</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name>fd_backup</name></expr></argument>, <argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"dup2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>origfname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Can't stat %s\n"</literal></expr></argument>, <argument><expr><name>origfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>chmod</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Can't set permission %s\n"</literal></expr></argument>, <argument><expr><name>outfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>preserve_time_f</name></expr>)</condition><block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WIN32__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__EMX__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name><name>tb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utime</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Can't set timestamp %s\n"</literal></expr></argument>, <argument><expr><name>outfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>tb</name><operator>.</operator><name>actime</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_atime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tb</name><operator>.</operator><name>modtime</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utime</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Can't set timestamp %s\n"</literal></expr></argument>, <argument><expr><name>outfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>backup_f</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>backup_filename</name> <init>= <expr><call><name>get_backup_filename</name><argument_list>(<argument><expr><name>backup_suffix</name></expr></argument>, <argument><expr><name>origfname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>backup_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>origfname</name></expr></argument>, <argument><expr><name>backup_filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>backup_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Can't rename %s to %s\n"</literal></expr></argument>,

<argument><expr><name>origfname</name></expr></argument>, <argument><expr><name>backup_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nkf_xfree</name><argument_list>(<argument><expr><name>backup_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>origfname</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>origfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>, <argument><expr><name>origfname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>origfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Can't rename %s to %s\n"</literal></expr></argument>,

<argument><expr><name>outfname</name></expr></argument>, <argument><expr><name>origfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nkf_xfree</name><argument_list>(<argument><expr><name>outfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>is_argument_error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EASYWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>file_out_f</name> <operator>==</operator> <name>FALSE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>end_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<if_stmt><if>if <condition>(<expr><name>file_out_f</name> <operator>==</operator> <name>TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
