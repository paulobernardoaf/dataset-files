<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\win32ole\win32ole_variant.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole.h"</cpp:file></cpp:include>

<struct>struct <name>olevariantdata</name> <block>{

<decl_stmt><decl><type><name>VARIANT</name></type> <name>realvar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>var</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>olevariant_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>olevariant_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ole_val2olevariantdata</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ole_val2variant_err</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ole_set_byref</name><parameter_list>(<parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>realvar</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariant_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariant_s_array</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>dims</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vvt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_type_val2variant</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariant_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LONG</name> <modifier>*</modifier></type><name>ary2safe_array_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ary_size</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ary</name></decl></parameter>, <parameter><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>unlock_safe_array</name><parameter_list>(<parameter><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SAFEARRAY</name> <modifier>*</modifier></type><name>get_locked_safe_array</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariant_ary_aref</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariant_ary_aset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariant_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariant_vartype</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folevariant_set_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>olevariant_datatype</name> <init>= <expr><block>{

<expr><literal type="string">"win32ole_variant"</literal></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>olevariant_free</name></expr>, <expr><name>olevariant_size</name></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>olevariant_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>olevariant_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>olevariantdata</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_val2olevariantdata</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><name>S_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>VT_ARRAY</name> <operator>|</operator> <name>VT_UI1</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>len</name> <init>= <expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pdest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name> <init>= <expr><call><name>SafeArrayCreateVector</name><argument_list>(<argument><expr><name>VT_UI1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psa</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"fail to SafeArrayCreateVector"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayAccessData</name><argument_list>(<argument><expr><name>psa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pdest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pdest</name></expr></argument>, <argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SafeArrayUnaccessData</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SafeArrayDestroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>psa</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_ARRAYREF</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>VariantCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>psa</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SafeArrayDestroy</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_ARRAY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_ARRAYREF</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ole_val_ary2variant_ary</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>VARTYPE</name><operator>)</operator><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_ARRAYREF</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>VariantCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator> <operator>==</operator> <name>VT_I8</name> <operator>||</operator> <operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator> <operator>==</operator> <name>VT_UI8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_val2variant_ex</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ole_val2variant_ex</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_set_byref</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator> <operator>==</operator> <name>VT_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_val2variant_err</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_set_byref</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>VariantCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>==</operator> <operator>(</operator><name>VT_BYREF</name> <operator>|</operator> <name>VT_VARIANT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_set_byref</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_set_byref</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ole_val2variant_ex</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>VARTYPE</name><operator>)</operator><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>==</operator> <operator>(</operator><name>VT_BYREF</name> <operator>|</operator> <name>VT_VARIANT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_set_byref</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator> <operator>!=</operator> <call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>VariantChangeTypeEx</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>,

<argument><expr><name>cWIN32OLE_lcid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>VARTYPE</name><operator>)</operator><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_set_byref</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>==</operator> <call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>VariantCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>VariantChangeTypeEx</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>,

<argument><expr><name>cWIN32OLE_lcid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to change type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_val2variant_err</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>folevariant_value</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>FIXNUM_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>T_BIGNUM</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>v</name> <operator>==</operator> <name>Qnil</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to convert VT_ERROR VARIANT:`%"</literal><name>PRIsVALUE</name><literal type="string">"'"</literal></expr></argument>, <argument><expr><call><name>rb_inspect</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>VT_ERROR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_ERROR</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>RB_NUM2LONG</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>V_ERROR</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ole_set_byref</name><parameter_list>(<parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>realvar</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>VARTYPE</name></type> <name>vt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>==</operator> <operator>(</operator><name>VT_VARIANT</name><operator>|</operator><name>VT_BYREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_VARIANTREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>realvar</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>V_VT</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"variant type mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>VT_I1</name></expr>:</case>

<expr_stmt><expr><call><name>V_I1REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_I1</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI1</name></expr>:</case>

<expr_stmt><expr><call><name>V_UI1REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_UI1</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_I2</name></expr>:</case>

<expr_stmt><expr><call><name>V_I2REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_I2</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI2</name></expr>:</case>

<expr_stmt><expr><call><name>V_UI2REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_UI2</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_I4</name></expr>:</case>

<expr_stmt><expr><call><name>V_I4REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_I4</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UI4</name></expr>:</case>

<expr_stmt><expr><call><name>V_UI4REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_UI4</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_R4</name></expr>:</case>

<expr_stmt><expr><call><name>V_R4REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_R4</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_R8</name></expr>:</case>

<expr_stmt><expr><call><name>V_R8REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_R8</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1300</literal><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V_I8REF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VT_I8</name></expr>:</case>

<expr_stmt><expr><call><name>V_I8REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_I8</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V_UI8REF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VT_UI8</name></expr>:</case>

<expr_stmt><expr><call><name>V_UI8REF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_UI8</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>VT_INT</name></expr>:</case>

<expr_stmt><expr><call><name>V_INTREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_INT</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UINT</name></expr>:</case>

<expr_stmt><expr><call><name>V_UINTREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_UINT</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_CY</name></expr>:</case>

<expr_stmt><expr><call><name>V_CYREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_CY</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_DATE</name></expr>:</case>

<expr_stmt><expr><call><name>V_DATEREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_DATE</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_BSTR</name></expr>:</case>

<expr_stmt><expr><call><name>V_BSTRREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_BSTR</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_DISPATCH</name></expr>:</case>

<expr_stmt><expr><call><name>V_DISPATCHREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_DISPATCH</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_ERROR</name></expr>:</case>

<expr_stmt><expr><call><name>V_ERRORREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_ERROR</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_BOOL</name></expr>:</case>

<expr_stmt><expr><call><name>V_BOOLREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_BOOL</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_UNKNOWN</name></expr>:</case>

<expr_stmt><expr><call><name>V_UNKNOWNREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_UNKNOWN</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VT_ARRAY</name></expr>:</case>

<expr_stmt><expr><call><name>V_ARRAYREF</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><call><name>V_ARRAY</name><argument_list>(<argument><expr><name>realvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"unknown type specified(setting BYREF):%d"</literal></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folevariant_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>, <argument><expr>struct <name>olevariantdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariant_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folevariant_s_array</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>elems</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>vvt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARTYPE</name></type> <name>vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAYBOUND</name> <modifier>*</modifier></type><name>psab</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>dim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ole_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>RB_NUM2UINT</name><argument_list>(<argument><expr><name>vvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <operator>(</operator><name>vt</name> <operator>|</operator> <name>VT_ARRAY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>elems</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>folevariant_s_allocate</name><argument_list>(<argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>olevariantdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariant_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dim</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>elems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psab</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>SAFEARRAYBOUND</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>psab</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"memory allocation error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>psab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cElements</name> <operator>=</operator> <call><name>RB_FIX2INT</name><argument_list>(<argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>elems</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lLbound</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>psa</name> <operator>=</operator> <call><name>SafeArrayCreate</name><argument_list>(<argument><expr><operator>(</operator><name>VARTYPE</name><operator>)</operator><operator>(</operator><name>vt</name> <operator>&amp;</operator> <name>VT_TYPEMASK</name><operator>)</operator></expr></argument>, <argument><expr><name>dim</name></expr></argument>, <argument><expr><name>psab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psa</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>psab</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"memory allocation error(SafeArrayCreate)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>vt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>psa</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_ARRAYREF</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>realvar</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>psa</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>psab</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>check_type_val2variant</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>elem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>cWIN32OLE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>rb_cTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>T_ARRAY</name></expr>:</case>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>elem</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_type_val2variant</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>T_STRING</name></expr>:</case>

<case>case <expr><name>T_FIXNUM</name></expr>:</case>

<case>case <expr><name>T_BIGNUM</name></expr>:</case>

<case>case <expr><name>T_FLOAT</name></expr>:</case>

<case>case <expr><name>T_TRUE</name></expr>:</case>

<case>case <expr><name>T_FALSE</name></expr>:</case>

<case>case <expr><name>T_NIL</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"can not convert WIN32OLE_VARIANT from type %s"</literal></expr></argument>,

<argument><expr><call><name>rb_obj_classname</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folevariant_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>vvt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARTYPE</name></type> <name>vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>RARRAY_LEN</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_check_arity</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_type_val2variant</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariantdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariant_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_val2variant</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>vvt</name> <operator>=</operator> <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name>vvt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <name>VT_TYPEMASK</name><operator>)</operator> <operator>==</operator> <name>VT_RECORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"not supported VT_RECORD WIN32OLE_VARIANT object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ole_val2olevariantdata</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SAFEARRAY</name> <modifier>*</modifier></type>

<name>get_locked_safe_array</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>struct <name>olevariantdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariant_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>VT_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"variant type is not VT_ARRAY."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psa</name> <operator>=</operator> <ternary><condition><expr><call><name>V_ISBYREF</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>*</operator><call><name>V_ARRAYREF</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psa</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>psa</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayLock</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to SafeArrayLock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>psa</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LONG</name> <modifier>*</modifier></type>

<name>ary2safe_array_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ary_size</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>ary</name></decl></parameter>, <parameter><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>dim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dim</name> <operator>=</operator> <call><name>SafeArrayGetDim</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dim</name> <operator>!=</operator> <name>ary_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr><literal type="string">"unmatch number of indices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>ALLOC_N</name><argument_list>(<argument><expr><name>LONG</name></expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to allocate memory for indices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>RB_NUM2INT</name><argument_list>(<argument><expr><name><name>ary</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>pid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>unlock_safe_array</name><parameter_list>(<parameter><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayUnlock</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to SafeArrayUnlock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folevariant_ary_aref</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>variant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariantdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariant_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>V_ISARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"`[]' is not available for this variant type object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psa</name> <operator>=</operator> <call><name>get_locked_safe_array</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psa</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>ary2safe_array_index</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>VT_ARRAY</name><operator>)</operator> <operator>|</operator> <name>VT_BYREF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayPtrOfIndex</name><argument_list>(<argument><expr><name>psa</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>V_BYREF</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to SafeArrayPtrOfIndex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ole_variant2val</name><argument_list>(<argument><expr><operator>&amp;</operator><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlock_safe_array</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folevariant_ary_aset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>VALUE</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARIANT</name></type> <name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARTYPE</name></type> <name>vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LONG</name> <modifier>*</modifier></type><name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VOID</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariantdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariant_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>V_ISARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"`[]' is not available for this variant type object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psa</name> <operator>=</operator> <call><name>get_locked_safe_array</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psa</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eRuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to get SafeArray pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>ary2safe_array_index</name><argument_list>(<argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <operator>(</operator><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>VT_ARRAY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>val2variant_ptr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VT_DISPATCH</name> <operator>&amp;&amp;</operator> <call><name>V_DISPATCH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VT_UNKNOWN</name> <operator>&amp;&amp;</operator> <call><name>V_UNKNOWN</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"argument does not have IDispatch or IUnknown Interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>SafeArrayPutElement</name><argument_list>(<argument><expr><name>psa</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to SafeArrayPutElement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>unlock_safe_array</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>argv</name><index>[<expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folevariant_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>val</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARTYPE</name></type> <name>vt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dim</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAFEARRAY</name> <modifier>*</modifier></type><name>psa</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariantdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariant_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ole_variant2val</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>VT_UI1</name><operator>|</operator><name>VT_ARRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>vt</name> <operator>&amp;</operator> <name>VT_BYREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>psa</name> <operator>=</operator> <operator>*</operator><call><name>V_ARRAYREF</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>psa</name> <operator>=</operator> <call><name>V_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>psa</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dim</name> <operator>=</operator> <call><name>SafeArrayGetDim</name><argument_list>(<argument><expr><name>psa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dim</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rb_funcall</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"pack"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"C*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folevariant_vartype</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariantdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariant_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folevariant_set_value</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VARTYPE</name></type> <name>vt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olevariantdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariant_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vt</name> <operator>=</operator> <call><name>V_VT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>V_ISARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>vt</name> <operator>&amp;</operator> <operator>~</operator><name>VT_BYREF</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>VT_UI1</name><operator>|</operator><name>VT_ARRAY</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>RB_TYPE_P</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>T_STRING</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>,

<argument><expr><literal type="string">"`value=' is not available for this variant type object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ole_val2olevariantdata</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>vt</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>ole_variant2variant</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>VARIANT</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olevariantdata</name></name> <modifier>*</modifier></type><name>pvar</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>struct <name>olevariantdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olevariant_datatype</name></expr></argument>, <argument><expr><name>pvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VariantCopy</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pvar</name><operator>-&gt;</operator><name>var</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>

<name>Init_win32ole_variant</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rb_intern</name></cpp:undef>

<expr_stmt><expr><name>cWIN32OLE_VARIANT</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE_VARIANT"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><name>folevariant_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_singleton_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"array"</literal></expr></argument>, <argument><expr><name>folevariant_s_array</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>folevariant_initialize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>folevariant_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"value="</literal></expr></argument>, <argument><expr><name>folevariant_set_value</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"vartype"</literal></expr></argument>, <argument><expr><name>folevariant_vartype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>folevariant_ary_aref</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"[]="</literal></expr></argument>, <argument><expr><name>folevariant_ary_aset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"Empty"</literal></expr></argument>,

<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>VT_EMPTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"Null"</literal></expr></argument>,

<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>VT_NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"Nothing"</literal></expr></argument>,

<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>VT_DISPATCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><literal type="string">"NoParam"</literal></expr></argument>,

<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>cWIN32OLE_VARIANT</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>DISP_E_PARAMNOTFOUND</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>VT_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
