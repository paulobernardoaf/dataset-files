<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ruby-analysis\_cppstats\ruby\ext\win32ole\win32ole_method.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32ole.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>olemethod_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>olemethod_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_sub</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pOwnerTypeInfo</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>olemethod_from_typeinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_methods_sub</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pOwnerTypeInfo</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>methods</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>olemethod_set_member</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pOwnerTypeInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>oletype</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>method</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_return_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_return_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_return_vtype</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_return_vtype</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_return_type_detail</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_return_type_detail</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_invkind</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_invoke_kind</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_invkind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_invoke_kind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_visible</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_visible</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_event</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>method_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_event</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_event_interface</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HRESULT</name></type> <name>ole_method_docinfo_from_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>helpstr</name></decl></parameter>, <parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>helpcontext</name></decl></parameter>, <parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>helpfile</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_helpstring</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_helpstring</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_helpfile</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_helpfile</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_helpcontext</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_helpcontext</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_dispid</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_dispid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_offset_vtbl</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_offset_vtbl</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_size_params</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_size_params</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_size_opt_params</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_size_opt_params</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>ole_method_params</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_params</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>folemethod_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>rb_data_type_t</name></type> <name>olemethod_datatype</name> <init>= <expr><block>{

<expr><literal type="string">"win32ole_method"</literal></expr>,

<expr><block>{<expr><name>NULL</name></expr>, <expr><name>olemethod_free</name></expr>, <expr><name>olemethod_size</name></expr>,}</block></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>RUBY_TYPED_FREE_IMMEDIATELY</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>olemethod_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>polemethod</name> <init>= <expr><name>ptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OLE_FREE</name><argument_list>(<argument><expr><name><name>polemethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_FREE</name><argument_list>(<argument><expr><name><name>polemethod</name><operator>-&gt;</operator><name>pOwnerTypeInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>polemethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>

<name>olemethod_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>olemethoddata</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type>

<name>olemethod_data_get_struct</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pmethod</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_sub</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pOwnerTypeInfo</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>fname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>method</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeAttr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>cFuncs</name></name> <operator>&amp;&amp;</operator> <name>method</name> <operator>==</operator> <name>Qnil</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>memid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>olemethod_set_member</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pOwnerTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>method</name> <operator>=</operator> <name>self</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pFuncDesc</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>method</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>ole_methods_from_typeinfo</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HREFTYPE</name></type> <name>href</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pRefTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>methods</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeAttr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ole_methods_sub</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>cImplTypes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeOfImplType</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>href</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ole_methods_sub</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pRefTypeInfo</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>methods</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>olemethod_from_typeinfo</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HREFTYPE</name></type> <name>href</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pRefTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>method</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeAttr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>ole_method_sub</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>method</name> <operator>!=</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>method</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>cImplTypes</name></name> <operator>&amp;&amp;</operator> <name>method</name> <operator>==</operator> <name>Qnil</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeOfImplType</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>href</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>ole_method_sub</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pRefTypeInfo</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>method</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_methods_sub</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pOwnerTypeInfo</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>methods</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetTypeAttr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>cFuncs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>memid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>invkind</name></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>folemethod_s_allocate</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>olemethod_set_member</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pOwnerTypeInfo</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pFuncDesc</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>methods</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>create_win32ole_method</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>method</name> <init>= <expr><call><name>folemethod_s_allocate</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><call><name>olemethod_from_typeinfo</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>olemethod_set_member</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pOwnerTypeInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name> <operator>=</operator> <name>pTypeInfo</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_ADDREF</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pOwnerTypeInfo</name></name> <operator>=</operator> <name>pOwnerTypeInfo</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_ADDREF</name><argument_list>(<argument><expr><name>pOwnerTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>self</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>VALUE</name></type>

<name>folemethod_s_allocate</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>klass</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>TypedData_Make_Struct</name><argument_list>(<argument><expr><name>klass</name></expr></argument>,

<argument><expr>struct <name>olemethoddata</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pOwnerTypeInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_initialize</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>oletype</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>method</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>oletype</name></expr></argument>, <argument><expr><name>cWIN32OLE_TYPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SafeStringValue</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pTypeInfo</name> <operator>=</operator> <call><name>itypeinfo</name><argument_list>(<argument><expr><name>oletype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>olemethod_from_typeinfo</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Qnil</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"not found %s"</literal></expr></argument>,

<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><literal type="string">"1st argument should be WIN32OLE_TYPE object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>obj</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_name</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_return_type</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLEQueryInterfaceError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetFuncDesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ole_typedesc2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFuncDesc</name><operator>-&gt;</operator><name>elemdescFunc</name><operator>.</operator><name>tdesc</name></name><operator>)</operator></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_return_type</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_return_type</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_return_vtype</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>vvt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetFuncDesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vvt</name> <operator>=</operator> <call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>elemdescFunc</name><operator>.</operator><name>tdesc</name><operator>.</operator><name>vt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vvt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_return_vtype</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_return_vtype</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_return_type_detail</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>type</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ole_typedesc2val</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFuncDesc</name><operator>-&gt;</operator><name>elemdescFunc</name><operator>.</operator><name>tdesc</name></name><operator>)</operator></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_return_type_detail</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_return_type_detail</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_invkind</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>invkind</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ole_raise</name><argument_list>(<argument><expr><name>hr</name></expr></argument>, <argument><expr><name>eWIN32OLERuntimeError</name></expr></argument>, <argument><expr><literal type="string">"failed to GetFuncDesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>invkind</name> <operator>=</operator> <call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>invkind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>invkind</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_invoke_kind</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VALUE</name></type> <name>type</name> <init>= <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"UNKNOWN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>invkind</name> <init>= <expr><call><name>ole_method_invkind</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>RB_FIX2INT</name><argument_list>(<argument><expr><name>invkind</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>INVOKE_PROPERTYGET</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>RB_FIX2INT</name><argument_list>(<argument><expr><name>invkind</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>INVOKE_PROPERTYPUT</name><operator>)</operator></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"PROPERTY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>RB_FIX2INT</name><argument_list>(<argument><expr><name>invkind</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>INVOKE_PROPERTYGET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"PROPERTYGET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>RB_FIX2INT</name><argument_list>(<argument><expr><name>invkind</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>INVOKE_PROPERTYPUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"PROPERTYPUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>RB_FIX2INT</name><argument_list>(<argument><expr><name>invkind</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>INVOKE_PROPERTYPUTREF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"PROPERTYPUTREF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>RB_FIX2INT</name><argument_list>(<argument><expr><name>invkind</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>INVOKE_FUNC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>rb_str_new2</name><argument_list>(<argument><expr><literal type="string">"FUNC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>type</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_invkind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_invkind</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_invoke_kind</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_invoke_kind</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_visible</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>visible</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>wFuncFlags</name></name> <operator>&amp;</operator> <operator>(</operator><name>FUNCFLAG_FRESTRICTED</name> <operator>|</operator>

<name>FUNCFLAG_FHIDDEN</name> <operator>|</operator>

<name>FUNCFLAG_FNONBROWSABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>visible</name> <operator>=</operator> <name>Qfalse</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>visible</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>visible</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_visible</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_visible</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_event</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>, <parameter><decl><type><name>VALUE</name></type> <name>method_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TYPEATTR</name> <modifier>*</modifier></type><name>pTypeAttr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HREFTYPE</name></type> <name>href</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pRefTypeInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bstr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>event</name> <init>= <expr><name>Qfalse</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>OLE_GET_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>event</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>pTypeAttr</name><operator>-&gt;</operator><name>typekind</name></name> <operator>!=</operator> <name>TKIND_COCLASS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseTypeAttr</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>event</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTypeAttr</name><operator>-&gt;</operator><name>cImplTypes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetImplTypeFlags</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IMPLTYPEFLAG_FSOURCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeOfImplType</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetRefTypeInfo</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>,

<argument><expr><name>href</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pRefTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pRefTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>,

<argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>memid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pRefTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pRefTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OLE_RELEASE</name><argument_list>(<argument><expr><name>pRefTypeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rb_str_cmp</name><argument_list>(<argument><expr><name>method_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>event</name> <operator>=</operator> <name>Qtrue</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>OLE_RELEASE_TYPEATTR</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pTypeAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>event</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_event</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pmethod</name><operator>-&gt;</operator><name>pOwnerTypeInfo</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qfalse</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ole_method_event</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pOwnerTypeInfo</name></name></expr></argument>,

<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_event_interface</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BSTR</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>folemethod_event</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Qtrue</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ole_docinfo_from_type</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>Qnil</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HRESULT</name></type>

<name>ole_method_docinfo_from_type</name><parameter_list>(

<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>,

<parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>,

<parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>helpstr</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name> <modifier>*</modifier></type><name>helpcontext</name></decl></parameter>,

<parameter><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>helpfile</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hr</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetDocumentation</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>memid</name></name></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>helpstr</name></expr></argument>,

<argument><expr><name>helpcontext</name></expr></argument>, <argument><expr><name>helpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_helpstring</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bhelpstring</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ole_method_docinfo_from_type</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bhelpstring</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bhelpstring</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_helpstring</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_helpstring</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_helpfile</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name></type> <name>bhelpfile</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ole_method_docinfo_from_type</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bhelpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name>bhelpfile</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_helpfile</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_helpfile</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_helpcontext</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>helpcontext</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>ole_method_docinfo_from_type</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>helpcontext</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>Qnil</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name>helpcontext</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_helpcontext</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_helpcontext</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_dispid</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>dispid</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>dispid</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dispid</name> <operator>=</operator> <call><name>RB_INT2NUM</name><argument_list>(<argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>memid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dispid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_dispid</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_dispid</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_offset_vtbl</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>offset_vtbl</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>offset_vtbl</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset_vtbl</name> <operator>=</operator> <call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>oVft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>offset_vtbl</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_offset_vtbl</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_offset_vtbl</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_size_params</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>size_params</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>size_params</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size_params</name> <operator>=</operator> <call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>cParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size_params</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_size_params</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_size_params</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_size_opt_params</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>size_opt_params</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>size_opt_params</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size_opt_params</name> <operator>=</operator> <call><name>RB_INT2FIX</name><argument_list>(<argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>cParamsOpt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>size_opt_params</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_size_opt_params</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_size_opt_params</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>ole_method_params</name><parameter_list>(<parameter><decl><type><name>ITypeInfo</name> <modifier>*</modifier></type><name>pTypeInfo</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>method_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FUNCDESC</name> <modifier>*</modifier></type><name>pFuncDesc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSTR</name> <modifier>*</modifier></type><name>bstrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VALUE</name></type> <name>params</name> <init>= <expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>params</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bstrs</name> <operator>=</operator> <call><name>ALLOCA_N</name><argument_list>(<argument><expr><name>BSTR</name></expr></argument>, <argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>cParams</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>GetNames</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>memid</name></name></expr></argument>,

<argument><expr><name>bstrs</name></expr></argument>, <argument><expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>cParams</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>params</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SysFreeString</name><argument_list>(<argument><expr><name><name>bstrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pFuncDesc</name><operator>-&gt;</operator><name>cParams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>create_win32ole_param</name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>method_index</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>WC2VSTR</name><argument_list>(<argument><expr><name><name>bstrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>pTypeInfo</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>ReleaseFuncDesc</name></name><argument_list>(<argument><expr><name>pTypeInfo</name></expr></argument>, <argument><expr><name>pFuncDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>params</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_params</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>olemethoddata</name></name> <modifier>*</modifier></type><name>pmethod</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TypedData_Get_Struct</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr>struct <name>olemethoddata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olemethod_datatype</name></expr></argument>, <argument><expr><name>pmethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ole_method_params</name><argument_list>(<argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>pTypeInfo</name></name></expr></argument>, <argument><expr><name><name>pmethod</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VALUE</name></type>

<name>folemethod_inspect</name><parameter_list>(<parameter><decl><type><name>VALUE</name></type> <name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>default_inspect</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="string">"WIN32OLE_METHOD"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Init_win32ole_method</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>cWIN32OLE_METHOD</name> <operator>=</operator> <call><name>rb_define_class</name><argument_list>(<argument><expr><literal type="string">"WIN32OLE_METHOD"</literal></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alloc_func</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><name>folemethod_s_allocate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"initialize"</literal></expr></argument>, <argument><expr><name>folemethod_initialize</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>folemethod_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"return_type"</literal></expr></argument>, <argument><expr><name>folemethod_return_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"return_vtype"</literal></expr></argument>, <argument><expr><name>folemethod_return_vtype</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"return_type_detail"</literal></expr></argument>, <argument><expr><name>folemethod_return_type_detail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"invoke_kind"</literal></expr></argument>, <argument><expr><name>folemethod_invoke_kind</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"invkind"</literal></expr></argument>, <argument><expr><name>folemethod_invkind</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"visible?"</literal></expr></argument>, <argument><expr><name>folemethod_visible</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"event?"</literal></expr></argument>, <argument><expr><name>folemethod_event</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"event_interface"</literal></expr></argument>, <argument><expr><name>folemethod_event_interface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"helpstring"</literal></expr></argument>, <argument><expr><name>folemethod_helpstring</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"helpfile"</literal></expr></argument>, <argument><expr><name>folemethod_helpfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"helpcontext"</literal></expr></argument>, <argument><expr><name>folemethod_helpcontext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"dispid"</literal></expr></argument>, <argument><expr><name>folemethod_dispid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"offset_vtbl"</literal></expr></argument>, <argument><expr><name>folemethod_offset_vtbl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"size_params"</literal></expr></argument>, <argument><expr><name>folemethod_size_params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"size_opt_params"</literal></expr></argument>, <argument><expr><name>folemethod_size_opt_params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"params"</literal></expr></argument>, <argument><expr><name>folemethod_params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_alias</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"to_s"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rb_define_method</name><argument_list>(<argument><expr><name>cWIN32OLE_METHOD</name></expr></argument>, <argument><expr><literal type="string">"inspect"</literal></expr></argument>, <argument><expr><name>folemethod_inspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
